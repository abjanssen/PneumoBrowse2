{"version":3,"file":"static/js/1266.a368a01a.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGBackground.tsx","../../../plugins/dotplot-view/src/DotplotView/svgcomponents/SVGDotplotView.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx"],"sourcesContent":["import { stripAlpha } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\n\nexport default function SVGBackground({\n  width,\n  height,\n}: {\n  width: number\n  height: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      x={0}\n      y={0}\n      width={width}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import { createJBrowseTheme } from '@jbrowse/core/ui'\nimport { getSession, renderToStaticMarkup } from '@jbrowse/core/util'\nimport { ThemeProvider } from '@mui/material'\nimport { when } from 'mobx'\n\nimport SVGBackground from './SVGBackground'\nimport { HorizontalAxisRaw, VerticalAxisRaw } from '../components/Axes'\nimport { GridRaw } from '../components/Grid'\n\nimport type { DotplotViewModel, ExportSvgOptions } from '../model'\n\n// render LGV to SVG\nexport async function renderToSvg(\n  model: DotplotViewModel,\n  opts: ExportSvgOptions,\n) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => children } = opts\n\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, borderX, viewWidth, viewHeight, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n  const w = width + shift * 2\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w, height].toString()}\n        >\n          <SVGBackground width={w} height={height} />\n          <VerticalAxisRaw model={model} />\n          <g transform={`translate(${borderX} 0)`}>\n            <GridRaw model={model} />\n            <defs>\n              <clipPath id=\"clip-ruler\">\n                <rect x={0} y={0} width={viewWidth} height={viewHeight} />\n              </clipPath>\n            </defs>\n            <g clipPath=\"url(#clip-ruler)\">\n              {displayResults.map(({ result }, i) => (\n                /* biome-ignore lint/suspicious/noArrayIndexKey: */\n                <g key={i}>{result}</g>\n              ))}\n            </g>\n          </g>\n          <g transform={`translate(${borderX} ${viewHeight})`}>\n            <HorizontalAxisRaw model={model} />\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n","import { getFillProps, getStrokeProps } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { DotplotViewModel } from '../model'\n\nexport const GridRaw = observer(function ({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  if (!hblocks.length || !vblocks.length) {\n    return null\n  }\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0]!.offsetPx - hview.offsetPx\n  const vbottom = vblocks[0]!.offsetPx - vview.offsetPx\n  const theme = useTheme()\n  const stroke = theme.palette.divider\n\n  // Uses math.max/min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n\n  let lastx = Number.POSITIVE_INFINITY\n  let lasty = Number.POSITIVE_INFINITY\n  return (\n    <>\n      <rect\n        x={rx}\n        y={ry}\n        width={w}\n        height={h}\n        {...getFillProps(theme.palette.background.default)}\n      />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          const render = Math.floor(x) !== Math.floor(lastx)\n          if (render) {\n            lastx = x\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              {...getStrokeProps(stroke)}\n            />\n          ) : null\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          const render = Math.floor(y) !== Math.floor(lasty)\n          if (render) {\n            lasty = y\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              {...getStrokeProps(stroke)}\n            />\n          ) : null\n        })}\n        <line\n          x1={htop}\n          y1={0}\n          x2={htop}\n          y2={viewHeight}\n          {...getStrokeProps(stroke)}\n        />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          {...getStrokeProps(stroke)}\n        />\n      </g>\n      {children}\n    </>\n  )\n})\n\nexport default function Grid({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight } = model\n  return (\n    <svg\n      width={viewWidth}\n      height={viewHeight}\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n    >\n      <GridRaw model={model}>{children}</GridRaw>\n    </svg>\n  )\n}\n","import {\n  getFillProps,\n  getStrokeProps,\n  getTickDisplayStr,\n} from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { useTheme } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { getBlockLabelKeysToHide } from './util'\n\nimport type { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n}))\nexport const HorizontalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderY } = model\n  const { classes } = useStyles()\n  return (\n    <svg width={viewWidth} height={borderY} className={classes.htext}>\n      <HorizontalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const HorizontalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n  const theme = useTheme()\n  const hviewSnap = {\n    ...getSnapshot(hview),\n    width,\n    staticBlocks: hview.staticBlocks,\n  }\n\n  const ticks = hticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: hviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const x = region.offsetPx\n          const y = 0\n          const xoff = Math.floor(x - hview.offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${htextRotation},${xoff},${y})`}\n              key={JSON.stringify(region)}\n              x={xoff}\n              y={y + 1}\n              fontSize={11}\n              dominantBaseline=\"hanging\"\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, x]) =>\n        x > 0 && x < width ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            x1={x}\n            x2={x}\n            y1={0}\n            y2={tick.type === 'major' ? 6 : 4}\n            strokeWidth={1}\n            {...getFillProps(theme.palette.text.primary)}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, x]) =>\n          x > 10 && x < width ? (\n            <text\n              x={x - 7}\n              y={0}\n              transform={`rotate(${htextRotation},${x},0)`}\n              key={`text-${JSON.stringify(tick)}`}\n              fontSize={11}\n              dominantBaseline=\"middle\"\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={borderY - 12}\n        x={(viewWidth - borderX) / 2}\n        textAnchor=\"middle\"\n        fontSize={11}\n        dominantBaseline=\"hanging\"\n        {...getFillProps(theme.palette.text.primary)}\n      >\n        {hview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\nexport const VerticalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { borderX, viewHeight } = model\n  const { classes } = useStyles()\n  return (\n    <svg className={classes.vtext} width={borderX} height={viewHeight}>\n      <VerticalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const VerticalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewHeight, borderX, borderY, vview, vtextRotation, vticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n  const theme = useTheme()\n  const vviewSnap = {\n    ...getSnapshot(vview),\n    width,\n    staticBlocks: vview.staticBlocks,\n  }\n  const ticks = vticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: vviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const y = region.offsetPx\n          const x = borderX\n          const yoff = Math.floor(viewHeight - y + offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${vtextRotation},${x},${y})`}\n              key={JSON.stringify(region)}\n              x={x}\n              y={yoff}\n              fontSize={11}\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, y]) =>\n        y > 0 ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            y1={viewHeight - y}\n            y2={viewHeight - y}\n            x1={borderX}\n            x2={borderX - (tick.type === 'major' ? 6 : 4)}\n            strokeWidth={1}\n            {...getStrokeProps(theme.palette.grey[400])}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, y]) =>\n          y > 10 && y < viewHeight ? (\n            <text\n              y={viewHeight - y - 3}\n              x={borderX - 7}\n              key={`text-${JSON.stringify(tick)}`}\n              textAnchor=\"end\"\n              dominantBaseline=\"hanging\"\n              fontSize={11}\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={(viewHeight - borderY) / 2}\n        x={12}\n        transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n        textAnchor=\"middle\"\n        fontSize={11}\n        {...getFillProps(theme.palette.text.primary)}\n      >\n        {vview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\n"],"names":["SVGBackground","t0","$","_c","width","height","theme","useTheme","t1","t2","palette","background","default","stripAlpha","_jsx","x","y","fill","async","renderToSvg","model","opts","when","initialized","themeName","Wrapper","children","session","getSession","allThemes","borderX","viewWidth","viewHeight","tracks","displayResults","Promise","all","map","display","track","displays","undefined","ready","result","renderSvg","w","shift","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","_jsxs","xmlns","xmlnsXlink","viewBox","toString","VerticalAxisRaw","transform","GridRaw","id","clipPath","i","HorizontalAxisRaw","observer","hview","vview","hblocks","dynamicBlocks","contentBlocks","vblocks","length","htop","displayedRegionsTotalPx","offsetPx","vtop","hbottom","vbottom","stroke","divider","rx","Math","max","ry","min","h","lastx","Number","POSITIVE_INFINITY","lasty","_Fragment","getFillProps","region","render","floor","x1","y1","x2","y2","getStrokeProps","JSON","stringify","Grid","t3","Symbol","for","style","useStyles","makeStyles","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","HorizontalAxis","borderY","classes","className","htextRotation","hticks","bpPerPx","dblocks","hide","getBlockLabelKeysToHide","hviewSnap","getSnapshot","staticBlocks","ticks","tick","bpToPx","refName","coord","base","self","filter","f","has","key","xoff","fontSize","dominantBaseline","textAnchor","text","primary","type","strokeWidth","t","getTickDisplayStr","assemblyNames","join","VerticalAxis","vtextRotation","vticks","vviewSnap","yoff","grey"],"sourceRoot":""}