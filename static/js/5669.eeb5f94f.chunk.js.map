{"version":3,"file":"static/js/5669.eeb5f94f.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/util.ts","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/SequenceDisplay.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDNASequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/CDSSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/GenomicSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/seqtypes/ProteinSequence.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceContents.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceName.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequencePanel.tsx"],"sourcesContent":["// note that these are currently put into the style section instead of being\n// defined in classes to aid copy and paste to an external document e.g. word\nexport const intronColor = undefined\nexport const utrColor = 'rgb(200,240,240)'\nexport const proteinColor = 'rgb(220,160,220)'\nexport const cdsColor = 'rgb(220,220,180)'\nexport const updownstreamColor = 'rgba(250,200,200)'\nexport const genomeColor = 'rgb(200,280,200)'\n\nexport function splitString({\n  str,\n  charactersPerRow,\n  showCoordinates,\n  currRemainder = 0,\n  splitSize = 10,\n}: {\n  str: string\n  charactersPerRow: number\n  showCoordinates: boolean\n  currRemainder?: number\n  splitStart?: number\n  splitSize?: number\n}) {\n  const numChunks = Math.ceil(str.length / charactersPerRow)\n  const chunks = new Array(numChunks)\n  let splitStart = currRemainder % 10\n\n  let iter = 0\n  let offset = 0\n  for (; iter < numChunks + 1; ++iter) {\n    const inc = iter === 0 ? charactersPerRow - currRemainder : charactersPerRow\n    const r = str.slice(offset, offset + inc)\n    if (!r) {\n      break\n    }\n    if (showCoordinates) {\n      let res = ''\n      for (let i = 0, j = splitStart; i < r.length; i++, j++) {\n        // note: this adds a space at the start but it causes trouble to try to\n        // say e.g. j%splitSize==0 && j to try to only add non-zero spaces\n        if (j % splitSize === 0) {\n          res += ' '\n          j = 0\n        }\n        res += r[i]\n      }\n      if (res) {\n        chunks[iter] = res\n      }\n    } else {\n      chunks[iter] = r\n    }\n    splitStart = 0 // after newline, reset\n    offset += inc\n  }\n\n  return {\n    segments: chunks,\n    remainder:\n      ((chunks.at(-1)?.replaceAll(' ', '').length || 0) +\n        (iter < 2 ? currRemainder : 0)) %\n      charactersPerRow,\n  }\n}\n","import { Fragment } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport type { SequenceFeatureDetailsModel } from '../model'\n\nconst SequenceDisplay = observer(function ({\n  chunks,\n  start,\n  color,\n  strand = 1,\n  coordStart = start,\n  model,\n}: {\n  chunks: string[]\n  start: number\n  coordStart?: number\n  strand?: number\n  color?: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { charactersPerRow, showCoordinates } = model\n\n  return chunks.map((chunk, idx) => {\n    const f = coordStart - (start % charactersPerRow)\n    const prefix =\n      (idx === 0 && start % charactersPerRow === 0) || idx > 0\n        ? `${`${f + idx * strand * charactersPerRow}`.padStart(4)}   `\n        : ''\n    const postfix =\n      idx === chunks.length - 1 &&\n      (chunks.at(-1)?.replaceAll(' ', '').length || 0) +\n        (idx === 0 ? start % charactersPerRow : 0) !==\n        charactersPerRow\n        ? null\n        : showCoordinates\n          ? ' \\n'\n          : ''\n    return (\n      /* biome-ignore lint/suspicious/noArrayIndexKey: */\n      <Fragment key={`${chunk}-${idx}`}>\n        {showCoordinates ? prefix : null}\n        <span style={{ background: color }}>{chunk}</span>\n        {postfix}\n      </Fragment>\n    )\n  })\n})\n\nexport default SequenceDisplay\n","import { observer } from 'mobx-react'\n\nimport { cdsColor, splitString, updownstreamColor, utrColor } from '../util'\nimport SequenceDisplay from './SequenceDisplay'\n\nimport type { SimpleFeatureSerialized } from '../../../util'\nimport type { Feat } from '../../util'\nimport type { SequenceFeatureDetailsModel } from '../model'\n\nconst CDNASequence = observer(function ({\n  utr,\n  cds,\n  exons,\n  sequence,\n  upstream,\n  downstream,\n  feature,\n  includeIntrons,\n  collapseIntron,\n  model,\n}: {\n  utr: Feat[]\n  cds: Feat[]\n  exons: Feat[]\n  sequence: string\n  upstream?: string\n  downstream?: string\n  feature: SimpleFeatureSerialized\n  includeIntrons?: boolean\n  collapseIntron?: boolean\n  model: SequenceFeatureDetailsModel\n}) {\n  const {\n    upperCaseCDS,\n    intronBp,\n    charactersPerRow,\n    showCoordinates,\n    showCoordinatesSetting,\n  } = model\n  const hasCds = cds.length > 0\n  const chunks = (\n    cds.length ? [...cds, ...utr].sort((a, b) => a.start - b.start) : exons\n  ).filter(f => f.start !== f.end)\n  const toLower = (s: string) => (upperCaseCDS ? s.toLowerCase() : s)\n  const toUpper = (s: string) => (upperCaseCDS ? s.toUpperCase() : s)\n\n  const strand = feature.strand === -1 ? -1 : 1\n  const fullGenomicCoordinates =\n    showCoordinatesSetting === 'genomic' && includeIntrons && !collapseIntron\n\n  const mult = fullGenomicCoordinates ? strand : 1\n  let coordStart = fullGenomicCoordinates\n    ? strand > 0\n      ? feature.start + 1 - (upstream?.length || 0)\n      : feature.end + (upstream?.length || 0)\n    : 0\n  let currStart = 0\n  let currRemainder = 0\n\n  let upstreamChunk = null as React.ReactNode\n  if (upstream) {\n    const { segments, remainder } = splitString({\n      str: toLower(upstream),\n      charactersPerRow,\n      showCoordinates,\n    })\n    upstreamChunk = (\n      <SequenceDisplay\n        model={model}\n        color={updownstreamColor}\n        strand={mult}\n        start={currStart}\n        coordStart={coordStart}\n        chunks={segments}\n      />\n    )\n    currRemainder = remainder\n    currStart = currStart + upstream.length * mult\n    coordStart = coordStart + upstream.length * mult\n  }\n\n  const middleChunks = [] as React.ReactNode[]\n  for (let idx = 0; idx < chunks.length; idx++) {\n    const chunk = chunks[idx]!\n    const intron = sequence.slice(chunk.end, chunks[idx + 1]?.start)\n    const s = sequence.slice(chunk.start, chunk.end)\n    const { segments, remainder } = splitString({\n      str: hasCds\n        ? chunk.type === 'CDS'\n          ? toUpper(s)\n          : toLower(s)\n        : toUpper(s),\n      charactersPerRow,\n      currRemainder,\n      showCoordinates,\n    })\n\n    middleChunks.push(\n      <SequenceDisplay\n        key={`${JSON.stringify(chunk)}-mid`}\n        model={model}\n        color={chunk.type === 'CDS' ? cdsColor : utrColor}\n        strand={mult}\n        start={currStart}\n        coordStart={coordStart}\n        chunks={segments}\n      />,\n    )\n    currRemainder = remainder\n    currStart = currStart + s.length * mult\n    coordStart = coordStart + s.length * mult\n\n    if (intron && includeIntrons && idx < chunks.length - 1) {\n      const str = toLower(\n        collapseIntron && intron.length > intronBp * 2\n          ? `${intron.slice(0, intronBp)}...${intron.slice(-intronBp)}`\n          : intron,\n      )\n      const { segments, remainder } = splitString({\n        str,\n        charactersPerRow,\n        currRemainder,\n        showCoordinates,\n      })\n\n      if (segments.length) {\n        middleChunks.push(\n          <SequenceDisplay\n            key={`${JSON.stringify(chunk)}-intron`}\n            model={model}\n            strand={mult}\n            coordStart={coordStart}\n            start={currStart}\n            chunks={segments}\n          />,\n        )\n        currRemainder = remainder\n        currStart = currStart + str.length * mult\n        coordStart = coordStart + str.length * mult\n      }\n    }\n  }\n\n  let downstreamChunk = null as React.ReactNode\n  if (downstream) {\n    const { segments } = splitString({\n      str: toLower(downstream),\n      charactersPerRow,\n      currRemainder,\n      showCoordinates,\n    })\n    downstreamChunk = (\n      <SequenceDisplay\n        start={currStart}\n        model={model}\n        strand={mult}\n        chunks={segments}\n        coordStart={coordStart}\n        color={updownstreamColor}\n      />\n    )\n  }\n  return (\n    <>\n      {upstreamChunk}\n      {middleChunks}\n      {downstreamChunk}\n    </>\n  )\n})\n\nexport default CDNASequence\n","import { observer } from 'mobx-react'\n\nimport { stitch } from '../../util'\nimport { cdsColor, splitString } from '../util'\nimport SequenceDisplay from './SequenceDisplay'\n\nimport type { Feat } from '../../util'\nimport type { SequenceFeatureDetailsModel } from '../model'\n\nconst CDSSequence = observer(function ({\n  cds,\n  sequence,\n  model,\n}: {\n  cds: Feat[]\n  sequence: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { charactersPerRow, showCoordinates } = model\n  const { segments } = splitString({\n    str: stitch(cds, sequence),\n    charactersPerRow,\n    showCoordinates,\n  })\n  return (\n    <SequenceDisplay\n      model={model}\n      color={cdsColor}\n      chunks={segments}\n      start={0}\n    />\n  )\n})\n\nexport default CDSSequence\n","import { observer } from 'mobx-react'\n\nimport { genomeColor, splitString, updownstreamColor } from '../util'\nimport SequenceDisplay from './SequenceDisplay'\n\nimport type { SimpleFeatureSerialized } from '../../../util'\nimport type { SequenceFeatureDetailsModel } from '../model'\n\nconst GenomicSequence = observer(function ({\n  sequence,\n  upstream,\n  feature,\n  downstream,\n  model,\n}: {\n  sequence: string\n  feature: SimpleFeatureSerialized\n  upstream?: string\n  downstream?: string\n  model: SequenceFeatureDetailsModel\n}) {\n  const { charactersPerRow, showCoordinatesSetting, showCoordinates } = model\n  let currStart = 0\n  let upstreamChunk = null as React.ReactNode\n  let currRemainder = 0\n  const strand = feature.strand === -1 ? -1 : 1\n  const fullGenomicCoordinates = showCoordinatesSetting === 'genomic'\n  const mult = fullGenomicCoordinates ? strand : 1\n  let coordStart = fullGenomicCoordinates\n    ? strand > 0\n      ? feature.start + 1 - (upstream?.length || 0)\n      : feature.end + (upstream?.length || 0)\n    : 0\n  if (upstream) {\n    const { segments, remainder } = splitString({\n      str: upstream,\n      charactersPerRow,\n      showCoordinates,\n    })\n    upstreamChunk = (\n      <SequenceDisplay\n        model={model}\n        color={updownstreamColor}\n        start={currStart}\n        coordStart={coordStart}\n        chunks={segments}\n      />\n    )\n    currRemainder = remainder\n    currStart = currStart + upstream.length * mult\n    coordStart = coordStart + upstream.length * mult\n  }\n\n  const { segments, remainder } = splitString({\n    str: sequence,\n    charactersPerRow,\n    showCoordinates,\n    currRemainder,\n  })\n  const middleChunk = (\n    <SequenceDisplay\n      model={model}\n      color={genomeColor}\n      start={currStart}\n      coordStart={coordStart}\n      chunks={segments}\n    />\n  )\n  currRemainder = remainder\n  currStart += sequence.length * mult\n  coordStart = coordStart + sequence.length * mult\n\n  let downstreamChunk = null as React.ReactNode\n  if (downstream) {\n    const { segments } = splitString({\n      str: downstream,\n      charactersPerRow,\n      currRemainder,\n      showCoordinates,\n    })\n    downstreamChunk = (\n      <SequenceDisplay\n        start={currStart}\n        model={model}\n        chunks={segments}\n        coordStart={coordStart}\n        color={updownstreamColor}\n      />\n    )\n  }\n\n  return (\n    <>\n      {upstreamChunk}\n      {middleChunk}\n      {downstreamChunk}\n    </>\n  )\n})\n\nexport default GenomicSequence\n","import { observer } from 'mobx-react'\n\nimport { stitch } from '../../util'\nimport { proteinColor, splitString } from '../util'\nimport SequenceDisplay from './SequenceDisplay'\n\nimport type { Feat } from '../../util'\nimport type { SequenceFeatureDetailsModel } from '../model'\n\nconst ProteinSequence = observer(function ({\n  cds,\n  sequence,\n  codonTable,\n  model,\n}: {\n  cds: Feat[]\n  sequence: string\n  codonTable: Record<string, string>\n  model: SequenceFeatureDetailsModel\n}) {\n  const { charactersPerRow, showCoordinates } = model\n  const str = stitch(cds, sequence)\n  let protein = ''\n  for (let i = 0; i < str.length; i += 3) {\n    // use & symbol for undefined codon, or partial slice\n    protein += codonTable[str.slice(i, i + 3)] || '&'\n  }\n  const { segments } = splitString({\n    str: protein,\n    charactersPerRow,\n    showCoordinates,\n  })\n  return (\n    <SequenceDisplay\n      model={model}\n      color={proteinColor}\n      chunks={segments}\n      start={0}\n    />\n  )\n})\n\nexport default ProteinSequence\n","import { observer } from 'mobx-react'\n\nimport { defaultCodonTable, generateCodonTable, revcom } from '../../util'\nimport { calculateUTRs2, calculateUTRs, dedupe, revlist } from '../util'\nimport CDNASequence from './seqtypes/CDNASequence'\nimport CDSSequence from './seqtypes/CDSSequence'\nimport GenomicSequence from './seqtypes/GenomicSequence'\nimport ProteinSequence from './seqtypes/ProteinSequence'\n\nimport type { SequenceFeatureDetailsModel } from './model'\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { SeqState } from '../util'\n\nconst SequenceContents = observer(function ({\n  mode,\n  feature,\n  sequence,\n  model,\n}: {\n  mode: string\n  feature: SimpleFeatureSerialized\n  sequence: SeqState\n  model: SequenceFeatureDetailsModel\n}) {\n  let { seq, upstream = '', downstream = '' } = sequence\n  const children =\n    feature.subfeatures\n      ?.sort((a, b) => a.start - b.start)\n      .map(sub => ({\n        ...sub,\n        start: sub.start - feature.start,\n        end: sub.end - feature.start,\n      })) || []\n\n  // we filter duplicate entries in cds and exon lists duplicate entries may be\n  // rare but was seen in Gencode v36 track NCList, likely a bug on GFF3 or\n  // probably worth ignoring here (produces broken protein translations if\n  // included)\n  //\n  // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first\n  // transcript ENST00000445597.6\n  //\n  // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y\n\n  let cds = dedupe(children.filter(sub => sub.type === 'CDS'))\n  let utr = dedupe(children.filter(sub => sub.type?.match(/utr/i)))\n  let exons = dedupe(children.filter(sub => sub.type === 'exon'))\n\n  if (!utr.length && cds.length && exons.length) {\n    utr = calculateUTRs(cds, exons)\n  }\n  if (!utr.length && cds.length && !exons.length) {\n    utr = calculateUTRs2(cds, {\n      start: 0,\n      end: feature.end - feature.start,\n      type: 'gene',\n    })\n  }\n\n  if (feature.strand === -1) {\n    // doing this in a single assignment is needed because downstream and\n    // upstream are swapped so this avoids a temp variable\n    ;[seq, upstream, downstream] = [\n      revcom(seq),\n      revcom(downstream),\n      revcom(upstream),\n    ]\n    cds = revlist(cds, seq.length)\n    exons = revlist(exons, seq.length)\n    utr = revlist(utr, seq.length)\n  }\n  return (\n    <>\n      {mode === 'genomic' ? (\n        <GenomicSequence feature={feature} model={model} sequence={seq} />\n      ) : mode === 'genomic_sequence_updownstream' ? (\n        <GenomicSequence\n          model={model}\n          feature={feature}\n          sequence={seq}\n          upstream={upstream}\n          downstream={downstream}\n        />\n      ) : mode === 'cds' ? (\n        <CDSSequence model={model} cds={cds} sequence={seq} />\n      ) : mode === 'cdna' ? (\n        <CDNASequence\n          model={model}\n          exons={exons}\n          feature={feature}\n          cds={cds}\n          utr={utr}\n          sequence={seq}\n        />\n      ) : mode === 'protein' ? (\n        <ProteinSequence\n          model={model}\n          cds={cds}\n          codonTable={generateCodonTable(defaultCodonTable)}\n          sequence={seq}\n        />\n      ) : mode === 'gene' ? (\n        <CDNASequence\n          model={model}\n          exons={exons}\n          feature={feature}\n          cds={cds}\n          utr={utr}\n          sequence={seq}\n          includeIntrons\n        />\n      ) : mode === 'gene_collapsed_intron' ? (\n        <CDNASequence\n          model={model}\n          exons={exons}\n          feature={feature}\n          cds={cds}\n          sequence={seq}\n          utr={utr}\n          includeIntrons\n          collapseIntron\n        />\n      ) : mode === 'gene_updownstream' ? (\n        <CDNASequence\n          model={model}\n          exons={exons}\n          feature={feature}\n          cds={cds}\n          sequence={seq}\n          utr={utr}\n          upstream={upstream}\n          downstream={downstream}\n          includeIntrons\n        />\n      ) : mode === 'gene_updownstream_collapsed_intron' ? (\n        <CDNASequence\n          model={model}\n          exons={exons}\n          feature={feature}\n          cds={cds}\n          sequence={seq}\n          utr={utr}\n          upstream={upstream}\n          downstream={downstream}\n          includeIntrons\n          collapseIntron\n        />\n      ) : (\n        <div>Unknown type</div>\n      )}\n    </>\n  )\n})\n\nexport default SequenceContents\n","import { observer } from 'mobx-react'\n\nimport { toLocale } from '../../util'\n\nimport type { SequenceFeatureDetailsModel } from './model'\nimport type { SimpleFeatureSerialized } from '../../util'\n\nfunction getStrand(strand: number) {\n  if (strand === -1) {\n    return '(-)'\n  } else if (strand === 1) {\n    return '(+)'\n  } else {\n    return ''\n  }\n}\n\nconst SequenceName = observer(function ({\n  mode,\n  model,\n  feature,\n}: {\n  model: SequenceFeatureDetailsModel\n  mode: string\n  feature: SimpleFeatureSerialized\n}) {\n  return (\n    <div style={{ background: 'white' }}>\n      {`>${[\n        [feature.name || feature.id, mode].filter(f => !!f).join('-'),\n        `${feature.refName}:${toLocale(feature.start + 1)}-${toLocale(feature.end)}${getStrand(feature.strand as number)}`,\n        mode.endsWith('updownstream')\n          ? `+/- ${toLocale(model.upDownBp)} up/downstream bp`\n          : '',\n      ]\n        .filter(f => !!f)\n        .join(' ')}\\n`}\n    </div>\n  )\n})\n\nexport default SequenceName\n","import { forwardRef } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport SequenceContents from './SequenceContents'\nimport SequenceName from './SequenceName'\n\nimport type { SequencePanelProps } from './types'\n\nfunction WordWrap({ children }: { children: React.ReactNode }) {\n  return (\n    <pre\n      style={{\n        /* raw styles instead of className so that html copy works */\n        fontFamily: 'monospace',\n        color: 'black',\n        fontSize: 11,\n      }}\n    >\n      {children}\n    </pre>\n  )\n}\n\nfunction NoWordWrap({ children }: { children: React.ReactNode }) {\n  return (\n    <div\n      style={{\n        /* raw styles instead of className so that html copy works */\n        fontFamily: 'monospace',\n        color: 'black',\n        fontSize: 11,\n        maxWidth: 600,\n        whiteSpace: 'wrap',\n        wordBreak: 'break-all',\n      }}\n    >\n      {children}\n    </div>\n  )\n}\n\nconst SequencePanel = observer(\n  forwardRef<HTMLDivElement, SequencePanelProps>(function S(props, ref) {\n    const { sequence, model, feature } = props\n    const { showCoordinates, mode } = model\n\n    const Container = showCoordinates ? WordWrap : NoWordWrap\n    return (\n      <div\n        data-testid=\"sequence_panel\"\n        ref={ref}\n        style={{ maxHeight: 300, overflow: 'auto' }}\n      >\n        <Container>\n          <SequenceName model={model} mode={mode} feature={feature} />\n          <SequenceContents\n            model={model}\n            mode={mode}\n            feature={feature}\n            sequence={sequence}\n          />\n        </Container>\n      </div>\n    )\n  }),\n)\n\nexport default SequencePanel\n"],"names":["cdsColor","updownstreamColor","splitString","str","charactersPerRow","showCoordinates","currRemainder","splitSize","numChunks","Math","ceil","length","chunks","Array","splitStart","iter","offset","inc","r","slice","res","i","j","segments","remainder","at","replaceAll","observer","start","color","strand","coordStart","model","map","chunk","idx","prefix","padStart","postfix","_jsxs","Fragment","children","_jsx","style","background","utr","cds","exons","sequence","upstream","downstream","feature","includeIntrons","collapseIntron","upperCaseCDS","intronBp","showCoordinatesSetting","hasCds","sort","a","b","filter","f","end","toLower","s","toLowerCase","toUpper","toUpperCase","fullGenomicCoordinates","mult","currStart","upstreamChunk","SequenceDisplay","middleChunks","intron","type","push","JSON","stringify","downstreamChunk","_Fragment","stitch","middleChunk","codonTable","protein","mode","seq","subfeatures","sub","dedupe","match","calculateUTRs","calculateUTRs2","revcom","revlist","GenomicSequence","CDSSequence","CDNASequence","ProteinSequence","generateCodonTable","defaultCodonTable","name","id","join","refName","toLocale","endsWith","upDownBp","WordWrap","t0","$","_c","t1","t2","Symbol","for","fontFamily","fontSize","NoWordWrap","maxWidth","whiteSpace","wordBreak","forwardRef","props","ref","Container","t3","t4","maxHeight","overflow","SequenceName","SequenceContents"],"sourceRoot":""}