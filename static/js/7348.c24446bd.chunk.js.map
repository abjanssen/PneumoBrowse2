{"version":3,"file":"static/js/7348.c24446bd.chunk.js","mappings":"4NASA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,QAAS,CACPC,QAAS,OACTC,MAAO,OACPC,SAAU,MACV,SAAU,CACRC,OAAQ,YACRC,KAAM,SAGVC,KAAM,CAGJC,cAAe,OACfL,MAAO,OACPM,OAAQ,OAoCZ,GAhCmCC,EAAAA,EAAAA,UAAS,UAAU,MACpDC,IAIA,MAAM,QAAEC,GAAYb,KACd,cAAEc,GAAkBF,EACpBG,GAAMC,EAAAA,EAAAA,QAAO,MACnB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWL,EAAQX,QAAQiB,UAC9BF,EAAAA,EAAAA,KAAA,OAAKF,IAAKA,EAAKG,UAAWL,EAAQL,KAAKW,SACpCL,EAAcM,IAAIC,IASjBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAO,CACNC,UAAWR,EAEXH,MAAOA,EACPY,QAASH,EAAMI,cAAcD,SAFxBH,EAAMI,cAAcD,aAQrC,GClDMxB,GAAYC,EAAAA,EAAAA,KAAAA,CAAayB,IAAS,CACtCC,YAAa,CACXC,WAAYF,EAAMG,QAAQC,UAAUC,KACpCC,OAAQ,GAEVC,UAAW,CACT9B,QAAS,QAEX+B,QAAS,CACP7B,SAAU,OAEZ8B,IAAK,CACHC,SAAU,eAIRC,GAA4B1B,EAAAA,EAAAA,UAAS,UAAU,MACnDC,IAIA,MAAM,QAAEC,GAAYb,KACd,MAAEsC,GAAU1B,GACZ,cAAE2B,IAAkBC,EAAAA,EAAAA,QAAO5B,GACjC,OACEK,EAAAA,EAAAA,KAAA,OAAKC,UAAWL,EAAQqB,QAAQf,UAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAWL,EAAQsB,IAAIhB,SACzBmB,EAAMlB,IAAI,CAACqB,EAAMC,KAChB,MAAM,eAAEC,GAAmBJ,EAAcK,YAAYH,EAAKI,MACpDC,GAAgB7B,EAAAA,EAAAA,KAAC0B,EAAc,CAAe/B,MAAO6B,GAAhBA,EAAKM,IAChD,OAAOL,IAAQJ,EAAMU,OAAS,EAC1BF,EACA,CACEA,GACA7B,EAAAA,EAAAA,KAAA,OAEEC,UAAWL,EAAQc,aADd,GAAGc,EAAKM,oBAQ/B,GAkBA,GAhB4BpC,EAAAA,EAAAA,UAAS,UAAU,MAC7CC,IAIA,MAAM,QAAEC,GAAYb,IACpB,OACEiB,EAAAA,EAAAA,KAAA,OAAAE,UACE8B,EAAAA,EAAAA,MAAA,OAAK/B,UAAWL,EAAQoB,UAAUd,SAAA,EAChCF,EAAAA,EAAAA,KAACoB,EAAyB,CAACzB,MAAOA,KAClCK,EAAAA,EAAAA,KAACiC,EAA0B,CAACtC,MAAOA,QAI3C,E","sources":["../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitViewOverlay.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitView.tsx"],"sourcesContent":["import { useRef } from 'react'\n\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport Overlay from './Overlay'\n\nimport type { BreakpointViewModel } from '../model'\n\nconst useStyles = makeStyles()({\n  overlay: {\n    display: 'flex',\n    width: '100%',\n    gridArea: '1/1',\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n  base: {\n    // we set pointerEvents:none here but individual overlays can add\n    // pointerEvents:'auto' to retoggle it back on for a single e.g. svg line\n    pointerEvents: 'none',\n    width: '100%',\n    zIndex: 100,\n  },\n})\n\nconst BreakpointSplitViewOverlay = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { matchedTracks } = model\n  const ref = useRef(null)\n  return (\n    <div className={classes.overlay}>\n      <svg ref={ref} className={classes.base}>\n        {matchedTracks.map(track => (\n          // note: we must pass ref down, because:\n          //\n          // 1. the child component needs to getBoundingClientRect on the this\n          // components SVG, and...\n          //\n          // 2. we cannot rely on using getBoundingClientRect in this component\n          // to make sure this works because if it gets shifted around by\n          // another element, this will not re-render necessarily\n          <Overlay\n            parentRef={ref}\n            key={track.configuration.trackId}\n            model={model}\n            trackId={track.configuration.trackId}\n          />\n        ))}\n      </svg>\n    </div>\n  )\n})\n\nexport default BreakpointSplitViewOverlay\n","import { getEnv } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport BreakpointSplitViewOverlay from './BreakpointSplitViewOverlay'\n\nimport type { BreakpointViewModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  viewDivider: {\n    background: theme.palette.secondary.main,\n    height: 3,\n  },\n  container: {\n    display: 'grid',\n  },\n  content: {\n    gridArea: '1/1',\n  },\n  rel: {\n    position: 'relative',\n  },\n}))\n\nconst BreakpointSplitViewLevels = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n  return (\n    <div className={classes.content}>\n      <div className={classes.rel}>\n        {views.map((view, idx) => {\n          const { ReactComponent } = pluginManager.getViewType(view.type)!\n          const viewComponent = <ReactComponent key={view.id} model={view} />\n          return idx === views.length - 1\n            ? viewComponent\n            : [\n                viewComponent,\n                <div\n                  key={`${view.id}-divider`}\n                  className={classes.viewDivider}\n                />,\n              ]\n        })}\n      </div>\n    </div>\n  )\n})\n\nconst BreakpointSplitView = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <div>\n      <div className={classes.container}>\n        <BreakpointSplitViewLevels model={model} />\n        <BreakpointSplitViewOverlay model={model} />\n      </div>\n    </div>\n  )\n})\n\nexport default BreakpointSplitView\n"],"names":["useStyles","makeStyles","overlay","display","width","gridArea","cursor","fill","base","pointerEvents","zIndex","observer","model","classes","matchedTracks","ref","useRef","_jsx","className","children","map","track","Overlay","parentRef","trackId","configuration","theme","viewDivider","background","palette","secondary","main","height","container","content","rel","position","BreakpointSplitViewLevels","views","pluginManager","getEnv","view","idx","ReactComponent","getViewType","type","viewComponent","id","length","_jsxs","BreakpointSplitViewOverlay"],"sourceRoot":""}