{"version":3,"file":"static/js/2303.3ac409c4.chunk.js","mappings":"kOAeO,SAASA,EAA+BC,IAa7CC,EAAAA,EAAAA,aACED,GACAE,EAAAA,EAAAA,UACEC,UACE,IACE,MAAMC,GAAOC,EAAAA,EAAAA,mBAAkBL,GAC/B,IAAKI,EAAKE,cAAgBN,EAAKO,+BAC7B,OAGF,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,YAAWT,IAC5B,QAAEU,EAAO,2BAAEC,EAA0B,cAAEC,GAAkBZ,EAC/D,GAAIU,EAAS,CACX,MAAMG,GAAYC,EAAAA,EAAAA,iBAAgBd,IAC5B,WAAEe,EAAU,UAAEC,EAAS,SAAEC,SAAoBT,EAAWU,KAC5DL,EACA,oCACA,CACEM,QAASf,EAAKgB,cAAcC,cAC5BX,UACAC,6BACAE,YACAD,mBAOAU,EAAAA,EAAAA,SAAQtB,KACVA,EAAKuB,aAAaP,GAClBhB,EAAKwB,cAAcT,GACnBf,EAAKyB,YAAYR,EAASS,KAAIC,GAAK,IAAIC,EAAAA,cAAcD,MAEzD,CACF,CAAE,MAAOE,GACPC,QAAQC,MAAMF,KACTG,EAAAA,EAAAA,IAAiBH,KAAMP,EAAAA,EAAAA,SAAQtB,KAClCS,EAAAA,EAAAA,YAAWT,GAAMiC,YAAY,GAAGJ,IAAKA,EAEzC,IAEF,CAAEK,MAAO,MAGf,C","sources":["../../../plugins/variants/src/getMultiVariantFeaturesAutorun.ts"],"sourcesContent":["import {\n  SimpleFeature,\n  getContainingView,\n  getSession,\n} from '@jbrowse/core/util'\nimport { isAbortException } from '@jbrowse/core/util/aborting'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport { autorun } from 'mobx'\nimport { addDisposer, isAlive } from 'mobx-state-tree'\n\nimport type { SampleInfo, Source } from './shared/types'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Feature, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function getMultiVariantFeaturesAutorun(self: {\n  configuration: AnyConfigurationModel\n  adapterConfig: AnyConfigurationModel\n  sources?: Source[]\n  minorAlleleFrequencyFilter: number\n  statsReadyAndRegionNotTooLarge: boolean\n  adapterProps: () => Record<string, unknown>\n  setError: (error: unknown) => void\n  setFeatures: (f: Feature[]) => void\n  setMessage: (str: string) => void\n  setHasPhased: (arg: boolean) => void\n  setSampleInfo: (arg: Record<string, SampleInfo>) => void\n}) {\n  addDisposer(\n    self,\n    autorun(\n      async () => {\n        try {\n          const view = getContainingView(self) as LinearGenomeViewModel\n          if (!view.initialized || !self.statsReadyAndRegionNotTooLarge) {\n            return\n          }\n\n          const { rpcManager } = getSession(self)\n          const { sources, minorAlleleFrequencyFilter, adapterConfig } = self\n          if (sources) {\n            const sessionId = getRpcSessionId(self)\n            const { sampleInfo, hasPhased, features } = (await rpcManager.call(\n              sessionId,\n              'MultiVariantGetSimplifiedFeatures',\n              {\n                regions: view.dynamicBlocks.contentBlocks,\n                sources,\n                minorAlleleFrequencyFilter,\n                sessionId,\n                adapterConfig,\n              },\n            )) as {\n              sampleInfo: Record<string, SampleInfo>\n              hasPhased: boolean\n              features: SimpleFeatureSerialized[]\n            }\n            if (isAlive(self)) {\n              self.setHasPhased(hasPhased)\n              self.setSampleInfo(sampleInfo)\n              self.setFeatures(features.map(f => new SimpleFeature(f)))\n            }\n          }\n        } catch (e) {\n          console.error(e)\n          if (!isAbortException(e) && isAlive(self)) {\n            getSession(self).notifyError(`${e}`, e)\n          }\n        }\n      },\n      { delay: 1000 },\n    ),\n  )\n}\n"],"names":["getMultiVariantFeaturesAutorun","self","addDisposer","autorun","async","view","getContainingView","initialized","statsReadyAndRegionNotTooLarge","rpcManager","getSession","sources","minorAlleleFrequencyFilter","adapterConfig","sessionId","getRpcSessionId","sampleInfo","hasPhased","features","call","regions","dynamicBlocks","contentBlocks","isAlive","setHasPhased","setSampleInfo","setFeatures","map","f","SimpleFeature","e","console","error","isAbortException","notifyError","delay"],"sourceRoot":""}