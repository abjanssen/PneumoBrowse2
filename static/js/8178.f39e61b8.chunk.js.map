{"version":3,"file":"static/js/8178.f39e61b8.chunk.js","mappings":"iMAWOA,eAAeC,EACpBC,EACAC,EACAC,SAEMC,EAAAA,EAAAA,MAAK,MAAQH,EAAKI,4BACxB,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,mBAAkBN,GACvC,OACEO,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,KAAAD,eAAUP,EAAeD,MACzBS,EAAAA,EAAAA,KAAA,KAAGC,UAAW,aAAaC,KAAKC,KAAKR,EAAU,MAAMI,UACnDC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACC,MAAOf,EAAMgB,YAAY,OAAOC,WAAS,QAI5D,C","sources":["../../../plugins/variants/src/MultiLinearVariantDisplay/renderSvg.tsx"],"sourcesContent":["import { getContainingView } from '@jbrowse/core/util'\nimport { when } from 'mobx'\n\nimport LegendBar from '../shared/components/MultiVariantLegendBar'\n\nimport type { MultiLinearVariantDisplayModel } from './model'\nimport type {\n  ExportSvgDisplayOptions,\n  LinearGenomeViewModel,\n} from '@jbrowse/plugin-linear-genome-view'\n\nexport async function renderSvg(\n  self: MultiLinearVariantDisplayModel,\n  opts: ExportSvgDisplayOptions,\n  superRenderSvg: (opts: ExportSvgDisplayOptions) => Promise<React.ReactNode>,\n) {\n  await when(() => !!self.regionCannotBeRenderedText)\n  const { offsetPx } = getContainingView(self) as LinearGenomeViewModel\n  return (\n    <>\n      <g>{await superRenderSvg(opts)}</g>\n      <g transform={`translate(${Math.max(-offsetPx, 0)})`}>\n        <LegendBar model={self} orientation=\"left\" exportSVG />\n      </g>\n    </>\n  )\n}\n"],"names":["async","renderSvg","self","opts","superRenderSvg","when","regionCannotBeRenderedText","offsetPx","getContainingView","_jsxs","_Fragment","children","_jsx","transform","Math","max","LegendBar","model","orientation","exportSVG"],"sourceRoot":""}