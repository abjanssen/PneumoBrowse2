{"version":3,"file":"static/js/6214.ded73a89.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BedTabixAdapter/BedTabixAdapter.ts","../../../plugins/bed/src/generateRepeatMaskerFeature.ts","../../../plugins/bed/src/util.ts","../../../plugins/bed/src/generateBedMethylFeature.ts","../../../plugins/bed/src/generateUcscTranscript.ts"],"sourcesContent":["import BED from '@gmod/bed'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\n\nimport { featureData } from '../util'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport type { Feature, FileLocation, Region } from '@jbrowse/core/util'\n\nexport default class BedTabixAdapter extends BaseFeatureDataAdapter {\n  private parser: BED\n\n  protected bed: TabixIndexedFile\n\n  protected columnNames: string[]\n\n  protected scoreColumn: string\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const bedGzLoc = this.getConf('bedGzLocation') as FileLocation\n    const type = this.getConf(['index', 'indexType'])\n    const loc = this.getConf(['index', 'location'])\n    const autoSql = this.getConf('autoSql')\n    const pm = this.pluginManager\n\n    this.bed = new TabixIndexedFile({\n      filehandle: openLocation(bedGzLoc, pm),\n      csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n      tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    this.columnNames = this.getConf('columnNames')\n    this.scoreColumn = this.getConf('scoreColumn')\n    this.parser = new BED({ autoSql })\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    return this.bed.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    return this.bed.getHeader()\n  }\n\n  async getNames() {\n    if (this.columnNames.length) {\n      return this.columnNames\n    }\n    const header = await this.bed.getHeader()\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    const { stopToken } = opts\n    return ObservableCreate<Feature>(async observer => {\n      const meta = await this.bed.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      const names = await this.getNames()\n      let start = performance.now()\n      checkStopToken(stopToken)\n      await this.bed.getLines(query.refName, query.start, query.end, {\n        lineCallback: (line, fileOffset) => {\n          if (performance.now() - start > 200) {\n            checkStopToken(stopToken)\n            start = performance.now()\n          }\n          observer.next(\n            new SimpleFeature(\n              featureData({\n                line,\n                colRef,\n                colStart,\n                colEnd,\n                scoreColumn: this.scoreColumn,\n                parser: this.parser,\n                uniqueId: `${this.id}-${fileOffset}`,\n                names,\n              }),\n            ),\n          )\n        },\n        stopToken: opts.stopToken,\n      })\n      observer.complete()\n    }, opts.stopToken)\n  }\n\n  public freeResources(): void {}\n}\n","export function isRepeatMaskerDescriptionField(desc?: string): desc is string {\n  const ret = desc?.trim().split(' ')\n  return [0, 1, 2, 3, 5, 6].every(s =>\n    ret?.[s] !== undefined ? !Number.isNaN(+ret[s]) : false,\n  )\n}\n\nfunction makeRepeatTrackDescription(description?: string) {\n  if (isRepeatMaskerDescriptionField(description)) {\n    const [\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    ] = description.trim().split(' ')\n    return {\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    }\n  }\n  return { description }\n}\n\nexport function generateRepeatMaskerFeature({\n  uniqueId,\n  refName,\n  start,\n  end,\n  description,\n  ...rest\n}: {\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n  description: string\n  [key: string]: unknown\n}) {\n  return {\n    ...rest,\n    ...makeRepeatTrackDescription(description),\n    uniqueId,\n    refName,\n    start,\n    end,\n  }\n}\n","import {\n  generateBedMethylFeature,\n  isBedMethylFeature,\n} from './generateBedMethylFeature'\nimport {\n  generateRepeatMaskerFeature,\n  isRepeatMaskerDescriptionField,\n} from './generateRepeatMaskerFeature'\nimport {\n  generateUcscTranscript,\n  isUcscTranscript,\n} from './generateUcscTranscript'\n\nimport type BED from '@gmod/bed'\n\nfunction defaultParser(fields: string[], splitLine: string[]) {\n  let hasBlockCount = false\n  const r = [] as [string, string][]\n  for (let i = 0; i < splitLine.length; i++) {\n    if (fields[i] === 'blockCount') {\n      hasBlockCount = true\n    }\n    r.push([fields[i]!, splitLine[i]!] as const)\n  }\n  // heuristically try to determine whether to follow 'slow path' as there can\n  // be many features in e.g. GWAS type data\n  const obj = Object.fromEntries(r)\n  // slow path\n  if (hasBlockCount) {\n    const {\n      blockStarts,\n      blockCount,\n      chromStarts,\n      thickEnd,\n      thickStart,\n      blockSizes,\n      ...rest\n    } = obj\n\n    return {\n      ...rest,\n      blockStarts: arrayify(blockStarts),\n      chromStarts: arrayify(chromStarts),\n      blockSizes: arrayify(blockSizes),\n      thickStart: thickStart ? +thickStart : undefined,\n      thickEnd: thickEnd ? +thickEnd : undefined,\n      blockCount: blockCount ? +blockCount : undefined,\n    } as Record<string, unknown>\n  }\n\n  // fast path\n  else {\n    return obj\n  }\n}\n\nexport function makeBlocks({\n  start,\n  uniqueId,\n  refName,\n  chromStarts,\n  blockCount,\n  blockSizes,\n  blockStarts,\n}: {\n  blockCount: number\n  start: number\n  uniqueId: string\n  refName: string\n  chromStarts?: number[]\n  blockSizes?: number[]\n  blockStarts?: number[]\n}) {\n  const subfeatures = []\n  const starts = chromStarts || blockStarts || []\n  for (let b = 0; b < blockCount; b++) {\n    const bmin = (starts[b] || 0) + start\n    const bsize = blockSizes?.[b]\n    if (bsize && bsize > 0) {\n      const bmax = bmin + bsize\n      subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        refName,\n        type: 'block',\n      })\n    }\n  }\n  return subfeatures\n}\n\nexport function featureData({\n  line,\n  colRef,\n  colStart,\n  colEnd,\n  scoreColumn,\n  parser,\n  uniqueId,\n  names,\n}: {\n  line: string\n  colRef: number\n  colStart: number\n  colEnd: number\n  scoreColumn: string\n  parser: BED\n  uniqueId: string\n  names?: string[]\n}) {\n  const splitLine = line.split('\\t')\n  const refName = splitLine[colRef]!\n  const start = Number.parseInt(splitLine[colStart]!, 10)\n  const end =\n    Number.parseInt(splitLine[colEnd]!, 10) + (colStart === colEnd ? 1 : 0)\n\n  return featureData2({\n    splitLine,\n    refName,\n    start,\n    end,\n    parser,\n    uniqueId,\n    scoreColumn,\n    names,\n  })\n}\n\nexport function featureData2({\n  splitLine,\n  refName,\n  start,\n  end,\n  parser,\n  uniqueId,\n  scoreColumn,\n  names,\n}: {\n  splitLine: string[]\n  refName: string\n  start: number\n  end: number\n  parser: BED\n  uniqueId: string\n  scoreColumn: string\n  names?: string[]\n}) {\n  const data = names\n    ? defaultParser(names, splitLine)\n    : parser.parseLine(splitLine, { uniqueId })\n  const {\n    strand: strand2,\n    score: score2,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    ...rest\n  } = data\n\n  const score = scoreColumn ? +data[scoreColumn] : score2 ? +score2 : undefined\n  const strand =\n    typeof strand2 === 'string' ? (strand2 === '-' ? -1 : 1) : strand2\n\n  const subfeatures = rest.blockCount\n    ? makeBlocks({\n        start,\n        uniqueId,\n        refName,\n        chromStarts: rest.chromStarts,\n        blockCount: rest.blockCount,\n        blockSizes: rest.blockSizes,\n        blockStarts: rest.blockStarts,\n      })\n    : undefined\n\n  if (isBedMethylFeature({ splitLine, start, end })) {\n    return generateBedMethylFeature({\n      splitLine,\n      uniqueId,\n      refName,\n      start,\n      end,\n    })\n  } else if (isRepeatMaskerDescriptionField(rest.description)) {\n    const {\n      chromStarts,\n      blockSizes,\n      blockStarts,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n      ...rest2\n    } = rest\n    return generateRepeatMaskerFeature({\n      ...rest2,\n      uniqueId,\n      description,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    })\n  } else if (\n    subfeatures &&\n    isUcscTranscript({\n      strand,\n      blockCount: rest.blockCount,\n      thickStart: rest.thickStart,\n    })\n  ) {\n    const {\n      chromStarts,\n      blockSizes,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n    } = rest\n    return generateUcscTranscript({\n      ...rest,\n      description,\n      chromStarts,\n      thickStart,\n      thickEnd,\n      blockSizes,\n      blockCount,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      uniqueId,\n      subfeatures,\n    })\n  } else {\n    return {\n      ...rest,\n      uniqueId,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    }\n  }\n}\n\nexport function arrayify(f?: string | number[]) {\n  return f !== undefined\n    ? typeof f === 'string'\n      ? f.split(',').map(f => +f)\n      : f\n    : undefined\n}\n","export function isBedMethylFeature({\n  splitLine,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  start: number\n  end: number\n}) {\n  return +(splitLine[6] || 0) === start && +(splitLine[7] || 0) === end\n}\nexport function generateBedMethylFeature({\n  splitLine,\n  uniqueId,\n  refName,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n}) {\n  // see\n  // https://github.com/nanoporetech/modkit?tab=readme-ov-file#description-of-bedmethyl-output\n  const [\n    ,\n    ,\n    ,\n    code,\n    ,\n    strand,\n    ,\n    ,\n    color,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  ] = splitLine\n\n  return {\n    uniqueId,\n    refName,\n    start,\n    end,\n    code,\n    score: +fraction_modified! || 0,\n    strand,\n    color,\n    source: code,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  }\n}\n","import type { MinimalFeature, TranscriptFeat } from './types'\n\nexport function isUcscTranscript({\n  thickStart,\n  blockCount,\n  strand,\n}: {\n  thickStart?: number\n  blockCount?: number\n  strand?: number\n}) {\n  return thickStart && blockCount && strand !== 0\n}\n\nexport function generateUcscTranscript(data: TranscriptFeat) {\n  const {\n    strand = 0,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    chromStarts,\n    blockStarts,\n    blockSizes,\n    uniqueId,\n    ...rest\n  } = data\n  const {\n    subfeatures: oldSubfeatures,\n    thickStart,\n    thickEnd,\n    blockCount,\n    refName,\n    ...rest2\n  } = rest\n\n  const subfeatures: MinimalFeature[] = []\n  const feats = oldSubfeatures\n    .filter(child => child.type === 'block')\n    .sort((a, b) => a.start - b.start)\n\n  for (const block of feats) {\n    const start = block.start\n    const end = block.end\n    if (thickStart >= end) {\n      // left-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      subfeatures.push({\n        type: 'CDS',\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          start: thickStart,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      subfeatures.push(\n        {\n          type: 'CDS',\n          start,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    }\n  }\n\n  return {\n    ...rest2,\n    uniqueId,\n    strand,\n    type: 'mRNA',\n    refName,\n    subfeatures,\n  }\n}\n"],"names":["BedTabixAdapter","BaseFeatureDataAdapter","constructor","config","getSubAdapter","pluginManager","super","bedGzLoc","this","getConf","type","loc","autoSql","pm","bed","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","columnNames","scoreColumn","parser","BED","getRefNames","opts","getReferenceSequenceNames","getHeader","getNames","length","defline","split","filter","f","at","includes","slice","map","trim","getFeatures","query","stopToken","ObservableCreate","async","meta","getMetadata","columnNumbers","colRef","ref","colStart","start","colEnd","end","names","performance","now","checkStopToken","getLines","refName","lineCallback","line","fileOffset","observer","next","SimpleFeature","featureData","uniqueId","id","complete","freeResources","isRepeatMaskerDescriptionField","desc","ret","every","s","Number","isNaN","makeRepeatTrackDescription","description","bitsw_score","percent_div","percent_del","percent_ins","query_chr","query_begin","query_end","query_remaining","orientation","matching_repeat_name","matching_repeat_class","matching_repeat_begin","matching_repeat_end","matching_repeat_remaining","repeat_id","splitLine","featureData2","parseInt","data","fields","hasBlockCount","r","i","push","obj","Object","fromEntries","blockStarts","blockCount","chromStarts","thickEnd","thickStart","blockSizes","rest","arrayify","defaultParser","parseLine","strand","strand2","score","score2","chrom","_1","chromStart","_2","chromEnd","_3","subfeatures","starts","b","bmin","bsize","bmax","makeBlocks","isBedMethylFeature","code","color","n_valid_cov","fraction_modified","n_mod","n_canonical","n_other_mod","n_delete","n_fail","n_diff","n_nocall","source","generateBedMethylFeature","rest2","generateRepeatMaskerFeature","isUcscTranscript","oldSubfeatures","feats","child","sort","a","block","generateUcscTranscript"],"sourceRoot":""}