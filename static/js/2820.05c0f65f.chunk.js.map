{"version":3,"file":"static/js/2820.05c0f65f.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/DeltaAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\n\nimport { paf_delta2paf } from './util'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buf = await fetchAndMaybeUnzip(loc, opts)\n    return paf_delta2paf(buf)\n  }\n}\n","import { getProgressDisplayStr } from '@jbrowse/core/util'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter/BaseOptions'\n\n/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport function paf_delta2paf(buffer: Uint8Array, opts?: BaseOptions) {\n  const { statusCallback = () => {} } = opts || {}\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n\n  let blockStart = 0\n  let i = 0\n  let j = 0\n  const decoder = new TextDecoder('utf8')\n  while (blockStart < buffer.length) {\n    if (j++ % 10_000 === 0) {\n      statusCallback(\n        `Loading ${getProgressDisplayStr(blockStart, buffer.length)}`,\n      )\n    }\n    const n = buffer.indexOf(10, blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = decoder.decode(b).trim()\n    blockStart = n + 1\n    i++\n    if (line) {\n      const m = regex.exec(line)\n      if (m !== null) {\n        rname = m[1]!\n        qname = m[2]!\n        seen_gt = true\n        continue\n      }\n      if (!seen_gt) {\n        continue\n      }\n      const t = line.split(' ')\n      if (t.length === 7) {\n        const t0 = +t[0]!\n        const t1 = +t[1]!\n        const t2 = +t[2]!\n        const t3 = +t[3]!\n        const t4 = +t[4]!\n        strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n        rs = +Math.min(t0, t1) - 1\n        re = +Math.max(t1, t0)\n        qs = +Math.min(t2, t3) - 1\n        qe = +Math.max(t3, t2)\n        x = y = 0\n        NM = t4\n        cigar = []\n      } else if (t.length === 1) {\n        const d = +t[0]!\n        if (d === 0) {\n          let blen = 0\n          const cigar_str = []\n\n          if (re - rs - x !== qe - qs - y) {\n            throw new Error(`inconsistent alignment on line ${i}`)\n          }\n          cigar.push((re - rs - x) << 4)\n          for (const entry of cigar) {\n            const rlen = entry >> 4\n            blen += rlen\n            cigar_str.push(rlen + 'MID'.charAt(cigar[i]! & 0xf))\n          }\n\n          records.push({\n            qname,\n            qstart: qs,\n            qend: qe,\n            tname: rname,\n            tstart: rs,\n            tend: re,\n            strand,\n            extra: {\n              numMatches: blen - NM,\n              blockLen: blen,\n              mappingQual: 0,\n              NM,\n              cg: cigar_str.join(''),\n            },\n          })\n        } else if (d > 0) {\n          const l = d - 1\n          x += l + 1\n          y += l\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n\n          if (cigar.length > 0 && (cigar[cigar.length - 1]! & 0xf) === 2) {\n            cigar[cigar.length - 1]! += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 2)\n          } // deletion\n        } else {\n          const l = -d - 1\n          x += l\n          y += l + 1\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n\n          if (cigar.length > 0 && (cigar[cigar.length - 1]! & 0xf) === 1) {\n            cigar[cigar.length - 1]! += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 1)\n          } // insertion\n        }\n      }\n    }\n  }\n  return records\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual?: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual || 1)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\nimport SyntenyFeature from '../SyntenyFeature'\nimport {\n  flipCigar,\n  parseLineByLine,\n  parsePAFLine,\n  swapIndelCigar,\n} from '../util'\nimport { getWeightedMeans } from './util'\n\nimport type { PAFRecord } from './util'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buf = await fetchAndMaybeUnzip(pafLocation, opts)\n    return parseLineByLine(buf, parsePAFLine, opts)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures so is not\n    // really that important, and has to be true or else getFeatures is never\n    // called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      const index = assemblyNames.indexOf(assemblyName)\n\n      // if the getFeatures::query is on the query assembly, flip orientation\n      // of data\n      const flip = index === 0\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      // eslint-disable-next-line unicorn/no-for-loop\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]!\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n\n        if (flip) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import {\n  fetchAndMaybeUnzipText,\n  getProgressDisplayStr,\n} from '@jbrowse/core/util'\n\nimport type { PAFRecord } from './PAFAdapter/util'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  return fetchAndMaybeUnzipText(file, opts)\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nexport function parseLineByLine<T>(\n  buffer: Uint8Array,\n  cb: (line: string) => T | undefined,\n  opts?: BaseOptions,\n): T[] {\n  const { statusCallback = () => {} } = opts || {}\n  let blockStart = 0\n  const entries: T[] = []\n  const decoder = new TextDecoder('utf8')\n\n  let i = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf(10, blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = decoder.decode(b).trim()\n    if (line) {\n      const entry = cb(line)\n      if (entry) {\n        entries.push(entry)\n      }\n    }\n    if (i++ % 10_000 === 0) {\n      statusCallback(\n        `Loading ${getProgressDisplayStr(blockStart, buffer.length)}`,\n      )\n    }\n    blockStart = n + 1\n  }\n  return entries\n}\n\nexport function parsePAFLine(line: string) {\n  const parts = line.split('\\t')\n  const extraFields = parts.slice(12)\n  const extra: Record<string, string | number> = {\n    numMatches: +parts[9]!,\n    blockLen: +parts[10]!,\n    mappingQual: +parts[11]!,\n  }\n\n  // Process extra fields only if they exist\n  if (extraFields.length) {\n    for (const field of extraFields) {\n      const colonIndex = field.indexOf(':')\n      extra[field.slice(0, colonIndex)] = field.slice(colonIndex + 3)\n    }\n  }\n\n  return {\n    tname: parts[5],\n    tstart: +parts[7]!,\n    tend: +parts[8]!,\n    qname: parts[0],\n    qstart: +parts[2]!,\n    qend: +parts[3]!,\n    strand: parts[4] === '-' ? -1 : 1,\n    extra,\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["DeltaAdapter","PAFAdapter","setupPre","opts","loc","openLocation","this","getConf","pluginManager","buffer","statusCallback","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","blockStart","i","j","decoder","TextDecoder","length","getProgressDisplayStr","n","indexOf","b","subarray","line","decode","trim","m","exec","t","split","t0","t1","t2","t3","t4","Math","min","max","d","blen","cigar_str","Error","push","entry","rlen","charAt","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","paf_delta2paf","fetchAndMaybeUnzip","weightedMean","tuples","valueSum","weightSum","reduce","value","weight","parseCigar","MismatchParser","BaseFeatureDataAdapter","setup","setupP","catch","e","undefined","pm","pafLocation","buf","parseLineByLine","parsePAFLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","r1","regions","assemblyName","feats","idx","set","Set","feat","add","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","zip","meanScore","getWeightedMeans","start","end","refName","qref","index","flip","observer","complete","r","mateName","mateStart","mateEnd","doesIntersect2","rest","CIGAR","flipCigar","swapIndelCigar","next","SyntenyFeature","uniqueId","type","syntenyId","identity","mate","freeResources","getMismatches","SimpleFeature","get","arg","super","parseBed","text","Map","filter","f","startsWith","name","score","readFile","file","fetchAndMaybeUnzipText","a","cb","parts","extraFields","slice","field","colonIndex","arr","op","replaceAll"],"sourceRoot":""}