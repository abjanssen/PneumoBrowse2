{"version":3,"file":"static/js/7874.0da64d40.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/JsonEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => {\n              slot.set(evt.target.checked)\n            }}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import { useEffect, useState } from 'react'\n\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport HelpIcon from '@mui/icons-material/Help'\nimport { IconButton, TextField, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => {\n            setCode(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import { Suspense, useState } from 'react'\n\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport { TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => {\n          setDisplayed(!displayed)\n        }}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <Suspense fallback={null}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(event)\n            }}\n          />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import { SanitizedHTML } from '@jbrowse/core/ui'\nimport { TextField } from '@mui/material'\n\nimport type { TextFieldProps } from '@mui/material'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      fullWidth\n      slotProps={{\n        formHelperText: {\n          component: 'div',\n        },\n      }}\n    />\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport { InputLabel, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n  callbackEditor: {\n    fontFamily,\n    fontSize,\n    background: theme.palette.background.default,\n    width: 800,\n    marginTop: '16px',\n    border: '1px solid rgba(0,0,0,0.42)',\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n}))\n\nconst JsonEditor = observer(function JsonEditor({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: unknown\n    set: (arg: unknown) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [contents, setContents] = useState(JSON.stringify(slot.value, null, 2))\n  const [error, setError] = useState<unknown>()\n\n  useEffect(() => {\n    try {\n      setError(undefined)\n      slot.set(JSON.parse(contents))\n    } catch (e) {\n      console.error({ e })\n      setError(e)\n    }\n  }, [contents, slot])\n\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <InputLabel shrink htmlFor=\"json-editor\">\n          {slot.name}\n        </InputLabel>\n        <TextField\n          id=\"json-editor\"\n          className={classes.callbackEditor}\n          value={contents}\n          helperText={slot.description}\n          multiline\n          onChange={event => {\n            setContents(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </div>\n    </>\n  )\n})\n\nexport default JsonEditor\n","import { useEffect, useState } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nexport default NumberEditor\n","import { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => {\n                  slot.add(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, 0)\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import { useState } from 'react'\n\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: (arg: number, arg2: string) => void\n    removeAtIndex: (arg: number) => void\n    add: (arg: string) => void\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={`${JSON.stringify(val)}-${idx}`} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => {\n                slot.setAtIndex(idx, evt.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => {\n                          slot.removeAtIndex(idx)\n                        }}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => {\n            setAddNew(true)\n          }}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) => {\n                  slot.setAtKeyIndex(key, idx, val)\n                },\n                removeAtIndex: (idx: number) => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: (val: string) => {\n                  slot.addToKey(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, [])\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import { useEffect, useState } from 'react'\n\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { getEnv } from '@jbrowse/core/util'\nimport { getSubType, getUnionSubTypes } from '@jbrowse/core/util/mst-reflection'\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers } from 'mobx-state-tree'\n\nimport BooleanEditor from './BooleanEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport JsonEditor from './JsonEditor'\nimport NumberEditor from './NumberEditor'\nimport NumberMapEditor from './NumberMapEditor'\nimport StringArrayEditor from './StringArrayEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport type { FileLocation } from '@jbrowse/core/util'\nimport type { ILiteralType } from '@jbrowse/core/util/mst-reflection'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value!))[1]!,\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => {\n        slot.set(location)\n      }}\n      name={slot.name}\n      description={slot.description}\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import {\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormGroup,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\nimport { makeStyles } from 'tss-react/mui'\n\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = subslot.type\n          ? `${singular(slotName)} ${subslot.type}`\n          : `${singular(slotName)} ${slotIndex + 1}`\n        return <Member key={key} {...props} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.icon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeNameChoices.length ? (\n            <TypeSelector\n              typeNameChoices={typeNameChoices}\n              slotName={slotName}\n              slot={slot}\n              onChange={evt => {\n                if (evt.target.value !== slot.type) {\n                  schema.setSubschema(slotName, {\n                    type: evt.target.value,\n                  })\n                }\n              }}\n            />\n          ) : null}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  } else if (isConfigurationSlotType(slotSchema)) {\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  } else {\n    return null\n  }\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used for\n  // different tracks since only the backing model changes for example see pr\n  // #804\n  const { target } = model\n  const key = readConfObject(target, 'trackId')\n  const name = readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.icon} />}\n      >\n        <Typography>\n          <SanitizedHTML html={name ?? 'Configuration'} />\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        <Schema schema={target} />\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","_jsxs","FormControl","children","_jsx","FormControlLabel","label","name","control","Checkbox","checked","value","onChange","evt","set","target","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","color","fontSize","classes","code","setCode","useState","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","undefined","e","console","_Fragment","className","TextField","multiline","split","event","style","background","slotProps","input","Tooltip","title","contextVariable","arrow","IconButton","onClick","newWindow","window","open","opener","HelpIcon","ColorSlot","props","TextFieldProps","displayed","setDisplayed","display","Suspense","fallback","ColorPicker","helperText","fullWidth","ConfigurationTextField","SanitizedHTML","html","formHelperText","component","default","border","contents","setContents","JSON","stringify","setError","parse","InputLabel","shrink","htmlFor","id","val","setVal","num","Number","parseFloat","isNaN","reset","type","card","spacing","setValue","map","key","Card","raised","CardHeader","action","remove","DeleteIcon","CardContent","NumberEditor","add","disableTypography","placeholder","endAdornment","InputAdornment","position","disabled","AddIcon","addNew","setAddNew","List","disablePadding","idx","ListItem","disableGutters","setAtIndex","removeAtIndex","Button","variant","margin","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","icon","tertiary","contrastText","expansionPanelDetails","padding","accordion","primary","noOverflow","Member","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","join","AccordionDetails","TypeSelector","setSubschema","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}