{"version":3,"file":"static/js/311.928b70ff.chunk.js","mappings":"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","sources":["../../../plugins/circular-view/src/CircularView/svgcomponents/SVGBackground.tsx","../../../plugins/circular-view/src/CircularView/svgcomponents/SVGCircularView.tsx","../../../plugins/circular-view/src/CircularView/components/Ruler.tsx"],"sourcesContent":["import { stripAlpha } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\n\nexport default function SVGBackground({\n  width,\n  height,\n  shift,\n}: {\n  width: number\n  height: number\n  shift: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      width={width + shift * 2}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import { Fragment } from 'react'\n\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\nimport { getSession, radToDeg, renderToStaticMarkup } from '@jbrowse/core/util'\nimport { ThemeProvider } from '@mui/material'\nimport { when } from 'mobx'\n\nimport SVGBackground from './SVGBackground'\nimport Ruler from '../components/Ruler'\n\nimport type { CircularViewModel, ExportSvgOptions } from '../model'\n\ntype CGV = CircularViewModel\n\nexport async function renderToSvg(model: CGV, opts: ExportSvgOptions) {\n  await when(() => model.initialized)\n  const { themeName = 'default', Wrapper = ({ children }) => children } = opts\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n\n  const { width, tracks, height } = model\n  const shift = 50\n  const displayResults = await Promise.all(\n    tracks.map(async track => {\n      const display = track.displays[0]\n      await when(() => (display.ready !== undefined ? display.ready : true))\n      return { track, result: await display.renderSvg({ ...opts, theme }) }\n    }),\n  )\n\n  const { staticSlices, offsetRadians, centerXY } = model\n  const deg = radToDeg(offsetRadians)\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={createJBrowseTheme(theme)}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={height}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, width + shift * 2, height].toString()}\n        >\n          <SVGBackground width={width} height={height} shift={shift} />\n          <g transform={`translate(${centerXY}) rotate(${deg})`}>\n            {staticSlices.map((slice, i) => (\n              /* biome-ignore lint/suspicious/noArrayIndexKey: */\n              <Ruler key={i} model={model} slice={slice} />\n            ))}\n            {displayResults.map(({ result }, i) => (\n              /* biome-ignore lint/suspicious/noArrayIndexKey: */\n              <Fragment key={i}>{result}</Fragment>\n            ))}\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n","import {\n  assembleLocString,\n  getFillProps,\n  getSession,\n  getStrokeProps,\n  polarToCartesian,\n  radToDeg,\n} from '@jbrowse/core/util'\nimport { makeContrasting } from '@jbrowse/core/util/color'\nimport { useTheme } from '@mui/material/styles'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { CircularViewModel } from '../model'\nimport type { Slice, SliceElidedRegion, SliceNonElidedRegion } from '../slices'\n\nconst useStyles = makeStyles()({\n  rulerLabel: {\n    fontSize: '0.8rem',\n    fontWeight: 500,\n    lineHeight: 1.6,\n    letterSpacing: '0.0075em',\n  },\n})\n\nfunction sliceArcPath(\n  slice: Slice,\n  radiusPx: number,\n  startBase: number,\n  endBase: number,\n) {\n  // A rx ry x-axis-rotation large-arc-flag sweep-flag x y\n  if (slice.flipped) {\n    ;[startBase, endBase] = [endBase, startBase]\n  }\n  const startXY = slice.bpToXY(startBase, radiusPx)\n  const endXY = slice.bpToXY(endBase, radiusPx)\n  const largeArc =\n    Math.abs(endBase - startBase) / slice.bpPerRadian > Math.PI ? '1' : '0'\n  const sweepFlag = '1'\n  return [\n    'M',\n    ...startXY,\n    'A',\n    radiusPx,\n    radiusPx,\n    '0',\n    largeArc,\n    sweepFlag,\n    ...endXY,\n  ].join(' ')\n}\n\nconst ElisionRulerArc = observer(function ({\n  model,\n  slice,\n  region,\n}: {\n  model: CircularViewModel\n  slice: Slice\n  region: SliceElidedRegion\n}) {\n  const theme = useTheme()\n  const { radiusPx: modelRadiusPx } = model\n  const radiusPx = modelRadiusPx + 1\n  const { endRadians, startRadians } = slice\n  const startXY = polarToCartesian(radiusPx, startRadians)\n  const endXY = polarToCartesian(radiusPx, endRadians)\n  const widthPx = (endRadians - startRadians) * radiusPx\n  const largeArc = endRadians - startRadians > Math.PI ? '1' : '0'\n  // TODO: draw the elision\n  const centerRadians = (endRadians + startRadians) / 2\n  const regionCount = `[${Number(region.regions.length).toLocaleString()}]`\n  return (\n    <>\n      <RulerLabel\n        text={regionCount}\n        view={model}\n        maxWidthPx={widthPx}\n        radians={centerRadians}\n        radiusPx={radiusPx}\n        title={`${regionCount} more regions`}\n        color={theme.palette.text.primary}\n      />\n      <path\n        d={[\n          'M',\n          ...startXY,\n          'A',\n          radiusPx,\n          radiusPx,\n          '0',\n          largeArc,\n          '1',\n          ...endXY,\n        ].join(' ')}\n        {...getStrokeProps(theme.palette.text.secondary)}\n        strokeWidth={2}\n        strokeDasharray=\"2,2\"\n        fill=\"none\"\n      />\n    </>\n  )\n})\n\nconst RulerLabel = observer(function ({\n  view,\n  text,\n  maxWidthPx,\n  radians,\n  radiusPx,\n  title,\n  color,\n}: {\n  view: CircularViewModel\n  text: string\n  maxWidthPx: number\n  radiusPx: number\n  radians: number\n  title?: string\n  color: string\n}) {\n  const { classes } = useStyles()\n  const textXY = polarToCartesian(radiusPx + 5, radians)\n  if (!text) {\n    return null\n  }\n\n  if (text.length * 6.5 < maxWidthPx) {\n    // text is rotated parallel to the ruler arc\n    return (\n      <text\n        x={0}\n        y={0}\n        className={classes.rulerLabel}\n        textAnchor=\"middle\"\n        dominantBaseline=\"baseline\"\n        transform={`translate(${textXY}) rotate(${radToDeg(radians) + 90})`}\n        {...getFillProps(color)}\n      >\n        {text}\n        <title>{title || text}</title>\n      </text>\n    )\n  }\n  if (maxWidthPx > 4) {\n    // text is rotated perpendicular to the ruler arc\n    const overallRotation = radToDeg(radians + view.offsetRadians - Math.PI / 2)\n    if (overallRotation >= 180) {\n      return (\n        <text\n          x={0}\n          y={0}\n          className={classes.rulerLabel}\n          textAnchor=\"start\"\n          dominantBaseline=\"middle\"\n          transform={`translate(${textXY}) rotate(${radToDeg(radians)})`}\n          fill={color}\n        >\n          {text}\n          <title>{title || text}</title>\n        </text>\n      )\n    }\n    return (\n      <text\n        x={0}\n        y={0}\n        className={classes.rulerLabel}\n        textAnchor=\"end\"\n        dominantBaseline=\"middle\"\n        transform={`translate(${textXY}) rotate(${radToDeg(radians) + 180})`}\n        fill={color}\n      >\n        {text}\n        <title>{title || text}</title>\n      </text>\n    )\n  }\n\n  // if you get here there is no room for the text at all\n  return null\n})\n\nconst RegionRulerArc = observer(function ({\n  model,\n  slice,\n  region,\n}: {\n  model: CircularViewModel\n  slice: Slice\n  region: SliceNonElidedRegion\n}) {\n  const theme = useTheme()\n  const { radiusPx } = model\n  const { endRadians, startRadians } = slice\n  const centerRadians = (endRadians + startRadians) / 2\n  const widthPx = (endRadians - startRadians) * radiusPx\n  const session = getSession(model)\n  const assembly = session.assemblyManager.get(region.assemblyName)\n  let color = assembly ? assembly.getRefNameColor(region.refName) : undefined\n  if (color) {\n    try {\n      color = makeContrasting(color, theme.palette.background.paper)\n    } catch (error) {\n      color = theme.palette.text.primary\n    }\n  } else {\n    color = theme.palette.text.primary\n  }\n\n  // TODO: slice flipping\n  return (\n    <>\n      <RulerLabel\n        text={region.refName}\n        view={model}\n        maxWidthPx={widthPx}\n        radians={centerRadians}\n        radiusPx={radiusPx}\n        color={color}\n      />\n      <path\n        d={sliceArcPath(slice, radiusPx + 1, region.start, region.end)}\n        stroke={color}\n        strokeWidth={2}\n        fill=\"none\"\n      />\n    </>\n  )\n})\n\nconst Ruler = observer(function ({\n  model,\n  slice,\n}: {\n  model: CircularViewModel\n  slice: Slice\n}) {\n  return slice.region.elided ? (\n    <ElisionRulerArc\n      key={assembleLocString(slice.region.regions[0]!)}\n      model={model}\n      region={slice.region}\n      slice={slice}\n    />\n  ) : (\n    <RegionRulerArc\n      key={assembleLocString(slice.region)}\n      region={slice.region}\n      model={model}\n      slice={slice}\n    />\n  )\n})\n\nexport default Ruler\n"],"names":["SVGBackground","t0","$","_c","width","height","shift","theme","useTheme","t1","t2","t3","palette","background","default","stripAlpha","_jsx","fill","async","renderToSvg","model","opts","when","initialized","themeName","Wrapper","children","session","getSession","allThemes","tracks","displayResults","Promise","all","map","display","track","displays","undefined","ready","result","renderSvg","staticSlices","offsetRadians","centerXY","deg","radToDeg","renderToStaticMarkup","ThemeProvider","createJBrowseTheme","_jsxs","xmlns","xmlnsXlink","viewBox","toString","transform","slice","i","Ruler","Fragment","useStyles","makeStyles","rulerLabel","fontSize","fontWeight","lineHeight","letterSpacing","sliceArcPath","radiusPx","startBase","endBase","flipped","startXY","bpToXY","endXY","Math","abs","bpPerRadian","PI","join","ElisionRulerArc","observer","region","modelRadiusPx","endRadians","startRadians","polarToCartesian","widthPx","largeArc","centerRadians","regionCount","Number","regions","length","toLocaleString","_Fragment","RulerLabel","text","view","maxWidthPx","radians","title","color","primary","d","getStrokeProps","secondary","strokeWidth","strokeDasharray","classes","textXY","x","y","className","textAnchor","dominantBaseline","getFillProps","RegionRulerArc","assembly","assemblyManager","get","assemblyName","getRefNameColor","refName","makeContrasting","paper","error","start","end","stroke","elided","assembleLocString"],"sourceRoot":""}