{"version":3,"file":"static/js/965.5618e4ac.chunk.js","mappings":"4LAGO,SAASA,EAAQC,GACtB,OAAmC,IAA5BC,OAAOC,KAAKF,GAAKG,MAC1B,CAEO,SAASC,EAAcC,EAAeC,EAAaC,GACxD,MAAO,EAACC,EAAAA,EAAAA,IAAS,GAAGH,GAAQC,GAAM,MAAO,GAAGC,KACzCE,QAAOC,KAAOA,IACdC,KAAK,MACV,CAEO,SAASC,EAAiBC,EAAoBC,GACnD,OACEC,KAAKC,MACHC,EAAAA,EAAAA,KAAIJ,EAAMK,KAAIC,IAAOC,EAAAA,EAAAA,aAAY,IAAIN,EAAQK,EAAI,IAAIR,KAAK,KAAM,QAC9D,EAER,CAOO,SAASU,EAAaC,EAAetB,EAA+B,CAAC,GAC1E,IAAIuB,EAAgBvB,EACpB,IAAK,MAAMwB,KAAOF,GACZG,EAAAA,EAAAA,UAASF,KACXA,EAAOA,EAAKC,IAGhB,MAAuB,iBAATD,EACVA,GACAE,EAAAA,EAAAA,UAASF,IAAqC,iBAArBA,EAAKG,YAC5BH,EAAKG,iBACLC,CACR,C,wGC9BA,MAAMC,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,WAAY,CACVC,UAAW,aACXC,UAAW,IACXC,SAAU,GACVC,QAASL,EAAMM,QAAQ,IACvBC,SAAU,YAIC,SAASC,GAAW,MAAEC,IACnC,MAAM,QAAEC,GAAYZ,IACda,EAAS,eAAeC,KAAK,GAAGH,KACtC,OACEI,EAAAA,EAAAA,KAAA,OAAKC,UAAWJ,EAAQT,WAAWc,UAChCC,EAAAA,EAAAA,gBAAeP,GACdA,EACEE,GACFE,EAAAA,EAAAA,KAACI,EAAAA,EAAI,CAACC,KAAM,GAAGT,IAAQM,SAAE,GAAGN,OAE5BI,EAAAA,EAAAA,KAACM,EAAAA,cAAa,CACZC,MAAMzB,EAAAA,EAAAA,UAASc,GAASY,KAAKC,UAAUb,GAASc,OAAOd,MAKjE,C,mFC7BA,MAAMX,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7ByB,MAAO,CACLC,QAAS,OACTC,SAAU,UAIC,SAASC,GAAY,KAClCpD,EAAI,MACJkC,EAAK,YACLmB,EAAW,OACX5C,EAAM,MACN6C,EAAK,UACLC,IASA,MAAM,QAAEpB,GAAYZ,IACpB,OAAgB,MAATW,GACLsB,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQc,MAAMT,SAAA,EAC5BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CACRhD,OAAQA,EACR4C,YAAaA,EACbrD,KAAMA,EACNsD,MAAOA,KAEThB,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACC,MAAOqB,EAAYA,EAAUrB,EAAOlC,GAAQkC,OAExD,IACN,C,2GChCA,MAAMX,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCwB,MAAO,CACLC,QAAS,OACTC,SAAU,QAGZO,cAAe,CACb/B,UAAW,aACXC,UAAW,IACXE,QAASL,EAAMM,QAAQ,IACvB4B,OAAQ,aAAalC,EAAMmC,QAAQC,OAAOC,WAC1CC,UAAW,aACX/B,SAAU,YAIC,SAASgC,GAAW,KACjChE,EAAI,MACJkC,EAAK,YACLmB,EAAW,UACXE,EAAS,OACT9C,EAAS,KAQT,MAAM,QAAE0B,GAAYZ,IACpB,OAAqB,IAAjBW,EAAMpC,QACDsB,EAAAA,EAAAA,UAASc,EAAM,KACpBI,EAAAA,EAAAA,KAAC2B,EAAU,CACTV,UAAWA,EACXW,WAAYhC,EAAM,GAClBzB,OAAQ,IAAIA,EAAQT,MAGtBwD,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQc,MAAMT,SAAA,EAC5BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAChD,OAAQA,EAAQ4C,YAAaA,EAAarD,KAAMA,KAC3DsC,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACC,MAAOqB,EAAYA,EAAUrB,EAAM,GAAIlC,GAAQkC,EAAM,QAG5DA,EAAMiC,OAAMC,IAAOhD,EAAAA,EAAAA,UAASgD,MAEnC9B,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAA7B,SACGN,EAAMrB,KAAI,CAACuD,EAAKE,KACfhC,EAAAA,EAAAA,KAAC2B,EAAU,CAETV,UAAWA,EACXW,WAAYE,EACZ3D,OAAQ,IAAIA,EAAQ,GAAGT,KAAQsE,MAH1B,GAAGxB,KAAKC,UAAUqB,MAAQE,UAUrCd,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQc,MAAMT,SAAA,EAC5BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAChD,OAAQA,EAAQ4C,YAAaA,EAAarD,KAAMA,IAC1DkC,EAAMrB,KAAI,CAACuD,EAAKE,KACfhC,EAAAA,EAAAA,KAAA,OAEEC,UAAWJ,EAAQuB,cAAclB,UAEjCF,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACC,MAAOqB,EAAYA,EAAUa,EAAKpE,GAAQoE,KAHjD,GAAGtB,KAAKC,UAAUqB,MAAQE,SAS3C,C,+ECjEA,MAAM/C,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtC8C,OAAQ,CACNC,aAAc/C,EAAMM,QAAQ,IAG9B0C,KAAM,CACJC,WAAY,SACZ1C,SAAU,SACV2C,aAAc,gBASH,SAASC,GAAgB,MACtC1C,EAAK,OACLzB,EAAM,KACNT,IAMA,MAAM,QAAEmC,GAAYZ,KACbsD,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjClF,EAAOD,OAAOC,KAAKqC,EAAM,IAAK8C,OAC9BC,EAAY,IAAIC,IAAIrF,GAGpBsF,EAAOvF,OAAOwF,QAAQlD,GAAOrB,KAAI,EAAEwE,EAAGjB,MAC1C,MAAM,GAAEnE,KAAOqF,GAASlB,EACxB,MAAO,CACLnE,GAAIoF,EACJE,WAAYtF,KACTqF,EACJ,IAGH,IAAK,MAAMlB,KAAOlC,EAChB,IAAK,MAAMmD,KAAKzF,OAAOC,KAAKuE,GAC1Ba,EAAUO,IAAIH,GAKlB,IAAII,EACAR,EAAUS,IAAI,OAChBT,EAAUU,OAAO,MACjBF,EAAW,CAAC,gBAAiBR,IAE7BQ,EAAW,IAAIR,GAEjB,MAAMW,EAASH,EAAS5E,KAAIgF,IAAKC,EAAAA,EAAAA,kBAAiBX,EAAKtE,KAAIkF,GAAKA,EAAEF,QAClE,OAAIZ,EAAUe,KAAOnG,EAAKC,OAAS,GAE/B0D,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQoC,OAAO/B,SAAA,EAC7BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAChD,OAAQA,EAAQT,KAAMA,KACjCsC,EAAAA,EAAAA,KAAC2D,EAAAA,EAAgB,CACfC,SACE5D,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CACPtB,QAASA,EACTuB,SAAUC,IACRvB,EAAWuB,EAAMC,OAAOzB,QAAQ,IAItC0B,OAAOjE,EAAAA,EAAAA,KAACkE,EAAAA,EAAU,CAACC,QAAQ,QAAOjE,SAAC,oBAErCF,EAAAA,EAAAA,KAACoE,EAAAA,EAAqB,CAAAlE,UACpBF,EAAAA,EAAAA,KAACqE,EAAAA,EAAQ,CACPxB,KAAMA,EACNyB,UAAW,GACXC,mBAAoB,GACpBC,WAAY3B,EAAKrF,OAAS,GAC1BiH,YAAalC,EACbmC,QAASvB,EAAS5E,KAChB,CAACuD,EAAK6C,KAAK,CAEPhE,MAAOmB,EACPd,MAAOsC,EAAOqB,GACdC,WAAYA,EAAGhF,YACbI,EAAAA,EAAAA,KAAA,OAAKC,UAAWJ,EAAQsC,KAAKjC,UAC3BF,EAAAA,EAAAA,KAACM,EAAAA,cAAa,CAACC,MAAMsE,EAAAA,EAAAA,QAAOjF,GAAS,mBAUlD,IACT,C,eCxGA,MAAMX,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7ByB,MAAO,CACLC,QAAS,OACTC,SAAU,UAIC,SAASiE,GAAS,MAC/BlF,EAAK,OACLzB,EAAM,KACNT,IAMA,MAAM,QAAEmC,GAAYZ,KACd,IAAE8F,EAAG,QAAEC,EAAU,IAAOpF,EAC9B,IAAIS,EACJ,IACEA,EAAO,IAAI4E,IAAIF,EAAKC,GAAS3E,IAC/B,CAAE,MAAOkD,GACPlD,EAAO0E,CACT,CACA,OACE7D,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQc,MAAMT,SAAA,EAC5BF,EAAAA,EAAAA,KAACmB,EAAAA,EAAS,CAAChD,OAAQA,EAAQT,KAAMA,KACjCsC,EAAAA,EAAAA,KAACL,EAAAA,EAAU,CAACC,MAAOS,MAGzB,C,cC1BA,MAAM6E,EAAuB,IAGvBC,EAAa,CACjB,eACA,SACA,WACA,cACA,WACA,aACA,WACA,aACA,YAGa,SAASxD,EAAWyD,GAYjC,MAAM,WACJxD,EAAU,KACVyD,EAAO,GAAE,gBACTC,EAAkB,GAAE,aACpBC,EAAY,UACZtE,EAAS,SACTuE,EAAQ,OACRrH,EAAS,IACPiH,EAEEK,EAAQ,IAAI7C,IAAI,IAAIyC,KAASF,KAAeG,KAC5C,aAAEI,KAAiB1C,GAASpB,EAC5B+D,EAA8BrI,OAAOwF,QAAQ,IAC9CE,KACA0C,IACF5H,QAAO,EAAEiF,EAAG6C,KAAY,MAALA,IAAcH,EAAMrC,IAAIL,KACxC8C,GAAgB5H,EAAAA,EAAAA,IAAiB0H,EAA6BxH,GAEpE,OACE6B,EAAAA,EAAAA,KAAA+B,EAAAA,SAAA,CAAA7B,SACGyF,EAA4BpH,KAAI,EAAEC,EAAKoB,MACtC,MAAMmB,GAAcrC,EAAAA,EAAAA,IAAa,IAAIP,EAAQK,GAAM+G,GACnD,GAAIO,MAAMC,QAAQnG,GAGhB,OAAOA,EAAMpC,OAAS,GAAKoC,EAAMiC,OAAMC,IAAOhD,EAAAA,EAAAA,UAASgD,MACrD9B,EAAAA,EAAAA,KAACsC,EAAe,CAEd5E,KAAMc,EACNL,OAAQA,EACRyB,MAAOA,GAHFpB,IAMPwB,EAAAA,EAAAA,KAAC0B,EAAU,CAEThE,KAAMc,EACNoB,MAAOA,EACPqB,UAAWA,EACXF,YAAaA,EACb5C,OAAQA,GALHK,GAQJ,IAAIM,EAAAA,EAAAA,UAASc,GAAQ,CAC1B,MAAM,gBAAE0F,KAAoBtC,GAASoC,EACrC,OAAOY,EAAAA,EAAAA,eAAcpG,GACnB4F,EAAW,MACTxF,EAAAA,EAAAA,KAACiG,EAAY,CAEXvI,KAAMc,EACNL,OAAQA,EACRyB,MAAOA,GAHFpB,IAOTwB,EAAAA,EAAAA,KAAC2B,EAAU,IAELqB,EACJ/B,UAAWA,EACXW,WAAYhC,EACZ2F,aAAcA,EACdpH,OAAQ,IAAIA,EAAQK,IALfA,EAQX,CACE,OACEwB,EAAAA,EAAAA,KAACc,EAAAA,EAAW,CAEVpD,KAAMc,EACNyC,UAAWA,EACXrB,MAAOA,EACPmB,YAAaA,EACb5C,OAAQA,EACR6C,MAAO5C,KAAK8H,IAAIL,EAAeX,IAN1B1G,EASX,KAIR,C,wEChHA,MAAMS,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCgH,iBAAkB,CAChB,UAAW,CACTC,WAAmC,SAAvBjH,EAAMmC,QAAQ+E,KAAkB,UAAY,WAG5DC,UAAW,CACTjH,UAAW,YACXkH,SAAU,GACVC,aAAc,kBACdjH,SAAU,GACV6G,WAAYjH,EAAMmC,QAAQC,OAAOkF,mBACjCC,YAAavH,EAAMM,QAAQ,GAC3BD,QAASL,EAAMM,QAAQ,SAIZ,SAAS0B,GAAU,YAChCJ,EAAW,KACXrD,EAAI,MACJsD,EAAK,OACL7C,EAAS,KAOT,MAAM,QAAE0B,EAAO,GAAE8G,GAAO1H,IAClB6C,EAAM,IAAI3D,EAAQT,GAAMM,KAAK,KACnC,OAAO+C,GACLf,EAAAA,EAAAA,KAAC4G,EAAAA,EAAO,CAACC,MAAO9F,EAAa+F,UAAU,OAAM5G,UAC3CF,EAAAA,EAAAA,KAAA,OAAKC,UAAW0G,EAAG9G,EAAQsG,iBAAkBtG,EAAQyG,WAAWpG,SAC7D4B,OAIL9B,EAAAA,EAAAA,KAAA,OAAKC,UAAWJ,EAAQyG,UAAWS,MAAO,CAAE/F,MAAOA,GAAQd,SACxD4B,GAGP,C,2MChCe,SAASkF,GAAc,OACpCC,IAIA,MAAOC,EAAOC,IAAY1E,EAAAA,EAAAA,aACnB2E,EAAMC,IAAW5E,EAAAA,EAAAA,YAClB6E,GAAUC,EAAAA,EAAAA,YAAWN,IACrB,WAAEO,GAAeF,GAEvBG,EAAAA,EAAAA,YAAU,KAEP,WACC,IACE,MAAMC,GAAgBC,EAAAA,EAAAA,gBAAeV,EAAQ,WACvCW,QAAeJ,EAAWK,KAAKZ,EAAOa,QAAS,cAAe,CAClEJ,kBAEFL,EAAQO,EACV,CAAE,MAAOrE,GACPwE,QAAQb,MAAM3D,GACd4D,EAAS5D,EACX,CACD,EAXA,EAWG,GACH,CAAC0D,EAAQO,IAEZ,MAAMQ,EACY,iBAATZ,EACH,CACEa,OAAQ,QAAQb,EACbc,WAAW,IAAK,QAChBA,WAAW,IAAK,iBAErBd,GAAQ,CAAC,EAEf,OACEpH,EAAAA,EAAAA,KAACmI,EAAAA,QAAQ,CAACtB,MAAM,YAAW3G,SACxBgH,GACClH,EAAAA,EAAAA,KAACoI,EAAAA,aAAY,CAAClB,MAAOA,SACVlI,IAAToI,GACFpH,EAAAA,EAAAA,KAACqI,EAAAA,gBAAe,CAACC,QAAQ,uBAEzBtI,EAAAA,EAAAA,KAAC2B,EAAAA,QAAU,CAACC,WAAYoG,KAIhC,C,eC7CA,MAEM/I,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCoJ,UAAW,CACThC,SAAU,KAEZiC,SAAU,CACRlJ,UAAW,IACXI,SAAU,OACV+I,SAAU,EACVrC,WAAYjH,EAAMmC,QAAQ8E,WAAWsC,aAuGzC,GAnG0BC,EAAAA,EAAAA,WAAS,UAAU,OAC3C1B,EAAM,QACN2B,IAKA,MAAM,QAAE/I,GAAYZ,KACbiI,EAAOC,IAAY1E,EAAAA,EAAAA,aACnB+F,EAAUK,IAAepG,EAAAA,EAAAA,aACzBqG,EAAQC,IAAatG,EAAAA,EAAAA,WAAS,IAC/B,WAAE+E,IAAeD,EAAAA,EAAAA,YAAWN,IAElCQ,EAAAA,EAAAA,YAAU,KAEP,WACC,IACE,MAAMlJ,QAAYyK,QAAQC,IACxB,IAAI,IAAIrG,KAAIsG,EAAAA,EAAAA,sBAAqBjC,KAAU1I,KAAI4K,UAC7C,MAAMzB,GAAgBC,EAAAA,EAAAA,gBAAeV,EAAQ,WAC7C,MAAO,CACLmC,QACO5B,EAAWK,KAAKZ,EAAOa,QAAS,kBAAmB,CACxDJ,gBAEA2B,QAAS,CACP,CACED,mBAIP,KAGLP,EAAYvL,OAAOgM,YAAY/K,GACjC,CAAE,MAAOgF,GACPwE,QAAQb,MAAM3D,GACd4D,EAAS5D,EACX,CACD,EAxBA,EAwBG,GACH,CAAC0D,EAAQO,IAEZ,MAAM+B,EAAQf,EAAWlL,OAAOwF,QAAQ0F,GAAY,GAC9CZ,EAAS2B,EACZC,SAAQ,EAAEJ,EAAcZ,KAChB,CACL,OAAOY,WACJZ,EAASiB,MAAM,EA7DJ,KA8DdjB,EAAShL,OA9DK,IA+DV,8CAA8C4L,sDAC9C,MAGPtL,QAAOC,KAAOA,IACdC,KAAK,MAER,OACEgC,EAAAA,EAAAA,KAAC0J,EAAAA,OAAM,CACLC,MAAI,EACJ9C,MAAM,yCACN+B,QAASA,EACTgB,SAAS,KAAI1J,UAEbF,EAAAA,EAAAA,KAAC6J,EAAAA,EAAa,CAAC5J,UAAWJ,EAAQ0I,UAAUrI,SACzCgH,GACClH,EAAAA,EAAAA,KAACoI,EAAAA,aAAY,CAAClB,MAAOA,SACNlI,IAAbwJ,GACFxI,EAAAA,EAAAA,KAACqI,EAAAA,gBAAe,CAACC,QAAQ,sBAEzBpH,EAAAA,EAAAA,MAAAa,EAAAA,SAAA,CAAA7B,SAAA,EACEF,EAAAA,EAAAA,KAAC8J,EAAAA,EAAM,CACL3F,QAAQ,YACR4F,QAASA,KACPC,IACET,EACGC,SAAQ,EAAEJ,EAAcZ,KAAc,CACrC,OAAOY,WACJZ,KAEJ1K,QAAOC,KAAOA,IACdC,KAAK,OAEV+K,GAAU,GACVkB,YAAW,KACTlB,GAAU,EAAM,GACf,IAAK,EACR7I,SAED4I,EAAS,uBAAyB,oBAGrC9I,EAAAA,EAAAA,KAAA,OAAKC,UAAWJ,EAAQ2I,SAAStI,SAAE0H,UAM/C,IC5GM3I,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BgL,QAAS,CACP3D,SAAU,KAEZ4D,OAAQ,CACNC,MAAO,WAIX,SAASC,EAAWhN,EAA8BiN,GAChD,IAAK,MAAMC,KAAQlN,EACbkN,IAASD,SACJjN,EAAIkN,GACmB,iBAAdlN,EAAIkN,IACpBF,EAAWhN,EAAIkN,GAAkCD,GAGrD,OAAOjN,CACT,CAEA,MAmGA,GAnG4BsL,EAAAA,EAAAA,WAAS,UAAU,OAC7C1B,IAIA,MAAO6B,EAAQC,IAAatG,EAAAA,EAAAA,WAAS,GAC/B+H,GAAO7C,EAAAA,EAAAA,gBAAeV,GACtBK,GAAUC,EAAAA,EAAAA,YAAWN,IACrB,QAAEpH,GAAYZ,KACbwL,EAAcC,IAAmBjI,EAAAA,EAAAA,WAAS,GAE3C+C,GACJmF,EAAAA,EAAAA,SAAQrD,EAAS,CAAC,cAAe,eACjCK,EAAAA,EAAAA,gBAAeV,EAAQ,CAAC,cAAe,cAEnC,cAAE2D,IAAkBC,EAAAA,EAAAA,QAAOvD,GAE3BwD,EAAcF,EAAcG,uBAChC,sBACA,CACE9D,OAAQ,IACHuD,MACAG,EAAAA,EAAAA,SAAQrD,EAAS,CAAC,cAAe,UAAW,CAAEL,OAAQuD,QACtD7C,EAAAA,EAAAA,gBAAeV,EAAQ,CAAC,cAAe,UAAW,CAAEA,OAAQuD,MAGnE,CAAElD,UAASL,WAKP+D,EAAaJ,EAAcG,uBAC/B,uBACA,KACA,CAAEzD,UAASL,WAGb,OACE/F,EAAAA,EAAAA,MAAA,OAAKjB,UAAWJ,EAAQqK,QAAQhK,SAAA,EAC9BgB,EAAAA,EAAAA,MAACiH,EAAAA,QAAQ,CAACtB,MAAM,gBAAe3G,SAAA,CAC3BsF,EAyBE,MAxBFtE,EAAAA,EAAAA,MAAA,QAAMjB,UAAWJ,EAAQsK,OAAOjK,SAAA,EAC9BF,EAAAA,EAAAA,KAAC8J,EAAAA,EAAM,CACL3F,QAAQ,YACR8G,MAAM,YACNlB,QAASA,KACPW,GAAgB,EAAK,EACrBxK,SACH,oBAGDF,EAAAA,EAAAA,KAAC8J,EAAAA,EAAM,CACL3F,QAAQ,YACR4F,QAASA,KACP,MAAMmB,EAAOb,EAAWc,gBAAgBX,GAAO,WAC/CR,IAAKxJ,KAAKC,UAAUyK,EAAM,KAAM,IAChCnC,GAAU,GACVkB,YAAW,KACTlB,GAAU,EAAM,GACf,IAAK,EACR7I,SAED4I,EAAS,uBAAyB,oBAIzC9I,EAAAA,EAAAA,KAAC2B,EAAAA,QAAU,CACTC,WAAYkJ,EAAY7D,OACxB5B,KAAM,CAAC,WAAY,UAAW,WAAY,cAAe,YACzDG,SAAUA,OAGbsF,EAAY7D,OAAOmE,UAClBpL,EAAAA,EAAAA,KAACmI,EAAAA,QAAQ,CAACtB,MAAM,WAAU3G,UACxBF,EAAAA,EAAAA,KAAC2B,EAAAA,QAAU,CACTC,WAAYkJ,EAAY7D,OAAOmE,SAC/B/F,KAAM,CAAC,WAAY,UAAW,WAAY,eAC1CG,SAAUA,MAGZ,KACHwF,GACChL,EAAAA,EAAAA,KAACmI,EAAAA,QAAQ,CAACtB,MAAOmE,EAAWtN,KAAKwC,UAC/BF,EAAAA,EAAAA,KAACgL,EAAWK,UAAS,CAACpE,OAAQA,MAE9B,MACJjH,EAAAA,EAAAA,KAACgH,EAAa,CAACC,OAAQA,IACtBwD,GACCzK,EAAAA,EAAAA,KAACsL,EAAiB,CAChBrE,OAAQA,EACR2B,QAASA,KACP8B,GAAgB,EAAM,IAGxB,OAGV,IC7HO,SAASa,GAAY,OAC1BtE,EAAM,YACNuE,IAKA,MAAMlE,GAAUC,EAAAA,EAAAA,YAAWN,GACrBwE,GAAYC,EAAAA,EAAAA,cAAazE,EAAQK,IACjC,cAAEsD,IAAkBC,EAAAA,EAAAA,QAAOvD,GAE3BqE,EAAiBf,EAAcG,uBACnC,oBACAa,EACA,CAAEtE,UAASL,WAGb,OACEjH,EAAAA,EAAAA,KAAC0J,EAAAA,EAAM,CAACC,MAAI,EAACf,QAAS4C,EAAa3E,MAAO4E,EAAW7B,SAAS,KAAI1J,UAChEF,EAAAA,EAAAA,KAAC2L,EAAc,CAAC1E,OAAQA,KAG9B,C,6DC5BA,MAAMhI,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7B2M,cAAe,CACbjL,QAAS,OACTkL,cAAe,YAKJ,SAAS1H,GAAsB,SAC5ClE,IAIA,MAAM,QAAEL,GAAYZ,IACpB,OAAOe,EAAAA,EAAAA,KAAA,OAAKC,UAAWJ,EAAQgM,cAAc3L,SAAEA,GACjD,C,gICNA,MAAMjB,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtC4M,sBAAuB,CACrBnL,QAAS,QACTpB,QAASL,EAAMM,QAAQ,IAEzBuM,KAAM,CACJf,MAAO9L,EAAMmC,QAAQ2K,SAASC,cAAgB,YAInC,SAAS/D,GAAS,SAC/BjI,EAAQ,MACR2G,EAAK,gBACLsF,GAAkB,IAElB,MAAM,QAAEtM,GAAYZ,IACpB,OACEiC,EAAAA,EAAAA,MAACkL,EAAAA,EAAS,CAACD,gBAAiBA,EAAgBjM,SAAA,EAC1CF,EAAAA,EAAAA,KAACqM,EAAAA,EAAgB,CAACC,YAAYtM,EAAAA,EAAAA,KAACuM,EAAAA,EAAU,CAACtM,UAAWJ,EAAQmM,OAAS9L,UACpEF,EAAAA,EAAAA,KAACkE,EAAAA,EAAU,CAACC,QAAQ,SAAQjE,SAAE2G,OAEhC7G,EAAAA,EAAAA,KAACwM,EAAAA,EAAgB,CAACvM,UAAWJ,EAAQkM,sBAAsB7L,SACxDA,MAIT,C","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/product-core/src/ui/FileInfoPanel.tsx","../../../packages/product-core/src/ui/RefNameInfoDialog.tsx","../../../packages/product-core/src/ui/AboutDialogContents.tsx","../../../packages/product-core/src/ui/AboutDialog.tsx","../../../packages/core/ui/DataGridFlexContainer.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { isObject, max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  for (const elt of arr) {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  }\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n","import { isValidElement } from 'react'\n\nimport { Link } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n  formatter,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n  formatter?: (value: unknown, key: string) => React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return value != null ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={formatter ? formatter(value, name) : value} />\n    </div>\n  ) : null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  formatter,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  formatter?: (value: unknown, key: string) => React.ReactNode\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes\n        formatter={formatter}\n        attributes={value[0]}\n        prefix={[...prefix, name]}\n      />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={formatter ? formatter(value[0], name) : value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            formatter={formatter}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={formatter ? formatter(val, name) : val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport DataGridFlexContainer from '../../ui/DataGridFlexContainer'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <DataGridFlexContainer>\n          <DataGrid\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            showToolbar={checked}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  width: widths[index],\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value || '')} />\n                    </div>\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </DataGridFlexContainer>\n      </div>\n    )\n  }\n  return null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isObject, isUriLocation } from '../../util'\n\nimport type { Descriptors } from '../types'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Descriptors\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const filteredFormattedAttributes = Object.entries({\n    ...rest,\n    ...__jbrowsefmt,\n  }).filter(([k, v]) => v != null && !omits.has(k))\n  const maxLabelWidth = generateMaxWidth(filteredFormattedAttributes, prefix)\n\n  return (\n    <>\n      {filteredFormattedAttributes.map(([key, value]) => {\n        const description = accessNested([...prefix, key], descriptions)\n        if (Array.isArray(value)) {\n          // check if it looks like an array of objects, which could be used\n          // in data grid\n          return value.length > 1 && value.every(val => isObject(val)) ? (\n            <DataGridDetails\n              key={key}\n              name={key}\n              prefix={prefix}\n              value={value}\n            />\n          ) : (\n            <ArrayValue\n              key={key}\n              name={key}\n              value={value}\n              formatter={formatter}\n              description={description}\n              prefix={prefix}\n            />\n          )\n        } else if (isObject(value)) {\n          const { omitSingleLevel, ...rest } = props\n          return isUriLocation(value) ? (\n            hideUris ? null : (\n              <UriAttribute\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            )\n          ) : (\n            <Attributes\n              key={key}\n              {...rest}\n              formatter={formatter}\n              attributes={value}\n              descriptions={descriptions}\n              prefix={[...prefix, key]}\n            />\n          )\n        } else {\n          return (\n            <SimpleField\n              key={key}\n              name={key}\n              formatter={formatter}\n              value={value}\n              description={description}\n              prefix={prefix}\n              width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n            />\n          )\n        }\n      })}\n    </>\n  )\n}\n","import { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\ntype FileInfo = Record<string, unknown> | string\n\nexport default function FileInfoPanel({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n        })\n        setInfo(result as FileInfo)\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replaceAll('<', '&lt;')\n            .replaceAll('>', '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <ErrorMessage error={error} />\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks'\nimport { Button, DialogContent } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst MAX_REF_NAMES = 10_000\n\nconst useStyles = makeStyles()(theme => ({\n  container: {\n    minWidth: 800,\n  },\n  refNames: {\n    maxHeight: 300,\n    overflow: 'auto',\n    flexGrow: 1,\n    background: theme.palette.background.default,\n  },\n}))\n\nconst RefNameInfoDialog = observer(function ({\n  config,\n  onClose,\n}: {\n  config: AnyConfigurationModel\n  onClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [error, setError] = useState<unknown>()\n  const [refNames, setRefNames] = useState<Record<string, string[]>>()\n  const [copied, setCopied] = useState(false)\n  const { rpcManager } = getSession(config)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const map = await Promise.all(\n          [...new Set(getConfAssemblyNames(config))].map(async assemblyName => {\n            const adapterConfig = readConfObject(config, 'adapter')\n            return [\n              assemblyName,\n              (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                adapterConfig,\n                // hack for synteny adapters\n                regions: [\n                  {\n                    assemblyName,\n                  },\n                ],\n              })) as string[],\n            ] as const\n          }),\n        )\n        setRefNames(Object.fromEntries(map))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const names = refNames ? Object.entries(refNames) : []\n  const result = names\n    .flatMap(([assemblyName, refNames]) => {\n      return [\n        `--- ${assemblyName} ---`,\n        ...refNames.slice(0, MAX_REF_NAMES),\n        refNames.length > MAX_REF_NAMES\n          ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n          : '',\n      ]\n    })\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog\n      open\n      title=\"Reference sequence names used in track\"\n      onClose={onClose}\n      maxWidth=\"xl\"\n    >\n      <DialogContent className={classes.container}>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : refNames === undefined ? (\n          <LoadingEllipses message=\"Loading refNames\" />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(\n                  names\n                    .flatMap(([assemblyName, refNames]) => [\n                      `--- ${assemblyName} ---`,\n                      ...refNames,\n                    ])\n                    .filter(f => !!f)\n                    .join('\\n'),\n                )\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy ref names'}\n            </Button>\n\n            <pre className={classes.refNames}>{result}</pre>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default RefNameInfoDialog\n","import { useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { getConf, readConfObject } from '@jbrowse/core/configuration'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { Button } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FileInfoPanel from './FileInfoPanel'\nimport RefNameInfoDialog from './RefNameInfoDialog'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  button: {\n    float: 'right',\n  },\n})\n\nfunction removeAttr(obj: Record<string, unknown>, attr: string) {\n  for (const prop in obj) {\n    if (prop === attr) {\n      delete obj[prop]\n    } else if (typeof obj[prop] === 'object') {\n      removeAttr(obj[prop] as Record<string, unknown>, attr)\n    }\n  }\n  return obj\n}\n\nconst AboutDialogContents = observer(function ({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [copied, setCopied] = useState(false)\n  const conf = readConfObject(config)\n  const session = getSession(config)\n  const { classes } = useStyles()\n  const [showRefNames, setShowRefNames] = useState(false)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as {\n    config: { metadata?: Record<string, unknown>; [key: string]: unknown }\n  }\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n  ) as { name: string; Component: React.FC<any> } | null\n\n  return (\n    <div className={classes.content}>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <span className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setShowRefNames(true)\n              }}\n            >\n              Show ref names\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                const snap = removeAttr(structuredClone(conf), 'baseUri')\n                copy(JSON.stringify(snap, null, 2))\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy config'}\n            </Button>\n          </span>\n        ) : null}\n        <Attributes\n          attributes={confPostExt.config}\n          omit={['displays', 'baseUri', 'refNames', 'formatAbout', 'metadata']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {confPostExt.config.metadata ? (\n        <BaseCard title=\"Metadata\">\n          <Attributes\n            attributes={confPostExt.config.metadata}\n            omit={['displays', 'baseUri', 'refNames', 'formatAbout']}\n            hideUris={hideUris}\n          />\n        </BaseCard>\n      ) : null}\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n      {showRefNames ? (\n        <RefNameInfoDialog\n          config={config}\n          onClose={() => {\n            setShowRefNames(false)\n          }}\n        />\n      ) : null}\n    </div>\n  )\n})\n\nexport default AboutDialogContents\n","import Dialog from '@jbrowse/core/ui/Dialog'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nimport AboutContents from './AboutDialogContents'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nexport function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <AboutComponent config={config} />\n    </Dialog>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  flexContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n})\n\n// https://mui.com/x/react-data-grid/layout/#flex-parent-container\nexport default function DataGridFlexContainer({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return <div className={classes.flexContainer}>{children}</div>\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["isEmpty","obj","Object","keys","length","generateTitle","name","id","type","ellipses","filter","f","join","generateMaxWidth","array","prefix","Math","ceil","max","map","key","measureText","accessNested","arr","obj2","elt","isObject","Description","undefined","useStyles","makeStyles","theme","fieldValue","wordBreak","maxHeight","fontSize","padding","spacing","overflow","BasicValue","value","classes","isLink","exec","_jsx","className","children","isValidElement","Link","href","SanitizedHTML","html","JSON","stringify","String","field","display","flexWrap","SimpleField","description","width","formatter","_jsxs","FieldName","fieldSubvalue","border","palette","action","selected","boxSizing","ArrayValue","Attributes","attributes","every","val","_Fragment","i","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","sort","unionKeys","Set","rows","entries","k","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","DataGridFlexContainer","DataGrid","rowHeight","columnHeaderHeight","hideFooter","showToolbar","columns","index","renderCell","getStr","UriField","uri","baseUri","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","hideUris","omits","__jbrowsefmt","filteredFormattedAttributes","v","maxLabelWidth","Array","isArray","isUriLocation","UriAttribute","min","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","Tooltip","title","placement","style","FileInfoPanel","config","error","setError","info","setInfo","session","getSession","rpcManager","useEffect","adapterConfig","readConfObject","result","call","trackId","console","details","header","replaceAll","BaseCard","ErrorMessage","LoadingEllipses","message","container","refNames","flexGrow","default","observer","onClose","setRefNames","copied","setCopied","Promise","all","getConfAssemblyNames","async","assemblyName","regions","fromEntries","names","flatMap","slice","Dialog","open","maxWidth","DialogContent","Button","onClick","copy","setTimeout","content","button","float","removeAttr","attr","prop","conf","showRefNames","setShowRefNames","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","ExtraPanel","color","snap","structuredClone","metadata","Component","RefNameInfoDialog","AboutDialog","handleClose","trackName","getTrackName","AboutComponent","AboutContents","flexContainer","flexDirection","expansionPanelDetails","icon","tertiary","contrastText","defaultExpanded","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails"],"sourceRoot":""}