{"version":3,"file":"static/js/9222.cb65a2f0.chunk.js","mappings":"2OAiBO,SAASA,EAA8BC,IAS5CC,EAAAA,EAAAA,aACED,GACAE,EAAAA,EAAAA,UACEC,UACE,IAEE,KADaC,EAAAA,EAAAA,mBAAkBJ,GACrBK,YACR,OAEF,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,YAAWP,IAC5B,cAAEQ,GAAkBR,EACpBS,GAAQC,EAAAA,EAAAA,MACdV,EAAKW,kBAAkBF,GACvB,MAAMG,GAAYC,EAAAA,EAAAA,iBAAgBb,GAC5Bc,QAAiBR,EAAWS,KAChCH,EACA,yBACA,CACEA,YACAJ,mBAGAQ,EAAAA,EAAAA,SAAQhB,IACVA,EAAKiB,WAAWH,EAEpB,CAAE,MAAOI,KACFC,EAAAA,EAAAA,IAAiBD,KAAMF,EAAAA,EAAAA,SAAQhB,KAClCoB,QAAQC,MAAMH,IACdX,EAAAA,EAAAA,YAAWP,GAAMsB,YAAY,GAAGJ,IAAKA,GAEzC,IAEF,CAAEK,MAAO,MAGf,C","sources":["../../../plugins/variants/src/getMultiVariantSourcesAutorun.ts"],"sourcesContent":["import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { isAbortException } from '@jbrowse/core/util/aborting'\nimport { createStopToken } from '@jbrowse/core/util/stopToken'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport { autorun } from 'mobx'\nimport { addDisposer, isAlive } from 'mobx-state-tree'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport interface Source {\n  name: string\n  color?: string\n  group?: string\n  [key: string]: string | undefined\n}\n\nexport function getMultiVariantSourcesAutorun(self: {\n  configuration: AnyConfigurationModel\n  adapterConfig: AnyConfigurationModel\n  adapterProps: () => Record<string, unknown>\n  setSourcesLoading: (aborter: string) => void\n  setError: (error: unknown) => void\n  setMessage: (str: string) => void\n  setSources: (sources: Source[]) => void\n}) {\n  addDisposer(\n    self,\n    autorun(\n      async () => {\n        try {\n          const view = getContainingView(self) as LinearGenomeViewModel\n          if (!view.initialized) {\n            return\n          }\n          const { rpcManager } = getSession(self)\n          const { adapterConfig } = self\n          const token = createStopToken()\n          self.setSourcesLoading(token)\n          const sessionId = getRpcSessionId(self)\n          const sources = (await rpcManager.call(\n            sessionId,\n            'MultiVariantGetSources',\n            {\n              sessionId,\n              adapterConfig,\n            },\n          )) as Source[]\n          if (isAlive(self)) {\n            self.setSources(sources)\n          }\n        } catch (e) {\n          if (!isAbortException(e) && isAlive(self)) {\n            console.error(e)\n            getSession(self).notifyError(`${e}`, e)\n          }\n        }\n      },\n      { delay: 1000 },\n    ),\n  )\n}\n"],"names":["getMultiVariantSourcesAutorun","self","addDisposer","autorun","async","getContainingView","initialized","rpcManager","getSession","adapterConfig","token","createStopToken","setSourcesLoading","sessionId","getRpcSessionId","sources","call","isAlive","setSources","e","isAbortException","console","error","notifyError","delay"],"sourceRoot":""}