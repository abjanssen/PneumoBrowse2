{"version":3,"file":"static/js/9314.32c64af4.chunk.js","mappings":"2MAMO,SAASA,EAAeC,GAC7B,MAAMC,GAAQC,EAAAA,EAAAA,GAAcF,GACtBG,EAASF,EAAMG,QAAOC,GAAKA,EAAEC,WAAW,OAAMC,KAAK,MACnDC,EAAOP,EAAMG,QAAOC,IAAMA,EAAEC,WAAW,OACvCG,EAAY,IAAIC,EAAAA,EAAI,CAAEP,WACtBQ,EAAO,IAAIC,IACXC,EAAO,GACb,IAAIC,EAAI,EACR,IAAK,MAAMC,KAAQP,EAAM,CACvB,MAAOQ,EAAOC,EAAKC,EAAIC,EAAKC,EAAKC,EAAMC,EAAQC,EAAMC,KAAWC,GAC9DV,EAAKW,MAAM,MACPC,EAAMC,OAAOC,YACjBN,GAAMG,MAAM,KACTI,KAAIC,GAAKA,EAAEC,SACXF,KAAIG,IACH,MAAOC,EAAKC,EAAM,QAAUF,EAAEP,MAAM,KAC9BU,EAAI,QAAQF,EAAKF,SACvBrB,EAAK0B,IAAID,GACT,MAAME,EAAIH,EAAIH,OACd,MAAO,CAACI,GAAGG,EAAAA,EAAAA,GAASD,IAAMA,EAAIA,EAAE,KAC5B,IAEVzB,EAAK2B,KAAK,CAERC,SAAU,CACRzB,QACAC,KAAMA,EACNC,KACAC,MACAC,MACAC,MAAMkB,EAAAA,EAAAA,GAASlB,IAASA,EAAOA,EAC/BC,SACAE,YACGG,KACAC,OAAOC,YACRpB,EAAUiC,QAAQZ,KAAI,CAACa,EAAGC,IAAQ,CAACD,EAAGlB,EAAKmB,QAI/CC,QAAS,IAAIC,EAAAA,EAAW,CACtBC,OAAQtC,EACRuC,QAASvC,EAAUwC,UAAUlC,GAC7BmC,GAAI,OAAOpC,MACVqC,WAELrC,GACF,CACA,MAAO,CACLsC,QAAS,CACP,QACA,MACA,KACA,MACA,MACA,OACA,YACGzC,EACH,YACGF,EAAUiC,SACbZ,KAAIuB,IAAK,CAAGC,KAAMD,MACpBE,OAAQ,CACN1C,QAGN,C,iBC/DO,SAAS0B,EAASiB,GACvB,MAAmB,iBAARA,EACFA,EAAMA,GAAQ,EACG,iBAARA,GAAmC,KAAfA,EAAIxB,QACjCyB,OAAOC,UAAUF,EAI5B,C,kCCfO,SAASG,EAAYC,GAC1B,MAAe,MAAXA,EACK,EACa,MAAXA,GACD,OAER,CAEJ,CAEO,SAAS1D,EAAcF,GAC5B,OAAO,IAAI6D,YAAY,QACpBC,OAAO9D,GACP0B,MAAM,cACNI,KAAIC,GAAKA,EAAEC,SACX5B,QAAO2B,KAAOA,GACnB,C","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/VcfImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/isNumber.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/util.ts"],"sourcesContent":["import VCF from '@gmod/vcf'\nimport { VcfFeature } from '@jbrowse/plugin-variants'\n\nimport { isNumber } from './isNumber'\nimport { bufferToLines } from './util'\n\nexport function parseVcfBuffer(buffer: Uint8Array) {\n  const lines = bufferToLines(buffer)\n  const header = lines.filter(l => l.startsWith('#')).join('\\n')\n  const body = lines.filter(l => !l.startsWith('#'))\n  const vcfParser = new VCF({ header })\n  const keys = new Set<string>()\n  const rows = []\n  let i = 0\n  for (const line of body) {\n    const [CHROM, POS, ID, REF, ALT, QUAL, FILTER, INFO, FORMAT, ...rest] =\n      line.split('\\t')\n    const ret = Object.fromEntries(\n      INFO?.split(';')\n        .map(f => f.trim())\n        .map(e => {\n          const [key, val = 'true'] = e.split('=')\n          const k = `INFO.${key!.trim()}`\n          keys.add(k)\n          const v = val.trim()\n          return [k, isNumber(v) ? +v : v]\n        }) || [],\n    )\n    rows.push({\n      // what is displayed\n      cellData: {\n        CHROM,\n        POS: +POS!,\n        ID,\n        REF,\n        ALT,\n        QUAL: isNumber(QUAL) ? +QUAL : QUAL,\n        FILTER,\n        FORMAT,\n        ...ret,\n        ...Object.fromEntries(\n          vcfParser.samples.map((s, idx) => [s, rest[idx]]),\n        ),\n      },\n      // a simplefeatureserializd\n      feature: new VcfFeature({\n        parser: vcfParser,\n        variant: vcfParser.parseLine(line),\n        id: `vcf-${i}`,\n      }).toJSON(),\n    })\n    i++\n  }\n  return {\n    columns: [\n      'CHROM',\n      'POS',\n      'ID',\n      'REF',\n      'ALT',\n      'QUAL',\n      'FILTER',\n      ...keys,\n      'FORMAT',\n      ...vcfParser.samples,\n    ].map(c => ({ name: c })),\n    rowSet: {\n      rows,\n    },\n  }\n}\n","/**\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nexport function isNumber(num: unknown): num is number {\n  if (typeof num === 'number') {\n    return num - num === 0\n  } else if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite(+num)\n  } else {\n    return false\n  }\n}\n","export function parseStrand(strand?: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else {\n    return undefined\n  }\n}\n\nexport function bufferToLines(buffer: Uint8Array) {\n  return new TextDecoder('utf8')\n    .decode(buffer)\n    .split(/\\n|\\r\\n|\\r/)\n    .map(f => f.trim())\n    .filter(f => !!f)\n}\n"],"names":["parseVcfBuffer","buffer","lines","bufferToLines","header","filter","l","startsWith","join","body","vcfParser","VCF","keys","Set","rows","i","line","CHROM","POS","ID","REF","ALT","QUAL","FILTER","INFO","FORMAT","rest","split","ret","Object","fromEntries","map","f","trim","e","key","val","k","add","v","isNumber","push","cellData","samples","s","idx","feature","VcfFeature","parser","variant","parseLine","id","toJSON","columns","c","name","rowSet","num","Number","isFinite","parseStrand","strand","TextDecoder","decode"],"sourceRoot":""}