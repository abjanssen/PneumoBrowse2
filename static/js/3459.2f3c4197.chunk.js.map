{"version":3,"file":"static/js/3459.2f3c4197.chunk.js","mappings":"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","sources":["components/ConfigWarningDialog.tsx","components/SessionWarningDialog.tsx","components/SessionTriaged.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { pluginDescriptionString, pluginUrl } from '@jbrowse/core/PluginLoader'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { Alert, Button, DialogActions, DialogContent } from '@mui/material'\n\nimport type { PluginDefinition } from '@jbrowse/core/PluginLoader'\n\nexport default function ConfigWarningDialog({\n  onConfirm,\n  onCancel,\n  reason,\n}: {\n  onConfirm: () => void\n  onCancel: () => void\n  reason: PluginDefinition[]\n}) {\n  const [show, setShow] = useState(false)\n  return (\n    <Dialog open maxWidth=\"xl\" title=\"Warning\" onClose={onCancel}>\n      <DialogContent>\n        <Alert severity=\"warning\" style={{ width: 800 }}>\n          This link contains a cross origin config that has the following\n          unknown plugins:\n          <ul>\n            {reason.map(r => (\n              <li key={JSON.stringify(r)}>\n                {pluginDescriptionString(r)} - ({pluginUrl(r)})\n              </li>\n            ))}\n          </ul>\n          Please ensure you trust the source of this link.{' '}\n          <Button\n            onClick={() => {\n              setShow(!show)\n            }}\n          >\n            Why am I seeing this?\n          </Button>\n          {show ? (\n            <div>\n              Config files can load arbitrary javascript files via plugins. For\n              security purposes, we display this message when a cross-origin\n              config is detected to be loading plugins that are not in our\n              plugin store\n            </div>\n          ) : null}\n        </Alert>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => {\n            onConfirm()\n          }}\n        >\n          Yes, I trust it\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            onCancel()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { useState } from 'react'\n\nimport { pluginDescriptionString, pluginUrl } from '@jbrowse/core/PluginLoader'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { Alert, Button, DialogActions, DialogContent } from '@mui/material'\n\nimport type { PluginDefinition } from '@jbrowse/core/PluginLoader'\n\nexport default function SessionWarningDialog({\n  onConfirm,\n  onCancel,\n  reason,\n}: {\n  onConfirm: () => void\n  onCancel: () => void\n  reason: PluginDefinition[]\n}) {\n  const [show, setShow] = useState(false)\n  return (\n    <Dialog open maxWidth=\"xl\" title=\"Warning\" onClose={onCancel}>\n      <DialogContent>\n        <Alert severity=\"warning\" style={{ width: 800 }}>\n          This link contains a session that has the following unknown plugins:\n          <ul>\n            {reason.map(r => (\n              <li key={JSON.stringify(r)}>\n                {pluginDescriptionString(r)} - ({pluginUrl(r)})\n              </li>\n            ))}\n          </ul>\n          Please ensure you trust the source of this session.\n          <Button\n            onClick={() => {\n              setShow(!show)\n            }}\n          >\n            Why am I seeing this?\n          </Button>\n          {show ? (\n            <div>\n              Sessions can load arbitrary javascript files via session plugins.\n              For security purposes, we display this message when sessions\n              contain plugins that are not from our plugin store\n            </div>\n          ) : null}\n        </Alert>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => {\n            onConfirm()\n          }}\n        >\n          Yes, I trust it\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            onCancel()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { nanoid } from '@jbrowse/core/util/nanoid'\nimport { observer } from 'mobx-react'\n\nimport ConfigWarningDialog from './ConfigWarningDialog'\nimport SessionWarningDialog from './SessionWarningDialog'\nimport factoryReset from '../factoryReset'\n\nimport type { SessionLoaderModel } from '../SessionLoader'\nimport type { SessionTriagedInfo } from '../types'\n\nconst SessionTriaged = observer(function ({\n  sessionTriaged,\n  loader,\n}: {\n  loader: SessionLoaderModel\n  sessionTriaged: SessionTriagedInfo\n}) {\n  return sessionTriaged.origin === 'session' ? (\n    <SessionWarningDialog\n      onConfirm={async () => {\n        const session = JSON.parse(JSON.stringify(sessionTriaged.snap))\n\n        // second param true says we passed user confirmation\n        await loader.loadSession({ ...session, id: nanoid() }, true)\n        loader.setSessionTriaged(undefined)\n      }}\n      onCancel={() => {\n        loader.setBlankSession(true)\n        loader.setSessionTriaged(undefined)\n      }}\n      reason={sessionTriaged.reason}\n    />\n  ) : (\n    <ConfigWarningDialog\n      onConfirm={async () => {\n        const session = JSON.parse(JSON.stringify(sessionTriaged.snap))\n        await loader.fetchPlugins(session)\n        loader.setConfigSnapshot({ ...session, id: nanoid() })\n        loader.setSessionTriaged(undefined)\n      }}\n      onCancel={async () => {\n        await factoryReset()\n        loader.setSessionTriaged(undefined)\n      }}\n      reason={sessionTriaged.reason}\n    />\n  )\n})\n\nexport default SessionTriaged\n"],"names":["ConfigWarningDialog","t0","$","_c","onConfirm","onCancel","reason","show","setShow","useState","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","Symbol","for","width","map","_temp","_jsx","children","Button","onClick","DialogContent","_jsxs","Alert","severity","style","color","variant","DialogActions","Dialog","open","maxWidth","title","r","pluginDescriptionString","pluginUrl","JSON","stringify","SessionWarningDialog","observer","sessionTriaged","loader","origin","async","session","parse","snap","loadSession","id","nanoid","setSessionTriaged","undefined","setBlankSession","fetchPlugins","setConfigSnapshot","factoryReset"],"sourceRoot":""}