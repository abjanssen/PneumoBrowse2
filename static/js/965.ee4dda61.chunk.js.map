{"version":3,"file":"static/js/965.ee4dda61.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/product-core/src/ui/FileInfoPanel.tsx","../../../packages/product-core/src/ui/RefNameInfoDialog.tsx","../../../packages/product-core/src/ui/AboutDialogContents.tsx","../../../packages/product-core/src/ui/AboutDialog.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { isObject, max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  for (const elt of arr) {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  }\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n","import { isValidElement } from 'react'\n\nimport { Link } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes } = useStyles()\n  return value !== null && value !== undefined ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={value} />\n    </div>\n  ) : null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes attributes={value[0]} prefix={[...prefix, name]} />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <DataGrid\n            disableRowSelectionOnClick\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            slots={{\n              toolbar: checked ? GridToolbar : null,\n            }}\n            slotProps={{\n              toolbar: {\n                printOptions: {\n                  disableToolbarButton: true,\n                },\n              },\n            }}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  renderCell: params => {\n                    const value = params.value as string\n                    return (\n                      <div className={classes.cell}>\n                        <SanitizedHTML html={getStr(value || '')} />\n                      </div>\n                    )\n                  },\n                  width: widths[index],\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isObject, isUriLocation } from '../../util'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Record<string, React.ReactNode>\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter = val => val,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const formattedAttributes = { ...rest, ...__jbrowsefmt }\n\n  const maxLabelWidth = generateMaxWidth(\n    Object.entries(formattedAttributes).filter(\n      ([k, v]) => v !== undefined && !omits.has(k),\n    ),\n    prefix,\n  )\n\n  return (\n    <>\n      {Object.entries(formattedAttributes)\n        .filter(([k, v]) => v !== undefined && !omits.has(k))\n        .map(([key, value]) => {\n          const description = accessNested([...prefix, key], descriptions)\n          if (Array.isArray(value)) {\n            // check if it looks like an array of objects, which could be used\n            // in data grid\n            return value.length > 1 && value.every(val => isObject(val)) ? (\n              <DataGridDetails\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            ) : (\n              <ArrayValue\n                key={key}\n                name={key}\n                value={value}\n                description={description}\n                prefix={prefix}\n              />\n            )\n          } else if (isObject(value)) {\n            const { omitSingleLevel, ...rest } = props\n            return isUriLocation(value) ? (\n              hideUris ? null : (\n                <UriAttribute\n                  key={key}\n                  name={key}\n                  prefix={prefix}\n                  value={value}\n                />\n              )\n            ) : (\n              <Attributes\n                key={key}\n                {...rest}\n                attributes={value}\n                descriptions={descriptions}\n                prefix={[...prefix, key]}\n              />\n            )\n          } else {\n            return (\n              <SimpleField\n                key={key}\n                name={key}\n                value={formatter(value, key)}\n                description={description}\n                prefix={prefix}\n                width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n              />\n            )\n          }\n        })}\n    </>\n  )\n}\n","import { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\ntype FileInfo = Record<string, unknown> | string\n\nexport default function FileInfoPanel({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n        })\n        setInfo(result as FileInfo)\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replaceAll('<', '&lt;')\n            .replaceAll('>', '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <ErrorMessage error={error} />\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks'\nimport { Button, DialogContent } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst MAX_REF_NAMES = 10_000\n\nconst useStyles = makeStyles()(theme => ({\n  container: {\n    minWidth: 800,\n  },\n  refNames: {\n    maxHeight: 300,\n    overflow: 'auto',\n    flexGrow: 1,\n    background: theme.palette.background.default,\n  },\n}))\n\nconst RefNameInfoDialog = observer(function ({\n  config,\n  onClose,\n}: {\n  config: AnyConfigurationModel\n  onClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [error, setError] = useState<unknown>()\n  const [refNames, setRefNames] = useState<Record<string, string[]>>()\n  const [copied, setCopied] = useState(false)\n  const { rpcManager } = getSession(config)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const map = await Promise.all(\n          [...new Set(getConfAssemblyNames(config))].map(async assemblyName => {\n            const adapterConfig = readConfObject(config, 'adapter')\n            return [\n              assemblyName,\n              (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                adapterConfig,\n                // hack for synteny adapters\n                regions: [\n                  {\n                    assemblyName,\n                  },\n                ],\n              })) as string[],\n            ] as const\n          }),\n        )\n        setRefNames(Object.fromEntries(map))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const names = refNames ? Object.entries(refNames) : []\n  const result = names\n    .flatMap(([assemblyName, refNames]) => {\n      return [\n        `--- ${assemblyName} ---`,\n        ...refNames.slice(0, MAX_REF_NAMES),\n        refNames.length > MAX_REF_NAMES\n          ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n          : '',\n      ]\n    })\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog\n      open\n      title=\"Reference sequence names used in track\"\n      onClose={onClose}\n      maxWidth=\"xl\"\n    >\n      <DialogContent className={classes.container}>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : refNames === undefined ? (\n          <LoadingEllipses message=\"Loading refNames\" />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(\n                  names\n                    .flatMap(([assemblyName, refNames]) => [\n                      `--- ${assemblyName} ---`,\n                      ...refNames,\n                    ])\n                    .filter(f => !!f)\n                    .join('\\n'),\n                )\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy ref names'}\n            </Button>\n\n            <pre className={classes.refNames}>{result}</pre>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default RefNameInfoDialog\n","import { useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { getConf, readConfObject } from '@jbrowse/core/configuration'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { Button } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FileInfoPanel from './FileInfoPanel'\nimport RefNameInfoDialog from './RefNameInfoDialog'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  button: {\n    float: 'right',\n  },\n})\n\nfunction removeAttr(obj: Record<string, unknown>, attr: string) {\n  for (const prop in obj) {\n    if (prop === attr) {\n      delete obj[prop]\n    } else if (typeof obj[prop] === 'object') {\n      removeAttr(obj[prop] as Record<string, unknown>, attr)\n    }\n  }\n  return obj\n}\n\nconst AboutDialogContents = observer(function ({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [copied, setCopied] = useState(false)\n  const conf = readConfObject(config)\n  const session = getSession(config)\n  const { classes } = useStyles()\n  const [showRefNames, setShowRefNames] = useState(false)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as {\n    config: { metadata?: Record<string, unknown>; [key: string]: unknown }\n  }\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n  ) as { name: string; Component: React.FC<any> } | null\n\n  return (\n    <div className={classes.content}>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <span className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setShowRefNames(true)\n              }}\n            >\n              Show ref names\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                const snap = removeAttr(structuredClone(conf), 'baseUri')\n                copy(JSON.stringify(snap, null, 2))\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy config'}\n            </Button>\n          </span>\n        ) : null}\n        <Attributes\n          attributes={confPostExt.config}\n          omit={['displays', 'baseUri', 'refNames', 'formatAbout', 'metadata']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {confPostExt.config.metadata ? (\n        <BaseCard title=\"Metadata\">\n          <Attributes\n            attributes={confPostExt.config.metadata}\n            omit={['displays', 'baseUri', 'refNames', 'formatAbout']}\n            hideUris={hideUris}\n          />\n        </BaseCard>\n      ) : null}\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n      {showRefNames ? (\n        <RefNameInfoDialog\n          config={config}\n          onClose={() => {\n            setShowRefNames(false)\n          }}\n        />\n      ) : null}\n    </div>\n  )\n})\n\nexport default AboutDialogContents\n","import Dialog from '@jbrowse/core/ui/Dialog'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nimport AboutContents from './AboutDialogContents'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nexport function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <AboutComponent config={config} />\n    </Dialog>\n  )\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["isEmpty","obj","Object","keys","length","generateTitle","name","id","type","ellipses","filter","f","join","generateMaxWidth","array","prefix","Math","ceil","max","map","key","measureText","accessNested","arr","obj2","elt","isObject","Description","undefined","useStyles","makeStyles","theme","fieldValue","wordBreak","maxHeight","fontSize","padding","spacing","overflow","BasicValue","value","classes","isLink","exec","_jsx","className","children","isValidElement","Link","href","SanitizedHTML","html","JSON","stringify","String","field","display","flexWrap","SimpleField","description","width","_jsxs","FieldName","fieldSubvalue","border","palette","action","selected","boxSizing","ArrayValue","Attributes","attributes","every","val","_Fragment","i","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","sort","unionKeys","Set","rows","entries","k","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","style","flexDirection","DataGrid","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","hideFooter","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","columns","index","renderCell","params","getStr","UriField","uri","baseUri","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","formatter","hideUris","omits","__jbrowsefmt","formattedAttributes","maxLabelWidth","v","Array","isArray","isUriLocation","UriAttribute","min","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","Tooltip","title","placement","FileInfoPanel","config","error","setError","info","setInfo","session","getSession","rpcManager","useEffect","adapterConfig","readConfObject","result","call","trackId","console","details","header","replaceAll","BaseCard","ErrorMessage","LoadingEllipses","message","container","refNames","flexGrow","default","observer","onClose","setRefNames","copied","setCopied","Promise","all","getConfAssemblyNames","async","assemblyName","regions","fromEntries","names","flatMap","slice","Dialog","open","maxWidth","DialogContent","Button","onClick","copy","setTimeout","content","button","float","removeAttr","attr","prop","conf","showRefNames","setShowRefNames","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","ExtraPanel","color","snap","structuredClone","metadata","Component","RefNameInfoDialog","AboutDialog","handleClose","trackName","getTrackName","AboutComponent","AboutContents","expansionPanelDetails","icon","tertiary","contrastText","defaultExpanded","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails"],"sourceRoot":""}