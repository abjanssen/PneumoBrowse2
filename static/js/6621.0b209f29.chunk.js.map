{"version":3,"file":"static/js/6621.0b209f29.chunk.js","mappings":"uOAae,MAAMA,UAAwBC,EAAAA,uBAM3C,kBAAcC,CAAaC,GACzB,MAAMC,EAAgBC,KAAKC,QAAQ,iBAC7BC,EAAWF,KAAKC,QAAQ,CAAC,QAAS,aAClCE,EAAYH,KAAKC,QAAQ,CAAC,QAAS,cAEnCG,GAAaC,EAAAA,EAAAA,cAAaN,EAAeC,KAAKM,eAC9CC,EAAsB,QAAdJ,EACRK,EAAM,IAAIC,EAAAA,GAAiB,CAC/BL,aACAM,cAAeH,GACXF,EAAAA,EAAAA,cAAaH,EAAUF,KAAKM,oBAC5BK,EACJC,cAAgBL,OAEZI,GADAN,EAAAA,EAAAA,cAAaH,EAAUF,KAAKM,eAEhCO,eAAgB,WAGlB,MAAO,CACLL,MACAM,OAAQ,IAAIC,EAAAA,EAAU,CACpBC,aAAcR,EAAIS,cAGxB,CAEA,mBAAgBC,GAOd,OANKlB,KAAKmB,aACRnB,KAAKmB,WAAanB,KAAKH,eAAeuB,OAAOC,IAE3C,MADArB,KAAKmB,gBAAaR,EACZU,CAAC,KAGJrB,KAAKmB,UACd,CAEA,eAAMG,CAAUC,GACd,MAAM,eAAEC,EAAiBA,QAAaD,GAAQ,CAAC,EAC/C,OAAOE,EAAAA,EAAAA,cAAa,oBAAqBD,GAAgB,IACvDxB,KAAKkB,iBAET,CACA,iBAAaQ,CAAYH,EAAoB,CAAC,GAC5C,MAAM,IAAEf,SAAcR,KAAKsB,UAAUC,GACrC,OAAOf,EAAImB,0BAA0BJ,EACvC,CAEA,eAAMN,CAAUM,GACd,MAAM,IAAEf,SAAcR,KAAKsB,UAAUC,GACrC,OAAOf,EAAIS,WACb,CAEOW,WAAAA,CAAYC,EAAyBN,EAAoB,CAAC,GAC/D,OAAOO,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,QAAEC,EAAO,MAAEC,EAAK,IAAEC,GAAQL,GAC1B,eAAEL,EAAiBA,QAAaD,GAChC,IAAEf,EAAG,OAAEM,SAAiBd,KAAKsB,UAAUC,SAEvCE,EAAAA,EAAAA,cAAa,uBAAwBD,GAAgB,IACzDhB,EAAI2B,SAASH,EAASC,EAAOC,EAAK,CAChCE,aAAcA,CAACC,EAAMC,KACnBC,EAASC,KACP,IAAIC,EAAAA,EAAW,CACbC,QAAS5B,EAAO6B,UAAUN,GAC1BvB,SACA8B,GAAI,GAAG5C,KAAK4C,UAAUN,MAEzB,KAEAf,MAGPgB,EAASM,UAAU,GAClBtB,EAAKuB,UACV,CAEA,gBAAMC,GACJ,MAAMC,EAAOhD,KAAKC,QAAQ,sBAC1B,GAAiB,KAAb+C,EAAKC,KAA2B,yBAAbD,EAAKC,IAAgC,CAC1D,MAAM,OAAEnC,SAAiBd,KAAKsB,YAC9B,OAAOR,EAAOoC,QAAQC,KAAIC,IAAQ,CAChCA,UAEJ,CAAO,CACL,MAGMC,SAHYC,EAAAA,EAAAA,yBAChBjD,EAAAA,EAAAA,cAAa2C,EAAMhD,KAAKM,iBAERiD,MAAM,cAClBvC,EAASqC,EAAM,GAAIE,MAAM,OACzB,OAAEzC,SAAiBd,KAAKsB,YACxBkC,EAAI,IAAIC,IAAI3C,EAAOoC,SACzB,OAAOG,EACJK,MAAM,GACNP,KAAId,IACH,MAAMsB,EAAOtB,EAAKkB,MAAM,MACxB,MAAO,CACLH,KAAMO,EAAK,MACRC,OAAOC,YAERF,EAAKD,MAAM,GAAGP,KAAI,CAACW,EAAGC,IAAQ,CAAC/C,EAAO+C,EAAM,GAAKD,MAEpD,IAEFE,QAAOC,GAAKT,EAAEU,IAAID,EAAEb,OACzB,CACF,CAEOe,aAAAA,GAAuC,E","sources":["../../../plugins/variants/src/VcfTabixAdapter/VcfTabixAdapter.ts"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix'\nimport VcfParser from '@gmod/vcf'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { fetchAndMaybeUnzipText, updateStatus } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport VcfFeature from '../VcfFeature'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { NoAssemblyRegion } from '@jbrowse/core/util/types'\n\nexport default class VcfTabixAdapter extends BaseFeatureDataAdapter {\n  private configured?: Promise<{\n    vcf: TabixIndexedFile\n    parser: VcfParser\n  }>\n\n  private async configurePre(_opts?: BaseOptions) {\n    const vcfGzLocation = this.getConf('vcfGzLocation')\n    const location = this.getConf(['index', 'location'])\n    const indexType = this.getConf(['index', 'indexType'])\n\n    const filehandle = openLocation(vcfGzLocation, this.pluginManager)\n    const isCSI = indexType === 'CSI'\n    const vcf = new TabixIndexedFile({\n      filehandle,\n      csiFilehandle: isCSI\n        ? openLocation(location, this.pluginManager)\n        : undefined,\n      tbiFilehandle: !isCSI\n        ? openLocation(location, this.pluginManager)\n        : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n\n    return {\n      vcf,\n      parser: new VcfParser({\n        header: await vcf.getHeader(),\n      }),\n    }\n  }\n\n  protected async configurePre2() {\n    if (!this.configured) {\n      this.configured = this.configurePre().catch((e: unknown) => {\n        this.configured = undefined\n        throw e\n      })\n    }\n    return this.configured\n  }\n\n  async configure(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    return updateStatus('Downloading index', statusCallback, () =>\n      this.configurePre2(),\n    )\n  }\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { vcf } = await this.configure(opts)\n    return vcf.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { vcf } = await this.configure(opts)\n    return vcf.getHeader()\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { refName, start, end } = query\n      const { statusCallback = () => {} } = opts\n      const { vcf, parser } = await this.configure(opts)\n\n      await updateStatus('Downloading variants', statusCallback, () =>\n        vcf.getLines(refName, start, end, {\n          lineCallback: (line, fileOffset) => {\n            observer.next(\n              new VcfFeature({\n                variant: parser.parseLine(line),\n                parser,\n                id: `${this.id}-vcf-${fileOffset}`,\n              }),\n            )\n          },\n          ...opts,\n        }),\n      )\n      observer.complete()\n    }, opts.stopToken)\n  }\n\n  async getSources() {\n    const conf = this.getConf('samplesTsvLocation')\n    if (conf.uri === '' || conf.uri === '/path/to/samples.tsv') {\n      const { parser } = await this.configure()\n      return parser.samples.map(name => ({\n        name,\n      }))\n    } else {\n      const txt = await fetchAndMaybeUnzipText(\n        openLocation(conf, this.pluginManager),\n      )\n      const lines = txt.split(/\\n|\\r\\n|\\r/)\n      const header = lines[0]!.split('\\t')\n      const { parser } = await this.configure()\n      const s = new Set(parser.samples)\n      return lines\n        .slice(1)\n        .map(line => {\n          const cols = line.split('\\t')\n          return {\n            name: cols[0]!,\n            ...Object.fromEntries(\n              // force col 0 to be called name\n              cols.slice(1).map((c, idx) => [header[idx + 1]!, c] as const),\n            ),\n          }\n        })\n        .filter(f => s.has(f.name))\n    }\n  }\n\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["VcfTabixAdapter","BaseFeatureDataAdapter","configurePre","_opts","vcfGzLocation","this","getConf","location","indexType","filehandle","openLocation","pluginManager","isCSI","vcf","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","parser","VcfParser","header","getHeader","configurePre2","configured","catch","e","configure","opts","statusCallback","updateStatus","getRefNames","getReferenceSequenceNames","getFeatures","query","ObservableCreate","async","refName","start","end","getLines","lineCallback","line","fileOffset","observer","next","VcfFeature","variant","parseLine","id","complete","stopToken","getSources","conf","uri","samples","map","name","lines","fetchAndMaybeUnzipText","split","s","Set","slice","cols","Object","fromEntries","c","idx","filter","f","has","freeResources"],"sourceRoot":""}