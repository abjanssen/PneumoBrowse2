{"version":3,"file":"static/js/2018.8a0d65c2.chunk.js","mappings":"6PAeA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAaC,IAAS,CACtCC,MAAO,CACLC,OAAQF,EAAMG,UACdC,QAASJ,EAAMG,WAEjBE,OAAQ,CACNC,UAAW,GACXC,aAAc,IACdC,QAAS,YAKb,SAASC,EAAiBC,GACxB,OAAOC,EAAAA,WACH,CACEC,UAAWC,OAAOC,QAAQ,YAAYC,SAASC,eAAeN,GAC9DO,aAAc,sBAEhBC,EAAAA,EAAAA,mBAAkB,CAAEC,KAAMT,GAChC,CAuDA,MAkFA,GAlFoCU,EAAAA,EAAAA,UAAS,UAAU,MACrDC,IAIA,MAAM,QAAEC,GAAYxB,KACbyB,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,KACxBC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,gBAAeG,KAAKC,OAC/D,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,UAAWV,EAAQrB,MAAMgC,SAAA,EAC9BH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wDACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iFAKNC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,WAAS,EACTC,WAAS,EACTC,KAAM,GACNC,MAAOhB,EACPiB,YAAY,sDACZC,QAAQ,WACRC,SAAUC,IACRnB,EAAOmB,EAAMC,OAAOL,WAGxBT,EAAAA,EAAAA,MAACe,EAAAA,EAAM,CAACJ,QAAQ,WAAWK,UAAU,QAAOb,SAAA,CAAC,mCAE3CC,EAAAA,EAAAA,KAAA,SACEa,KAAK,OACLC,QAAM,EACNC,UAAQ,EACRP,SAAUA,EAAGE,aACXpB,EACE0B,KAAKC,UACH,IAAKP,EAAOQ,OAAS,IAAKC,IAAI3C,IAAQ,CACpCqC,KAAM,gBACNO,eAAgB7C,EAAiBC,GACjC6C,OAAQ7C,EAAK8C,QAEf,KACA,WAMVtB,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRI,MAAOb,EACP+B,WAAW,aACXf,SAAUC,IACRhB,EAAagB,EAAMC,OAAOL,WAG9BL,EAAAA,EAAAA,KAACW,EAAAA,EAAM,CACLJ,QAAQ,YACRT,UAAWV,EAAQjB,OACnBqD,QAASA,MAhHjB,UAAkB,UAChBhC,EAAS,IACTH,EAAG,MACHF,IAMA,MAAMsC,GAAUC,EAAAA,EAAAA,YAAWvC,GAC3B,IACE,MAAMwC,EAAU,CACd,GAAGnC,EAAUoC,cAAcC,WAAW,IAAK,QAAQnC,KAAKC,QACxD8B,EAAQK,UAAY,GAAK,iBACzBC,KAAK,IAGP,IAAIC,EACJ,IACEA,EAAUhB,KAAKiB,MAAM5C,EACvB,CAAE,MAAO6C,GACPF,EAAU3C,EACP8C,MAAM,cACNhB,IAAIiB,GAAKA,EAAEC,QACXC,OAAOF,KAAOA,EACnB,CACA,MAAMG,EACkB,iBAAfP,EAAQ,GAAkB,CAAEA,WAAY,CAAEQ,YAAaR,IAE5DS,EAAAA,EAAAA,wBAAuBhB,KACzBA,EAAQiB,aAAa,CACnBf,UACAd,KAAM,yBACNS,KAAM9B,EACNmD,cAAe,CAACxD,EAAMyD,UACtBC,QAAS,CACPhC,KAAM,wBACH0B,KAIPpD,EAAM2D,MAAMC,UAAUpB,IAExBxC,EAAM6D,aACFC,EAAAA,EAAAA,2BAA0BxB,IAC5BA,EAAQyB,WAAW/D,EAEvB,CAAE,MAAO+C,GACPiB,QAAQC,MAAMlB,GACdT,EAAQ4B,YAAY,GAAGnB,IAAKA,EAC9B,CACF,CA8DUoB,CAAS,CAAE9D,YAAWH,MAAKF,WAC3BY,SACH,YAGDC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,wBACHH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,EACEH,EAAAA,EAAAA,MAAA,MAAAG,SAAA,CAAI,6FAEoB,KACtBC,EAAAA,EAAAA,KAAA,QAAAD,SAAO,4HAAkI,IAAI,oDAG/IC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,yHAOZ,E","sources":["../../../plugins/wiggle/src/MultiWiggleAddTrackWorkflow/AddTrackWorkflow.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport {\n  getSession,\n  isElectron,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n} from '@jbrowse/core/util'\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks'\nimport { Button, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '@jbrowse/plugin-data-management'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    margin: theme.spacing(),\n    padding: theme.spacing(),\n  },\n  submit: {\n    marginTop: 25,\n    marginBottom: 100,\n    display: 'block',\n  },\n}))\n\n// on electron, use path to LocalFileLocation, on web, use the BlobLocation\nfunction makeFileLocation(file: File) {\n  return isElectron\n    ? {\n        localPath: window.require('electron').webUtils.getPathForFile(file),\n        locationType: 'LocalPathLocation',\n      }\n    : storeBlobLocation({ blob: file })\n}\n\nfunction doSubmit({\n  trackName,\n  val,\n  model,\n}: {\n  val: string\n  trackName: string\n  model: AddTrackModel\n}) {\n  const session = getSession(model)\n  try {\n    const trackId = [\n      `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n      session.adminMode ? '' : '-sessionTrack',\n    ].join('')\n\n    // allow list of bigwigs in JSON format or line-by-line\n    let bigWigs: unknown[]\n    try {\n      bigWigs = JSON.parse(val)\n    } catch (e) {\n      bigWigs = val\n        .split(/\\n|\\r\\n|\\r/)\n        .map(f => f.trim())\n        .filter(f => !!f)\n    }\n    const obj =\n      typeof bigWigs[0] === 'string' ? { bigWigs } : { subadapters: bigWigs }\n\n    if (isSessionWithAddTracks(session)) {\n      session.addTrackConf({\n        trackId,\n        type: 'MultiQuantitativeTrack',\n        name: trackName,\n        assemblyNames: [model.assembly],\n        adapter: {\n          type: 'MultiWiggleAdapter',\n          ...obj,\n        },\n      })\n\n      model.view?.showTrack(trackId)\n    }\n    model.clearData()\n    if (isSessionModelWithWidgets(session)) {\n      session.hideWidget(model)\n    }\n  } catch (e) {\n    console.error(e)\n    session.notifyError(`${e}`, e)\n  }\n}\n\nconst MultiWiggleAddTrackWorkflow = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`)\n  return (\n    <Paper className={classes.paper}>\n      <ul>\n        <li>Enter list of URLs for bigwig files in the textbox</li>\n        <li>\n          Or, use the button below the text box to select files from your\n          computer\n        </li>\n      </ul>\n      <TextField\n        multiline\n        fullWidth\n        rows={10}\n        value={val}\n        placeholder=\"Paste list of URLs here, or use file selector below\"\n        variant=\"outlined\"\n        onChange={event => {\n          setVal(event.target.value)\n        }}\n      />\n      <Button variant=\"outlined\" component=\"label\">\n        Choose Files from your computer\n        <input\n          type=\"file\"\n          hidden\n          multiple\n          onChange={({ target }) => {\n            setVal(\n              JSON.stringify(\n                [...(target.files || [])].map(file => ({\n                  type: 'BigWigAdapter',\n                  bigWigLocation: makeFileLocation(file),\n                  source: file.name,\n                })),\n                null,\n                2,\n              ),\n            )\n          }}\n        />\n      </Button>\n      <TextField\n        value={trackName}\n        helperText=\"Track name\"\n        onChange={event => {\n          setTrackName(event.target.value)\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        className={classes.submit}\n        onClick={() => {\n          doSubmit({ trackName, val, model })\n        }}\n      >\n        Submit\n      </Button>\n      <p>Additional notes: </p>\n      <ul>\n        <li>\n          The list of bigwig files in the text box can be a list of URLs, or a\n          list of elements like{' '}\n          <code>{`[{\"type\":\"BigWigAdapter\",\"bigWigLocation\":{\"uri\":\"http://host/file.bw\"}, \"color\":\"green\",\"source\":\"name for subtrack\"}]`}</code>{' '}\n          to apply e.g. the color attribute to the view\n        </li>\n        <li>\n          Adding local files will update the textbox with JSON contents that are\n          ready to submit with the \"Submit\" button\n        </li>\n      </ul>\n    </Paper>\n  )\n})\n\nexport default MultiWiggleAddTrackWorkflow\n"],"names":["useStyles","makeStyles","theme","paper","margin","spacing","padding","submit","marginTop","marginBottom","display","makeFileLocation","file","isElectron","localPath","window","require","webUtils","getPathForFile","locationType","storeBlobLocation","blob","observer","model","classes","val","setVal","useState","trackName","setTrackName","Date","now","_jsxs","Paper","className","children","_jsx","TextField","multiline","fullWidth","rows","value","placeholder","variant","onChange","event","target","Button","component","type","hidden","multiple","JSON","stringify","files","map","bigWigLocation","source","name","helperText","onClick","session","getSession","trackId","toLowerCase","replaceAll","adminMode","join","bigWigs","parse","e","split","f","trim","filter","obj","subadapters","isSessionWithAddTracks","addTrackConf","assemblyNames","assembly","adapter","view","showTrack","clearData","isSessionModelWithWidgets","hideWidget","console","error","notifyError","doSubmit"],"sourceRoot":""}