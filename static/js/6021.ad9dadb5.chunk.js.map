{"version":3,"file":"static/js/6021.ad9dadb5.chunk.js","mappings":"iOAWA,MAAMA,EAAMC,GAAcA,EAAEC,eAAe,SAMrCC,GAAkBC,EAAAA,EAAAA,aACtB,UAA0B,MAAEC,EAAK,QAAEC,GAAWC,GAC5C,MAAMC,EAAQF,EAAQG,IAAI,SACpBC,EAAMJ,EAAQG,IAAI,OAClBE,EAAUL,EAAQG,IAAI,WACtBG,EAAQJ,IAAUE,EAAMV,EAAGQ,GAAS,GAAGR,EAAGQ,OAAWR,EAAGU,KACxDG,EAAUP,EAAQG,IAAI,WAGtBK,EAASR,EAAQG,IAAI,UACrBM,EAAUT,EAAQG,IAAI,WACtBO,EAAMC,OAAOC,YAAYb,EAAMQ,QAAQM,KAAIC,GAAO,CAACA,EAAIC,KAAMD,MAEnE,OACEE,EAAAA,EAAAA,MAAA,OAAKf,IAAKA,EAAIgB,SAAA,CACX,CAACZ,EAASC,GAAOY,QAAOC,KAAOA,IAAGC,KAAK,MACxCC,EAAAA,EAAAA,KAAA,SACCd,GACCS,EAAAA,EAAAA,MAAA,SAAAC,SAAA,EACEI,EAAAA,EAAAA,KAAA,SAAAJ,UACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,WACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,YACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,gBAGRI,EAAAA,EAAAA,KAAA,SAAAJ,SACGN,OAAOW,QAAQf,GAASM,KAAI,EAAEL,EAAQe,MACrCP,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,UACEI,EAAAA,EAAAA,KAAA,OACEG,MAAO,CACLC,MAAO,GACPC,OAAQ,GACRC,WAAYjB,EAAIF,GAASoB,YAI/BP,EAAAA,EAAAA,KAAA,MAAAJ,SAAKT,KACLa,EAAAA,EAAAA,KAAA,MAAAJ,UAAKY,EAAAA,EAAAA,KAAIN,EAAKO,WAXPtB,WAiBfQ,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CACGT,EAAQ,IACRC,EACG,QAAOoB,EAAAA,EAAAA,KAAI7B,EAAQG,IAAI,qBAAoB0B,EAAAA,EAAAA,KACzC7B,EAAQG,IAAI,kBACL0B,EAAAA,EAAAA,KAAI7B,EAAQG,IAAI,gBACzB0B,EAAAA,EAAAA,KAAI7B,EAAQG,IAAI,eAK9B,IAiBF,GAZsB4B,EAAAA,EAAAA,WACnBC,IAQQX,EAAAA,EAAAA,KAACY,EAAAA,EAAO,CAACC,YAAU,EAACrC,gBAAiBA,KAAqBmC,K","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/Tooltip.tsx"],"sourcesContent":["import { forwardRef } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport Tooltip from '../../Tooltip'\nimport { toP } from '../../util'\n\nimport type { TooltipContentsComponent } from '../../Tooltip'\nimport type { Source } from '../../util'\nimport type { Feature } from '@jbrowse/core/util'\n\nconst en = (n: number) => n.toLocaleString('en-US')\n\ninterface Props {\n  model: { sources: Source[] }\n  feature: Feature\n}\nconst TooltipContents = forwardRef<HTMLDivElement, Props>(\n  function TooltipContents2({ model, feature }, ref) {\n    const start = feature.get('start')\n    const end = feature.get('end')\n    const refName = feature.get('refName')\n    const coord = start === end ? en(start) : `${en(start)}..${en(end)}`\n    const sources = feature.get('sources') as\n      | Record<string, { score: number }>\n      | undefined\n    const source = feature.get('source')\n    const summary = feature.get('summary')\n    const obj = Object.fromEntries(model.sources.map(ent => [ent.name, ent]))\n\n    return (\n      <div ref={ref}>\n        {[refName, coord].filter(f => !!f).join(':')}\n        <br />\n        {sources ? (\n          <table>\n            <thead>\n              <tr>\n                <th>color</th>\n                <th>source</th>\n                <th>score</th>\n              </tr>\n            </thead>\n            <tbody>\n              {Object.entries(sources).map(([source, data]) => (\n                <tr key={source}>\n                  <td>\n                    <div\n                      style={{\n                        width: 16,\n                        height: 16,\n                        background: obj[source]!.color,\n                      }}\n                    ></div>\n                  </td>\n                  <td>{source}</td>\n                  <td>{toP(data.score)}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        ) : (\n          <span>\n            {source}{' '}\n            {summary\n              ? `min:${toP(feature.get('minScore'))} avg:${toP(\n                  feature.get('score'),\n                )} max:${toP(feature.get('maxScore'))}`\n              : toP(feature.get('score'))}\n          </span>\n        )}\n      </div>\n    )\n  },\n)\n\ntype Coord = [number, number]\n\nconst WiggleTooltip = observer(\n  (props: {\n    model: { featureUnderMouse: Feature; sources: Source[]; rowHeight: number }\n    height: number\n    offsetMouseCoord: Coord\n    clientMouseCoord: Coord\n    clientRect?: DOMRect\n    TooltipContents?: TooltipContentsComponent\n  }) => {\n    return <Tooltip useClientY TooltipContents={TooltipContents} {...props} />\n  },\n)\nexport default WiggleTooltip\n\nexport { default as Tooltip } from '../../Tooltip'\n"],"names":["en","n","toLocaleString","TooltipContents","forwardRef","model","feature","ref","start","get","end","refName","coord","sources","source","summary","obj","Object","fromEntries","map","ent","name","_jsxs","children","filter","f","join","_jsx","entries","data","style","width","height","background","color","toP","score","observer","props","Tooltip","useClientY"],"sourceRoot":""}