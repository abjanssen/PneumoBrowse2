{"version":3,"file":"static/js/8797.92c2d67b.chunk.js","mappings":"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","sources":["../../../plugins/legacy-jbrowse/src/JBrowse1TextSearchAdapter/HttpMap.ts","../../../plugins/legacy-jbrowse/src/JBrowse1TextSearchAdapter/JBrowse1TextSearchAdapter.ts"],"sourcesContent":["/**\n * Helper class allows reading names index generated in JBrowse1\n * Adapted from https://github.com/GMOD/jbrowse/blob/master/src/JBrowse/Store/Hash.js\n */\n\nimport crc32 from 'crc/crc32'\n\nexport default class HttpMap {\n  url: string\n\n  constructor(args: { url: string }) {\n    // make sure url has a trailing slash\n    this.url = args.url.endsWith('/') ? args.url : `${args.url}/`\n  }\n\n  /**\n   * loads meta.json file from names directory and reads number of hash_bits used\n   */\n  async readMeta() {\n    const meta = await this.loadFile('meta.json')\n    const { compress, track_names: tracks } = meta\n    const hashHexCharacters = Math.ceil(meta.hash_bits / 4)\n    return { hashHexCharacters, compress, tracks }\n  }\n\n  async getHashHexCharacters() {\n    const meta = await this.readMeta()\n    return meta.hashHexCharacters\n  }\n\n  async getCompress() {\n    const meta = await this.readMeta()\n    return meta.compress\n  }\n\n  async getTrackNames() {\n    const meta = await this.readMeta()\n    return meta.tracks\n  }\n\n  /**\n   * Returns contents of a bucket given a key\n   * @param key - string\n   */\n  async get(key: string) {\n    const bucket = await this.getBucket(key)\n    return bucket[key]\n  }\n\n  /**\n   * Returns a bucket given a key\n   * @param key - string\n   */\n  async getBucket(key: string) {\n    const bucketIdent = this.hash(key)\n    const hexToDirPath = await this.hexToDirPath(bucketIdent)\n    return this.loadFile(hexToDirPath)\n  }\n\n  /**\n   * Loads a file using the url and provided id.\n   * Returns response object with contents of the file\n   * @param id - string\n   */\n  async loadFile(id: string) {\n    const response = await fetch(`${this.url}${id}`)\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status} ${response.statusText}`)\n    }\n    return response.json()\n  }\n\n  /**\n   * Returns the corresponding path of the file given a hex string\n   * @param hex - hex string\n   */\n  async hexToDirPath(hex: string) {\n    // zero-pad the hex string to be 8 chars if necessary\n    const hashHexCharacters = await this.getHashHexCharacters()\n    if (hashHexCharacters) {\n      const compress = await this.getCompress()\n      while (hex.length < 8) {\n        hex = `0${hex}`\n      }\n      hex = hex.slice(8 - hashHexCharacters)\n      const dirpath = []\n      for (let i = 0; i < hex.length; i += 3) {\n        dirpath.push(hex.slice(i, i + 3))\n      }\n      return `${dirpath.join('/')}.json${compress ? 'z' : ''}`\n    }\n    return ''\n  }\n\n  hash(data: string) {\n    return crc32(data).toString(16).toLowerCase().replace('-', 'n')\n  }\n}\n","import BaseResult from '@jbrowse/core/TextSearch/BaseResults'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\n\nimport HttpMap from './HttpMap'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type {\n  BaseTextSearchAdapter,\n  BaseTextSearchArgs,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport interface TooManyHits {\n  name: string\n  hitLimit: number\n}\n\ninterface SearchResults {\n  prefix: ({ name: string } | string)[]\n  exact: [string, number, string, string, number, number][]\n}\n\nexport type NamesIndexRecord = string | (string | number)[]\n\ntype IndexFile = Record<string, SearchResults>\n\n// Uses index built by generate-names.pl\nexport default class JBrowse1TextSearchAdapter\n  extends BaseAdapter\n  implements BaseTextSearchAdapter\n{\n  httpMap: HttpMap\n\n  tracksNames?: string[]\n\n  constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const namesIndex = readConfObject(config, 'namesIndexLocation')\n    const { baseUri, uri } = namesIndex\n    this.httpMap = new HttpMap({\n      url: baseUri ? new URL(uri, baseUri).href : uri,\n    })\n  }\n\n  /**\n   * Returns the contents of the file containing the query if it exists\n   * else it returns empty\n   * @param query - string query\n   */\n  async loadIndexFile(query: string): Promise<IndexFile> {\n    return this.httpMap.getBucket(query)\n  }\n\n  async searchIndex(args: BaseTextSearchArgs) {\n    const { searchType, queryString } = args\n    const tracks = this.tracksNames || (await this.httpMap.getTrackNames())\n    const str = queryString.toLowerCase()\n    const entries = await this.loadIndexFile(str)\n    return entries[str]\n      ? this.formatResults(entries[str], tracks, searchType)\n      : []\n  }\n  formatResults(results: SearchResults, tracks: string[], searchType?: string) {\n    return [\n      ...(searchType === 'exact'\n        ? []\n        : results.prefix.map(\n            result =>\n              new BaseResult({\n                label: typeof result === 'object' ? result.name : result,\n                matchedAttribute: 'name',\n                matchedObject: { result: result },\n              }),\n          )),\n      ...results.exact.map(result => {\n        const name = result[0]\n        const trackIndex = result[1]\n        const refName = result[3]\n        const start = result[4]\n        const end = result[5]\n        const locstring = `${refName || name}:${start}-${end}`\n        return new BaseResult({\n          locString: locstring,\n          label: name,\n          matchedAttribute: 'name',\n          matchedObject: result,\n          trackId: tracks[trackIndex],\n        })\n      }),\n    ].filter(result => result.getLabel() !== 'too many matches')\n  }\n}\n"],"names":["HttpMap","constructor","args","this","url","endsWith","readMeta","meta","loadFile","compress","track_names","tracks","hashHexCharacters","Math","ceil","hash_bits","getHashHexCharacters","getCompress","getTrackNames","get","key","getBucket","bucketIdent","hash","hexToDirPath","id","response","fetch","ok","Error","status","statusText","json","hex","length","slice","dirpath","i","push","join","data","crc32","toString","toLowerCase","replace","JBrowse1TextSearchAdapter","BaseAdapter","config","getSubAdapter","pluginManager","super","namesIndex","readConfObject","baseUri","uri","httpMap","URL","href","loadIndexFile","query","searchIndex","searchType","queryString","tracksNames","str","entries","formatResults","results","prefix","map","result","BaseResult","label","name","matchedAttribute","matchedObject","exact","trackIndex","locstring","locString","trackId","filter","getLabel"],"sourceRoot":""}