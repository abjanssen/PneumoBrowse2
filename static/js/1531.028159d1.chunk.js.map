{"version":3,"file":"static/js/1531.028159d1.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/RectBg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/LegendItem.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ColorLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/FullHeightScaleBar.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ScoreLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/IndividualScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/YScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/renderSvg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import { getFillProps } from '@jbrowse/core/util'\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} {...getFillProps(color)} />\n}\n\nexport default RectBg\n","import RectBg from './RectBg'\n\nimport type { Source } from '../../util'\nimport type { WiggleDisplayModel } from '../model'\n\nconst LegendItem = function ({\n  source,\n  idx,\n  rowHeight,\n  labelWidth,\n  model,\n  exportSVG,\n}: {\n  source: Source\n  idx: number\n  rowHeight: number\n  labelWidth: number\n  model: WiggleDisplayModel\n  exportSVG?: boolean\n}) {\n  const boxHeight = Math.min(20, rowHeight)\n  const {\n    needsCustomLegend,\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n  return (\n    <>\n      {needsFullHeightScalebar ? null : (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={legendWidth}\n          height={boxHeight}\n        />\n      )}\n      {source.color ? (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={colorBoxWidth}\n          height={needsCustomLegend ? rowHeight : boxHeight}\n          color={source.color}\n        />\n      ) : null}\n      {canDisplayLabel ? (\n        <text\n          y={idx * rowHeight + 13}\n          x={extraOffset + colorBoxWidth + 2}\n          fontSize={svgFontSize}\n        >\n          {source.name}\n        </text>\n      ) : null}\n    </>\n  )\n}\n\nexport default LegendItem\n","import { observer } from 'mobx-react'\n\nimport LegendItem from './LegendItem'\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  exportSVG?: boolean\n}) {\n  const {\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n    labelWidth,\n  } = model\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => (\n        <LegendItem\n          key={`${source.name}-${idx}`}\n          source={source}\n          idx={idx}\n          model={model}\n          rowHeight={rowHeight}\n          exportSVG={exportSVG}\n          labelWidth={labelWidth}\n        />\n      ))}\n    </>\n  ) : null\n})\n\nexport default ColorLegend\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport { getOffset } from './util'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst FullHeightScaleBar = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { labelWidth } = model\n  const { width: viewWidth } = getContainingView(model) as LinearGenomeViewModel\n  return (\n    <>\n      <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n        <YScaleBar model={model} orientation={orientation} />\n      </g>\n      <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n        <ColorLegend exportSVG={exportSVG} model={model} rowHeight={12} />\n      </g>\n    </>\n  )\n})\n\nexport default FullHeightScaleBar\n","import { getContainingView, measureText } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend = `[${ticks?.values[0]}-${ticks?.values[1]}]${scaleType === 'log' ? ' (log scale)' : ''}`\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nexport default ScoreLegend\n","import { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport ScoreLegend from './ScoreLegend'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst IndividualScaleBars = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const {\n    sources,\n    rowHeight,\n    rowHeightTooSmallForScalebar,\n    needsCustomLegend,\n    ticks,\n  } = model\n\n  return sources?.length ? (\n    <>\n      <ColorLegend\n        exportSVG={exportSVG}\n        model={model}\n        rowHeight={model.rowHeight}\n      />\n\n      {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n        <ScoreLegend model={model} />\n      ) : (\n        sources.map((_source, idx) => (\n          <g\n            transform={`translate(0 ${rowHeight * idx})`}\n            key={`${JSON.stringify(ticks)}-${idx}`}\n          >\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n        ))\n      )}\n    </>\n  ) : null\n})\n\nexport default IndividualScaleBars\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport FullHeightScaleBar from './FullHeightScaleBar'\nimport IndividualScaleBars from './IndividualScaleBars'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  const { height } = model\n  return exportSVG ? (\n    children\n  ) : (\n    <svg\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none',\n        height,\n        width: getContainingView(model).width,\n      }}\n    >\n      {children}\n    </svg>\n  )\n})\n\nexport const YScaleBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const { showSidebar, stats, needsFullHeightScalebar, sources } = model\n  return stats && sources ? (\n    <Wrapper {...props}>\n      {showSidebar ? (\n        needsFullHeightScalebar ? (\n          <FullHeightScaleBar\n            model={model}\n            orientation={orientation}\n            exportSVG={exportSVG}\n          />\n        ) : (\n          <IndividualScaleBars\n            model={model}\n            orientation={orientation}\n            exportSVG={exportSVG}\n          />\n        )\n      ) : null}\n    </Wrapper>\n  ) : null\n})\n\nexport default YScaleBars\n","import { getContainingView } from '@jbrowse/core/util'\nimport { when } from 'mobx'\n\nimport YScaleBars from './components/YScaleBars'\n\nimport type { WiggleDisplayModel } from './model'\nimport type {\n  ExportSvgDisplayOptions,\n  LinearGenomeViewModel,\n} from '@jbrowse/plugin-linear-genome-view'\n\nexport async function renderSvg(\n  self: WiggleDisplayModel,\n  opts: ExportSvgDisplayOptions,\n  superRenderSvg: (opts: ExportSvgDisplayOptions) => Promise<React.ReactNode>,\n) {\n  await when(() => !!self.stats && !!self.regionCannotBeRenderedText)\n  const { offsetPx } = getContainingView(self) as LinearGenomeViewModel\n  return (\n    <>\n      <g>{await superRenderSvg(opts)}</g>\n      <g transform={`translate(${Math.max(-offsetPx, 0)})`}>\n        <YScaleBars model={self} orientation=\"left\" exportSVG />\n      </g>\n    </>\n  )\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport type { GridRowId } from '@mui/x-data-grid'\n\nexport function moveUp(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["props","$","_c","color","t0","undefined","t1","t2","getFillProps","_jsx","source","idx","rowHeight","labelWidth","model","exportSVG","boxHeight","Math","min","needsCustomLegend","graphType","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","svgFontSize","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","t3","t4","RectBg","y","height","name","x","children","_jsxs","_Fragment","observer","sources","width","length","map","LegendItem","orientation","viewWidth","getContainingView","transform","getOffset","YScaleBar","ColorLegend","ticks","scaleType","legend","values","len","measureText","xpos","ScoreLegend","_source","JSON","stringify","Wrapper","style","position","top","left","pointerEvents","showSidebar","stats","FullHeightScaleBar","IndividualScaleBars","async","renderSvg","self","opts","superRenderSvg","when","regionCannotBeRenderedText","offsetPx","max","YScaleBars","moveUp","arr","sel","by","idxs","l","findIndex","v","sort","a","b","lastIdx","old","splice","moveDown","trackLabelFontSize","prefersOffset","trackLabels","track","getContainingTrack","trackName","getConf"],"sourceRoot":""}