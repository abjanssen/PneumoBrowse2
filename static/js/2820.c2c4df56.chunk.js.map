{"version":3,"file":"static/js/2820.c2c4df56.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/DeltaAdapter/util.ts","../../../plugins/comparative-adapters/src/DeltaAdapter/DeltaAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["const decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\n/* paf2delta from paftools.js in the minimap2 repository, license reproduced below\n *\n * The MIT License\n *\n * Copyright (c) 2018-     Dana-Farber Cancer Institute\n *               2017-2018 Broad Institute, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nexport function paf_delta2paf(buffer: Buffer) {\n  let rname = ''\n  let qname = ''\n  let qs = 0\n  let qe = 0\n  let rs = 0\n  let re = 0\n  let strand = 0\n  let NM = 0\n  let cigar = [] as number[]\n  let x = 0\n  let y = 0\n  let seen_gt = false\n\n  const records = []\n  const regex = new RegExp(/^>(\\S+)\\s+(\\S+)\\s+(\\d+)\\s+(\\d+)/)\n\n  let blockStart = 0\n  let i = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    blockStart = n + 1\n    i++\n    if (line) {\n      const m = regex.exec(line)\n      if (m !== null) {\n        rname = m[1]!\n        qname = m[2]!\n        seen_gt = true\n        continue\n      }\n      if (!seen_gt) {\n        continue\n      }\n      const t = line.split(' ')\n      if (t.length === 7) {\n        const t0 = +t[0]!\n        const t1 = +t[1]!\n        const t2 = +t[2]!\n        const t3 = +t[3]!\n        const t4 = +t[4]!\n        strand = (t0 < t1 && t2 < t3) || (t0 > t1 && t2 > t3) ? 1 : -1\n        rs = +(t0 < t1 ? t0 : t1) - 1\n        re = +(t1 > t0 ? t1 : t0)\n        qs = +(t2 < t3 ? t2 : t3) - 1\n        qe = +(t3 > t2 ? t3 : t2)\n        x = y = 0\n        NM = t4\n        cigar = []\n      } else if (t.length === 1) {\n        const d = +t[0]!\n        if (d === 0) {\n          let blen = 0\n          const cigar_str = []\n\n          if (re - rs - x !== qe - qs - y) {\n            throw new Error(`inconsistent alignment on line ${i}`)\n          }\n          cigar.push((re - rs - x) << 4)\n          for (const entry of cigar) {\n            const rlen = entry >> 4\n            blen += rlen\n            cigar_str.push(rlen + 'MID'.charAt(cigar[i]! & 0xf))\n          }\n\n          records.push({\n            qname,\n            qstart: qs,\n            qend: qe,\n            tname: rname,\n            tstart: rs,\n            tend: re,\n            strand,\n            extra: {\n              numMatches: blen - NM,\n              blockLen: blen,\n              mappingQual: 0,\n              NM,\n              cg: cigar_str.join(''),\n            },\n          })\n        } else if (d > 0) {\n          const l = d - 1\n          x += l + 1\n          y += l\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n\n          if (cigar.length > 0 && (cigar[cigar.length - 1]! & 0xf) === 2) {\n            cigar[cigar.length - 1]! += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 2)\n          } // deletion\n        } else {\n          const l = -d - 1\n          x += l\n          y += l + 1\n          if (l > 0) {\n            cigar.push(l << 4)\n          }\n\n          if (cigar.length > 0 && (cigar[cigar.length - 1]! & 0xf) === 1) {\n            cigar[cigar.length - 1]! += 1 << 4\n          } else {\n            cigar.push((1 << 4) | 1)\n          } // insertion\n        }\n      }\n    }\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_delta2paf } from './util'\nimport { isGzip } from '@jbrowse/core/util'\n\nexport default class DeltaAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('deltaLocation'), this.pluginManager)\n    const buffer = (await loc.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return paf_delta2paf(buf)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature, isGzip } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from '../SyntenyFeature'\nimport {\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  parseLineByLine,\n} from '../util'\nimport { getWeightedMeans, PAFRecord } from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buffer = (await pafLocation.readFile(opts)) as Buffer\n    const buf = isGzip(buffer) ? await unzip(buffer) : buffer\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures\n    // so is not really that important, and has to be true or else\n    // getFeatures is never called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      const index = assemblyNames.indexOf(assemblyName)\n\n      // if the getFeatures::query is on the query assembly, flip orientation\n      // of data\n      const flip = index === 0\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]!\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n\n        if (flip) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport { isGzip } from '@jbrowse/core/util'\n\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buffer = (await file.readFile(opts)) as Buffer\n  return new TextDecoder('utf8', { fatal: true }).decode(\n    isGzip(buffer) ? await unzip(buffer) : buffer,\n  )\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\nexport function parseLineByLine(\n  buffer: Buffer,\n  cb: (line: string) => PAFRecord,\n) {\n  let blockStart = 0\n  const entries = []\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = (decoder?.decode(b) || b.toString()).trim()\n    if (line) {\n      entries.push(cb(line))\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart!,\n    tend: +tend!,\n    qname,\n    qstart: +qstart!,\n    qend: +qend!,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches!,\n      blockLen: +blockLen!,\n      mappingQual: +mappingQual!,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["decoder","TextDecoder","undefined","DeltaAdapter","PAFAdapter","setupPre","opts","loc","openLocation","this","getConf","pluginManager","buffer","readFile","rname","qname","qs","qe","rs","re","strand","NM","cigar","x","y","seen_gt","records","regex","RegExp","blockStart","i","length","n","indexOf","b","subarray","line","decode","toString","trim","m","exec","t","split","t0","t1","t2","t3","d","blen","cigar_str","Error","push","entry","rlen","charAt","qstart","qend","tname","tstart","tend","extra","numMatches","blockLen","mappingQual","cg","join","l","paf_delta2paf","isGzip","unzip","weightedMean","tuples","valueSum","weightSum","reduce","value","weight","parseCigar","MismatchParser","BaseFeatureDataAdapter","setup","setupP","catch","e","pm","pafLocation","buf","parseLineByLine","parsePAFLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","r1","regions","assemblyName","feats","idx","set","Set","feat","add","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","zip","meanScore","min","max","Math","getWeightedMeans","start","end","refName","qref","index","flip","observer","complete","r","mateName","mateStart","mateEnd","doesIntersect2","rest","CIGAR","flipCigar","swapIndelCigar","next","SyntenyFeature","uniqueId","type","syntenyId","identity","mate","freeResources","getMismatches","SimpleFeature","get","arg","super","parseBed","text","Map","filter","f","startsWith","name","score","file","fatal","a","cb","fields","field","slice","arr","op","replaceAll"],"sourceRoot":""}