{"version":3,"file":"static/js/6800.84851a2c.chunk.js","mappings":"kNASe,MAAMA,UAAwBC,EAAAA,uBAO3C,kBAAcC,GACZ,MAAMC,EAAKC,KAAKC,cACVC,EAAqBF,KAAKG,QAAQ,sBAClCC,EAAWJ,KAAKG,QAAQ,CAAC,QAAS,aAClCE,EAAYL,KAAKG,QAAQ,CAAC,QAAS,cAEnCG,GAAaC,EAAAA,EAAAA,cAAaL,EAAoBH,GAC9CS,EAAsB,QAAdH,EACRI,EAAW,IAAIC,EAAAA,GAAiB,CACpCJ,aACAK,cAAeH,GAAQD,EAAAA,EAAAA,cAAaH,EAAUL,QAAMa,EACpDC,cAAgBL,OAAqCI,GAA7BL,EAAAA,EAAAA,cAAaH,EAAUL,GAC/Ce,eAAgB,WAEZC,EAAcf,KAAKG,QAAQ,eAE3Ba,QAAeP,EAASQ,YAC9B,MAAO,CACLF,cACAN,WACAO,SAEJ,CAEA,eAAgBE,GAOd,OANKlB,KAAKmB,aACRnB,KAAKmB,WAAanB,KAAKF,eAAesB,OAAOC,IAE3C,MADArB,KAAKmB,gBAAaP,EACZS,CAAC,KAGJrB,KAAKmB,UACd,CAEA,cAAMG,GACJ,MAAM,SAAEb,EAAQ,YAAEM,SAAsBf,KAAKkB,YAC7C,GAAIH,EAAYQ,OACd,OAAOR,EAET,MAEMS,SAFef,EAASQ,aACVQ,MAAM,cAAcC,QAAOC,KAAOA,IACjCC,IAAI,GACzB,OAAOJ,GAASK,SAAS,MACrBL,EACGM,MAAM,GACNL,MAAM,MACNM,KAAIJ,GAAKA,EAAEK,cACdpB,CACN,CAEA,iBAAaqB,CAAYC,EAAoB,CAAC,GAC5C,MAAM,SAAEzB,SAAmBT,KAAKkB,YAChC,OAAOT,EAAS0B,0BAA0BD,EAC5C,CAEA,eAAMjB,GACJ,MAAM,SAAER,SAAmBT,KAAKkB,YAChC,OAAOT,EAASQ,WAClB,CAEOmB,WAAAA,CAAYC,EAAeH,EAAoB,CAAC,GACrD,OAAOI,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,SAAE9B,SAAmBT,KAAKkB,YAC1BsB,QAAa/B,EAASgC,eACtB,cAAEC,GAAkBF,EACpBG,EAASD,EAAcE,IAAM,EAC7BC,EAAWH,EAAcI,MAAQ,EACjCC,EAASL,EAAcM,IAAM,EAC7BC,EAAOJ,IAAaE,EACpBG,SAAelD,KAAKsB,aAAaQ,MAAMmB,EAAO,EAAI,IAAM,SACxDxC,EAAS0C,SACbd,EAAMe,QACNf,EAAMS,OAASG,GAAQ,EAAI,GAC3BZ,EAAMW,IACN,CACEK,aAAcA,CAACC,EAAMC,KACnB,MAAMC,EAAOF,EAAK7B,MAAM,MAClB2B,EAAUI,EAAKb,GACfG,GAASU,EAAKX,GACdG,IAAQC,EAAOH,EAAQ,EAAIU,EAAKT,IAChCU,EAAOD,EAAK1B,MAAMiB,EAAS,GACjC,IAAK,IAAIW,EAAI,EAAGA,EAAID,EAAKlC,OAAQmC,IAAK,CACpC,MAAMC,EAAW,GAAG3D,KAAK4D,MAAML,KAAcG,IACvCG,EAAQC,KAAKC,KAAKN,EAAKC,IACvBM,EAASd,EAAMQ,IAAM,MAAMA,IAC7BG,GACFI,EAASC,KACP,IAAIC,EAAAA,cAAc,CAChBP,GAAID,EACJS,KAAM,CACJhB,UACAN,QACAE,MACAa,QACAG,YAKV,MAEC9B,IAGP+B,EAASI,UAAU,GAEvB,CAEOC,aAAAA,GAAuB,E","sources":["../../../plugins/bed/src/BedGraphTabixAdapter/BedGraphTabixAdapter.ts"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class BedGraphAdapter extends BaseFeatureDataAdapter {\n  private configured?: Promise<{\n    bedGraph: TabixIndexedFile\n    header: string\n    columnNames: string[]\n  }>\n\n  private async configurePre() {\n    const pm = this.pluginManager\n    const bedGraphGzLocation = this.getConf('bedGraphGzLocation')\n    const location = this.getConf(['index', 'location'])\n    const indexType = this.getConf(['index', 'indexType'])\n\n    const filehandle = openLocation(bedGraphGzLocation, pm)\n    const isCSI = indexType === 'CSI'\n    const bedGraph = new TabixIndexedFile({\n      filehandle,\n      csiFilehandle: isCSI ? openLocation(location, pm) : undefined,\n      tbiFilehandle: !isCSI ? openLocation(location, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n    const columnNames = this.getConf('columnNames')\n\n    const header = await bedGraph.getHeader()\n    return {\n      columnNames,\n      bedGraph,\n      header,\n    }\n  }\n\n  protected async configure() {\n    if (!this.configured) {\n      this.configured = this.configurePre().catch((e: unknown) => {\n        this.configured = undefined\n        throw e\n      })\n    }\n    return this.configured\n  }\n\n  async getNames() {\n    const { bedGraph, columnNames } = await this.configure()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const header = await bedGraph.getHeader()\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(f => f.trim())\n      : undefined\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { bedGraph } = await this.configure()\n    return bedGraph.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    const { bedGraph } = await this.configure()\n    return bedGraph.getHeader()\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { bedGraph } = await this.configure()\n      const meta = await bedGraph.getMetadata()\n      const { columnNumbers } = meta\n      const colRef = columnNumbers.ref - 1\n      const colStart = columnNumbers.start - 1\n      const colEnd = columnNumbers.end - 1\n      const same = colStart === colEnd\n      const names = (await this.getNames())?.slice(same ? 2 : 3) || []\n      await bedGraph.getLines(\n        query.refName,\n        query.start + (same ? -1 : 0),\n        query.end,\n        {\n          lineCallback: (line, fileOffset) => {\n            const cols = line.split('\\t')\n            const refName = cols[colRef]!\n            const start = +cols[colStart]!\n            const end = +(same ? start + 1 : cols[colEnd]!)\n            const rest = cols.slice(colEnd + 1)\n            for (let j = 0; j < rest.length; j++) {\n              const uniqueId = `${this.id}-${fileOffset}-${j}`\n              const score = Math.abs(+rest[j]!)\n              const source = names[j] || `col${j}`\n              if (score) {\n                observer.next(\n                  new SimpleFeature({\n                    id: uniqueId,\n                    data: {\n                      refName,\n                      start,\n                      end,\n                      score,\n                      source,\n                    },\n                  }),\n                )\n              }\n            }\n          },\n          ...opts,\n        },\n      )\n      observer.complete()\n    })\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["BedGraphAdapter","BaseFeatureDataAdapter","configurePre","pm","this","pluginManager","bedGraphGzLocation","getConf","location","indexType","filehandle","openLocation","isCSI","bedGraph","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","columnNames","header","getHeader","configure","configured","catch","e","getNames","length","defline","split","filter","f","at","includes","slice","map","trim","getRefNames","opts","getReferenceSequenceNames","getFeatures","query","ObservableCreate","async","meta","getMetadata","columnNumbers","colRef","ref","colStart","start","colEnd","end","same","names","getLines","refName","lineCallback","line","fileOffset","cols","rest","j","uniqueId","id","score","Math","abs","source","observer","next","SimpleFeature","data","complete","freeResources"],"sourceRoot":""}