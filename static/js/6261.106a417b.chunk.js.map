{"version":3,"file":"static/js/6261.106a417b.chunk.js","mappings":"wWAEO,SAASA,GAAW,YACzBC,EAAW,UACXC,EAAS,UACTC,EAAS,aACTC,EAAY,kBACZC,EAAiB,aACjBC,EAAY,aACZC,IAUA,GAAoB,SAAhBN,EACF,MAAO,CACLO,KAAM,aACNC,YAAaL,EACbM,cAAeR,EACfS,eAAgBR,GAEb,GAAoB,SAAhBF,EACT,MAAO,CACLO,KAAM,iBACNI,YAAaR,EACbM,cAAeR,EACfS,eAAgBR,GAEb,GAAoB,WAAhBF,EACT,MAAO,CACLO,KAAM,eACNK,cAAeT,EACfM,cAAeR,EACfS,eAAgBR,GAEb,GAAoB,WAAhBF,EACT,MAAO,CACLO,KAAM,eACNM,cAAeV,EACfM,cAAeR,EACfS,eAAgBR,GAEb,GAAoB,aAAhBF,EACT,MAAO,CACLO,KAAM,uBACNO,sBAAuBX,EACvBE,eACAC,eACAS,cAAe,CAACd,EAAWC,IAExB,GAAoB,oBAAhBF,EACT,MAAO,CACLO,KAAM,6BACNS,4BAA6Bb,EAC7BE,eACAC,eACAS,cAAe,CAACd,EAAWC,IAExB,GAAoB,YAAhBF,EACT,MAAO,CACLO,KAAM,4BACNU,cAAed,EACfe,MAAO,CACLC,SAAUf,GAEZW,cAAe,CAACd,EAAWC,IAG7B,MAAM,IAAIkB,MACR,0BAA0BpB,mDAGhC,C,eCvDA,MAsRA,GAtRqCqB,EAAAA,EAAAA,WAAS,UAAU,MACtDC,EAAK,UACLrB,EAAS,UACTC,EAAS,YACTqB,IAOA,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IAC1BpB,EAAcqB,IAAmBD,EAAAA,EAAAA,aACjCrB,EAAcuB,IAAmBF,EAAAA,EAAAA,aACjCvB,EAAc0B,IAAmBH,EAAAA,EAAAA,aACjCtB,EAAmB0B,IAAwBJ,EAAAA,EAAAA,aAC3CK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAAOC,IAAYR,EAAAA,EAAAA,YACpBS,GCvCNC,EDuCyBjC,GCnCrBiC,EAAiBC,KAEfD,EAAiBE,WAEjBF,EAAiBG,UACnBC,EAVC,IACLJ,EDyCA,MAAMpC,EAAc+B,IAAUI,ECrBzB,SAAiBM,GACtB,MAAMC,EAAID,EAAIE,MAAM,KAAKC,MACzB,OAAOF,EAAI,IAAIA,IAAM,EACvB,CDkB2CG,CC7BpC,SAAiBV,GACtB,OAAOA,EAASW,SAAS,OAASX,EAASY,MAAM,GAAI,GAAKZ,CAC5D,CD2BmDa,CAAQb,IAAa,IAoDtE,OAlDAc,EAAAA,EAAAA,YAAU,KACR,IACE,GAAI9C,EAAc,CAChB,MAAM+C,EAAKf,EAAoBA,EC7B1BQ,MAAM,KAAK,GAAIA,MAAM,KAAK,GAAIA,MAAM,KAAKC,MD6BH,UACrCO,EAAU,GAAGD,KAAME,KAAKC,qBAC9BnB,OAASM,GAETlB,EAAMgC,0BAA0B/B,EAAa,CAC3ChB,KAAM,aACNwB,MAAO,CACLoB,UACAZ,KAAMW,EACNnC,cAAe,CAACb,EAAWD,GAC3BM,KAAM,eACNgD,QAASxD,EAAW,CAClBC,cACAC,UAAWuB,EAAOtB,EAAYD,EAC9BC,UAAWsB,EAAOvB,EAAYC,EAC9BC,eACAC,oBACAC,eACAC,mBAIR,CACF,CAAE,MAAOkD,GACPC,QAAQxB,MAAMuB,GACdtB,EAASsB,EACX,IACC,CACDhC,EACAF,EACAC,EACAY,EACAlC,EACAC,EACAG,EACAC,EACAH,EACAC,EACAJ,KAUA0D,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,MAAO,CAAEC,QAAS,IAAKC,SAAA,CAC3B7B,GAAQ8B,EAAAA,EAAAA,KAACC,EAAAA,aAAY,CAAC/B,MAAOA,IAAY,MAC1C8B,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAACL,MAAO,CAAEM,UAAW,UAAWJ,SAAC,iMAK5CC,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CACTpC,MAAO/B,EACPoE,SAAUC,IACRrC,EAASqC,EAAMC,OAAOvC,MAAM,EAC5B+B,UAEFC,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,WAAS,EAACC,eAAe,SAAQX,SACrC,CACC,OACA,SACA,OACA,SACA,WACA,kBACA,WACAY,KAAIC,IACJZ,EAAAA,EAAAA,KAACa,EAAAA,EAAgB,CAEf7C,MAAO4C,EACPE,SAASd,EAAAA,EAAAA,KAACe,EAAAA,EAAK,IACfC,MAAOJ,GAHFA,UAQbZ,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CAACC,WAAS,EAACC,eAAe,SAAQX,SACrB,SAAhB9D,GACe,SAAhBA,GACgB,WAAhBA,GACgB,WAAhBA,GACgB,YAAhBA,GACE0D,EAAAA,EAAAA,MAAA,OACEE,MAAO,CACLoB,QAAS,OACTC,cAAe,SACfC,IAAK,IACLpB,SAAA,EAEFC,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACX5C,KAAM,GAAGvC,aACToF,QAAM,EACNC,YAAY,GACZlE,SAAUhB,EACVmF,YAAaC,IACX1D,EAAgB0D,EAAI,KAGxB7B,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,wBAEHC,EAAAA,EAAAA,KAACyB,EAAAA,EAAO,CAACC,OAAO1B,EAAAA,EAAAA,KAAA,QAAAD,SAjEV,CAClB,OAAQ,8BACR,UAAW,8BACX,OAAQ,6BACR,SAAU,4BACV,SAAU,4BA4DqC9D,KAAqB8D,UACtDC,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,UAGbhC,EAAAA,EAAAA,MAAA,OACEE,MAAO,CACLoB,QAAS,OACTE,IAAK,IACLpB,SAAA,EAEFJ,EAAAA,EAAAA,MAAA,OACEE,MAAO,CACLoB,QAAS,OACTW,oBAAqB,UACrBT,IAAK,EACLU,WAAY,UACZ9B,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAItC,EAAOtB,EAAYD,OAEzB8D,EAAAA,EAAAA,KAAA,OAAAD,SAAK,oBACLC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAItC,EAAOvB,EAAYC,OAEzB6D,EAAAA,EAAAA,KAAA,OAAAD,SAAK,wBAEPC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,QAAQ,YACRC,QAASA,KACPtE,GAASD,EAAK,EACdsC,SACH,mBAMK,aAAV/B,GAAkC,oBAAVA,GAC1B2B,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEJ,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEoC,OAAQ,IAAKlC,SAAA,CAAC,YAChB/B,EAAM,uFACqB,KACrCgC,EAAAA,EAAAA,KAAA,KAAGkC,KAAK,kEAAiEnC,SAAC,oBAI5EJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACXC,QAAM,EACN7C,KAAMR,EACNZ,SAAUhB,EACVmF,YAAaC,IACX1D,EAAgB0D,EAAI,KAGxBxB,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACXC,QAAM,EACN7C,KAAK,8CACL8C,YAAY,GACZlE,SAAUd,EACViF,YAAaC,IACX3D,EAAgB2D,EAAI,KAGxBxB,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACXC,QAAM,EACN7C,KAAK,+CACL8C,YAAY,GACZlE,SAAUb,EACVgF,YAAaC,IACX5D,EAAgB4D,EAAI,QAI1B7B,EAAAA,EAAAA,MAAA,OACEE,MAAO,CACLoC,OAAQ,OACRhB,QAAS,OACTP,eAAgB,SAChBS,IAAK,IACLpB,SAAA,EAEFJ,EAAAA,EAAAA,MAAA,OACEE,MAAO,CACLoB,QAAS,OACTW,oBAAqB,UACrBT,IAAK,EACLU,WAAY,UACZ9B,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAItC,EAAOtB,EAAYD,OAEzB8D,EAAAA,EAAAA,KAAA,OAAAD,SAAK,mBACLC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAAA,KAAAD,SAAItC,EAAOvB,EAAYC,OAEzB6D,EAAAA,EAAAA,KAAA,OAAAD,SAAK,sBAEPC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLC,QAAQ,YACRC,QAASA,KACPtE,GAASD,EAAK,EACdsC,SACH,gBAKO,YAAV/B,GACF2B,EAAAA,EAAAA,MAAA,OAAKE,MAAO,CAAEoB,QAAS,QAASlB,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACX5C,KAAM,GAAGR,aACTsD,YAAY,GACZlE,SAAUhB,EACVmF,YAAaC,IACX1D,EAAgB0D,EAAI,OAI1BxB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACX5C,KAAM,GAAGR,mBACTsD,YAAY,GACZlE,SAAUf,EACVkF,YAAaC,IACXzD,EAAqByD,EAAI,UAMjCxB,EAAAA,EAAAA,KAACoB,EAAAA,aAAY,CACX5C,KAAMR,EAAQ,GAAGA,aAAmB,GACpCsD,YAAY,GACZlE,SAAUhB,EACVmF,YAAaC,IACX1D,EAAgB0D,EAAI,QAOlC,I,gDE9RA,MAgEA,GAhEmClE,EAAAA,EAAAA,WAAS,UAAU,MACpDC,EAAK,YACLC,EAAW,UACXtB,EAAS,UACTC,IAOA,MAAMgG,GAAUC,EAAAA,EAAAA,YAAW7E,IACrB,iCAAE8E,GAAqC9E,GACvC,OAAE+E,EAAS,GAAE,cAAEC,EAAgB,IAAOJ,EAEtCK,EADY,IAAIF,KAAWC,GACAE,QAAOC,IACtC,MAAM1F,GAAgB2F,EAAAA,EAAAA,gBAAeD,EAAO,iBAC5C,OACE1F,EAAc4F,SAAS1G,IACvBc,EAAc4F,SAASzG,IACvBuG,EAAMlG,KAAKoG,SAAS,UAAU,IAG5BC,EAAaL,EAAe,IAAIpD,SAAW,GAC3CT,EAAI0D,EAAiC7E,GACrCQ,EAAoB,kBAAZW,GAAGnC,KAA2BmC,EAAEX,WAAQS,EAOtD,OANAS,EAAAA,EAAAA,YAAU,KACR3B,EAAMgC,0BAA0B/B,EAAa,CAC3ChB,KAAM,gBACNwB,MAAO6E,GACP,GACD,CAAC1G,EAAWD,EAAW2G,EAAYrF,EAAaD,KAEjDoC,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAACC,MAAO,CAAEC,QAAS,IAAKC,SAAA,EAC5BC,EAAAA,EAAAA,KAACE,EAAAA,EAAU,CAAAH,SAAC,6FAKX/B,GAASwE,EAAe7B,KAAIhC,GAAKA,EAAES,UAASwD,SAAS5E,IACpDgC,EAAAA,EAAAA,KAAC8C,EAAAA,EAAM,CACL9E,MAAOA,EACPqC,SAAUC,IACR/C,EAAMgC,0BAA0B/B,EAAa,CAC3ChB,KAAM,gBACNwB,MAAOsC,EAAMC,OAAOvC,OACpB,EACF+B,SAEDyC,EAAe7B,KAAI+B,IAClB1C,EAAAA,EAAAA,KAAC+C,EAAAA,EAAQ,CAAqB/E,MAAO0E,EAAMtD,QAAQW,UAChDiD,EAAAA,EAAAA,cAAaN,EAAOP,IADRO,EAAMtD,cAMzBY,EAAAA,EAAAA,KAACC,EAAAA,aAAY,CACX/B,MAAO,+BAA+BhC,KAAaC,QAK7D,ICjEe,SAAS8G,GAA+B,MACrD1F,EAAK,UACLrB,EAAS,UACTC,EAAS,YACTqB,IAOA,MAAO0F,EAAQC,IAAaxF,EAAAA,EAAAA,UAAS,aAOrC,OALAuB,EAAAA,EAAAA,YAAU,KACO,SAAXgE,GACF3F,EAAMgC,0BAA0B/B,EAAa,CAAEhB,KAAM,QACvD,GACC,CAAC0G,EAAQ3F,EAAOC,KAEjBmC,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAACoD,EAAAA,EAAW,CAAArD,UACVJ,EAAAA,EAAAA,MAACS,EAAAA,EAAU,CACTiD,KAAG,EACHrF,MAAOkF,EACP,kBAAgB,cAChB7C,SAAUC,IACR6C,EAAU7C,EAAMC,OAAOvC,MAAM,EAC7B+B,SAAA,EAEFC,EAAAA,EAAAA,KAACa,EAAAA,EAAgB,CAAC7C,MAAM,OAAO8C,SAASd,EAAAA,EAAAA,KAACe,EAAAA,EAAK,IAAKC,MAAM,UACzDhB,EAAAA,EAAAA,KAACa,EAAAA,EAAgB,CACf7C,MAAM,YACN8C,SAASd,EAAAA,EAAAA,KAACe,EAAAA,EAAK,IACfC,MAAM,oBAERhB,EAAAA,EAAAA,KAACa,EAAAA,EAAgB,CACf7C,MAAM,SACN8C,SAASd,EAAAA,EAAAA,KAACe,EAAAA,EAAK,IACfC,MAAM,mBAIA,WAAXkC,GACClD,EAAAA,EAAAA,KAACsD,EAAiB,CAChB/F,MAAOA,EACPC,YAAaA,EACbrB,UAAWA,EACXD,UAAWA,IAEX,KACQ,cAAXgH,GACClD,EAAAA,EAAAA,KAACuD,EAA0B,CACzBhG,MAAOA,EACPC,YAAaA,EACbtB,UAAWA,EACXC,UAAWA,IAEX,OAGV,C,eCtDA,MAAMqH,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,oBAAqB,CACnB7D,QAAS4D,EAAME,QAAQ,IAEzBC,OAAQ,CACN5B,OAAQyB,EAAME,QAAQ,IAExBE,IAAK,CACHC,SAAU,YAEZC,UAAW,CACTD,SAAU,WACVE,IAAK,IAGPC,KAAM,CACJjD,QAAS,OACTE,IAAK,IAEPgD,GAAI,CACFC,aAAc,IAEhBC,GAAI,CACFC,WAAYZ,EAAMa,QAAQC,SAE5BC,WAAY,CACVC,SAAU,IAEZC,UAAW,CAETD,SAAU,EAGVE,WAAY,OAoIhB,GAhIoCtH,EAAAA,EAAAA,WAAS,UAAU,MACrDC,IAIA,MAAM,QAAEsH,EAAO,GAAEC,GAAOtB,IAClBrB,GAAUC,EAAAA,EAAAA,YAAW7E,IACrB,cAAEP,GAAkBmF,EACpB4C,EAAsB/H,EAAc,IAAM,IACzCQ,EAAawH,IAAkBrH,EAAAA,EAAAA,UAAS,IACxCsH,EAAuBC,IAA4BvH,EAAAA,EAAAA,UAAS,CACjEoH,EACAA,KAEK7G,EAAOC,IAAYR,EAAAA,EAAAA,YAE1B,OACEgC,EAAAA,EAAAA,MAACwF,EAAAA,EAAS,CAACC,UAAWP,EAAQlB,oBAAoB5D,SAAA,CAC/C7B,GAAQ8B,EAAAA,EAAAA,KAACC,EAAAA,aAAY,CAAC/B,MAAOA,IAAY,MAC1CyB,EAAAA,EAAAA,MAAA,OAAKyF,UAAWP,EAAQX,KAAKnE,SAAA,EAC3BJ,EAAAA,EAAAA,MAAA,OAAKyF,UAAWP,EAAQF,UAAU5E,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKoF,UAAWP,EAAQV,GAAGpE,SAAC,8CAG3BkF,EAAsBtE,KAAI,CAAC0E,EAAcC,KACxC3F,EAAAA,EAAAA,MAAA,OAAoCyF,UAAWP,EAAQf,IAAI/D,SAAA,EACzDJ,EAAAA,EAAAA,MAAA,QAAAI,SAAA,CAAM,OAAKuF,EAAM,EAAE,SAEnBtF,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACTC,SAAUP,EAAsBQ,QAAU,EAC1CzD,QAASA,KACPzE,EAAMmI,oBAAoBJ,GAC1BJ,EACED,EACGtE,KAAI,CAACgF,EAAKC,IAAUA,IAASN,OAAM7G,EAAYkH,IAC/ClD,OAAOoD,EAAAA,WAERrI,GAAeyH,EAAsBQ,OAAS,GAChDT,EAAe,EACjB,EACAjF,UAEFC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAS,OAEZ9F,EAAAA,EAAAA,KAAC+F,EAAAA,iBAAgB,CACfC,WAAW,GACXC,SAAUZ,EACVhF,SAAU6F,IACRhB,EACED,EAAsBtE,KAAI,CAACgF,EAAKC,IAC9BA,IAASN,EAAMY,EAAcP,IAEhC,EAEHxD,QAASA,IAEVmD,IAAQL,EAAsBQ,OAAS,GACtCzF,EAAAA,EAAAA,KAACuF,EAAAA,EAAU,CACT,cAAY,YACZH,UAAWN,EACTD,EAAQb,UACRsB,IAAQ9H,EAAcqH,EAAQR,QAAK5F,GAErCuD,QAASA,KACPgD,EAAeM,EAAI,EACnBvF,UAEFC,EAAAA,EAAAA,KAACmG,EAAAA,EAAmB,MAEpB,OA5CI,GAAGd,KAAgBC,QA+C/B3F,EAAAA,EAAAA,MAAA,OAAAI,SAAA,EACEC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLsD,UAAWP,EAAQhB,OACnB9B,QAAQ,YACRqE,MAAM,YACNpE,QAASA,KACPkD,EAAyB,IACpBD,EACHF,GACA,EACFhF,SACH,aAGDC,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CACLsD,UAAWP,EAAQhB,OACnB7B,QAASA,KAEN,WACC,IACE7D,OAASM,SC3ItB4H,gBAAwB,sBAC7BpB,EAAqB,MACrB1H,IAKA,MAAM4E,GAAUC,EAAAA,EAAAA,YAAW7E,IACrB,gBAAE+I,GAAoBnE,GACtB,iCAAEE,GAAqC9E,EAE7CA,EAAMgJ,eACEC,QAAQC,IACZxB,EAAsBtE,KAAI0F,UACxB,MAAMV,QAAYW,EAAgBI,gBAAgBrB,GAClD,IAAKM,EACH,MAAM,IAAItI,MAAM,aAAagI,qBAE/B,MAAO,CACL7I,KAAM,mBACNmK,QAAS,EACTC,SAAU,EACVC,YAAY,EACZC,iBAAkBnB,EAAIoB,QACvB,MAIP,IAAK,MAAMC,KAAQzJ,EAAM0J,MACvBD,EAAKE,SAAS3J,EAAM4J,OACpBH,EAAKI,kBAEFC,EAAAA,EAAAA,wBAAuBlF,IAG1BmF,EAAAA,EAAAA,MAAKjF,GAAkC1B,KAAI,CAAC4G,EAAGjC,KAC9B,eAAXiC,EAAE/K,MACJ2F,EAAQqF,aAAaD,EAAEvJ,OACvBT,EAAMkK,YAAYF,EAAEvJ,OAAOoB,QAASkG,IAChB,kBAAXiC,EAAE/K,MACXe,EAAMmK,UAAUH,EAAEvJ,MAAOsH,EAC3B,IARFnD,EAAQwF,OAAO,mBAAoB,WAWrCpK,EAAMqK,8BACR,CD+F0BC,CAAS,CACb5C,wBACA1H,SAEJ,CAAE,MAAOkC,GACPC,QAAQxB,MAAMuB,GACdtB,EAASsB,EACX,CACD,EAXA,EAWG,EAENsC,QAAQ,YACRqE,MAAM,UAASrG,SAChB,kBAMLJ,EAAAA,EAAAA,MAAA,OAAKyF,UAAWP,EAAQJ,WAAW1E,SAAA,EACjCJ,EAAAA,EAAAA,MAAA,OAAAI,SAAA,CAAK,0CACqCvC,EAAc,EAAE,OAAK,IAC5DA,EAAc,MAEjBwC,EAAAA,EAAAA,KAACuD,EAA0B,CACzBhG,MAAOA,EACPC,YAAaA,EACbtB,UAAW+I,EAAsBzH,GACjCrB,UAAW8I,EAAsBzH,EAAc,aAM3D,G","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/getAdapter.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyOpenCustomTrack.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/util.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyPreConfigured.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyTrackSelectorArea.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/LinearSyntenyImportForm.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/doSubmit.tsx"],"sourcesContent":["import type { FileLocation } from '@jbrowse/core/util'\n\nexport function getAdapter({\n  radioOption,\n  assembly1,\n  assembly2,\n  fileLocation,\n  indexFileLocation,\n  bed1Location,\n  bed2Location,\n}: {\n  radioOption: string\n  assembly1: string\n  assembly2: string\n  fileLocation?: FileLocation\n  indexFileLocation?: FileLocation\n  bed1Location?: FileLocation\n  bed2Location?: FileLocation\n}) {\n  if (radioOption === '.paf') {\n    return {\n      type: 'PAFAdapter',\n      pafLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.out') {\n    return {\n      type: 'MashMapAdapter',\n      outLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.delta') {\n    return {\n      type: 'DeltaAdapter',\n      deltaLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.chain') {\n    return {\n      type: 'ChainAdapter',\n      chainLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.anchors') {\n    return {\n      type: 'MCScanAnchorsAdapter',\n      mcscanAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.anchors.simple') {\n    return {\n      type: 'MCScanSimpleAnchorsAdapter',\n      mcscanSimpleAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.pif.gz') {\n    return {\n      type: 'PairwiseIndexedPAFAdapter',\n      pifGzLocation: fileLocation,\n      index: {\n        location: indexFileLocation,\n      },\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else {\n    throw new Error(\n      `Unknown to detect type ${radioOption} from filename (select radio button to clarify)`,\n    )\n  }\n}\n","import { useEffect, useState } from 'react'\n\nimport { ErrorMessage, FileSelector } from '@jbrowse/core/ui'\nimport HelpIcon from '@mui/icons-material/Help'\nimport {\n  Button,\n  FormControlLabel,\n  Grid2,\n  Paper,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { getAdapter } from './getAdapter'\nimport { basename, extName, getName, stripGz } from './util'\n\nimport type { LinearSyntenyViewModel } from '../../model'\nimport type { FileLocation } from '@jbrowse/core/util/types'\n\nconst ImportSyntenyOpenCustomTrack = observer(function ({\n  model,\n  assembly1,\n  assembly2,\n  selectedRow,\n}: {\n  model: LinearSyntenyViewModel\n  assembly1: string\n  assembly2: string\n  selectedRow: number\n}) {\n  const [swap, setSwap] = useState(false)\n  const [bed2Location, setBed2Location] = useState<FileLocation>()\n  const [bed1Location, setBed1Location] = useState<FileLocation>()\n  const [fileLocation, setFileLocation] = useState<FileLocation>()\n  const [indexFileLocation, setIndexFileLocation] = useState<FileLocation>()\n  const [value, setValue] = useState('')\n  const [error, setError] = useState<unknown>()\n  const fileName = getName(fileLocation)\n\n  const radioOption = value || (fileName ? extName(stripGz(fileName)) : '')\n\n  useEffect(() => {\n    try {\n      if (fileLocation) {\n        const fn = fileName ? basename(fileName) : 'MyTrack'\n        const trackId = `${fn}-${Date.now()}-sessionTrack`\n        setError(undefined)\n\n        model.setImportFormSyntenyTrack(selectedRow, {\n          type: 'userOpened',\n          value: {\n            trackId,\n            name: fn,\n            assemblyNames: [assembly2, assembly1],\n            type: 'SyntenyTrack',\n            adapter: getAdapter({\n              radioOption,\n              assembly1: swap ? assembly2 : assembly1,\n              assembly2: swap ? assembly1 : assembly2,\n              fileLocation,\n              indexFileLocation,\n              bed1Location,\n              bed2Location,\n            }),\n          },\n        })\n      }\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }, [\n    swap,\n    model,\n    selectedRow,\n    fileName,\n    assembly1,\n    assembly2,\n    bed1Location,\n    bed2Location,\n    fileLocation,\n    indexFileLocation,\n    radioOption,\n  ])\n  const helpStrings = {\n    '.paf': 'minimap2 target.fa query.fa',\n    '.pif.gz': 'minimap2 target.fa query.fa',\n    '.out': 'mashmap target.fa query.fa',\n    '.delta': 'mummer target.fa query.fa',\n    '.chain': 'e.g. queryToTarget.chain',\n  } as const\n  return (\n    <Paper style={{ padding: 12 }}>\n      {error ? <ErrorMessage error={error} /> : null}\n      <Typography style={{ textAlign: 'center' }}>\n        Add a .paf (minimap2), .delta (Mummer), .chain (UCSC liftover), .anchors\n        or .anchors.simple (MCScan), or .pif.gz (jbrowse CLI make-pif) file to\n        view. These file types can also be gzipped.\n      </Typography>\n      <RadioGroup\n        value={radioOption}\n        onChange={event => {\n          setValue(event.target.value)\n        }}\n      >\n        <Grid2 container justifyContent=\"center\">\n          {[\n            '.paf',\n            '.delta',\n            '.out',\n            '.chain',\n            '.anchors',\n            '.anchors.simple',\n            '.pif.gz',\n          ].map(extension => (\n            <FormControlLabel\n              key={extension}\n              value={extension}\n              control={<Radio />}\n              label={extension}\n            />\n          ))}\n        </Grid2>\n      </RadioGroup>\n      <Grid2 container justifyContent=\"center\">\n        {radioOption === '.paf' ||\n        radioOption === '.out' ||\n        radioOption === '.delta' ||\n        radioOption === '.chain' ||\n        radioOption === '.pif.gz' ? (\n          <div\n            style={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 10,\n            }}\n          >\n            <FileSelector\n              name={`${radioOption} location`}\n              inline\n              description=\"\"\n              location={fileLocation}\n              setLocation={loc => {\n                setFileLocation(loc)\n              }}\n            />\n            <div>\n              <div>\n                Verify or click swap\n                <Tooltip title={<code>{helpStrings[radioOption]}</code>}>\n                  <HelpIcon />\n                </Tooltip>\n              </div>\n              <div\n                style={{\n                  display: 'flex',\n                  gap: 20,\n                }}\n              >\n                <div\n                  style={{\n                    display: 'grid',\n                    gridTemplateColumns: '1fr 1fr',\n                    gap: 4,\n                    alignItems: 'center',\n                  }}\n                >\n                  <div>\n                    <i>{swap ? assembly2 : assembly1}</i>\n                  </div>\n                  <div>query assembly</div>\n                  <div>\n                    <i>{swap ? assembly1 : assembly2}</i>\n                  </div>\n                  <div>target assembly</div>\n                </div>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    setSwap(!swap)\n                  }}\n                >\n                  Swap?\n                </Button>\n              </div>\n            </div>\n          </div>\n        ) : value === '.anchors' || value === '.anchors.simple' ? (\n          <div>\n            <div style={{ margin: 20 }}>\n              Open the {value} and .bed files for both genome assemblies from\n              the MCScan (Python version) pipeline{' '}\n              <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n                (more info)\n              </a>\n            </div>\n            <div>\n              <FileSelector\n                inline\n                name={value}\n                location={fileLocation}\n                setLocation={loc => {\n                  setFileLocation(loc)\n                }}\n              />\n              <FileSelector\n                inline\n                name=\"genome 1 .bed (left column of anchors file)\"\n                description=\"\"\n                location={bed1Location}\n                setLocation={loc => {\n                  setBed1Location(loc)\n                }}\n              />\n              <FileSelector\n                inline\n                name=\"genome 2 .bed (right column of anchors file)\"\n                description=\"\"\n                location={bed2Location}\n                setLocation={loc => {\n                  setBed2Location(loc)\n                }}\n              />\n            </div>\n            <div\n              style={{\n                margin: 'auto',\n                display: 'flex',\n                justifyContent: 'center',\n                gap: 20,\n              }}\n            >\n              <div\n                style={{\n                  display: 'grid',\n                  gridTemplateColumns: '1fr 1fr',\n                  gap: 4,\n                  alignItems: 'center',\n                }}\n              >\n                <div>\n                  <i>{swap ? assembly2 : assembly1}</i>\n                </div>\n                <div>bed1 assembly</div>\n                <div>\n                  <i>{swap ? assembly1 : assembly2}</i>\n                </div>\n                <div>bed2 assembly</div>\n              </div>\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  setSwap(!swap)\n                }}\n              >\n                Swap?\n              </Button>\n            </div>\n          </div>\n        ) : value === '.pif.gz' ? (\n          <div style={{ display: 'flex' }}>\n            <div>\n              <FileSelector\n                name={`${value} location`}\n                description=\"\"\n                location={fileLocation}\n                setLocation={loc => {\n                  setFileLocation(loc)\n                }}\n              />\n            </div>\n            <div>\n              <FileSelector\n                name={`${value} index location`}\n                description=\"\"\n                location={indexFileLocation}\n                setLocation={loc => {\n                  setIndexFileLocation(loc)\n                }}\n              />\n            </div>\n          </div>\n        ) : (\n          <FileSelector\n            name={value ? `${value} location` : ''}\n            description=\"\"\n            location={fileLocation}\n            setLocation={loc => {\n              setFileLocation(loc)\n            }}\n          />\n        )}\n      </Grid2>\n    </Paper>\n  )\n})\n\nexport default ImportSyntenyOpenCustomTrack\n","export function getName(\n  sessionTrackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return sessionTrackData\n    ? // @ts-expect-error\n      sessionTrackData.uri ||\n        // @ts-expect-error\n        sessionTrackData.localPath ||\n        // @ts-expect-error\n        sessionTrackData.name\n    : undefined\n}\n\nexport function stripGz(fileName: string) {\n  return fileName.endsWith('.gz') ? fileName.slice(0, -3) : fileName\n}\n\nexport function basename(str: string) {\n  return str.split('#')[0]!.split('?')[0]!.split('/').pop()\n}\n\nexport function extName(str: string) {\n  const r = str.split('.').pop()\n  return r ? `.${r}` : ''\n}\n","import { useEffect } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport { MenuItem, Paper, Select, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { LinearSyntenyViewModel } from '../../model'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst ImportSyntenyTrackSelector = observer(function ({\n  model,\n  selectedRow,\n  assembly1,\n  assembly2,\n}: {\n  model: LinearSyntenyViewModel\n  selectedRow: number\n  assembly1: string\n  assembly2: string\n}) {\n  const session = getSession(model)\n  const { importFormSyntenyTrackSelections } = model\n  const { tracks = [], sessionTracks = [] } = session\n  const allTracks = [...tracks, ...sessionTracks] as AnyConfigurationModel[]\n  const filteredTracks = allTracks.filter(track => {\n    const assemblyNames = readConfObject(track, 'assemblyNames')\n    return (\n      assemblyNames.includes(assembly1) &&\n      assemblyNames.includes(assembly2) &&\n      track.type.includes('Synteny')\n    )\n  })\n  const resetTrack = filteredTracks[0]?.trackId || ''\n  const r = importFormSyntenyTrackSelections[selectedRow]\n  const value = r?.type === 'preConfigured' ? r.value : undefined\n  useEffect(() => {\n    model.setImportFormSyntenyTrack(selectedRow, {\n      type: 'preConfigured',\n      value: resetTrack,\n    })\n  }, [assembly2, assembly1, resetTrack, selectedRow, model])\n  return (\n    <Paper style={{ padding: 12 }}>\n      <Typography>\n        Select a track from the select box below, the track will be shown when\n        you hit \"Launch\".\n      </Typography>\n\n      {value && filteredTracks.map(r => r.trackId).includes(value) ? (\n        <Select\n          value={value}\n          onChange={event => {\n            model.setImportFormSyntenyTrack(selectedRow, {\n              type: 'preConfigured',\n              value: event.target.value,\n            })\n          }}\n        >\n          {filteredTracks.map(track => (\n            <MenuItem key={track.trackId} value={track.trackId}>\n              {getTrackName(track, session)}\n            </MenuItem>\n          ))}\n        </Select>\n      ) : (\n        <ErrorMessage\n          error={`No synteny tracks found for ${assembly1},${assembly2}`}\n        />\n      )}\n    </Paper>\n  )\n})\n\nexport default ImportSyntenyTrackSelector\n","import { useEffect, useState } from 'react'\n\nimport { FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material'\n\nimport ImportCustomTrack from './ImportSyntenyOpenCustomTrack'\nimport ImportSyntenyTrackSelector from './ImportSyntenyPreConfigured'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nexport default function ImportSyntenyTrackSelectorArea({\n  model,\n  assembly1,\n  assembly2,\n  selectedRow,\n}: {\n  model: LinearSyntenyViewModel\n  assembly1: string\n  assembly2: string\n  selectedRow: number\n}) {\n  const [choice, setChoice] = useState('tracklist')\n\n  useEffect(() => {\n    if (choice === 'none') {\n      model.setImportFormSyntenyTrack(selectedRow, { type: 'none' })\n    }\n  }, [choice, model, selectedRow])\n  return (\n    <div>\n      <FormControl>\n        <RadioGroup\n          row\n          value={choice}\n          aria-labelledby=\"group-label\"\n          onChange={event => {\n            setChoice(event.target.value)\n          }}\n        >\n          <FormControlLabel value=\"none\" control={<Radio />} label=\"None\" />\n          <FormControlLabel\n            value=\"tracklist\"\n            control={<Radio />}\n            label=\"Existing track\"\n          />\n          <FormControlLabel\n            value=\"custom\"\n            control={<Radio />}\n            label=\"New track\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {choice === 'custom' ? (\n        <ImportCustomTrack\n          model={model}\n          selectedRow={selectedRow}\n          assembly2={assembly2}\n          assembly1={assembly1}\n        />\n      ) : null}\n      {choice === 'tracklist' ? (\n        <ImportSyntenyTrackSelector\n          model={model}\n          selectedRow={selectedRow}\n          assembly1={assembly1}\n          assembly2={assembly2}\n        />\n      ) : null}\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport { AssemblySelector, ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession, notEmpty } from '@jbrowse/core/util'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { Button, Container, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ImportSyntenyTrackSelector from './ImportSyntenyTrackSelectorArea'\nimport { doSubmit } from './doSubmit'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  rel: {\n    position: 'relative',\n  },\n  synbutton: {\n    position: 'absolute',\n    top: 30,\n  },\n\n  flex: {\n    display: 'flex',\n    gap: 90,\n  },\n  mb: {\n    marginBottom: 10,\n  },\n  bg: {\n    background: theme.palette.divider,\n  },\n  rightPanel: {\n    flexGrow: 11,\n  },\n  leftPanel: {\n    // proportionally smaller than right panel\n    flexGrow: 4,\n\n    // and don't shrink when right panel grows\n    flexShrink: 0,\n  },\n}))\n\nconst LinearSyntenyViewImportForm = observer(function ({\n  model,\n}: {\n  model: LinearSyntenyViewModel\n}) {\n  const { classes, cx } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const defaultAssemblyName = assemblyNames[0] || ''\n  const [selectedRow, setSelectedRow] = useState(0)\n  const [selectedAssemblyNames, setSelectedAssemblyNames] = useState([\n    defaultAssemblyName,\n    defaultAssemblyName,\n  ])\n  const [error, setError] = useState<unknown>()\n\n  return (\n    <Container className={classes.importFormContainer}>\n      {error ? <ErrorMessage error={error} /> : null}\n      <div className={classes.flex}>\n        <div className={classes.leftPanel}>\n          <div className={classes.mb}>\n            Select assemblies for linear synteny view\n          </div>\n          {selectedAssemblyNames.map((assemblyName, idx) => (\n            <div key={`${assemblyName}-${idx}`} className={classes.rel}>\n              <span>Row {idx + 1}: </span>\n\n              <IconButton\n                disabled={selectedAssemblyNames.length <= 2}\n                onClick={() => {\n                  model.importFormRemoveRow(idx)\n                  setSelectedAssemblyNames(\n                    selectedAssemblyNames\n                      .map((asm, idx2) => (idx2 === idx ? undefined : asm))\n                      .filter(notEmpty),\n                  )\n                  if (selectedRow >= selectedAssemblyNames.length - 2) {\n                    setSelectedRow(0)\n                  }\n                }}\n              >\n                <CloseIcon />\n              </IconButton>\n              <AssemblySelector\n                helperText=\"\"\n                selected={assemblyName}\n                onChange={newAssembly => {\n                  setSelectedAssemblyNames(\n                    selectedAssemblyNames.map((asm, idx2) =>\n                      idx2 === idx ? newAssembly : asm,\n                    ),\n                  )\n                }}\n                session={session}\n              />\n              {idx !== selectedAssemblyNames.length - 1 ? (\n                <IconButton\n                  data-testid=\"synbutton\"\n                  className={cx(\n                    classes.synbutton,\n                    idx === selectedRow ? classes.bg : undefined,\n                  )}\n                  onClick={() => {\n                    setSelectedRow(idx)\n                  }}\n                >\n                  <ArrowForwardIosIcon />\n                </IconButton>\n              ) : null}\n            </div>\n          ))}\n          <div>\n            <Button\n              className={classes.button}\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setSelectedAssemblyNames([\n                  ...selectedAssemblyNames,\n                  defaultAssemblyName,\n                ])\n              }}\n            >\n              Add row\n            </Button>\n            <Button\n              className={classes.button}\n              onClick={() => {\n                // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                ;(async () => {\n                  try {\n                    setError(undefined)\n                    await doSubmit({\n                      selectedAssemblyNames,\n                      model,\n                    })\n                  } catch (e) {\n                    console.error(e)\n                    setError(e)\n                  }\n                })()\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n            >\n              Launch\n            </Button>\n          </div>\n        </div>\n\n        <div className={classes.rightPanel}>\n          <div>\n            Synteny dataset to display between row {selectedRow + 1} and{' '}\n            {selectedRow + 2}\n          </div>\n          <ImportSyntenyTrackSelector\n            model={model}\n            selectedRow={selectedRow}\n            assembly1={selectedAssemblyNames[selectedRow]!}\n            assembly2={selectedAssemblyNames[selectedRow + 1]!}\n          />\n        </div>\n      </div>\n    </Container>\n  )\n})\n\nexport default LinearSyntenyViewImportForm\n","import { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport { toJS } from 'mobx'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nexport async function doSubmit({\n  selectedAssemblyNames,\n  model,\n}: {\n  selectedAssemblyNames: string[]\n  model: LinearSyntenyViewModel\n}) {\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const { importFormSyntenyTrackSelections } = model\n\n  model.setViews(\n    await Promise.all(\n      selectedAssemblyNames.map(async assemblyName => {\n        const asm = await assemblyManager.waitForAssembly(assemblyName)\n        if (!asm) {\n          throw new Error(`Assembly \"${assemblyName}\" failed to load`)\n        }\n        return {\n          type: 'LinearGenomeView' as const,\n          bpPerPx: 1,\n          offsetPx: 0,\n          hideHeader: true,\n          displayedRegions: asm.regions,\n        }\n      }),\n    ),\n  )\n  for (const view of model.views) {\n    view.setWidth(model.width)\n    view.showAllRegions()\n  }\n  if (!isSessionWithAddTracks(session)) {\n    session.notify(\"Can't add tracks\", 'warning')\n  } else {\n    toJS(importFormSyntenyTrackSelections).map((f, idx) => {\n      if (f.type === 'userOpened') {\n        session.addTrackConf(f.value)\n        model.toggleTrack(f.value?.trackId, idx)\n      } else if (f.type === 'preConfigured') {\n        model.showTrack(f.value, idx)\n      }\n    })\n  }\n  model.clearImportFormSyntenyTracks()\n}\n"],"names":["getAdapter","radioOption","assembly1","assembly2","fileLocation","indexFileLocation","bed1Location","bed2Location","type","pafLocation","queryAssembly","targetAssembly","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","assemblyNames","mcscanSimpleAnchorsLocation","pifGzLocation","index","location","Error","observer","model","selectedRow","swap","setSwap","useState","setBed2Location","setBed1Location","setFileLocation","setIndexFileLocation","value","setValue","error","setError","fileName","sessionTrackData","uri","localPath","name","undefined","str","r","split","pop","extName","endsWith","slice","stripGz","useEffect","fn","trackId","Date","now","setImportFormSyntenyTrack","adapter","e","console","_jsxs","Paper","style","padding","children","_jsx","ErrorMessage","Typography","textAlign","RadioGroup","onChange","event","target","Grid2","container","justifyContent","map","extension","FormControlLabel","control","Radio","label","display","flexDirection","gap","FileSelector","inline","description","setLocation","loc","Tooltip","title","HelpIcon","gridTemplateColumns","alignItems","Button","variant","onClick","margin","href","session","getSession","importFormSyntenyTrackSelections","tracks","sessionTracks","filteredTracks","filter","track","readConfObject","includes","resetTrack","Select","MenuItem","getTrackName","ImportSyntenyTrackSelectorArea","choice","setChoice","FormControl","row","ImportCustomTrack","ImportSyntenyTrackSelector","useStyles","makeStyles","theme","importFormContainer","spacing","button","rel","position","synbutton","top","flex","mb","marginBottom","bg","background","palette","divider","rightPanel","flexGrow","leftPanel","flexShrink","classes","cx","defaultAssemblyName","setSelectedRow","selectedAssemblyNames","setSelectedAssemblyNames","Container","className","assemblyName","idx","IconButton","disabled","length","importFormRemoveRow","asm","idx2","notEmpty","CloseIcon","AssemblySelector","helperText","selected","newAssembly","ArrowForwardIosIcon","color","async","assemblyManager","setViews","Promise","all","waitForAssembly","bpPerPx","offsetPx","hideHeader","displayedRegions","regions","view","views","setWidth","width","showAllRegions","isSessionWithAddTracks","toJS","f","addTrackConf","toggleTrack","showTrack","notify","clearImportFormSyntenyTracks","doSubmit"],"sourceRoot":""}