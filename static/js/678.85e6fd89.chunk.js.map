{"version":3,"file":"static/js/678.85e6fd89.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/icons-material/esm/Menu.js","../../../node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/Radio/Radio.js","../../../node_modules/@mui/material/Radio/radioClasses.js","../../../node_modules/@mui/material/RadioGroup/useRadioGroup.js","../../../node_modules/@mui/material/RadioGroup/RadioGroup.js","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ClusterDialog/ClusterDialogAuto.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ClusterDialog/ClusterDialogManual.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ClusterDialog/ClusterDialog.tsx","../../../node_modules/@mui/material/RadioGroup/RadioGroupContext.js","../../../node_modules/@mui/material/RadioGroup/radioGroupClasses.js"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 18h18v-2H3zm0-5h18v-2H3zm0-7v2h18V6z\"\n}), 'Menu');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon)({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon)(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport FormGroup from \"../FormGroup/index.js\";\nimport { getRadioGroupUtilityClass } from \"./radioGroupClasses.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport useControlled from \"../utils/useControlled.js\";\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nimport useId from \"../utils/useId.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = props => {\n  const {\n    classes,\n    row,\n    error\n  } = props;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getRadioGroupUtilityClass, classes);\n};\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    className,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp,\n    ...other\n  } = props;\n  const rootRef = React.useRef(null);\n  const classes = useUtilityClasses(props);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, {\n      role: \"radiogroup\",\n      ref: handleRef,\n      className: clsx(classes.root, className),\n      ...other,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n  useLocalStorage,\n} from '@jbrowse/core/util'\nimport { createStopToken, stopStopToken } from '@jbrowse/core/util/stopToken'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst ClusterDialogAuto = observer(function ({\n  model,\n  children,\n  handleClose,\n}: {\n  model: ReducedModel\n  children: React.ReactNode\n  handleClose: () => void\n}) {\n  const [progress, setProgress] = useState('')\n  const [error, setError] = useState<unknown>()\n  const [stopToken, setStopToken] = useState('')\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [samplesPerPixel, setSamplesPerPixel] = useLocalStorage(\n    'cluster-samplesPerPixel',\n    '1',\n  )\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <div style={{ marginTop: 50 }}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setShowAdvanced(!showAdvanced)\n            }}\n          >\n            {showAdvanced ? 'Hide advanced options' : 'Show advanced options'}\n          </Button>\n          {showAdvanced ? (\n            <div style={{ marginTop: 20 }}>\n              <Typography>\n                This procedure samples the data at each 'pixel' across the\n                visible by default\n              </Typography>\n              <TextField\n                label=\"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\"\n                variant=\"outlined\"\n                size=\"small\"\n                value={samplesPerPixel}\n                onChange={event => {\n                  setSamplesPerPixel(event.target.value)\n                }}\n              />\n            </div>\n          ) : null}\n        </div>\n        <div>\n          {progress ? (\n            <div style={{ padding: 50 }}>\n              <span style={{ width: 400 }}>Progress: {progress}</span>\n              <Button\n                onClick={() => {\n                  stopStopToken(stopToken)\n                }}\n              >\n                Stop\n              </Button>\n            </div>\n          ) : null}\n          {error ? <ErrorMessage error={error} /> : null}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={async () => {\n            try {\n              setError(undefined)\n              setProgress('')\n              const view = getContainingView(model) as LinearGenomeViewModel\n              if (!view.initialized) {\n                return\n              }\n              const { rpcManager } = getSession(model)\n              const { sourcesWithoutLayout, adapterConfig } = model\n              if (sourcesWithoutLayout) {\n                const sessionId = getRpcSessionId(model)\n                const stopToken = createStopToken()\n                setStopToken(stopToken)\n                const ret = (await rpcManager.call(\n                  sessionId,\n                  'MultiWiggleClusterScoreMatrix',\n                  {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources: sourcesWithoutLayout,\n                    sessionId,\n                    adapterConfig,\n                    stopToken,\n                    bpPerPx: view.bpPerPx / +samplesPerPixel,\n                    statusCallback: (arg: string) => {\n                      setProgress(arg)\n                    },\n                  },\n                )) as { order: number[] }\n\n                model.setLayout(\n                  ret.order.map(idx => {\n                    const ret = sourcesWithoutLayout[idx]\n                    if (!ret) {\n                      throw new Error(`out of bounds at ${idx}`)\n                    }\n                    return ret\n                  }),\n                )\n              }\n              handleClose()\n            } catch (e) {\n              if (!isAbortException(e) && isAlive(model)) {\n                console.error(e)\n                setError(e)\n              }\n            } finally {\n              setProgress('')\n              setStopToken('')\n            }\n          }}\n        >\n          Run clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            if (stopToken) {\n              stopStopToken(stopToken)\n            }\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default ClusterDialogAuto\n","import { useEffect, useState } from 'react'\n\nimport {\n  CascadingMenuButton,\n  ErrorMessage,\n  LoadingEllipses,\n} from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n  useLocalStorage,\n} from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport MenuIcon from '@mui/icons-material/Menu'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  mgap: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n  },\n}))\n\nconst ClusterDialogManuals = observer(function ({\n  model,\n  handleClose,\n  children,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n\n  const [paste, setPaste] = useState('')\n  const [ret, setRet] = useState<Record<string, number[]>>()\n  const [error, setError] = useState<unknown>()\n  const [loading, setLoading] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [clusterMethod, setClusterMethod] = useLocalStorage(\n    'cluster-clusterMethod',\n    'single',\n  )\n  const [samplesPerPixel, setSamplesPerPixel] = useLocalStorage(\n    'cluster-samplesPerPixel',\n    '1',\n  )\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        setRet(undefined)\n        setLoading(true)\n        const view = getContainingView(model) as LinearGenomeViewModel\n        const { dynamicBlocks, bpPerPx } = view\n        const { rpcManager } = getSession(model)\n        const { sourcesWithoutLayout, adapterConfig } = model\n        const sessionId = getRpcSessionId(model)\n        const ret = (await rpcManager.call(\n          sessionId,\n          'MultiWiggleGetScoreMatrix',\n          {\n            regions: dynamicBlocks.contentBlocks,\n            sources: sourcesWithoutLayout,\n            sessionId,\n            adapterConfig,\n            bpPerPx: bpPerPx / +samplesPerPixel,\n          },\n        )) as Record<string, number[]>\n\n        setRet(ret)\n      } catch (e) {\n        if (!isAbortException(e) && isAlive(model)) {\n          console.error(e)\n          setError(e)\n        }\n      } finally {\n        setLoading(false)\n      }\n    })()\n  }, [model, samplesPerPixel])\n\n  const results = ret\n    ? `inputMatrix<-matrix(c(${Object.values(ret)\n        .map(val => val.join(','))\n        .join(',\\n')}\n),nrow=${Object.values(ret).length},byrow=TRUE)\nrownames(inputMatrix)<-c(${Object.keys(ret)\n        .map(key => `'${key}'`)\n        .join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n    : undefined\n\n  const resultsTsv = ret\n    ? Object.entries(ret)\n        .map(([key, val]) => [key, ...val].join('\\t'))\n        .join('\\n')\n    : undefined\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <div style={{ marginTop: 50 }}>\n          <div\n            style={{\n              display: 'flex',\n              gap: '8px',\n              flexWrap: 'wrap',\n              marginBottom: '16px',\n            }}\n          >\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                saveAs(\n                  new Blob([results || ''], {\n                    type: 'text/plain;charset=utf-8',\n                  }),\n                  'cluster.R',\n                )\n              }}\n            >\n              Download Rscript\n            </Button>{' '}\n            or{' '}\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(results || '')\n              }}\n            >\n              Copy Rscript to clipboard\n            </Button>{' '}\n            <div style={{ float: 'right' }}>\n              <CascadingMenuButton\n                menuItems={[\n                  {\n                    label: 'Download TSV',\n                    onClick: () => {\n                      saveAs(\n                        new Blob([resultsTsv || ''], {\n                          type: 'text/plain;charset=utf-8',\n                        }),\n                        'scores.tsv',\n                      )\n                    },\n                  },\n                  {\n                    label: showAdvanced\n                      ? 'Hide advanced options'\n                      : 'Show advanced options',\n                    onClick: () => {\n                      setShowAdvanced(!showAdvanced)\n                    },\n                  },\n                ]}\n              >\n                <MenuIcon />\n              </CascadingMenuButton>\n            </div>\n            <div>\n              {showAdvanced ? (\n                <div>\n                  <Typography variant=\"h6\">Advanced options</Typography>\n                  <RadioGroup>\n                    {Object.entries({\n                      single: 'Single',\n                      complete: 'Complete',\n                    }).map(([key, val]) => (\n                      <FormControlLabel\n                        key={key}\n                        control={\n                          <Radio\n                            checked={clusterMethod === key}\n                            onChange={() => {\n                              setClusterMethod(key)\n                            }}\n                          />\n                        }\n                        label={val}\n                      />\n                    ))}\n                  </RadioGroup>\n                  <div style={{ marginTop: 20 }}>\n                    <Typography>\n                      This procedure samples the data at each 'pixel' across the\n                      visible by default\n                    </Typography>\n                    <TextField\n                      label=\"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\"\n                      variant=\"outlined\"\n                      size=\"small\"\n                      value={samplesPerPixel}\n                      onChange={event => {\n                        setSamplesPerPixel(event.target.value)\n                      }}\n                    />\n                  </div>\n                </div>\n              ) : null}\n            </div>\n            {results ? (\n              <div />\n            ) : loading ? (\n              <LoadingEllipses variant=\"h6\" title=\"Generating score matrix\" />\n            ) : error ? (\n              <ErrorMessage error={error} />\n            ) : null}\n          </div>\n\n          <div>\n            <Typography\n              variant=\"subtitle2\"\n              gutterBottom\n              style={{ marginTop: '16px' }}\n            >\n              Clustering Results:\n            </Typography>\n            <TextField\n              multiline\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\"\n              rows={10}\n              value={paste}\n              onChange={event => {\n                setPaste(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  classes: {\n                    input: classes.textAreaFont,\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const { sourcesWithoutLayout } = model\n            if (sourcesWithoutLayout) {\n              try {\n                model.setLayout(\n                  paste\n                    .split('\\n')\n                    .map(t => t.trim())\n                    .filter(f => !!f)\n                    .map(r => +r)\n                    .map(idx => {\n                      const ret = sourcesWithoutLayout[idx - 1]\n                      if (!ret) {\n                        throw new Error(`out of bounds at ${idx}`)\n                      }\n                      return ret\n                    }),\n                )\n              } catch (e) {\n                console.error(e)\n                getSession(model).notifyError(`${e}`, e)\n              }\n            }\n            handleClose()\n          }}\n        >\n          Apply clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default ClusterDialogManuals\n","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport { FormControlLabel, Radio, RadioGroup } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport ClusterDialogAuto from './ClusterDialogAuto'\nimport ClusterDialogManual from './ClusterDialogManual'\n\nimport type { ReducedModel } from './types'\n\nfunction Header({\n  activeMode,\n  setActiveMode,\n}: {\n  activeMode: string\n  setActiveMode: (arg: string) => void\n}) {\n  return (\n    <div>\n      <RadioGroup>\n        {Object.entries({\n          auto: (\n            <div>\n              Run in-app clustering (slow for large data, built in JS\n              clustering)\n            </div>\n          ),\n          manual: (\n            <div>\n              Download R script to run clustering (faster for large data, uses\n              hclust, may be more accurate)\n            </div>\n          ),\n        }).map(([key, val]) => (\n          <FormControlLabel\n            key={key}\n            control={\n              <Radio\n                checked={activeMode === key}\n                onChange={() => {\n                  setActiveMode(key)\n                }}\n              />\n            }\n            label={val}\n          />\n        ))}\n      </RadioGroup>\n    </div>\n  )\n}\n\nconst ClusterDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const [activeMode, setActiveMode] = useState('auto')\n\n  return (\n    <Dialog\n      open\n      title=\"Cluster by score\"\n      maxWidth=\"xl\"\n      onClose={(_, reason) => {\n        // don't close on backdrop click\n        if (reason !== 'backdropClick') {\n          handleClose()\n        }\n      }}\n    >\n      {activeMode === 'auto' ? (\n        <ClusterDialogAuto model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </ClusterDialogAuto>\n      ) : (\n        <ClusterDialogManual model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </ClusterDialogManual>\n      )}\n    </Dialog>\n  )\n})\n\nexport default ClusterDialog\n","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiRadioGroup', slot);\n}\nconst radioGroupClasses = generateUtilityClasses('MuiRadioGroup', ['root', 'row', 'error']);\nexport default radioGroupClasses;"],"names":["d","createSvgIcon","RadioButtonIconRoot","styled","shouldForwardProp","rootShouldForwardProp","position","display","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","theme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","props","checked","style","easeOut","classes","fontSize","ownerState","className","root","children","background","dot","RadioRoot","SwitchBase","prop","name","slot","overridesResolver","styles","size","capitalize","color","vars","palette","text","secondary","radioClasses","disabled","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","Object","entries","filter","createSimplePaletteValueFilter","map","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChange","onChangeProp","disabledProp","slots","slotProps","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","useRadioGroup","createChainedFunction","a","b","value","String","externalInputProps","input","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","event","args","additionalProps","type","getRadioUtilityClass","actions","defaultValue","valueProp","rootRef","row","error","setValueState","controlled","default","focus","current","querySelector","handleRef","contextValue","target","Provider","role","observer","model","handleClose","progress","setProgress","useState","setError","stopToken","setStopToken","showAdvanced","setShowAdvanced","samplesPerPixel","setSamplesPerPixel","useLocalStorage","_jsxs","_Fragment","DialogContent","marginTop","_jsx","Button","variant","onClick","Typography","TextField","label","padding","width","stopStopToken","ErrorMessage","DialogActions","async","undefined","view","getContainingView","initialized","rpcManager","getSession","sourcesWithoutLayout","adapterConfig","sessionId","getRpcSessionId","createStopToken","ret","call","regions","dynamicBlocks","contentBlocks","sources","bpPerPx","statusCallback","arg","setLayout","order","idx","Error","e","isAbortException","isAlive","console","useStyles","makeStyles","textAreaFont","fontFamily","mgap","flexDirection","gap","spacing","paste","setPaste","setRet","loading","setLoading","clusterMethod","setClusterMethod","useEffect","results","values","val","join","length","keys","key","resultsTsv","flexWrap","marginBottom","saveAs","Blob","copy","float","CascadingMenuButton","menuItems","MenuIcon","RadioGroup","single","complete","FormControlLabel","control","Radio","LoadingEllipses","title","gutterBottom","multiline","fullWidth","placeholder","rows","split","t","trim","f","r","notifyError","Header","activeMode","setActiveMode","auto","manual","Dialog","open","maxWidth","onClose","_","reason","ClusterDialogAuto","ClusterDialogManual","getRadioGroupUtilityClass"],"sourceRoot":""}