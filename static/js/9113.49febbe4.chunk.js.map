{"version":3,"file":"static/js/9113.49febbe4.chunk.js","mappings":"iMAUA,MAAMA,EAAc,GACdC,EAAa,EAEZ,SAASC,EACdC,EACAC,GAcA,MAAM,SACJC,EAAQ,QACRC,EAAO,QACPC,EAAO,UACPC,EACAC,OAAQC,EACRC,OAAO,OAAEC,GAAQ,oBACjBC,EAAmB,cACnBC,EAAa,OACbC,EAAM,OACNC,EAAS,EAAC,UACVC,GACEb,EACEc,EAASZ,EAAQ,GACjBa,GAASD,EAAOE,IAAMF,EAAOG,OAASd,EAKtCE,EAASC,EAA4B,EAATM,EAC5BM,GAAYC,EAAAA,EAAAA,gBAAeR,EAAQ,aACnCS,GAAQC,EAAAA,EAAAA,UAAS,IAAKjB,EAAWkB,MAAO,CAAC,EAAGjB,KAC5CkB,EAASH,EAAMG,SACfC,EAAUD,EAAO,GACjBE,EAAUF,EAAO,GACjBG,EAAOC,IAAcC,EAAAA,EAAAA,OAAMvB,GAAUe,EAAMO,IAAM,GAAI,EAAGtB,GAAUO,EAExE,IAAIiB,EACAC,EAAaC,OAAOC,kBACxB,MAAMC,EAAkB,GACxB,IAAIhB,EAAQiB,YAAYC,MACxB,IAAK,MAAMC,KAAWnC,EAASO,SAAU,CACnC0B,YAAYC,MAAQlB,EAAQ,OAC9BoB,EAAAA,EAAAA,IAAexB,GACfI,EAAQiB,YAAYC,OAEtB,MAAOG,EAAQC,IAAWC,EAAAA,EAAAA,eAAcJ,EAAStB,EAAQX,IAGrDsC,KAAKC,MAAMJ,KAAYG,KAAKC,MAAMZ,IAAeS,EAAUD,EAAS,KACtEL,EAAgBU,KAAKP,GACrBN,EAAaQ,GAEf,MAAMM,EAAQR,EAAQS,IAAI,SACpBC,EAAcF,EAAQpB,EACtBuB,EAAeH,EAAQnB,EACvBuB,EAAIT,EAAUD,EAAS1C,EAEvBqD,EAAIvC,EAAc0B,EAASQ,GAEjC7C,EAAImD,YACJnD,EAAIoD,YAAcF,EAClB,MAAMG,OAAuBC,IAAZxB,EAAwBA,EAAUe,EAC9C9B,EAAOwC,UAKVvD,EAAIwD,OAAOhB,EAASb,EAAI0B,IACxBrD,EAAIyD,OAAOjB,EAASb,EAAIkB,IACxB7C,EAAIyD,OAAOlB,EAAQZ,EAAIkB,MANvB7C,EAAIwD,OAAOjB,EAAQZ,EAAI0B,IACvBrD,EAAIyD,OAAOlB,EAAQZ,EAAIkB,IACvB7C,EAAIyD,OAAOjB,EAASb,EAAIkB,KAM1B7C,EAAI0D,SACJ5B,EAAUe,EAENG,GACFhD,EAAI2D,UAAYxC,EAChBnB,EAAI4D,SAASrB,EAAQ1B,EAAQoC,EAAGnD,IACvBiD,GAAuC,QAAxB1C,EAAUwD,YAClC7D,EAAI2D,UAAYxC,EAChBnB,EAAI4D,SAASrB,EAAQjC,EAASR,EAAYmD,EAAG3C,GAEjD,CAEA,GAAII,EAAqB,CACvBV,EAAI8D,UAAY,EAChB9D,EAAIoD,YAAc,wBAClB,IAAK,MAAMW,KAAQtD,EACjBT,EAAImD,YACJnD,EAAIwD,OAAO,EAAGd,KAAKsB,MAAMrC,EAAIoC,KAC7B/D,EAAIyD,OAAOzC,EAAO0B,KAAKsB,MAAMrC,EAAIoC,KACjC/D,EAAI0D,QAER,CACA,MAAO,CACLxB,kBAEJ,C","sources":["../../../plugins/wiggle/src/drawLine.ts"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { clamp, featureSpanPx } from '@jbrowse/core/util'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\n\nimport { getScale } from './util'\n\nimport type { ScaleOpts } from './util'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nconst fudgeFactor = 0.3\nconst clipHeight = 2\n\nexport function drawLine(\n  ctx: CanvasRenderingContext2D,\n  props: {\n    features: Map<string, Feature> | Feature[]\n    regions: Region[]\n    bpPerPx: number\n    scaleOpts: ScaleOpts\n    height: number\n    ticks: { values: number[] }\n    displayCrossHatches: boolean\n    colorCallback: (f: Feature, score: number) => string\n    config: AnyConfigurationModel\n    offset?: number\n    stopToken?: string\n  },\n) {\n  const {\n    features,\n    regions,\n    bpPerPx,\n    scaleOpts,\n    height: unadjustedHeight,\n    ticks: { values },\n    displayCrossHatches,\n    colorCallback,\n    config,\n    offset = 0,\n    stopToken,\n  } = props\n  const region = regions[0]!\n  const width = (region.end - region.start) / bpPerPx\n\n  // the adjusted height takes into account YSCALEBAR_LABEL_OFFSET from the\n  // wiggle display, and makes the height of the actual drawn area add\n  // \"padding\" to the top and bottom of the display\n  const height = unadjustedHeight - offset * 2\n  const clipColor = readConfObject(config, 'clipColor')\n  const scale = getScale({ ...scaleOpts, range: [0, height] })\n  const domain = scale.domain()\n  const niceMin = domain[0]!\n  const niceMax = domain[1]!\n  const toY = (n: number) => clamp(height - (scale(n) || 0), 0, height) + offset\n\n  let lastVal: number | undefined\n  let prevLeftPx = Number.NEGATIVE_INFINITY\n  const reducedFeatures = []\n  let start = performance.now()\n  for (const feature of features.values()) {\n    if (performance.now() - start > 400) {\n      checkStopToken(stopToken)\n      start = performance.now()\n    }\n    const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx)\n\n    // create reduced features, avoiding multiple features per px\n    if (Math.floor(leftPx) !== Math.floor(prevLeftPx) || rightPx - leftPx > 1) {\n      reducedFeatures.push(feature)\n      prevLeftPx = leftPx\n    }\n    const score = feature.get('score')\n    const lowClipping = score < niceMin\n    const highClipping = score > niceMax\n    const w = rightPx - leftPx + fudgeFactor\n\n    const c = colorCallback(feature, score)\n\n    ctx.beginPath()\n    ctx.strokeStyle = c\n    const startPos = lastVal !== undefined ? lastVal : score\n    if (!region.reversed) {\n      ctx.moveTo(leftPx, toY(startPos))\n      ctx.lineTo(leftPx, toY(score))\n      ctx.lineTo(rightPx, toY(score))\n    } else {\n      ctx.moveTo(rightPx, toY(startPos))\n      ctx.lineTo(rightPx, toY(score))\n      ctx.lineTo(leftPx, toY(score))\n    }\n    ctx.stroke()\n    lastVal = score\n\n    if (highClipping) {\n      ctx.fillStyle = clipColor\n      ctx.fillRect(leftPx, offset, w, clipHeight)\n    } else if (lowClipping && scaleOpts.scaleType !== 'log') {\n      ctx.fillStyle = clipColor\n      ctx.fillRect(leftPx, height - clipHeight, w, height)\n    }\n  }\n\n  if (displayCrossHatches) {\n    ctx.lineWidth = 1\n    ctx.strokeStyle = 'rgba(200,200,200,0.5)'\n    for (const tick of values) {\n      ctx.beginPath()\n      ctx.moveTo(0, Math.round(toY(tick)))\n      ctx.lineTo(width, Math.round(toY(tick)))\n      ctx.stroke()\n    }\n  }\n  return {\n    reducedFeatures,\n  }\n}\n"],"names":["fudgeFactor","clipHeight","drawLine","ctx","props","features","regions","bpPerPx","scaleOpts","height","unadjustedHeight","ticks","values","displayCrossHatches","colorCallback","config","offset","stopToken","region","width","end","start","clipColor","readConfObject","scale","getScale","range","domain","niceMin","niceMax","toY","n","clamp","lastVal","prevLeftPx","Number","NEGATIVE_INFINITY","reducedFeatures","performance","now","feature","checkStopToken","leftPx","rightPx","featureSpanPx","Math","floor","push","score","get","lowClipping","highClipping","w","c","beginPath","strokeStyle","startPos","undefined","reversed","moveTo","lineTo","stroke","fillStyle","fillRect","scaleType","lineWidth","tick","round"],"sourceRoot":""}