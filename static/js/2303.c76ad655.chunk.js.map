{"version":3,"file":"static/js/2303.c76ad655.chunk.js","mappings":"kOAsBO,SAASA,EAA+BC,IAW7CC,EAAAA,EAAAA,aACED,GACAE,EAAAA,EAAAA,UACEC,UACE,IACE,MAAMC,GAAOC,EAAAA,EAAAA,mBAAkBL,GAC/B,IAAKI,EAAKE,cAAgBN,EAAKO,+BAC7B,OAGF,MAAM,WAAEC,IAAeC,EAAAA,EAAAA,YAAWT,IAC5B,QAAEU,EAAO,UAAEC,EAAS,cAAEC,GAAkBZ,EAC9C,IAAKU,EACH,OAEF,MAAMG,GAAYC,EAAAA,EAAAA,iBAAgBd,GAC5Be,QAAkBP,EAAWQ,KACjCH,EACA,oCACA,CACEI,QAASb,EAAKc,cAAcC,cAC5BT,UACAC,YACAE,YACAD,mBAGAQ,EAAAA,EAAAA,SAAQpB,IACVA,EAAKqB,YAAYN,EAASO,KAAIC,GAAK,IAAIC,EAAAA,cAAcD,KAEzD,CAAE,MAAOE,KACFC,EAAAA,EAAAA,IAAiBD,KAAML,EAAAA,EAAAA,SAAQpB,KAClC2B,QAAQC,MAAMH,IACdhB,EAAAA,EAAAA,YAAWT,GAAM6B,YAAY,GAAGJ,IAAKA,GAEzC,IAEF,CAAEK,MAAO,MAGf,C","sources":["../../../plugins/variants/src/getMultiVariantFeaturesAutorun.ts"],"sourcesContent":["// jbrowse\nimport {\n  SimpleFeature,\n  getContainingView,\n  getSession,\n} from '@jbrowse/core/util'\nimport { isAbortException } from '@jbrowse/core/util/aborting'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport { autorun } from 'mobx'\nimport { addDisposer, isAlive } from 'mobx-state-tree'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Feature, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport interface Source {\n  name: string\n  color?: string\n  group?: string\n  [key: string]: string | undefined\n}\n\nexport function getMultiVariantFeaturesAutorun(self: {\n  configuration: AnyConfigurationModel\n  adapterConfig: AnyConfigurationModel\n  sources?: Source[]\n  mafFilter: number\n  statsReadyAndRegionNotTooLarge: boolean\n  adapterProps: () => Record<string, unknown>\n  setError: (error: unknown) => void\n  setFeatures: (f: Feature[]) => void\n  setMessage: (str: string) => void\n}) {\n  addDisposer(\n    self,\n    autorun(\n      async () => {\n        try {\n          const view = getContainingView(self) as LinearGenomeViewModel\n          if (!view.initialized || !self.statsReadyAndRegionNotTooLarge) {\n            return\n          }\n\n          const { rpcManager } = getSession(self)\n          const { sources, mafFilter, adapterConfig } = self\n          if (!sources) {\n            return\n          }\n          const sessionId = getRpcSessionId(self)\n          const features = (await rpcManager.call(\n            sessionId,\n            'MultiVariantGetSimplifiedFeatures',\n            {\n              regions: view.dynamicBlocks.contentBlocks,\n              sources,\n              mafFilter,\n              sessionId,\n              adapterConfig,\n            },\n          )) as SimpleFeatureSerialized[]\n          if (isAlive(self)) {\n            self.setFeatures(features.map(f => new SimpleFeature(f)))\n          }\n        } catch (e) {\n          if (!isAbortException(e) && isAlive(self)) {\n            console.error(e)\n            getSession(self).notifyError(`${e}`, e)\n          }\n        }\n      },\n      { delay: 1000 },\n    ),\n  )\n}\n"],"names":["getMultiVariantFeaturesAutorun","self","addDisposer","autorun","async","view","getContainingView","initialized","statsReadyAndRegionNotTooLarge","rpcManager","getSession","sources","mafFilter","adapterConfig","sessionId","getRpcSessionId","features","call","regions","dynamicBlocks","contentBlocks","isAlive","setFeatures","map","f","SimpleFeature","e","isAbortException","console","error","notifyError","delay"],"sourceRoot":""}