{"version":3,"file":"static/js/6839.99bb2477.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/BaseLinearDisplay/components/BlockErrorMessage.tsx","../../../packages/core/ui/ErrorMessageStackTraceDialog.tsx"],"sourcesContent":["import ErrorMessageStackTraceDialog from '@jbrowse/core/ui/ErrorMessageStackTraceDialog'\nimport { getSession } from '@jbrowse/core/util'\nimport RefreshIcon from '@mui/icons-material/Refresh'\nimport ReportIcon from '@mui/icons-material/Report'\nimport { IconButton, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport BlockMsg from './BlockMsg'\n\nconst BlockErrorMessage = observer(function ({\n  model,\n}: {\n  model: {\n    error?: unknown\n    reload: () => void\n  }\n}) {\n  return (\n    <BlockMsg\n      message={`${model.error}`}\n      severity=\"error\"\n      action={\n        <>\n          <Tooltip title=\"Reload track\">\n            <IconButton\n              data-testid=\"reload_button\"\n              onClick={() => {\n                model.reload()\n              }}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Tooltip>\n          <Tooltip title=\"Show stack trace\">\n            <IconButton\n              onClick={() => {\n                getSession(model).queueDialog(onClose => [\n                  ErrorMessageStackTraceDialog,\n                  {\n                    onClose,\n                    error: model.error as Error,\n                  },\n                ])\n              }}\n            >\n              <ReportIcon />\n            </IconButton>\n          </Tooltip>\n        </>\n      }\n    />\n  )\n})\n\nexport default BlockErrorMessage\n","import { useEffect, useState } from 'react'\n\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Typography,\n  alpha,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { SourceMapConsumer } from 'source-map-js'\nimport { makeStyles } from 'tss-react/mui'\n\nimport Dialog from './Dialog'\nimport ExternalLink from './ExternalLink'\nimport LoadingEllipses from './LoadingEllipses'\n\nasync function myfetch(uri: string) {\n  const res = await fetch(uri)\n  if (!res.ok) {\n    throw new Error(`HTTP ${res.status} fetching ${uri}: ${await res.text()}`)\n  }\n  return res\n}\n\nasync function myfetchjson(uri: string) {\n  const res = await myfetch(uri)\n  return res.json()\n}\n\nasync function myfetchtext(uri: string) {\n  const res = await myfetch(uri)\n  return res.text()\n}\n\n// produce a source-map resolved stack trace\n// reference code https://stackoverflow.com/a/77158517/2129219\nconst sourceMaps: Record<string, SourceMapConsumer> = {}\nasync function getSourceMapFromUri(uri: string) {\n  if (sourceMaps[uri] !== undefined) {\n    return sourceMaps[uri]\n  }\n  const uriQuery = new URL(uri).search\n  const currentScriptContent = await myfetchtext(uri)\n\n  let mapUri =\n    new RegExp(/\\/\\/# sourceMappingURL=(.*)/).exec(currentScriptContent)?.[1] ||\n    ''\n  mapUri = new URL(mapUri, uri).href + uriQuery\n\n  const data = await myfetchjson(mapUri)\n  const map = new SourceMapConsumer(data)\n  sourceMaps[uri] = map\n  return map\n}\n\nasync function mapStackTrace(stack: string) {\n  const stackLines = stack.split('\\n')\n  const mappedStack = []\n\n  for (const line of stackLines) {\n    const match = new RegExp(/(.*)(https?:\\/\\/.*):(\\d+):(\\d+)/).exec(line)\n    if (match === null) {\n      mappedStack.push(line)\n      continue\n    }\n\n    const uri = match[2]!\n    const consumer = await getSourceMapFromUri(uri)\n\n    const originalPosition = consumer.originalPositionFor({\n      line: Number.parseInt(match[3]!),\n      column: Number.parseInt(match[4]!),\n    })\n\n    if (\n      !originalPosition.source ||\n      !originalPosition.line ||\n      !originalPosition.column\n    ) {\n      mappedStack.push(line)\n      continue\n    }\n\n    mappedStack.push(\n      `${originalPosition.source}:${originalPosition.line}:${\n        originalPosition.column + 1\n      } (${match[1]!.trim()})`,\n    )\n  }\n\n  return mappedStack.join('\\n')\n}\n\nconst MAX_ERR_LEN = 10_000\n\n// Chrome has the error message in the stacktrace, firefox doesn't\nfunction stripMessage(trace: string, error: unknown) {\n  if (trace.startsWith('Error:')) {\n    // remove the error message, which can be very long due to mobx-state-tree\n    // stuff, to get just the stack trace\n    const err = `${error}`\n    return trace.slice(err.length)\n  } else {\n    return trace\n  }\n}\n\nconst useStyles = makeStyles()(theme => ({\n  pre: {\n    background: alpha(theme.palette.error.main, 0.2),\n    border: `1px solid ${theme.palette.divider}`,\n    overflow: 'auto',\n    margin: 20,\n    maxHeight: 300,\n  },\n}))\n\nfunction Contents({ text, extra }: { text: string; extra?: unknown }) {\n  const { classes } = useStyles()\n  const err = encodeURIComponent(\n    `${[\n      'I got this error from JBrowse, here is the stack trace:\\n',\n      '```',\n      text,\n      '```',\n      extra ? `supporting data: ${JSON.stringify(extra, null, 2)}` : '',\n    ].join('\\n')}\\n`,\n  )\n\n  const err2 = [\n    text,\n    extra ? `supporting data: ${JSON.stringify(extra, null, 2)}` : '',\n  ].join('\\n')\n\n  const email = 'jbrowse2@berkeley.edu'\n  const githubLink = `https://github.com/GMOD/jbrowse-components/issues/new?labels=bug&title=JBrowse+issue&body=${err}`\n  const emailLink = `mailto:${email}?subject=JBrowse%202%20error&body=${err}`\n\n  return (\n    <>\n      <Typography>\n        Post a new issue at{' '}\n        <ExternalLink href={githubLink}>GitHub</ExternalLink> or send an email\n        to <ExternalLink href={emailLink}>{email}</ExternalLink>{' '}\n      </Typography>\n      <pre className={classes.pre}>{err2}</pre>\n    </>\n  )\n}\n\nexport default function ErrorMessageStackTraceDialog({\n  error,\n  onClose,\n  extra,\n}: {\n  onClose: () => void\n  error: unknown\n  extra?: unknown\n}) {\n  const [mappedStackTrace, setMappedStackTrace] = useState<string>()\n  const [secondaryError, setSecondaryError] = useState<unknown>()\n  const [clicked, setClicked] = useState(false)\n  const stackTracePreProcessed = `${typeof error === 'object' && error !== null && 'stack' in error ? error.stack : ''}`\n  const errorText = error ? `${error}` : ''\n  const stackTrace = stripMessage(stackTracePreProcessed, errorText)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const res = await mapStackTrace(stackTrace)\n        setMappedStackTrace(res)\n      } catch (e) {\n        console.error(e)\n        setMappedStackTrace(stackTrace)\n        setSecondaryError(e)\n      }\n    })()\n  }, [stackTrace])\n\n  const errorBoxText = [\n    secondaryError\n      ? 'Error loading source map, showing raw stack trace below:'\n      : '',\n    errorText.length > MAX_ERR_LEN\n      ? `${errorText.slice(0, MAX_ERR_LEN)}...`\n      : errorText,\n    mappedStackTrace || 'No stack trace available',\n    // @ts-expect-error add version info at bottom if we are in jbrowse-web\n    window.JBrowseSession ? `JBrowse ${window.JBrowseSession.version}` : '',\n  ]\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog open onClose={onClose} title=\"Stack trace\" maxWidth=\"xl\">\n      <DialogContent>\n        {mappedStackTrace === undefined ? (\n          <LoadingEllipses variant=\"h6\" />\n        ) : (\n          <Contents text={errorBoxText} extra={extra} />\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            copy(errorBoxText)\n            setClicked(true)\n            setTimeout(() => {\n              setClicked(false)\n            }, 1000)\n          }}\n        >\n          {clicked ? 'Copied!' : 'Copy stack trace to clipboard'}\n        </Button>\n        <Button variant=\"contained\" color=\"primary\" onClick={onClose}>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["observer","model","_jsx","BlockMsg","message","error","severity","action","_jsxs","_Fragment","children","Tooltip","title","IconButton","onClick","reload","RefreshIcon","getSession","queueDialog","onClose","ErrorMessageStackTraceDialog","ReportIcon","async","myfetch","uri","res","fetch","ok","Error","status","text","sourceMaps","getSourceMapFromUri","undefined","uriQuery","URL","search","currentScriptContent","myfetchtext","mapUri","RegExp","exec","href","data","json","myfetchjson","map","SourceMapConsumer","MAX_ERR_LEN","useStyles","makeStyles","theme","pre","background","alpha","palette","main","border","divider","overflow","margin","maxHeight","Contents","extra","classes","err","encodeURIComponent","JSON","stringify","join","err2","email","githubLink","emailLink","Typography","ExternalLink","className","mappedStackTrace","setMappedStackTrace","useState","secondaryError","setSecondaryError","clicked","setClicked","errorText","stackTrace","trace","startsWith","slice","length","stripMessage","stack","useEffect","stackLines","split","mappedStack","line","match","push","originalPosition","originalPositionFor","Number","parseInt","column","source","trim","mapStackTrace","e","console","errorBoxText","window","JBrowseSession","version","filter","f","Dialog","open","maxWidth","DialogContent","LoadingEllipses","variant","DialogActions","Button","color","copy","setTimeout"],"sourceRoot":""}