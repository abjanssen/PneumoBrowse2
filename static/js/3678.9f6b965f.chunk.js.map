{"version":3,"file":"static/js/3678.9f6b965f.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/LinearSNPCoverageDisplay/components/TooltipContents.tsx","../../../plugins/alignments/src/LinearSNPCoverageDisplay/components/Tooltip.tsx"],"sourcesContent":["import { forwardRef } from 'react'\n\nimport { toLocale } from '@jbrowse/core/util'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCoverageBin } from '../../shared/types'\nimport type { Feature } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(() => ({\n  td: {\n    whiteSpace: 'nowrap',\n  },\n}))\n\nconst toP = (s = 0) => +(+s).toFixed(1)\n\nconst pct = (n: number, total = 1) => `${toP((n / (total || 1)) * 100)}%`\n\ninterface Props {\n  feature: Feature\n  model: {\n    visibleModifications: Map<string, { color: string }>\n  }\n}\n\nfunction ColorSquare({\n  base,\n  model,\n}: {\n  base: string\n  model: { visibleModifications: Map<string, { color: string }> }\n}) {\n  const { visibleModifications } = model\n  return base.startsWith('mod_') ? (\n    <div\n      style={{\n        width: 10,\n        height: 10,\n        background: visibleModifications.get(base.replace('mod_', ''))?.color,\n      }}\n    />\n  ) : null\n}\n\nconst TooltipContents = forwardRef<HTMLDivElement, Props>(\n  function TooltipContents2(props, reactRef) {\n    const { feature, model } = props\n    const { classes } = useStyles()\n    const start = feature.get('start') + 1\n    const end = feature.get('end')\n    const name = feature.get('refName')\n    const { refbase, readsCounted, depth, ref, ...info } = feature.get(\n      'snpinfo',\n    ) as BaseCoverageBin\n\n    return (\n      <div ref={reactRef}>\n        <table>\n          <caption>\n            {[\n              name,\n              start === end\n                ? toLocale(start)\n                : `${toLocale(start)}..${toLocale(end)}`,\n            ]\n              .filter(f => !!f)\n              .join(':')}\n          </caption>\n          <thead>\n            <tr>\n              <th />\n              <th>Base</th>\n              <th>Count</th>\n              <th>% of Total</th>\n              <th>Strands</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td />\n              <td>Total</td>\n              <td>{readsCounted}</td>\n              <td> </td>\n              <td> </td>\n            </tr>\n            <tr>\n              <td />\n              <td>REF {refbase ? `(${refbase.toUpperCase()})` : ''}</td>\n              <td>{ref.entryDepth}</td>\n              <td>{pct(ref.entryDepth, readsCounted)}</td>\n              <td>\n                {ref['-1'] ? `${ref['-1']}(-)` : ''}\n                {ref['1'] ? `${ref['1']}(+)` : ''}\n              </td>\n            </tr>\n\n            {Object.entries(info).map(([key, entry]) =>\n              Object.entries(entry).map(([base, score]) => (\n                <tr key={`${key}_${base}`}>\n                  <td>\n                    <ColorSquare model={model} base={base} />\n                  </td>\n                  <td>{base.toUpperCase()} </td>\n                  <td className={classes.td}>\n                    {[\n                      score.entryDepth,\n                      score.avgProbability !== undefined\n                        ? `(avg. ${pct(score.avgProbability)} prob.)`\n                        : '',\n                    ]\n                      .filter(f => !!f)\n                      .join(' ')}\n                  </td>\n\n                  <td>\n                    {base === 'depth' || base === 'skip'\n                      ? '---'\n                      : pct(score.entryDepth, readsCounted)}\n                  </td>\n                  <td>\n                    {score['-1'] ? `${score['-1']}(-)` : ''}\n                    {score['1'] ? `${score['1']}(+)` : ''}\n                  </td>\n                </tr>\n              )),\n            )}\n          </tbody>\n        </table>\n      </div>\n    )\n  },\n)\n\nexport default TooltipContents\n","import { Tooltip } from '@jbrowse/plugin-wiggle'\nimport { observer } from 'mobx-react'\n\nimport TooltipContents from './TooltipContents'\n\nimport type { Feature } from '@jbrowse/core/util'\n\ntype Coord = [number, number]\n\nconst SNPCoverageTooltip = observer(function (props: {\n  model: {\n    featureUnderMouse?: Feature\n  }\n  height: number\n  offsetMouseCoord: Coord\n  clientMouseCoord: Coord\n  clientRect?: DOMRect\n}) {\n  const { model } = props\n  const { featureUnderMouse: feat } = model\n  return feat && feat.get('type') === 'skip' ? null : (\n    <Tooltip TooltipContents={TooltipContents} {...props} />\n  )\n})\n\nexport default SNPCoverageTooltip\n"],"names":["useStyles","makeStyles","td","whiteSpace","pct","n","total","toP","s","toFixed","ColorSquare","base","model","visibleModifications","startsWith","_jsx","style","width","height","background","get","replace","color","forwardRef","props","reactRef","feature","classes","start","end","name","refbase","readsCounted","depth","ref","info","children","_jsxs","toLocale","filter","f","join","toUpperCase","entryDepth","Object","entries","map","key","entry","score","className","undefined","avgProbability","observer","featureUnderMouse","feat","Tooltip","TooltipContents"],"sourceRoot":""}