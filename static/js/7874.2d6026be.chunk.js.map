{"version":3,"file":"static/js/7874.2d6026be.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/JsonEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => {\n              slot.set(evt.target.checked)\n            }}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import { useEffect, useState } from 'react'\n\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport HelpIcon from '@mui/icons-material/Help'\nimport { IconButton, TextField, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => {\n            setCode(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import { Suspense, useState } from 'react'\n\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport { TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => {\n          setDisplayed(!displayed)\n        }}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <Suspense fallback={null}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(event)\n            }}\n          />\n        </Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import { SanitizedHTML } from '@jbrowse/core/ui'\nimport { TextField } from '@mui/material'\n\nimport type { TextFieldProps } from '@mui/material'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      fullWidth\n      slotProps={{\n        formHelperText: {\n          component: 'div',\n        },\n      }}\n    />\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport { InputLabel, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n  callbackEditor: {\n    fontFamily,\n    fontSize,\n    background: theme.palette.background.default,\n    width: 800,\n    marginTop: '16px',\n    border: '1px solid rgba(0,0,0,0.42)',\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n}))\n\nconst JsonEditor = observer(function JsonEditor({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: unknown\n    set: (arg: unknown) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [contents, setContents] = useState(JSON.stringify(slot.value, null, 2))\n  const [error, setError] = useState<unknown>()\n\n  useEffect(() => {\n    try {\n      setError(undefined)\n      slot.set(JSON.parse(contents))\n    } catch (e) {\n      console.error({ e })\n      setError(e)\n    }\n  }, [contents, slot])\n\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <InputLabel shrink htmlFor=\"json-editor\">\n          {slot.name}\n        </InputLabel>\n        <TextField\n          id=\"json-editor\"\n          className={classes.callbackEditor}\n          value={contents}\n          helperText={slot.description}\n          multiline\n          onChange={event => {\n            setContents(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </div>\n    </>\n  )\n})\n\nexport default JsonEditor\n","import { useEffect, useState } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nexport default NumberEditor\n","import { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => {\n                  slot.add(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, 0)\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import { useState } from 'react'\n\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: (arg: number, arg2: string) => void\n    removeAtIndex: (arg: number) => void\n    add: (arg: string) => void\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={`${JSON.stringify(val)}-${idx}`} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => {\n                slot.setAtIndex(idx, evt.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => {\n                          slot.removeAtIndex(idx)\n                        }}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => {\n            setAddNew(true)\n          }}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) => {\n                  slot.setAtKeyIndex(key, idx, val)\n                },\n                removeAtIndex: (idx: number) => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: (val: string) => {\n                  slot.addToKey(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, [])\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import { useEffect, useState } from 'react'\n\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { getEnv } from '@jbrowse/core/util'\nimport { getSubType, getUnionSubTypes } from '@jbrowse/core/util/mst-reflection'\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers } from 'mobx-state-tree'\n\nimport BooleanEditor from './BooleanEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport JsonEditor from './JsonEditor'\nimport NumberEditor from './NumberEditor'\nimport NumberMapEditor from './NumberMapEditor'\nimport StringArrayEditor from './StringArrayEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport type { FileLocation } from '@jbrowse/core/util'\nimport type { ILiteralType } from '@jbrowse/core/util/mst-reflection'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value!))[1]!,\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => {\n        slot.set(location)\n      }}\n      name={slot.name}\n      description={slot.description}\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import {\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormGroup,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\nimport { makeStyles } from 'tss-react/mui'\n\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = subslot.type\n          ? `${singular(slotName)} ${subslot.type}`\n          : `${singular(slotName)} ${slotIndex + 1}`\n        return <Member key={key} {...props} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.icon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeNameChoices.length ? (\n            <TypeSelector\n              typeNameChoices={typeNameChoices}\n              slotName={slotName}\n              slot={slot}\n              onChange={evt => {\n                if (evt.target.value !== slot.type) {\n                  schema.setSubschema(slotName, {\n                    type: evt.target.value,\n                  })\n                }\n              }}\n            />\n          ) : null}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  } else if (isConfigurationSlotType(slotSchema)) {\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  } else {\n    return null\n  }\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used for\n  // different tracks since only the backing model changes for example see pr\n  // #804\n  const { target } = model\n  const key = readConfObject(target, 'trackId')\n  const name = readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.icon} />}\n      >\n        <Typography>\n          <SanitizedHTML html={name ?? 'Configuration'} />\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        <Schema schema={target} />\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","_jsxs","FormControl","children","_jsx","FormControlLabel","label","name","control","Checkbox","checked","value","onChange","evt","set","target","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","color","fontSize","classes","code","setCode","useState","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","undefined","e","console","_Fragment","className","TextField","multiline","split","event","style","background","slotProps","input","Tooltip","title","contextVariable","arrow","IconButton","onClick","newWindow","window","open","opener","HelpIcon","ColorSlot","props","$","_c","t0","t1","TextFieldProps","t2","t3","displayed","setDisplayed","t4","t5","t6","t7","t8","t9","t10","t11","Symbol","for","display","event_0","Suspense","fallback","ColorPicker","helperText","fullWidth","ConfigurationTextField","SanitizedHTML","html","formHelperText","component","default","border","contents","setContents","JSON","stringify","setError","parse","InputLabel","shrink","htmlFor","id","val","setVal","num","Number","parseFloat","isNaN","reset","type","card","spacing","setValue","map","key","Card","raised","CardHeader","action","remove","DeleteIcon","CardContent","NumberEditor","add","disableTypography","placeholder","endAdornment","InputAdornment","position","disabled","AddIcon","addNew","setAddNew","List","disablePadding","idx","ListItem","disableGutters","setAtIndex","removeAtIndex","Button","variant","margin","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","icon","tertiary","contrastText","expansionPanelDetails","padding","accordion","primary","noOverflow","Member","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","join","AccordionDetails","TypeSelector","setSubschema","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}