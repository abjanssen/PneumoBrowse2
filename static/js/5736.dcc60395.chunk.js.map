{"version":3,"file":"static/js/5736.dcc60395.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/LaunchSupplementaryAlignmentBreakpointSplitViewPanel.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/getSAFeatures.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/SupplementaryAlignmentsLocStrings.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/SupplementaryAlignments.tsx"],"sourcesContent":["import React, { lazy, useEffect, useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { SimpleFeature, getSession, toLocale } from '@jbrowse/core/util'\nimport { Link, Typography } from '@mui/material'\n\nimport { getSAFeatures } from './getSAFeatures'\n\nimport type { ReducedFeature } from './getSAFeatures'\nimport type { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst BreakendMultiLevelOptionDialog = lazy(\n  () => import('./BreakendMultiLevelOptionDialog'),\n)\nconst BreakendSingleLevelOptionDialog = lazy(\n  () => import('./BreakendSingleLevelOptionDialog'),\n)\n\nexport default function LaunchBreakpointSplitViewPanel({\n  model,\n  feature,\n}: {\n  model: AlignmentFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { view } = model\n  const [res, setRes] = useState<ReducedFeature[]>()\n  const [error, setError] = useState<unknown>()\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const feats = await getSAFeatures({\n          view,\n          feature: new SimpleFeature(feature),\n        })\n        setRes(feats)\n      } catch (e) {\n        setError(e)\n        console.error(e)\n      }\n    })()\n  }, [feature, view])\n\n  const ret = [] as [ReducedFeature, ReducedFeature][]\n  if (res) {\n    for (let i = 0; i < res.length - 1; i++) {\n      ret.push([res[i]!, res[i + 1]!] as const)\n    }\n  }\n  return ret.length ? (\n    <div>\n      <Typography>Launch split view</Typography>\n      {error ? <ErrorMessage error={error} /> : null}\n      <ul>\n        {ret.map((arg, index) => {\n          const [f1, f2] = arg\n          return (\n            <li key={`${JSON.stringify(arg)}-${index}`}>\n              {f1.refName}:{toLocale(f1.strand === 1 ? f1.end : f1.start)} -&gt;{' '}\n              {f2.refName}:{toLocale(f2.strand === 1 ? f2.start : f2.end)}{' '}\n              <TopBottomSplitViewLink model={model} f1={f1} f2={f2} />{' '}\n              <SideBySideViewLink model={model} f1={f1} f2={f2} />\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  ) : null\n}\n\nfunction TopBottomSplitViewLink({\n  model,\n  f1,\n  f2,\n}: {\n  model: AlignmentFeatureWidgetModel\n  f1: ReducedFeature\n  f2: ReducedFeature\n}) {\n  return (\n    <Link\n      href=\"#\"\n      onClick={event => {\n        event.preventDefault()\n        const session = getSession(model)\n        session.queueDialog(handleClose => [\n          BreakendMultiLevelOptionDialog,\n          {\n            handleClose,\n            session,\n            feature: new SimpleFeature({ ...f1, mate: f2 }),\n            view: model.view,\n            assemblyName: model.view.displayedRegions[0].assemblyName,\n          },\n        ])\n      }}\n    >\n      (top/bottom)\n    </Link>\n  )\n}\n\nfunction SideBySideViewLink({\n  model,\n  f1,\n  f2,\n}: {\n  model: AlignmentFeatureWidgetModel\n  f1: ReducedFeature\n  f2: ReducedFeature\n}) {\n  return (\n    <Link\n      href=\"#\"\n      onClick={event => {\n        event.preventDefault()\n        const session = getSession(model)\n        session.queueDialog(handleClose => [\n          BreakendSingleLevelOptionDialog,\n          {\n            handleClose,\n            session,\n            feature: new SimpleFeature({ ...f1, mate: f2 }),\n            view: model.view,\n            assemblyName: model.view.displayedRegions[0].assemblyName,\n          },\n        ])\n      }}\n    >\n      (single row)\n    </Link>\n  )\n}\n","import { getSession } from '@jbrowse/core/util'\n\nimport { featurizeSA, getClip, getLengthSansClipping } from '../MismatchParser'\n\nimport type { Feature } from '@jbrowse/core/util'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport interface ReducedFeature {\n  refName: string\n  start: number\n  clipPos: number\n  end: number\n  strand: number\n  seqLength: number\n  syntenyId?: number\n  uniqueId: string\n  mate: {\n    refName: string\n    start: number\n    end: number\n    syntenyId?: number\n    uniqueId?: string\n  }\n}\n\nexport async function getSAFeatures({\n  view,\n  feature,\n}: {\n  view: LinearGenomeViewModel\n  feature: Feature\n}) {\n  const { assemblyManager } = getSession(view)\n  const cigar = feature.get('CIGAR') as string\n  const origStrand = feature.get('strand') as number\n  const SA = (feature.get('tags')?.SA as string) || ''\n  const readName = feature.get('name') as string\n  const clipPos = getClip(cigar, 1)\n\n  // get the canonical refname for the read because if the read.get('refName')\n  // is chr1 and the actual fasta refName is 1 then no tracks can be opened on\n  // the top panel of the linear read vs ref\n  const assembly = await assemblyManager.waitForAssembly(view.assemblyNames[0]!)\n  if (!assembly) {\n    throw new Error('assembly not found')\n  }\n\n  const suppAlns = featurizeSA(SA, feature.id(), origStrand, readName, true)\n\n  const feat = feature.toJSON()\n  feat.clipPos = clipPos\n  feat.strand = 1\n\n  feat.mate = {\n    refName: readName,\n    start: clipPos,\n    end: clipPos + getLengthSansClipping(cigar),\n  }\n  const features = [feat, ...suppAlns] as ReducedFeature[]\n\n  features.forEach((f, idx) => {\n    f.refName = assembly.getCanonicalRefName(f.refName) || f.refName\n    f.syntenyId = idx\n    f.mate.syntenyId = idx\n    f.mate.uniqueId = `${f.uniqueId}_mate`\n  })\n  features.sort((a, b) => a.clipPos - b.clipPos)\n  return features\n}\n","import React from 'react'\n\nimport { Link, Typography } from '@mui/material'\n\nimport { getLengthOnRef } from '../MismatchParser'\nimport { navToLoc } from './util'\n\nimport type { AlignmentFeatureWidgetModel } from './stateModelFactory'\n\nexport default function SupplementaryAlignmentsLocStrings({\n  tag,\n  model,\n}: {\n  tag: string\n  model: AlignmentFeatureWidgetModel\n}) {\n  return (\n    <div>\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, idx) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar!)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart!\n            const end = +saStart! + saLength\n            const sp = start - extra\n            const ep = end + extra\n            const locString = `${saRef}:${Math.max(1, sp)}-${ep}`\n            const displayStart = start.toLocaleString('en-US')\n            const displayEnd = end.toLocaleString('en-US')\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`\n            return (\n              /* biome-ignore lint/suspicious/noArrayIndexKey: */\n              <li key={`${locString}-${idx}`}>\n                <Link\n                  href=\"#\"\n                  onClick={async event => {\n                    event.preventDefault()\n\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    navToLoc(locString, model)\n                  }}\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { getEnv, getSession } from '@jbrowse/core/util'\n\nimport LaunchBreakpointSplitViewPanel from './LaunchSupplementaryAlignmentBreakpointSplitViewPanel'\nimport SupplementaryAlignmentsLocStrings from './SupplementaryAlignmentsLocStrings'\n\nimport type { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\nexport default function SupplementaryAlignments(props: {\n  tag: string\n  model: AlignmentFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, tag, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  let hasBreakendSplitView = false\n\n  try {\n    hasBreakendSplitView = !!pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <SupplementaryAlignmentsLocStrings model={model} tag={tag} />\n      {hasBreakendSplitView ? (\n        <LaunchBreakpointSplitViewPanel model={model} feature={feature} />\n      ) : null}\n    </BaseCard>\n  )\n}\n"],"names":["BreakendMultiLevelOptionDialog","lazy","BreakendSingleLevelOptionDialog","LaunchBreakpointSplitViewPanel","model","feature","view","res","setRes","useState","error","setError","useEffect","feats","async","assemblyManager","getSession","cigar","get","origStrand","SA","readName","clipPos","getClip","assembly","waitForAssembly","assemblyNames","Error","suppAlns","featurizeSA","id","feat","toJSON","strand","mate","refName","start","end","getLengthSansClipping","features","forEach","f","idx","getCanonicalRefName","syntenyId","uniqueId","sort","a","b","getSAFeatures","SimpleFeature","e","console","ret","i","length","push","React","Typography","ErrorMessage","map","arg","index","f1","f2","key","JSON","stringify","toLocale","TopBottomSplitViewLink","SideBySideViewLink","Link","href","onClick","event","preventDefault","session","queueDialog","handleClose","assemblyName","displayedRegions","SupplementaryAlignmentsLocStrings","tag","split","filter","saRef","saStart","saStrand","saCigar","saLength","getLengthOnRef","extra","Math","floor","sp","ep","locString","max","displayString","toLocaleString","navToLoc","SupplementaryAlignments","props","pluginManager","getEnv","hasBreakendSplitView","getViewType","BaseCard","_extends","title"],"sourceRoot":""}