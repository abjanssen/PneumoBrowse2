{"version":3,"file":"static/js/9032.56c0b200.chunk.js","mappings":"wOAUA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAaC,IAAS,CACtCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,GACtBC,WAAYJ,EAAMG,QAAQ,IAE5BE,SAAU,CACRH,OAAQF,EAAMG,QAAQ,IAExBG,WAAY,CACVJ,OAAQF,EAAMG,QAAQ,GACtBI,UAAWP,EAAMG,QAAQ,OAuE7B,GAnEoBK,EAAAA,EAAAA,UAAS,UAAU,MACrCC,IAIA,MAAM,QAAEC,GAAYZ,KACd,QAAEa,IAAYC,EAAAA,EAAAA,YAAWH,IACzB,cAAEI,IAAkBC,EAAAA,EAAAA,QAAOL,IAC3B,QAAEM,GAAYF,EACdG,EAAc,IAAIC,IACtBF,EACGG,OAAOC,GAAKN,EAAcO,eAAeD,EAAEE,OAAOC,QAClDC,IAAIJ,GAAKA,EAAEE,OAGhB,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAWf,EAAQT,KAAKyB,SAAA,EAC3BC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,SAAQJ,SAAC,eAGxCC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,SAASL,UAAWf,EAAQL,SAASqB,SACjEf,KAEHa,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAACE,MAAM,SAAQJ,SAAA,CAAC,iBACZC,EAAAA,EAAAA,KAACI,EAAAA,aAAY,CAACC,KAAK,mBAAkBN,SAAC,SAAoB,IAAI,cAG7EC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACE,MAAM,SAAQJ,SAAC,sDAG3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAWf,EAAQJ,WAAWoB,SAAA,EACjCC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,6BACZC,EAAAA,EAAAA,KAAA,MAAAD,SACGX,EACEG,OAAOe,IAAWjB,EAAYkB,IAAID,EAAOZ,OACzCE,IAAIU,IACH,MAAM,IAAEE,EAAG,KAAEd,EAAI,QAAEV,EAAU,IAAOsB,EAC9BG,EAAO,GAAGf,KAAQV,GAAW,KACnC,OACEgB,EAAAA,EAAAA,KAAA,MAAAD,SACGO,EAAOE,KACNR,EAAAA,EAAAA,KAACI,EAAAA,aAAY,CAACC,KAAMG,EAAIT,SAAEU,KAE1BT,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAEU,KAJRH,EAAOZ,WAUxBM,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,yBACZC,EAAAA,EAAAA,KAAA,MAAAD,SACGX,EACEG,OAAOe,GAAUjB,EAAYkB,IAAID,EAAOZ,OACxCE,IAAIU,IACHN,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAAAF,SAAA,CACRO,EAAOZ,KAAK,IAAEY,EAAOtB,SAAW,OAF5BsB,EAAOZ,cAU9B,E","sources":["../../../plugins/menus/src/AboutWidget/components/AboutWidget.tsx"],"sourcesContent":["import { ExternalLink } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    margin: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n  },\n  subtitle: {\n    margin: theme.spacing(1),\n  },\n  pluginList: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(5),\n  },\n}))\n\nconst AboutWidget = observer(function ({\n  model,\n}: {\n  model: IAnyStateTreeNode\n}) {\n  const { classes } = useStyles()\n  const { version } = getSession(model)\n  const { pluginManager } = getEnv(model)\n  const { plugins } = pluginManager as PluginManager\n  const corePlugins = new Set(\n    plugins\n      .filter(p => pluginManager.pluginMetadata[p.name]?.isCore)\n      .map(p => p.name),\n  )\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" align=\"center\">\n        JBrowse 2\n      </Typography>\n      <Typography variant=\"h6\" align=\"center\" className={classes.subtitle}>\n        {version}\n      </Typography>\n      <Typography align=\"center\">\n        JBrowse is a <ExternalLink href=\"http://gmod.org/\">GMOD</ExternalLink>{' '}\n        project\n      </Typography>\n      <br />\n      <Typography align=\"center\">\n        Â© 2019-2022 The Evolutionary Software Foundation\n      </Typography>\n      <div className={classes.pluginList}>\n        <Typography>External plugins loaded</Typography>\n        <ul>\n          {plugins\n            .filter(plugin => !corePlugins.has(plugin.name))\n            .map(plugin => {\n              const { url, name, version = '' } = plugin\n              const text = `${name} ${version || ''}`\n              return (\n                <li key={plugin.name}>\n                  {plugin.url ? (\n                    <ExternalLink href={url}>{text}</ExternalLink>\n                  ) : (\n                    <Typography>{text}</Typography>\n                  )}\n                </li>\n              )\n            })}\n        </ul>\n        <Typography>Core plugins loaded</Typography>\n        <ul>\n          {plugins\n            .filter(plugin => corePlugins.has(plugin.name))\n            .map(plugin => (\n              <li key={plugin.name}>\n                <Typography>\n                  {plugin.name} {plugin.version || ''}\n                </Typography>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  )\n})\n\nexport default AboutWidget\n"],"names":["useStyles","makeStyles","theme","root","margin","spacing","paddingTop","subtitle","pluginList","marginTop","observer","model","classes","version","getSession","pluginManager","getEnv","plugins","corePlugins","Set","filter","p","pluginMetadata","name","isCore","map","_jsxs","className","children","_jsx","Typography","variant","align","ExternalLink","href","plugin","has","url","text"],"sourceRoot":""}