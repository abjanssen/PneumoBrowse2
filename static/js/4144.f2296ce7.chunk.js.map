{"version":3,"file":"static/js/4144.f2296ce7.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/core/ui/DataGridFlexContainer.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Position.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/CoreDetails.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeaturePanel.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { isObject, max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  for (const elt of arr) {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  }\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n","import { isValidElement } from 'react'\n\nimport { Link } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n  formatter,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n  formatter?: (value: unknown, key: string) => React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return value != null ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={formatter ? formatter(value, name) : value} />\n    </div>\n  ) : null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  formatter,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  formatter?: (value: unknown, key: string) => React.ReactNode\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes\n        formatter={formatter}\n        attributes={value[0]}\n        prefix={[...prefix, name]}\n      />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={formatter ? formatter(value[0], name) : value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            formatter={formatter}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={formatter ? formatter(val, name) : val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport DataGridFlexContainer from '../../ui/DataGridFlexContainer'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <DataGridFlexContainer>\n          <DataGrid\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            showToolbar={checked}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  width: widths[index],\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value || '')} />\n                    </div>\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </DataGridFlexContainer>\n      </div>\n    )\n  }\n  return null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isObject, isUriLocation } from '../../util'\n\nimport type { Descriptors } from '../types'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Descriptors\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const filteredFormattedAttributes = Object.entries({\n    ...rest,\n    ...__jbrowsefmt,\n  }).filter(([k, v]) => v != null && !omits.has(k))\n  const maxLabelWidth = generateMaxWidth(filteredFormattedAttributes, prefix)\n\n  return (\n    <>\n      {filteredFormattedAttributes.map(([key, value]) => {\n        const description = accessNested([...prefix, key], descriptions)\n        if (Array.isArray(value)) {\n          // check if it looks like an array of objects, which could be used\n          // in data grid\n          return value.length > 1 && value.every(val => isObject(val)) ? (\n            <DataGridDetails\n              key={key}\n              name={key}\n              prefix={prefix}\n              value={value}\n            />\n          ) : (\n            <ArrayValue\n              key={key}\n              name={key}\n              value={value}\n              formatter={formatter}\n              description={description}\n              prefix={prefix}\n            />\n          )\n        } else if (isObject(value)) {\n          const { omitSingleLevel, ...rest } = props\n          return isUriLocation(value) ? (\n            hideUris ? null : (\n              <UriAttribute\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            )\n          ) : (\n            <Attributes\n              key={key}\n              {...rest}\n              formatter={formatter}\n              attributes={value}\n              descriptions={descriptions}\n              prefix={[...prefix, key]}\n            />\n          )\n        } else {\n          return (\n            <SimpleField\n              key={key}\n              name={key}\n              formatter={formatter}\n              value={value}\n              description={description}\n              prefix={prefix}\n              width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n            />\n          )\n        }\n      })}\n    </>\n  )\n}\n","import { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  flexContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n})\n\n// https://mui.com/x/react-data-grid/layout/#flex-parent-container\nexport default function DataGridFlexContainer({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return <div className={classes.flexContainer}>{children}</div>\n}\n","import { assembleLocString } from '../../util'\n\nimport type { BaseProps } from '../types'\n\nexport default function Position(props: BaseProps) {\n  const { feature } = props\n  const strand = feature.strand as number\n  const strandMap: Record<string, string> = {\n    '-1': '-',\n    '0': '',\n    '1': '+',\n  }\n  const str = strandMap[strand] ? `(${strandMap[strand]})` : ''\n  const loc = assembleLocString(feature)\n  return <>{`${loc} ${str}`}</>\n}\n","import Position from './Position'\nimport SimpleField from './SimpleField'\nimport { toLocale } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseProps } from '../types'\n\nexport default function CoreDetails(props: BaseProps) {\n  const { feature } = props\n  const obj = feature as SimpleFeatureSerialized & {\n    start: number\n    end: number\n    assemblyName?: string\n    strand: number\n    refName: string\n    __jbrowsefmt: {\n      start?: number\n      assemblyName?: string\n      end?: number\n      refName?: string\n      name?: string\n    }\n  }\n\n  const formattedFeat = { ...obj, ...obj.__jbrowsefmt }\n  const { start, end } = formattedFeat\n\n  const displayedDetails: Record<string, any> = {\n    ...formattedFeat,\n    length: toLocale(end - start),\n  }\n\n  const coreRenderedDetails = {\n    description: 'Description',\n    name: 'Name',\n    length: 'Length',\n    type: 'Type',\n  }\n  return (\n    <>\n      <SimpleField\n        name=\"Position\"\n        value={<Position {...props} feature={formattedFeat} />}\n      />\n      {Object.entries(coreRenderedDetails)\n        .map(([key, name]) => [name, displayedDetails[key]])\n        .filter(([, value]) => value != null)\n        .map(([name, value]) => (\n          <SimpleField key={name} name={name} value={value} />\n        ))}\n    </>\n  )\n}\n","import { Suspense, lazy, useState } from 'react'\n\nimport Help from '@mui/icons-material/Help'\nimport { Button, FormControl, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { LoadingEllipses } from '../../ui'\nimport { getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseFeatureWidgetModel } from '../stateModelFactory'\n\n// lazies\nconst SequenceFeatureDetails = lazy(() => import('./SequenceFeatureDetails'))\nconst HelpDialog = lazy(() => import('./dialogs/HelpDialog'))\n\nconst useStyles = makeStyles()(theme => ({\n  formControl: {\n    margin: 0,\n  },\n\n  container: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n}))\n\n// display the stitched-together sequence of a gene's CDS, cDNA, or protein\n// sequence. this is a best effort and weird genomic phenomena could lead these\n// to not be 100% accurate\nconst SequenceFeaturePanel = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { classes } = useStyles()\n  const [shown, setShown] = useState(false)\n\n  return (\n    <div className={classes.container}>\n      <FormControl className={classes.formControl}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setShown(!shown)\n          }}\n        >\n          {shown ? 'Hide feature sequence' : 'Show feature sequence'}\n        </Button>\n      </FormControl>\n\n      <IconButton\n        onClick={() => {\n          getSession(model).queueDialog(handleClose => [\n            HelpDialog,\n            {\n              handleClose,\n            },\n          ])\n        }}\n      >\n        <Help />\n      </IconButton>\n      {shown ? (\n        <Suspense fallback={<LoadingEllipses />}>\n          <SequenceFeatureDetails\n            key={feature.uniqueId}\n            model={model}\n            feature={feature}\n          />\n        </Suspense>\n      ) : null}\n    </div>\n  )\n})\n\nexport default SequenceFeaturePanel\n","import { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { Divider, Typography } from '@mui/material'\n\nimport { generateTitle } from './util'\nimport SequenceFeatureDetails from '../SequenceFeatureDetails'\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\nimport { ErrorMessage } from '../../ui'\nimport { getEnv, getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { Descriptors } from '../types'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// coreDetails are omitted in some circumstances\nconst coreDetails = [\n  'name',\n  'start',\n  'end',\n  'strand',\n  'refName',\n  'description',\n  'type',\n]\n\ninterface PanelDescriptor {\n  name: string\n  Component: React.FC<any>\n}\n\nexport default function FeatureDetails(props: {\n  model: IAnyStateTreeNode\n  feature: SimpleFeatureSerialized\n  depth?: number\n  omit?: string[]\n  descriptions?: Descriptors\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}) {\n  const { omit = [], model, feature, depth = 0 } = props\n  const { maxDepth } = model\n  const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature\n  const pm = getEnv(model).pluginManager\n  const session = getSession(model)\n\n  const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {\n    session,\n    feature,\n    model,\n  }) as PanelDescriptor | undefined\n  const m = mate as { start: number; end: number; refName: string } | undefined\n  return (\n    <BaseCard title={generateTitle(name, id, type)}>\n      <Typography>Core details</Typography>\n      <CoreDetails {...props} />\n      {m ? (\n        <>\n          <Divider />\n          <Typography>Mate details</Typography>\n          <CoreDetails\n            {...props}\n            feature={{\n              ...m,\n              start: m.start,\n              end: m.end,\n              refName: m.refName,\n              uniqueId: `${uniqueId}-mate`,\n            }}\n          />\n        </>\n      ) : null}\n\n      <Divider />\n      <Typography>Attributes</Typography>\n      <Attributes\n        attributes={feature}\n        {...props}\n        omit={omit}\n        omitSingleLevel={coreDetails}\n      />\n\n      <ErrorBoundary FallbackComponent={e => <ErrorMessage error={e.error} />}>\n        <SequenceFeatureDetails {...props} />\n      </ErrorBoundary>\n\n      {ExtraPanel ? (\n        <>\n          <Divider />\n          <BaseCard title={ExtraPanel.name}>\n            <ExtraPanel.Component {...props} />\n          </BaseCard>\n        </>\n      ) : null}\n\n      {depth < maxDepth && subfeatures?.length ? (\n        <BaseCard title=\"Subfeatures\" defaultExpanded={depth < 1}>\n          {subfeatures.map((sub, idx) => (\n            <FeatureDetails\n              key={JSON.stringify(sub)}\n              feature={{\n                ...sub,\n                uniqueId: `${uniqueId}_${idx}`,\n              }}\n              model={model}\n              depth={depth + 1}\n            />\n          ))}\n        </BaseCard>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["isEmpty","obj","Object","keys","length","generateTitle","name","id","type","ellipses","filter","f","join","generateMaxWidth","array","prefix","Math","ceil","max","map","key","measureText","accessNested","arr","obj2","elt","isObject","Description","undefined","useStyles","makeStyles","theme","fieldValue","wordBreak","maxHeight","fontSize","padding","spacing","overflow","BasicValue","value","classes","isLink","exec","_jsx","className","children","isValidElement","Link","href","SanitizedHTML","html","JSON","stringify","String","field","display","flexWrap","SimpleField","description","width","formatter","_jsxs","FieldName","fieldSubvalue","border","palette","action","selected","boxSizing","ArrayValue","Attributes","attributes","every","val","_Fragment","i","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","sort","unionKeys","Set","rows","entries","k","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","DataGridFlexContainer","DataGrid","rowHeight","columnHeaderHeight","hideFooter","showToolbar","columns","index","renderCell","getStr","UriField","uri","baseUri","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","hideUris","omits","__jbrowsefmt","filteredFormattedAttributes","v","maxLabelWidth","Array","isArray","isUriLocation","UriAttribute","min","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","Tooltip","title","placement","style","flexContainer","flexDirection","Position","feature","strand","strandMap","str","loc","assembleLocString","CoreDetails","formattedFeat","start","end","displayedDetails","toLocale","SequenceFeatureDetails","lazy","HelpDialog","formControl","container","marginTop","observer","model","shown","setShown","FormControl","Button","onClick","IconButton","getSession","queueDialog","handleClose","Help","Suspense","fallback","LoadingEllipses","uniqueId","coreDetails","FeatureDetails","depth","maxDepth","mate","subfeatures","pm","getEnv","pluginManager","session","ExtraPanel","evaluateExtensionPoint","m","BaseCard","Divider","refName","ErrorBoundary","FallbackComponent","ErrorMessage","error","Component","defaultExpanded","sub","idx","expansionPanelDetails","icon","color","tertiary","contrastText","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails"],"sourceRoot":""}