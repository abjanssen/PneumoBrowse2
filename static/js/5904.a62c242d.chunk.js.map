{"version":3,"file":"static/js/5904.a62c242d.chunk.js","mappings":"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","sources":["../../../packages/core/util/parseLineByLine.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { getProgressDisplayStr } from './index'\n\nexport type StatusCallback = (arg: string) => void\nexport type LineCallback = (\n  line: string,\n  lineIndex: number,\n) => boolean | undefined\n\n/**\n * Parse buffer line by line, calling a callback for each line\n * @param buffer - The buffer to parse\n * @param lineCallback - Callback function called for each line. Return false to stop parsing.\n * @param statusCallback - Optional callback for progress updates\n */\nexport function parseLineByLine(\n  buffer: Uint8Array,\n  lineCallback: LineCallback,\n  statusCallback: StatusCallback = () => {},\n) {\n  const decoder = new TextDecoder('utf8')\n  let blockStart = 0\n  let i = 0\n\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf(10, blockStart)\n    // could be a non-newline ended file, so subarray to end of file if n===-1\n    const lineEnd = n === -1 ? buffer.length : n\n    const b = buffer.subarray(blockStart, lineEnd)\n    const line = decoder.decode(b).trim()\n\n    if (line) {\n      const shouldContinue = lineCallback(line, i)\n      if (shouldContinue === false) {\n        break\n      }\n    }\n\n    if (i++ % 10_000 === 0) {\n      statusCallback(\n        `Loading ${getProgressDisplayStr(blockStart, buffer.length)}`,\n      )\n    }\n\n    // If no newline found, we've reached the end\n    blockStart = lineEnd + 1\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual?: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual || 1)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { parseLineByLine } from '@jbrowse/core/util/parseLineByLine'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\nimport SyntenyFeature from '../SyntenyFeature'\nimport { flipCigar, parsePAFLine, swapIndelCigar } from '../util'\nimport { getWeightedMeans } from './util'\n\nimport type { PAFRecord } from './util'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const lines = [] as PAFRecord[]\n    parseLineByLine(\n      await fetchAndMaybeUnzip(\n        openLocation(this.getConf('pafLocation'), this.pluginManager),\n        opts,\n      ),\n      line => {\n        lines.push(parsePAFLine(line))\n        return true\n      },\n      opts?.statusCallback,\n    )\n    return lines\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures so is not\n    // really that important, and has to be true or else getFeatures is never\n    // called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      const index = assemblyNames.indexOf(assemblyName)\n\n      // if the getFeatures::query is on the query assembly, flip orientation\n      // of data\n      const flip = index === 0\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      // eslint-disable-next-line unicorn/no-for-loop\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]!\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n\n        if (flip) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { fetchAndMaybeUnzipText } from '@jbrowse/core/util'\n\nimport type { PAFRecord } from './PAFAdapter/util'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  return fetchAndMaybeUnzipText(file, opts)\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nexport function parsePAFLine(line: string) {\n  const parts = line.split('\\t')\n  const extraFields = parts.slice(12)\n  const extra: Record<string, string | number> = {\n    numMatches: +parts[9]!,\n    blockLen: +parts[10]!,\n    mappingQual: +parts[11]!,\n  }\n\n  // Process extra fields only if they exist\n  if (extraFields.length) {\n    for (const field of extraFields) {\n      const colonIndex = field.indexOf(':')\n      extra[field.slice(0, colonIndex)] = field.slice(colonIndex + 3)\n    }\n  }\n\n  return {\n    tname: parts[5],\n    tstart: +parts[7]!,\n    tend: +parts[8]!,\n    qname: parts[0],\n    qstart: +parts[2]!,\n    qend: +parts[3]!,\n    strand: parts[4] === '-' ? -1 : 1,\n    extra,\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["parseLineByLine","buffer","lineCallback","statusCallback","decoder","TextDecoder","blockStart","i","length","n","indexOf","lineEnd","b","subarray","line","decode","trim","getProgressDisplayStr","weightedMean","tuples","valueSum","weightSum","reduce","value","weight","parseCigar","MismatchParser","PAFAdapter","BaseFeatureDataAdapter","setup","opts","this","setupP","setupPre","catch","e","undefined","lines","fetchAndMaybeUnzip","openLocation","getConf","pluginManager","push","parsePAFLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","r1","regions","assemblyName","feats","idx","set","Set","feat","add","qname","tname","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","entry","key","quals","len","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","val","zip","meanScore","min","max","Math","getWeightedMeans","start","qstart","end","qend","refName","qref","index","flip","observer","complete","r","mateName","mateStart","mateEnd","tstart","tend","strand","doesIntersect2","numMatches","cg","rest","CIGAR","flipCigar","join","swapIndelCigar","next","SyntenyFeature","uniqueId","type","syntenyId","identity","mate","getMismatches","SimpleFeature","get","arg","super","parseBed","text","Map","split","filter","f","startsWith","name","score","readFile","file","fetchAndMaybeUnzipText","a","parts","extraFields","slice","field","colonIndex","cigar","arr","op","replaceAll"],"sourceRoot":""}