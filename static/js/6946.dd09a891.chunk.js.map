{"version":3,"file":"static/js/6946.dd09a891.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/LinearReadCloudDisplay/util.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawPairChains.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawFeats.ts","../../../plugins/alignments/src/LinearReadCloudDisplay/drawLongReadChains.ts","../../../plugins/alignments/src/shared/util.ts"],"sourcesContent":["// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  fillColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (fillColor) {\n    ctx.fillStyle = fillColor\n  }\n\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function strokeRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  strokeColor?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (strokeColor) {\n    ctx.strokeStyle = strokeColor\n  }\n  ctx.strokeRect(x, y, width, height)\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\n\nimport { ChainData, ChainStats, ReducedFeature } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillRectCtx, strokeRectCtx } from './util'\nimport {\n  getPairedInsertSizeAndOrientationColor,\n  getPairedInsertSizeColor,\n  getPairedOrientationColor,\n} from '../shared/color'\n\ninterface ChainCoord {\n  distance: number\n  r1s: number\n  r1e: number\n  r2s: number\n  r2e: number\n  v0: ReducedFeature\n  v1: ReducedFeature\n}\n\nexport function drawPairChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const coords: ChainCoord[] = []\n  const featureHeight = getConf(self, 'featureHeight')\n  const type = self.colorBy?.type || 'insertSizeAndOrientation'\n  const { chains, stats } = chainData\n\n  for (const chain of chains) {\n    // if we're looking at a paired read (flag 1) then assume it is just\n    // two reads (some small cases may defy this assumption such as\n    // secondary alignments but this may be uncommon)\n    if (chain.length > 1) {\n      const v0 = chain[0]!\n      const v1 = chain[1]!\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const ra2 = asm.getCanonicalRefName(v1.refName) || v1.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      const r2s = view.bpToPx({ refName: ra2, coord: v1.start })?.offsetPx\n      const r2e = view.bpToPx({ refName: ra2, coord: v1.end })?.offsetPx\n\n      let distance = 0\n\n      if (\n        r1s !== undefined &&\n        r1e !== undefined &&\n        r2s !== undefined &&\n        r2e !== undefined\n      ) {\n        if (v0.refName === v1.refName) {\n          const s = Math.min(v0.start, v1.start)\n          const e = Math.max(v0.end, v1.end)\n          distance = Math.abs(e - s)\n        }\n        coords.push({\n          r1s,\n          r1e,\n          r2s,\n          r2e,\n          v0,\n          v1,\n          distance,\n        })\n      }\n    } else if (self.drawSingletons) {\n      const v0 = chain[0]!\n\n      const ra1 = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const r1s = view.bpToPx({ refName: ra1, coord: v0.start })?.offsetPx\n      const r1e = view.bpToPx({ refName: ra1, coord: v0.end })?.offsetPx\n      if (r1s !== undefined && r1e !== undefined) {\n        const w1 = Math.max(r1e - r1s, 2)\n        fillRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#f00')\n        strokeRectCtx(r1s - view.offsetPx, 0, w1, featureHeight, ctx, '#a00')\n      }\n    }\n  }\n\n  const maxD = Math.log(max(coords.map(c => c.distance)))\n  const minD = Math.max(Math.log(min(coords.map(c => c.distance))) - 1, 0)\n  const scaler = (self.height - 20) / (maxD - minD)\n  for (const { r1e, r1s, r2e, r2s, distance, v0, v1 } of coords) {\n    const w1 = Math.max(r1e - r1s, 2)\n    const w2 = Math.max(r2e - r2s, 2)\n    const [fill, stroke] = getPairedColor({ type, v0, v1, stats }) || []\n    const top = (Math.log(distance) - minD) * scaler\n    const halfHeight = featureHeight / 2 - 0.5\n    const w = r2s - r1e\n    fillRectCtx(r1e - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    strokeRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, stroke)\n    strokeRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, stroke)\n    fillRectCtx(r1s - view.offsetPx, top, w1, featureHeight, ctx, fill)\n    fillRectCtx(r2s - view.offsetPx, top, w2, featureHeight, ctx, fill)\n  }\n}\n\nexport function getPairedColor({\n  type,\n  v0,\n  v1,\n  stats,\n}: {\n  type: string\n  v0: ReducedFeature\n  v1: ReducedFeature\n  stats?: ChainStats\n}): readonly [string, string] | undefined {\n  if (type === 'insertSizeAndOrientation') {\n    return getPairedInsertSizeAndOrientationColor(v0, v1, stats)\n  }\n  if (type === 'orientation') {\n    return getPairedOrientationColor(v0)\n  }\n  if (type === 'insertSize') {\n    return getPairedInsertSizeColor(v0, v1, stats)\n  }\n  if (type === 'gradient') {\n    const s = Math.min(v0.start, v1.start)\n    const e = Math.max(v0.end, v1.end)\n    return [\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,50%)`,\n      `hsl(${Math.log10(Math.abs(e - s)) * 10},50%,30%)`,\n    ] as const\n  }\n  return undefined\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { LinearReadCloudDisplayModel } from './model'\nimport { hasPairedReads } from '../shared/util'\nimport { drawPairChains } from './drawPairChains'\nimport { drawLongReadChains } from './drawLongReadChains'\n\ntype LGV = LinearGenomeViewModel\n\nexport function drawFeats(\n  self: LinearReadCloudDisplayModel,\n  ctx: CanvasRenderingContext2D,\n) {\n  const { chainData } = self\n  if (!chainData) {\n    return\n  }\n  const { assemblyManager } = getSession(self)\n  const view = getContainingView(self) as LGV\n  const assemblyName = view.assemblyNames[0]!\n  const asm = assemblyManager.get(assemblyName)\n  if (!asm) {\n    return\n  }\n\n  const hasPaired = hasPairedReads(chainData)\n\n  if (hasPaired) {\n    drawPairChains({ self, view, asm, ctx, chainData })\n  } else {\n    drawLongReadChains({ self, view, asm, ctx, chainData })\n  }\n}\n","import { getConf } from '@jbrowse/core/configuration'\nimport { max, min } from '@jbrowse/core/util'\nimport { Assembly } from '@jbrowse/core/assemblyManager/assembly'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// locals\nimport { ChainData } from '../shared/fetchChains'\nimport { LinearReadCloudDisplayModel } from './model'\nimport { fillColor, strokeColor } from '../shared/color'\nimport { fillRectCtx, strokeRectCtx } from './util'\n\nexport function drawLongReadChains({\n  ctx,\n  self,\n  chainData,\n  view,\n  asm,\n}: {\n  ctx: CanvasRenderingContext2D\n  self: LinearReadCloudDisplayModel\n  chainData: ChainData\n  view: LinearGenomeViewModel\n  asm: Assembly\n}) {\n  const distances: number[] = []\n  const minXs: number[] = []\n  const { chains } = chainData\n  const { height } = self\n  const featureHeight = getConf(self, 'featureHeight')\n\n  // get bounds on the 'distances' (pixel span that a particular split long\n  // read 'chain' would have in view)\n  for (const chain of chains) {\n    let minX = Number.MAX_VALUE\n    let maxX = Number.MIN_VALUE\n    for (const elt of chain) {\n      const refName = asm.getCanonicalRefName(elt.refName) || elt.refName\n      const rs = view.bpToPx({ refName, coord: elt.start })?.offsetPx\n      const re = view.bpToPx({ refName, coord: elt.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        minX = Math.min(minX, rs)\n        maxX = Math.max(maxX, re)\n      }\n    }\n    const distance = Math.abs(maxX - minX)\n    distances.push(distance)\n    minXs.push(minX)\n  }\n\n  const maxD = Math.log(max(distances))\n  const minD = Math.max(Math.log(min(distances)) - 1, 0)\n  const scaler = (height - 20) / (maxD - minD)\n  const halfHeight = featureHeight / 2 - 0.5\n\n  // draw split long read 'chains' as connected entities\n  for (let i = 0; i < chains.length; i++) {\n    const chain = chains[i]!\n    const w = distances[i]!\n    const top = (Math.log(w) - minD) * scaler\n    const min = minXs[i]!\n    fillRectCtx(min - view.offsetPx, top + halfHeight, w, 1, ctx, 'black')\n    const c1 = chain[0]!\n    let primaryStrand: undefined | number\n    if (!(c1.flags & 2048)) {\n      primaryStrand = c1.strand\n    } else {\n      const res = c1.SA?.split(';')[0]!.split(',')[2]\n      primaryStrand = res === '-' ? -1 : 1\n    }\n    for (const v0 of chain) {\n      const ra = asm.getCanonicalRefName(v0.refName) || v0.refName\n      const rs = view.bpToPx({ refName: ra, coord: v0.start })?.offsetPx\n      const re = view.bpToPx({ refName: ra, coord: v0.end })?.offsetPx\n      if (rs !== undefined && re !== undefined) {\n        const w = Math.max(re - rs, 2)\n        const l = rs - view.offsetPx\n        const effectiveStrand = v0.strand * primaryStrand\n        const c =\n          effectiveStrand === -1 ? 'color_rev_strand' : 'color_fwd_strand'\n        strokeRectCtx(l, top, w, featureHeight, ctx, strokeColor[c])\n        fillRectCtx(l, top, w, featureHeight, ctx, fillColor[c])\n      }\n    }\n  }\n}\n","import { ChainData } from './fetchChains'\n\nexport function hasPairedReads(features: ChainData) {\n  for (const f of features.chains.values()) {\n    if (f[0]!.flags & 1) {\n      return true\n    }\n  }\n  return false\n}\n"],"names":["fillRectCtx","x","y","width","height","ctx","fillColor","fillStyle","fillRect","strokeRectCtx","strokeColor","strokeStyle","strokeRect","getPairedColor","type","v0","v1","stats","getPairedInsertSizeAndOrientationColor","getPairedOrientationColor","getPairedInsertSizeColor","s","Math","min","start","e","max","end","log10","abs","drawFeats","self","chainData","assemblyManager","getSession","view","getContainingView","assemblyName","assemblyNames","asm","get","hasPairedReads","coords","featureHeight","getConf","colorBy","chains","chain","length","ra1","getCanonicalRefName","refName","ra2","r1s","bpToPx","coord","offsetPx","r1e","r2s","r2e","distance","undefined","push","drawSingletons","w1","maxD","log","map","c","minD","scaler","w2","fill","stroke","top","halfHeight","w","drawPairChains","distances","minXs","minX","Number","MAX_VALUE","maxX","MIN_VALUE","elt","rs","re","i","c1","primaryStrand","flags","res","SA","split","strand","ra","l","drawLongReadChains","features","f","values"],"sourceRoot":""}