{"version":3,"file":"static/js/7040.c9e8d5d8.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/Radio/radioClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../../../node_modules/@mui/material/esm/RadioGroup/radioGroupClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialogAuto.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialogManual.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleClusterDialog/WiggleClusterDialog.tsx","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/esm/Radio/Radio.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroup.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiRadioGroup', slot);\n}\nconst radioGroupClasses = generateUtilityClasses('MuiRadioGroup', ['root', 'row', 'error']);\nexport default radioGroupClasses;","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n  useLocalStorage,\n} from '@jbrowse/core/util'\nimport { createStopToken, stopStopToken } from '@jbrowse/core/util/stopToken'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst WiggleClusterDialogAuto = observer(function ({\n  model,\n  children,\n  handleClose,\n}: {\n  model: ReducedModel\n  children: React.ReactNode\n  handleClose: () => void\n}) {\n  const [progress, setProgress] = useState('')\n  const [error, setError] = useState<unknown>()\n  const [loading, setLoading] = useState(false)\n  const [stopToken, setStopToken] = useState('')\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [samplesPerPixel, setSamplesPerPixel] = useLocalStorage(\n    'cluster-samplesPerPixel',\n    '1',\n  )\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <div style={{ marginTop: 50 }}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setShowAdvanced(!showAdvanced)\n            }}\n          >\n            {showAdvanced ? 'Hide advanced options' : 'Show advanced options'}\n          </Button>\n          {showAdvanced ? (\n            <div style={{ marginTop: 20 }}>\n              <Typography>\n                This procedure samples the data at each 'pixel' across the\n                visible by default\n              </Typography>\n              <TextField\n                label=\"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\"\n                variant=\"outlined\"\n                size=\"small\"\n                value={samplesPerPixel}\n                onChange={event => {\n                  setSamplesPerPixel(event.target.value)\n                }}\n              />\n            </div>\n          ) : null}\n        </div>\n        <div>\n          {loading ? (\n            <div style={{ padding: 50 }}>\n              <span>{progress || 'Loading...'}</span>\n              <Button\n                onClick={() => {\n                  stopStopToken(stopToken)\n                }}\n              >\n                Stop\n              </Button>\n            </div>\n          ) : null}\n          {error ? <ErrorMessage error={error} /> : null}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          disabled={loading}\n          onClick={async () => {\n            try {\n              setError(undefined)\n              setProgress('Initializing')\n              setLoading(true)\n              const view = getContainingView(model) as LinearGenomeViewModel\n              if (!view.initialized) {\n                return\n              }\n              const { rpcManager } = getSession(model)\n              const { sourcesWithoutLayout, adapterConfig } = model\n              if (sourcesWithoutLayout) {\n                const sessionId = getRpcSessionId(model)\n                const stopToken = createStopToken()\n                setStopToken(stopToken)\n                const ret = (await rpcManager.call(\n                  sessionId,\n                  'MultiWiggleClusterScoreMatrix',\n                  {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources: sourcesWithoutLayout,\n                    sessionId,\n                    adapterConfig,\n                    stopToken,\n                    bpPerPx: view.bpPerPx / +samplesPerPixel,\n                    statusCallback: (arg: string) => {\n                      setProgress(arg)\n                    },\n                  },\n                )) as { order: number[] }\n\n                model.setLayout(\n                  ret.order.map(idx => {\n                    const ret = sourcesWithoutLayout[idx]\n                    if (!ret) {\n                      throw new Error(`out of bounds at ${idx}`)\n                    }\n                    return ret\n                  }),\n                )\n              }\n              handleClose()\n            } catch (e) {\n              if (!isAbortException(e) && isAlive(model)) {\n                console.error(e)\n                setError(e)\n              }\n            } finally {\n              setLoading(false)\n              setProgress('')\n              setStopToken('')\n            }\n          }}\n        >\n          Run clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            if (stopToken) {\n              stopStopToken(stopToken)\n            }\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default WiggleClusterDialogAuto\n","import { useEffect, useState } from 'react'\n\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n  useLocalStorage,\n} from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  mgap: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n  },\n}))\n\nconst WiggleClusterDialogManuals = observer(function ({\n  model,\n  handleClose,\n  children,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n\n  const [paste, setPaste] = useState('')\n  const [ret, setRet] = useState<Record<string, number[]>>()\n  const [error, setError] = useState<unknown>()\n  const [loading, setLoading] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useLocalStorage(\n    'cluster-showAdvanced',\n    false,\n  )\n  const [clusterMethod, setClusterMethod] = useState('single')\n  const [samplesPerPixel, setSamplesPerPixel] = useState('1')\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        setRet(undefined)\n        setLoading(true)\n        const view = getContainingView(model) as LinearGenomeViewModel\n        const { dynamicBlocks, bpPerPx } = view\n        const { rpcManager } = getSession(model)\n        const { sourcesWithoutLayout, adapterConfig } = model\n        const sessionId = getRpcSessionId(model)\n        const ret = (await rpcManager.call(\n          sessionId,\n          'MultiWiggleGetScoreMatrix',\n          {\n            regions: dynamicBlocks.contentBlocks,\n            sources: sourcesWithoutLayout,\n            sessionId,\n            adapterConfig,\n            bpPerPx: bpPerPx / +samplesPerPixel,\n          },\n        )) as Record<string, number[]>\n\n        setRet(ret)\n      } catch (e) {\n        if (!isAbortException(e) && isAlive(model)) {\n          console.error(e)\n          setError(e)\n        }\n      } finally {\n        setLoading(false)\n      }\n    })()\n  }, [model, samplesPerPixel])\n\n  const results = ret\n    ? `inputMatrix<-matrix(c(${Object.values(ret)\n        .map(val => val.join(','))\n        .join(',\\n')}\n),nrow=${Object.values(ret).length},byrow=TRUE)\nrownames(inputMatrix)<-c(${Object.keys(ret)\n        .map(key => `'${key}'`)\n        .join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n    : undefined\n\n  const resultsTsv = ret\n    ? Object.entries(ret)\n        .map(([key, val]) => [key, ...val].join('\\t'))\n        .join('\\n')\n    : undefined\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <div style={{ marginTop: 50 }}>\n          <div>\n            <div\n              style={{\n                display: 'flex',\n                gap: '8px',\n                flexWrap: 'wrap',\n                marginBottom: '16px',\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  saveAs(\n                    new Blob([results || ''], {\n                      type: 'text/plain;charset=utf-8',\n                    }),\n                    'cluster.R',\n                  )\n                }}\n              >\n                Download Rscript\n              </Button>{' '}\n              or{' '}\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  copy(results || '')\n                }}\n              >\n                Copy Rscript to clipboard\n              </Button>{' '}\n              or{' '}\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  saveAs(\n                    new Blob([resultsTsv || ''], {\n                      type: 'text/plain;charset=utf-8',\n                    }),\n                    'scores.tsv',\n                  )\n                }}\n              >\n                Download TSV\n              </Button>\n            </div>\n            <div>\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  setShowAdvanced(!showAdvanced)\n                }}\n              >\n                {showAdvanced\n                  ? 'Hide advanced options'\n                  : 'Show advanced options'}\n              </Button>\n            </div>\n            {showAdvanced ? (\n              <div>\n                <Typography variant=\"h6\">Advanced options</Typography>\n                <RadioGroup>\n                  {Object.entries({\n                    single: 'Single',\n                    complete: 'Complete',\n                  }).map(([key, val]) => (\n                    <FormControlLabel\n                      key={key}\n                      control={\n                        <Radio\n                          checked={clusterMethod === key}\n                          onChange={() => {\n                            setClusterMethod(key)\n                          }}\n                        />\n                      }\n                      label={val}\n                    />\n                  ))}\n                </RadioGroup>\n                <div style={{ marginTop: 20 }}>\n                  <Typography>\n                    This procedure samples the data at each 'pixel' across the\n                    visible by default\n                  </Typography>\n                  <TextField\n                    label=\"Samples per pixel (>1 for denser sampling, between 0-1 for sparser sampling)\"\n                    variant=\"outlined\"\n                    size=\"small\"\n                    value={samplesPerPixel}\n                    onChange={event => {\n                      setSamplesPerPixel(event.target.value)\n                    }}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {results ? (\n              <div />\n            ) : loading ? (\n              <LoadingEllipses variant=\"h6\" title=\"Generating score matrix\" />\n            ) : error ? (\n              <ErrorMessage error={error} />\n            ) : null}\n          </div>\n\n          <div>\n            <Typography\n              variant=\"subtitle2\"\n              gutterBottom\n              style={{ marginTop: '16px' }}\n            >\n              Clustering Results:\n            </Typography>\n            <TextField\n              multiline\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\"\n              rows={10}\n              value={paste}\n              onChange={event => {\n                setPaste(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  classes: {\n                    input: classes.textAreaFont,\n                  },\n                },\n              }}\n            />\n          </div>\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const { sourcesWithoutLayout } = model\n            if (sourcesWithoutLayout) {\n              try {\n                model.setLayout(\n                  paste\n                    .split('\\n')\n                    .map(t => t.trim())\n                    .filter(f => !!f)\n                    .map(r => +r)\n                    .map(idx => {\n                      const ret = sourcesWithoutLayout[idx - 1]\n                      if (!ret) {\n                        throw new Error(`out of bounds at ${idx}`)\n                      }\n                      return ret\n                    }),\n                )\n              } catch (e) {\n                console.error(e)\n                getSession(model).notifyError(`${e}`, e)\n              }\n            }\n            handleClose()\n          }}\n        >\n          Apply clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default WiggleClusterDialogManuals\n","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport { FormControlLabel, Radio, RadioGroup } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport WiggleClusterDialogAuto from './WiggleClusterDialogAuto'\nimport WiggleClusterDialogManual from './WiggleClusterDialogManual'\n\nimport type { ReducedModel } from './types'\n\nfunction Header({\n  activeMode,\n  setActiveMode,\n}: {\n  activeMode: string\n  setActiveMode: (arg: string) => void\n}) {\n  return (\n    <div>\n      <RadioGroup>\n        {Object.entries({\n          auto: (\n            <div>\n              Run in-app clustering (slower, particularly for large numbers of\n              samples, uses JS implementation of hclust)\n            </div>\n          ),\n          manual: (\n            <div>\n              Download R script to run clustering (faster, uses R implementation\n              of hclust)\n            </div>\n          ),\n        }).map(([key, val]) => (\n          <FormControlLabel\n            key={key}\n            control={\n              <Radio\n                checked={activeMode === key}\n                onChange={() => {\n                  setActiveMode(key)\n                }}\n              />\n            }\n            label={val}\n          />\n        ))}\n      </RadioGroup>\n    </div>\n  )\n}\n\nconst WiggleClusterDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const [activeMode, setActiveMode] = useState('auto')\n\n  return (\n    <Dialog\n      open\n      title=\"Cluster by score\"\n      maxWidth=\"xl\"\n      onClose={(_, reason) => {\n        // don't close on backdrop click\n        if (reason !== 'backdropClick') {\n          handleClose()\n        }\n      }}\n    >\n      {activeMode === 'auto' ? (\n        <WiggleClusterDialogAuto model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </WiggleClusterDialogAuto>\n      ) : (\n        <WiggleClusterDialogManual model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </WiggleClusterDialogManual>\n      )}\n    </Dialog>\n  )\n})\n\nexport default WiggleClusterDialog\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  name: 'MuiRadioButtonIcon',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport FormGroup from \"../FormGroup/index.js\";\nimport { getRadioGroupUtilityClass } from \"./radioGroupClasses.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport useControlled from \"../utils/useControlled.js\";\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nimport useId from \"../utils/useId.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = props => {\n  const {\n    classes,\n    row,\n    error\n  } = props;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getRadioGroupUtilityClass, classes);\n};\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    className,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp,\n    ...other\n  } = props;\n  const rootRef = React.useRef(null);\n  const classes = useUtilityClasses(props);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, {\n      role: \"radiogroup\",\n      ref: handleRef,\n      className: clsx(classes.root, className),\n      ...other,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"],"names":["getRadioUtilityClass","slot","undefined","getRadioGroupUtilityClass","useRadioGroup","observer","model","children","handleClose","progress","setProgress","useState","error","setError","loading","setLoading","stopToken","setStopToken","showAdvanced","setShowAdvanced","samplesPerPixel","setSamplesPerPixel","useLocalStorage","_jsxs","_Fragment","DialogContent","style","marginTop","_jsx","Button","variant","onClick","Typography","TextField","label","size","value","onChange","event","target","padding","stopStopToken","ErrorMessage","DialogActions","disabled","async","view","getContainingView","initialized","rpcManager","getSession","sourcesWithoutLayout","adapterConfig","sessionId","getRpcSessionId","createStopToken","ret","call","regions","dynamicBlocks","contentBlocks","sources","bpPerPx","statusCallback","arg","setLayout","order","map","idx","Error","e","isAbortException","isAlive","console","color","useStyles","makeStyles","theme","textAreaFont","fontFamily","mgap","display","flexDirection","gap","spacing","classes","paste","setPaste","setRet","clusterMethod","setClusterMethod","useEffect","results","Object","values","val","join","length","keys","key","resultsTsv","entries","flexWrap","marginBottom","saveAs","Blob","type","copy","RadioGroup","single","complete","FormControlLabel","control","Radio","checked","LoadingEllipses","title","gutterBottom","multiline","fullWidth","placeholder","rows","slotProps","input","split","t","trim","filter","f","r","notifyError","Header","t0","$","_c","activeMode","setActiveMode","t1","t2","t3","Symbol","for","auto","manual","t4","Dialog","open","maxWidth","onClose","_","reason","WiggleClusterDialogAuto","WiggleClusterDialogManual","createSvgIcon","d","RadioButtonIconRoot","styled","name","shouldForwardProp","rootShouldForwardProp","position","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","props","easeOut","fontSize","ownerState","className","root","background","dot","RadioRoot","SwitchBase","prop","overridesResolver","styles","capitalize","vars","palette","text","secondary","radioClasses","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","createSimplePaletteValueFilter","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChangeProp","disabledProp","slots","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","createChainedFunction","a","b","String","externalInputProps","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","args","additionalProps","actions","defaultValue","valueProp","rootRef","row","setValueState","controlled","default","focus","current","querySelector","handleRef","contextValue","Provider","role"],"sourceRoot":""}