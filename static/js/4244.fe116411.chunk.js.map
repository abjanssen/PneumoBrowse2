{"version":3,"file":"static/js/4244.fe116411.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/shared/ClusterDialog.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n} from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { isAlive } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../util'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  mgap: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n  },\n}))\n\nexport default function HierarchicalCluster({\n  model,\n  handleClose,\n}: {\n  model: {\n    sources?: Source[]\n    mafFilter?: number\n    adapterConfig: AnyConfigurationModel\n    setLayout: (arg: Source[]) => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [results, setResults] = useState<string>()\n  const [error, setError] = useState<unknown>()\n  const [paste, setPaste] = useState('')\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        const view = getContainingView(model) as LinearGenomeViewModel\n        if (!view.initialized) {\n          return\n        }\n        const { rpcManager } = getSession(model)\n        const { sources, mafFilter, adapterConfig } = model\n        const sessionId = getRpcSessionId(model)\n        const ret = (await rpcManager.call(\n          sessionId,\n          'MultiVariantGetGenotypeMatrix',\n          {\n            regions: view.dynamicBlocks.contentBlocks,\n            sources,\n            mafFilter,\n            sessionId,\n            adapterConfig,\n          },\n        )) as Record<string, { genotypes: number[] }>\n\n        const entries = Object.values(ret)\n        const keys = Object.keys(ret)\n        const text = `try(library(fastcluster), silent=TRUE)\ninputMatrix<-matrix(c(${entries.map(val => val.genotypes.join(',')).join(',\\n')}\n),nrow=${entries.length},byrow=TRUE)\nrownames(inputMatrix)<-c(${keys.map(key => `'${key}'`).join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='single')\ncat(resultClusters$order,sep='\\\\n')`\n        setResults(text)\n      } catch (e) {\n        if (!isAbortException(e) && isAlive(model)) {\n          console.error(e)\n          setError(e)\n        }\n      }\n    })()\n  }, [model])\n\n  return (\n    <Dialog open title=\"Cluster by genotype\" onClose={handleClose}>\n      <DialogContent>\n        <div className={classes.mgap}>\n          <Typography>\n            This page will produce an R script that will perform hierarchical\n            clustering on the visible genotype data using `hclust`.\n          </Typography>\n          <Typography>\n            You can then paste the results in this form to specify the row\n            ordering.\n          </Typography>\n          {results ? (\n            <div>\n              <div>\n                Step 1:{' '}\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    saveAs(\n                      new Blob([results || ''], {\n                        type: 'text/plain;charset=utf-8',\n                      }),\n                      'cluster.R',\n                    )\n                  }}\n                >\n                  Download Rscript\n                </Button>{' '}\n                or{' '}\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    copy(results || '')\n                  }}\n                >\n                  Copy Rscript to clipboard\n                </Button>\n                <div>\n                  <TextField\n                    multiline\n                    fullWidth\n                    variant=\"outlined\"\n                    placeholder=\"Step 2. Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\"\n                    rows={10}\n                    value={paste}\n                    onChange={event => {\n                      setPaste(event.target.value)\n                    }}\n                    slotProps={{\n                      input: {\n                        classes: {\n                          input: classes.textAreaFont,\n                        },\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <LoadingEllipses variant=\"h6\" title=\"Generating genotype matrix\" />\n          )}\n          {error ? <ErrorMessage error={error} /> : null}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={!results}\n          variant=\"contained\"\n          onClick={() => {\n            const { sources } = model\n            if (sources) {\n              try {\n                model.setLayout(\n                  paste\n                    .split('\\n')\n                    .map(t => t.trim())\n                    .filter(f => !!f)\n                    .map(r => +r)\n                    .map(idx => {\n                      const ret = sources[idx - 1]\n                      if (!ret) {\n                        throw new Error(`out of bounds at ${idx}`)\n                      }\n                      return ret\n                    }),\n                )\n              } catch (e) {\n                console.error(e)\n                setError(e)\n              }\n            }\n            handleClose()\n          }}\n        >\n          Apply clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","textAreaFont","fontFamily","mgap","display","flexDirection","gap","spacing","HierarchicalCluster","model","handleClose","classes","results","setResults","useState","error","setError","paste","setPaste","useEffect","undefined","view","getContainingView","initialized","rpcManager","getSession","sources","mafFilter","adapterConfig","sessionId","getRpcSessionId","ret","call","regions","dynamicBlocks","contentBlocks","entries","Object","values","keys","text","map","val","genotypes","join","length","key","e","isAbortException","isAlive","console","React","Dialog","open","title","onClose","DialogContent","className","Typography","Button","variant","onClick","saveAs","Blob","type","copy","TextField","multiline","fullWidth","placeholder","rows","value","onChange","event","target","slotProps","input","LoadingEllipses","ErrorMessage","DialogActions","disabled","setLayout","split","t","trim","filter","f","r","idx","Error","color"],"sourceRoot":""}