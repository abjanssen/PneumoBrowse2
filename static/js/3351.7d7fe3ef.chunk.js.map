{"version":3,"file":"static/js/3351.7d7fe3ef.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/gtf/src/util.ts","../../../node_modules/@gmod/gtf/src/parse.ts","../../../node_modules/@gmod/gtf/src/api.ts","../../../node_modules/@gmod/gtf/src/index.ts","../../../plugins/gtf/src/util.ts","../../../plugins/gtf/src/GtfAdapter/GtfAdapter.ts"],"sourcesContent":["//@ts-nocheck\n/** @module util */\n\n// Forks @gmod/gff-js and adapts it to parse and format GTF.\n\nconst fieldNames = [\n  'seq_name',\n  'source',\n  'featureType',\n  'start',\n  'end',\n  'score',\n  'strand',\n  'frame',\n  'attributes',\n]\n\n// TODO: check about enconding/escaping in gtf 9th column\n/**\n * Unescape a string/text value used in a GTF attribute.\n * Textual attributes should be surrounded by double quotes\n * source info:\n * https://mblab.wustl.edu/GTF22.html\n * https://en.wikipedia.org/wiki/Gene_transfer_format\n *\n * @param {String} s\n * @returns {String}\n */\nexport function unescape(s) {\n  if (s === null) {\n    return null\n  }\n  return String(s).replace(/%([0-9A-Fa-f]{2})/g, (_, seq) =>\n    String.fromCharCode(parseInt(seq, 16)),\n  )\n}\n\n/**\n * Escape a value for use in a GTF attribute value.\n *\n * @param {String} s\n * @returns {String}\n */\nfunction _escape(regex, s) {\n  return String(s).replace(regex, ch => {\n    let hex = ch.charCodeAt(0).toString(16).toUpperCase()\n\n    // lol, apparently there's no native function for fixed-width hex output\n    if (hex.length < 2) {\n      hex = `0${hex}`\n    }\n    return `%${hex}`\n  })\n}\n\nexport function escape(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n;\\r\\t=%&,\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Escape a value for use in a GTF column value.\n *\n * @param {String} s\n * @returns {String}\n */\nexport function escapeColumn(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n\\r\\t%\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Parse the 9th column (attributes) of a GTF feature line.\n *\n * @param {String} attrString\n * @returns {Object}\n */\nexport function parseAttributes(attrString) {\n  if (!(attrString && attrString.length) || attrString === '.') {\n    return {}\n  }\n\n  const attrs = {}\n\n  attrString\n    .replace(/\\r?\\n$/, '')\n    .slice(0, -1) // need to remove the last semicolon in the attributes\n    .split(';')\n    .forEach(attribute => {\n      if (!attribute) {\n        return\n      }\n      const attr = attribute.trim().split(' ')\n      if (!(attr[1] && attr[1].length)) {\n        return\n      }\n\n      attr[0] = attr[0].trim()\n      let arec = attrs[attr[0].trim()]\n      if (!arec) {\n        arec = []\n        attrs[attr[0]] = arec\n      }\n\n      // arec.push(unescape(attr[1].trim()))\n      arec.push(\n        ...attr[1]\n          .split(',')\n          .map(s => s.trim())\n          .map(unescape),\n      )\n    })\n  return attrs\n}\n\n/**\n * Parse a GTF feature line.\n *\n * @param {String} line\n * returns the parsed line in an object\n */\nexport function parseFeature(line) {\n  // assumed that there are no comments at the end of a line\n  // split the line into columns and replace '.' with null in each column\n  const f = line.split('\\t').map(a => (a === '.' ? null : a))\n\n  // unescape only the seq_name, source, and feature columns\n  f[0] = unescape(f[0])\n  f[1] = unescape(f[1])\n  f[2] = unescape(f[2])\n\n  f[8] = parseAttributes(f[8])\n  const parsed = {}\n  for (let i = 0; i < fieldNames.length; i += 1) {\n    parsed[fieldNames[i]] = f[i] === '.' ? null : f[i]\n  }\n  if (parsed.start !== null) {\n    parsed.start = parseInt(parsed.start, 10)\n  }\n  if (parsed.end !== null) {\n    parsed.end = parseInt(parsed.end, 10)\n  }\n  if (parsed.score !== null) {\n    parsed.score = parseFloat(parsed.score, 10)\n  }\n  if (parsed.strand != null) {\n    parsed.strand = parsed.strand\n  }\n  return parsed\n}\n\n/**\n * Parse a GTF directive/comment line.\n *\n * @param {String} line\n * @returns {Object} the information in the directive\n */\nexport function parseDirective(line) {\n  const match = /^\\s*##\\s*(\\S+)\\s*(.*)/.exec(line)\n  // const match = /^\\s*\\#\\#\\s*(\\S+)\\s*(.*)/.exec(line)\n  if (!match) {\n    return null\n  }\n\n  // let [, name, contents] = match\n  const name = match[1]\n  let contents = match[2]\n  const parsed = { directive: name }\n  if (contents.length) {\n    contents = contents.replace(/\\r?\\n$/, '')\n    parsed.value = contents\n  }\n\n  // do a little additional parsing for sequence-region and genome-build directives\n  if (name === 'sequence-region') {\n    const [seqId, contentStart, contentEnd] = contents.split(/\\s+/, 3)\n    parsed.seq_id = seqId\n    parsed.start = contentStart && contentStart.replace(/\\D/g, '')\n    parsed.end = contentEnd && contentEnd.replace(/\\D/g, '')\n  } else if (name === 'genome-build') {\n    const [source, buildname] = contents.split(/\\s+/, 2)\n    parsed.source = source\n    parsed.buildname = buildname\n  }\n\n  return parsed\n}\n\n/**\n * Format an attributes object into a string suitable for the 9th column of GTF.\n *\n * @param {Object} attrs\n */\nexport function formatAttributes(attrs) {\n  const attrOrder = []\n  Object.keys(attrs).forEach(tag => {\n    const val = attrs[tag]\n    let valstring\n    // eslint-disable-next-line no-prototype-builtins\n    if (val.hasOwnProperty('toString')) {\n      valstring = escape(val.toString())\n    } else if (Array.isArray(val.values)) {\n      valstring = val.values.map(escape).join(',')\n    } else if (Array.isArray(val)) {\n      valstring = val.map(escape).join(',')\n    } else {\n      valstring = escape(val)\n    }\n    attrOrder.push(`${escape(tag)} ${valstring}`)\n  })\n  return attrOrder.length ? attrOrder.join('; ').concat(';') : '.'\n}\n\nconst translateStrand = ['-', '.', '+']\n\nfunction _formatSingleFeature(f, seenFeature) {\n  const attrString =\n    f.attributes === null || f.attributes === undefined\n      ? '.'\n      : formatAttributes(f.attributes)\n\n  const fields = []\n  for (let i = 0; i < 8; i += 1) {\n    const val = f[fieldNames[i]]\n    // deserialize strand\n    if (i === 6) {\n      fields[i] =\n        val === null || val === undefined\n          ? '.'\n          : translateStrand[val + 1] || val\n    } else {\n      fields[i] =\n        val === null || val === undefined ? '.' : escapeColumn(String(val))\n    }\n  }\n  fields[8] = attrString\n\n  const formattedString = `${fields.join('\\t')}\\n`\n\n  // if we have already output this exact feature, skip it\n  if (seenFeature[formattedString]) {\n    return ''\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  seenFeature[formattedString] = true\n  return formattedString\n}\n\nfunction _formatFeature(feature, seenFeature) {\n  if (Array.isArray(feature)) {\n    return feature.map(f => _formatFeature(f, seenFeature)).join('')\n  }\n\n  const strings = [_formatSingleFeature(feature, seenFeature)]\n  ;['child_features', 'derived_features'].forEach(multiSlot => {\n    if (feature[multiSlot]) {\n      strings.push(\n        ...feature[multiSlot].map(f => _formatFeature(f, seenFeature)),\n      )\n    }\n  })\n  return strings.join('')\n}\n\n/**\n * Format a feature object or array of\n * feature objects into one or more lines of GTF.\n *\n * @param {Object|Array[Object]} featureOrFeatures\n */\nexport function formatFeature(featureOrFeatures) {\n  const seen = {}\n  return _formatFeature(featureOrFeatures, seen)\n}\n\n/**\n * Format a directive into a line of GTF.\n *\n * @param {Object} directive\n * @returns {String}\n */\nexport function formatDirective(directive) {\n  let str = `##${directive.directive}`\n  if (directive.value) {\n    str += ` ${directive.value}`\n  }\n  str += '\\n'\n  return str\n}\n\n/**\n * Format a comment into a GTF comment.\n * Yes I know this is just adding a # and a newline.\n *\n * @param {Object} comment\n * @returns {String}\n */\nexport function formatComment(comment) {\n  return `# ${comment.comment}\\n`\n}\n\n/**\n * Format a sequence object as FASTA\n *\n * @param {Object} seq\n * @returns {String} formatted single FASTA sequence\n */\nexport function formatSequence(seq) {\n  return `>${seq.id}${seq.description ? ` ${seq.description}` : ''}\\n${\n    seq.sequence\n  }\\n`\n}\n\n/**\n * Format a directive, comment, or feature,\n * or array of such items, into one or more lines of GTF.\n *\n * @param {Object|Array} itemOrItems\n */\nexport function formatItem(itemOrItems) {\n  function formatSingleItem(item) {\n    if (item[0] || item.attributes) {\n      return formatFeature(item)\n    }\n    if (item.directive) {\n      return formatDirective(item)\n    }\n    if (item.sequence) {\n      return formatSequence(item)\n    }\n    if (item.comment) {\n      return formatComment(item)\n    }\n    return '# (invalid item found during format)\\n'\n  }\n\n  if (Array.isArray(itemOrItems)) {\n    return itemOrItems.map(item => formatSingleItem(item))\n  }\n  return formatSingleItem(itemOrItems)\n}\n","//@ts-nocheck\nimport * as GTF from './util'\n\nconst containerAttributes = {\n  Parent: 'child_features',\n  Derives_from: 'derived_features',\n}\n\nexport default class Parser {\n  constructor(args) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const nullFunc = () => {}\n\n    Object.assign(this, {\n      featureCallback: args.featureCallback || nullFunc,\n      endCallback: args.endCallback || nullFunc,\n      commentCallback: args.commentCallback || nullFunc,\n      errorCallback: args.errorCallback || nullFunc,\n      directiveCallback: args.directiveCallback || nullFunc,\n      sequenceCallback: args.sequenceCallback || nullFunc,\n\n      // number of lines to buffer\n      bufferSize: args.bufferSize === undefined ? 1000 : args.bufferSize,\n\n      // features that we have to keep on hand for now because they\n      // might be referenced by something else\n      _underConstructionTopLevel: [],\n      // index of the above by ID\n      _underConstructionById: {},\n\n      _completedReferences: {},\n\n      // features that reference something we have not seen yet\n      // structured as:\n      // {  'some_id' : {\n      //     'Parent' : [ orphans that have a Parent attr referencing it ],\n      //     'Derives_from' : [ orphans that have a Derives_from attr referencing it ],\n      //    }\n      // }\n      _underConstructionOrphans: {},\n\n      // if this is true, the parser ignores the\n      // rest of the lines in the file.\n      eof: false,\n\n      lineNumber: 0,\n    })\n  }\n\n  addLine(line) {\n    if (this.eof) {\n      // otherwise, if we are done, ignore this line\n      return\n    }\n\n    this.lineNumber += 1\n\n    if (/^\\s*[^#\\s>]/.test(line)) {\n      // feature line, most common case\n      this._bufferLine(line)\n      return\n    }\n\n    const match = /^\\s*(#+)(.*)/.exec(line)\n    if (match) {\n      // directive or comment\n      // eslint-disable-next-line prefer-const\n      let [, hashsigns, contents] = match\n\n      if (hashsigns.length === 3) {\n        // sync directive, all forward-references are resolved.\n        this._emitAllUnderConstructionFeatures()\n      } else if (hashsigns.length === 2) {\n        const directive = GTF.parseDirective(line)\n\n        this._emitItem(directive)\n      } else {\n        contents = contents.replace(/\\s*/, '')\n        this._emitItem({ comment: contents })\n      }\n    } else if (/^\\s*$/.test(line)) {\n      // blank line, do nothing\n    } else {\n      // it's a parse error\n      const errLine = line.replace(/\\r?\\n?$/g, '')\n      throw new Error(`GTF parse error.  Cannot parse '${errLine}'.`)\n    }\n  }\n\n  _emitItem(i) {\n    if (i[0]) {\n      this.featureCallback(i)\n    } else if (i.directive) {\n      this.directiveCallback(i)\n    } else if (i.comment) {\n      this.commentCallback(i)\n    }\n  }\n\n  finish() {\n    this._emitAllUnderConstructionFeatures()\n    this.endCallback()\n  }\n\n  _enforceBufferSizeLimit(additionalItemCount = 0) {\n    const _unbufferItem = item => {\n      if (\n        item &&\n        item[0] &&\n        item[0].attributes &&\n        item[0].attributes.ID &&\n        item[0].attributes.ID[0]\n      ) {\n        const ids = item[0].attributes.ID\n        ids.forEach(id => {\n          delete this._underConstructionById[id]\n          delete this._completedReferences[id]\n        })\n        item.forEach(i => {\n          if (i.child_features) {\n            i.child_features.forEach(c => _unbufferItem(c))\n          }\n          if (i.derived_features) {\n            i.derived_features.forEach(d => _unbufferItem(d))\n          }\n        })\n      }\n    }\n\n    while (\n      this._underConstructionTopLevel.length + additionalItemCount >\n      this.bufferSize\n    ) {\n      const item = this._underConstructionTopLevel.shift()\n      this._emitItem(item)\n      _unbufferItem(item)\n    }\n  }\n\n  /**\n   * return all under-construction features, called when we know\n   * there will be no additional data to attach to them\n   * @private\n   */\n  _emitAllUnderConstructionFeatures() {\n    this._underConstructionTopLevel.forEach(this._emitItem.bind(this))\n\n    this._underConstructionTopLevel = []\n    this._underConstructionById = {}\n    this._completedReferences = {}\n\n    // if we have any orphans hanging around still, this is a\n    // problem. die with a parse error\n    if (\n      Object.values(this._underConstructionOrphans).filter(\n        entry => Object.keys(entry).length,\n      ).length\n    ) {\n      throw new Error(\n        `some features reference other features that do not exist in the file (or in the same '###' scope). ${JSON.stringify(\n          this._underConstructionOrphans,\n        )}`,\n      )\n    }\n  }\n\n  // do the right thing with a newly-parsed feature line\n  _bufferLine(line) {\n    const featureLine = GTF.parseFeature(line)\n    featureLine.child_features = []\n    featureLine.derived_features = []\n    // featureLine._lineNumber = this.lineNumber //< debugging aid\n\n    const featureNumber = this.lineNumber // no such thing as unique ID in GTF. make one up.\n    const isTranscript = featureLine.featureType === 'transcript' // trying to support the Cufflinks convention of adding a transcript line\n    // NOTE: a feature is an arrayref of one or more feature lines.\n    const ids = isTranscript\n      ? featureLine.attributes.transcript_id || []\n      : [featureNumber]\n    const parents = isTranscript\n      ? []\n      : featureLine.attributes.transcript_id || []\n    const derives = featureLine.attributes.Derives_from || []\n\n    if (!ids.length && !parents.length && !derives.length) {\n      // if it has no IDs and does not refer to anything, we can just\n      // output it\n      this._emitItem([featureLine])\n      return\n    }\n\n    function createTranscript(feature) {\n      const result = JSON.parse(JSON.stringify(feature))\n      result.featureType = 'transcript'\n      return GTF.formatFeature(result)\n    }\n\n    parents.forEach(parent => {\n      const underConst = this._underConstructionById[parent]\n      if (!underConst) {\n        this._bufferLine(createTranscript(featureLine))\n      }\n    })\n\n    let feature\n    ids.forEach(id => {\n      const existing = this._underConstructionById[id]\n      if (existing) {\n        existing.push(featureLine)\n        feature = existing\n      } else {\n        // haven't seen it yet, so buffer it so we can attach\n        // child features to it\n        feature = [featureLine]\n\n        this._enforceBufferSizeLimit(1)\n        if (!parents.length && !derives.length) {\n          this._underConstructionTopLevel.push(feature)\n        }\n        this._underConstructionById[id] = feature\n\n        // see if we have anything buffered that refers to it\n        this._resolveReferencesTo(feature, id)\n      }\n    })\n\n    // try to resolve all its references\n    this._resolveReferencesFrom(\n      feature || [featureLine],\n      { Parent: parents, Derives_from: derives },\n      ids,\n    )\n  }\n\n  _resolveReferencesTo(feature, id) {\n    const references = this._underConstructionOrphans[id]\n    if (!references) {\n      return\n    }\n\n    Object.keys(references).forEach(attrname => {\n      const pname = containerAttributes[attrname] || attrname.toLowerCase()\n      feature.forEach(loc => {\n        loc[pname].push(...references[attrname])\n        delete references[attrname]\n      })\n    })\n  }\n\n  _parseError(message) {\n    this.eof = true\n    this.errorCallback(`${this.lineNumber}: ${message}`)\n  }\n\n  _resolveReferencesFrom(feature, references, ids) {\n    // this is all a bit more awkward in javascript than it was in perl\n    function postSet(obj, slot1, slot2) {\n      let subObj = obj[slot1]\n      if (!subObj) {\n        subObj = {}\n        // eslint-disable-next-line no-param-reassign\n        obj[slot1] = subObj\n      }\n      const returnVal = subObj[slot2] || false\n      subObj[slot2] = true\n      return returnVal\n    }\n\n    function expandFeature(parentFeature, childFeature) {\n      // eslint-disable-next-line no-param-reassign\n      parentFeature[0].start = Math.min(\n        parentFeature[0].start,\n        childFeature[0].start,\n      )\n      // eslint-disable-next-line no-param-reassign\n      parentFeature[0].end = Math.max(parentFeature[0].end, childFeature[0].end)\n    }\n\n    Object.entries(references).forEach(([attrname, toIds]) => {\n      let pname\n      toIds.forEach(toId => {\n        const otherFeature = this._underConstructionById[toId]\n        if (otherFeature) {\n          expandFeature(otherFeature, feature)\n          if (!pname) {\n            pname = containerAttributes[attrname] || attrname.toLowerCase()\n          }\n\n          if (\n            !ids.filter(id =>\n              postSet(this._completedReferences, id, `${attrname},${toId}`),\n            ).length\n          ) {\n            otherFeature.forEach(location => {\n              location[pname].push(feature)\n            })\n          }\n        } else {\n          if (!this._underConstructionOrphans[toId]) {\n            this._underConstructionOrphans[toId] = {}\n          }\n          if (!this._underConstructionOrphans[toId][attrname]) {\n            this._underConstructionOrphans[toId][attrname] = []\n          }\n          this._underConstructionOrphans[toId][attrname].push(feature)\n        }\n      })\n    })\n  }\n}\n","//@ts-nocheck\nimport Parser from './parse'\nimport { formatItem, formatSequence } from './util'\n\nimport { Transform } from 'stream'\nimport { StringDecoder as Decoder } from 'string_decoder'\n\n// don't load fs native module if running in webpacked code\n// eslint-disable-next-line camelcase\nconst fs = typeof __webpack_require__ !== 'function' ? require('fs') : null\n\n// call a callback on the next process tick if running in\n// an environment that supports it\nfunction _callback(callback) {\n  if (process && process.nextTick) {\n    process.nextTick(callback)\n  } else {\n    callback()\n  }\n}\n\n// shared arg processing for the parse routines\nfunction _processParseOptions(options, additionalDefaults = {}) {\n  const out = Object.assign(\n    {\n      parseFeatures: true,\n      parseDirectives: false,\n      parseSequences: true,\n      parseComments: false,\n    },\n    additionalDefaults,\n    options,\n  )\n\n  if (options.parseAll) {\n    out.parseFeatures = true\n    out.parseDirectives = true\n    out.parseComments = true\n    out.parseSequences = true\n  }\n\n  return out\n}\n\nclass GTFTransform extends Transform {\n  constructor(inputOptions = {}) {\n    const options = _processParseOptions(inputOptions)\n    super({ objectMode: true })\n\n    this.encoding = inputOptions.encoding || 'utf8'\n\n    this.decoder = new Decoder()\n    this.textBuffer = ''\n\n    const push = this.push.bind(this)\n    this.parser = new Parser({\n      featureCallback: options.parseFeatures ? push : null,\n      directiveCallback: options.parseDirectives ? push : null,\n      commentCallback: options.parseComments ? push : null,\n      sequenceCallback: options.parseSequences ? push : null,\n      errorCallback: err => this.emit('error', err),\n      bufferSize: options.bufferSize,\n    })\n  }\n\n  _addLine(data) {\n    const line = data.toString('utf8')\n    if (line) {\n      this.parser.addLine(line)\n    }\n  }\n\n  _nextText(buffer) {\n    const pieces = (this.textBuffer + buffer).split(/\\r?\\n/)\n    this.textBuffer = pieces.pop()\n\n    if (this.maxLineLength && this.textBuffer.length > this.maxLineLength) {\n      this.emit('error', new Error('maximum line size exceeded'))\n      return\n    }\n\n    pieces.forEach(piece => this._addLine(piece))\n  }\n\n  _transform(chunk, encoding, callback) {\n    this._nextText(this.decoder.write(chunk))\n    _callback(callback)\n  }\n\n  _flush(callback) {\n    if (this.decoder.end) {\n      this._nextText(this.decoder.end())\n    }\n    if (this.textBuffer != null) {\n      this._addLine(this.textBuffer)\n    }\n    this.parser.finish()\n    _callback(callback)\n  }\n}\n\n/**\n * Parse a stream of text data into a stream of feature,\n * directive, and comment objects.\n *\n * @param {Object} options optional options object\n * @param {string} options.encoding text encoding of the input GTF. default 'utf8'\n * @param {boolean} options.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} options.parseFeatures default true\n * @param {boolean} options.parseDirectives default false\n * @param {boolean} options.parseComments default false\n * @param {boolean} options.parseSequences default true\n * @param {Number} options.bufferSize maximum number of GTF lines to buffer. defaults to 1000\n * @returns {ReadableStream} stream (in objectMode) of parsed items\n */\nexport function parseStream(options = {}) {\n  const newOptions = Object.assign({ bufferSize: 1000 }, options)\n  return new GTFTransform(newOptions)\n}\n\n/**\n * Read and parse a GTF file from the filesystem.\n *\n * @param {string} filename the filename of the file to parse\n * @param {Object} options optional options object\n * @param {string} options.encoding the file's string encoding, defaults to 'utf8'\n * @param {boolean} options.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} options.parseFeatures default true\n * @param {boolean} options.parseDirectives default false\n * @param {boolean} options.parseComments default false\n * @param {boolean} options.parseSequences default true\n * @param {Number} options.bufferSize maximum number of GTF lines to buffer. defaults to 1000\n * @returns {ReadableStream} stream (in objectMode) of parsed items\n */\nexport function parseFile(filename, options) {\n  return fs.createReadStream(filename).pipe(parseStream(options))\n}\n\n/**\n * Synchronously parse a string containing GTF and return\n * an arrayref of the parsed items.\n *\n * @param {string} str\n * @param {Object} inputOptions optional options object\n * @param {boolean} inputOptions.parseAll default false.  if true, will parse all items. overrides other flags\n * @param {boolean} inputOptions.parseFeatures default true\n * @param {boolean} inputOptions.parseDirectives default false\n * @param {boolean} inputOptions.parseComments default false\n * @param {boolean} inputOptions.parseSequences default true\n * @returns {Array} array of parsed features, directives, and/or comments\n */\nexport function parseStringSync(str, inputOptions = {}) {\n  if (!str) {\n    return []\n  }\n\n  const options = _processParseOptions(inputOptions)\n\n  const items = []\n  const push = items.push.bind(items)\n\n  const parser = new Parser({\n    featureCallback: options.parseFeatures ? push : null,\n    directiveCallback: options.parseDirectives ? push : null,\n    commentCallback: options.parseComments ? push : null,\n    sequenceCallback: options.parseSequences ? push : null,\n    bufferSize: Infinity,\n    errorCallback: err => {\n      throw err\n    },\n  })\n\n  str.split(/\\r?\\n/).forEach(parser.addLine.bind(parser))\n  parser.finish()\n\n  return items\n}\n\n/**\n * Format an array of GTF items (features,directives,comments) into string of GTF.\n * Does not insert synchronization (###) marks.\n * Does not insert directive if it's not already there.\n *\n * @param {Array[Object]} items\n * @returns {String} the formatted GTF\n */\nexport function formatSync(items) {\n  // sort items into seq and other\n  const other = []\n  const sequences = []\n  items.forEach(i => {\n    if (i.sequence) {\n      sequences.push(i)\n    } else {\n      other.push(i)\n    }\n  })\n  let str = other.map(formatItem).join('')\n  if (sequences.length) {\n    str += '##FASTA\\n'\n    str += sequences.map(formatSequence).join('')\n  }\n  return str\n}\n\nclass FormattingTransform extends Transform {\n  constructor(options = {}) {\n    super(Object.assign(options, { objectMode: true }))\n    this.linesSinceLastSyncMark = 0\n    this.minLinesBetweenSyncMarks = options.minSyncLines || 100\n    this.insertVersionDirective = options.insertVersionDirective || false\n    this.haveWeEmittedData = false\n    this.fastaMode = false\n  }\n\n  _transform(chunk, encoding, callback) {\n    // if we have not emitted anything yet, and this first\n    // chunk is not a gtf directive, emit one\n    let str\n    if (\n      !this.haveWeEmittedData &&\n      this.insertVersionDirective &&\n      (chunk[0] || chunk).directive !== 'gtf'\n    ) {\n      this.push('##gtf\\n')\n    }\n\n    // if it's a sequence chunk coming down, emit a FASTA directive and\n    // change to FASTA mode\n    if (chunk.sequence && !this.fastaMode) {\n      this.push('##FASTA\\n')\n      this.fastaMode = true\n    }\n\n    if (Array.isArray(chunk)) {\n      str = chunk.map(formatItem).join('')\n    } else {\n      str = formatItem(chunk)\n    }\n\n    this.push(str)\n\n    if (this.linesSinceLastSyncMark >= this.minLinesBetweenSyncMarks) {\n      this.push('###\\n')\n      this.linesSinceLastSyncMark = 0\n    } else {\n      // count the number of newlines in this chunk\n      let count = 0\n      for (let i = 0; i < str.length; i += 1) {\n        if (str[i] === '\\n') {\n          count += 1\n        }\n      }\n      this.linesSinceLastSyncMark += count\n    }\n\n    this.haveWeEmittedData = true\n    _callback(callback)\n  }\n}\n\n/**\n * Format a stream of items (of the type produced\n * by this script) into a stream of GTF text.\n *\n * Inserts synchronization (###) marks automatically.\n *\n * @param {Object} options\n * @param {Object} options.minSyncLines minimum number of lines between ### marks. default 100\n * @param {Boolean} options.insertVersionDirective\n *  if the first item in the stream is not a ##gff-version directive, insert one to show it's gtf\n *  default false\n */\nexport function formatStream(options) {\n  return new FormattingTransform(options)\n}\n\n/**\n * Format a stream of items (of the type produced\n * by this script) into a GTF file and write it to the filesystem.\n\n * Inserts synchronization (###) marks and a ##gtf\n * directive automatically (if one is not already present).\n *\n * @param {ReadableStream} stream the stream to write to the file\n * @param {String} filename the file path to write to\n * @param {Object} options\n * @param {String} options.encoding default 'utf8'. encoding for the written file\n * @param {Number} options.minSyncLines\n *  minimum number of lines between sync (###) marks. default 100\n * @param {Boolean} options.insertVersionDirective\n *  if the first item in the stream is not a ##gtf directive, insert one.\n *  default false\n * @returns {Promise} promise for the written filename\n */\nexport function formatFile(stream, filename, options = {}) {\n  const newOptions = Object.assign(\n    {\n      insertVersionDirective: false,\n    },\n    options,\n  )\n\n  return new Promise((resolve, reject) => {\n    stream\n      .pipe(new FormattingTransform(newOptions))\n      .on('end', () => resolve(filename))\n      .on('error', reject)\n      .pipe(\n        fs.createWriteStream(filename, {\n          encoding: newOptions.encoding || 'utf8',\n        }),\n      )\n  })\n}\n","//@ts-nocheck\nimport {\n  parseStream,\n  parseFile,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n} from './api'\n\nimport * as util from './util'\n\nexport default {\n  parseStream,\n  parseFile,\n  parseStringSync,\n  formatSync,\n  formatStream,\n  formatFile,\n  util,\n}\n","export type Strand = '+' | '-' | '.' | '?'\nexport interface FeatureLoc {\n  [key: string]: unknown\n  start: number\n  end: number\n  strand: Strand\n  seq_name: string\n  child_features?: FeatureLoc[][]\n  data: unknown\n  derived_features: unknown\n  attributes: Record<string, unknown[]>\n}\n\nexport function featureData(data: FeatureLoc) {\n  const f: Record<string, unknown> = { ...data }\n  ;(f.start as number) -= 1 // convert to interbase\n  f.strand = { '+': 1, '-': -1, '.': 0, '?': undefined }[data.strand] // convert strand\n  f.phase = Number(data.frame)\n  f.refName = data.seq_name\n  if (data.score === null) {\n    f.score = undefined\n  }\n  if (data.frame === null) {\n    f.score = undefined\n  }\n  const defaultFields = new Set([\n    'start',\n    'end',\n    'seq_name',\n    'score',\n    'featureType',\n    'source',\n    'frame',\n    'strand',\n  ])\n  for (const a of Object.keys(data.attributes)) {\n    let b = a.toLowerCase()\n    if (defaultFields.has(b)) {\n      // add \"suffix\" to tag name if it already exists\n      // reproduces behavior of NCList\n      b += '2'\n    }\n    if (data.attributes[a]) {\n      let attr = data.attributes[a] as string[] | string\n      if (Array.isArray(attr) && attr.length === 1) {\n        // gtf uses double quotes for text values in the attributes column,\n        // remove them\n        attr = attr[0]!.replaceAll(/^\"|\"$/g, '')\n      }\n      f[b] = attr\n    }\n  }\n  f.refName = f.seq_name\n  f.type = f.featureType\n\n  // the SimpleFeature constructor takes care of recursively inflating subfeatures\n  if (data.child_features && data.child_features.length > 0) {\n    f.subfeatures = data.child_features.flatMap(childLocs =>\n      childLocs.map(childLoc => featureData(childLoc)),\n    )\n  }\n\n  f.child_features = undefined\n  f.data = undefined\n  f.derived_features = undefined\n  f._linehash = undefined\n  f.attributes = undefined\n  f.seq_name = undefined\n  f.featureType = undefined\n  f.frame = undefined\n\n  if (f.transcript_id) {\n    f.name = f.transcript_id\n  }\n  return f\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport IntervalTree from '@flatten-js/interval-tree'\nimport {\n  SimpleFeature,\n  Feature,\n  updateStatus,\n  isGzip,\n} from '@jbrowse/core/util'\nimport { unzip } from '@gmod/bgzf-filehandle'\nimport gtf from '@gmod/gtf'\n\n// locals\nimport { FeatureLoc, featureData } from '../util'\n\nconst decoder =\n  typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined\n\ntype StatusCallback = (arg: string) => void\n\nexport default class GtfAdapter extends BaseFeatureDataAdapter {\n  calculatedIntervalTreeMap: Record<string, IntervalTree> = {}\n\n  gtfFeatures?: Promise<{\n    header: string\n    intervalTreeMap: Record<string, (sc?: StatusCallback) => IntervalTree>\n  }>\n\n  private async loadDataP(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const buf = (await openLocation(\n      this.getConf('gtfLocation'),\n      this.pluginManager,\n    ).readFile(opts)) as Buffer\n\n    const buffer = isGzip(buf)\n      ? await updateStatus('Unzipping', statusCallback, () => unzip(buf))\n      : buf\n    const headerLines = []\n    const featureMap = {} as Record<string, string>\n    let blockStart = 0\n\n    let i = 0\n    while (blockStart < buffer.length) {\n      const n = buffer.indexOf('\\n', blockStart)\n      // could be a non-newline ended file, so slice to end of file if n===-1\n      const b =\n        n === -1 ? buffer.subarray(blockStart) : buffer.subarray(blockStart, n)\n      const line = (decoder?.decode(b) || b.toString()).trim()\n      if (line) {\n        if (line.startsWith('#')) {\n          headerLines.push(line)\n        } else if (line.startsWith('>')) {\n          break\n        } else {\n          const ret = line.indexOf('\\t')\n          const refName = line.slice(0, ret)\n          if (!featureMap[refName]) {\n            featureMap[refName] = ''\n          }\n          featureMap[refName] += `${line}\\n`\n        }\n      }\n      if (i++ % 10_000 === 0) {\n        statusCallback(\n          `Loading ${Math.floor(blockStart / 1_000_000).toLocaleString('en-US')}/${Math.floor(buffer.length / 1_000_000).toLocaleString('en-US')} MB`,\n        )\n      }\n\n      blockStart = n + 1\n    }\n\n    const intervalTreeMap = Object.fromEntries(\n      Object.entries(featureMap).map(([refName, lines]) => [\n        refName,\n        (sc?: (arg: string) => void) => {\n          if (!this.calculatedIntervalTreeMap[refName]) {\n            sc?.('Parsing GTF data')\n            const intervalTree = new IntervalTree()\n            ;(\n              gtf.parseStringSync(lines, {\n                parseFeatures: true,\n                parseComments: false,\n                parseDirectives: false,\n                parseSequences: false,\n              }) as FeatureLoc[][]\n            )\n              .flat()\n              .map(\n                (f, i) =>\n                  new SimpleFeature({\n                    data: featureData(f),\n                    id: `${this.id}-${refName}-${i}`,\n                  }),\n              )\n              .forEach(obj =>\n                intervalTree.insert([obj.get('start'), obj.get('end')], obj),\n              )\n            this.calculatedIntervalTreeMap[refName] = intervalTree\n          }\n          return this.calculatedIntervalTreeMap[refName]\n        },\n      ]),\n    )\n\n    return {\n      header: headerLines.join('\\n'),\n      intervalTreeMap,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.gtfFeatures) {\n      this.gtfFeatures = this.loadDataP(opts).catch((e: unknown) => {\n        this.gtfFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gtfFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { intervalTreeMap } = await this.loadData(opts)\n    return Object.keys(intervalTreeMap)\n  }\n\n  public async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        const { start, end, refName } = query\n        const { intervalTreeMap } = await this.loadData(opts)\n        intervalTreeMap[refName]?.(opts.statusCallback)\n          .search([start, end])\n          .forEach(f => {\n            observer.next(f)\n          })\n        observer.complete()\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.signal)\n  }\n  public freeResources(/* { region } */) {}\n}\n"],"names":["fieldNames","s","String","replace","_","seq","fromCharCode","parseInt","_escape","regex","ch","hex","charCodeAt","toString","toUpperCase","length","escapeColumn","parseAttributes","attrString","attrs","slice","split","forEach","attribute","attr","trim","arec","push","map","parseFeature","line","f","a","parsed","i","start","end","score","parseFloat","strand","parseDirective","match","exec","name","contents","directive","value","seqId","contentStart","contentEnd","seq_id","source","buildname","formatAttributes","attrOrder","Object","keys","tag","val","valstring","hasOwnProperty","Array","isArray","values","join","concat","translateStrand","_formatSingleFeature","seenFeature","attributes","undefined","fields","formattedString","_formatFeature","feature","strings","multiSlot","formatFeature","featureOrFeatures","formatDirective","str","formatComment","comment","formatSequence","id","description","sequence","formatItem","itemOrItems","formatSingleItem","item","containerAttributes","Parent","Derives_from","Parser","constructor","args","nullFunc","assign","this","featureCallback","endCallback","commentCallback","errorCallback","directiveCallback","sequenceCallback","bufferSize","_underConstructionTopLevel","_underConstructionById","_completedReferences","_underConstructionOrphans","eof","lineNumber","addLine","test","_bufferLine","hashsigns","_emitAllUnderConstructionFeatures","_emitItem","errLine","Error","finish","_enforceBufferSizeLimit","additionalItemCount","_unbufferItem","ID","child_features","c","derived_features","d","shift","bind","filter","entry","JSON","stringify","featureLine","featureNumber","isTranscript","featureType","ids","transcript_id","parents","derives","parent","result","parse","createTranscript","existing","_resolveReferencesTo","_resolveReferencesFrom","references","attrname","pname","toLowerCase","loc","_parseError","message","entries","toIds","toId","otherFeature","parentFeature","childFeature","Math","min","max","obj","slot1","slot2","subObj","returnVal","postSet","location","_processParseOptions","options","additionalDefaults","out","parseFeatures","parseDirectives","parseSequences","parseComments","parseAll","Transform","inputOptions","items","parser","Infinity","err","featureData","data","phase","Number","frame","refName","seq_name","defaultFields","Set","b","has","replaceAll","type","subfeatures","flatMap","childLocs","childLoc","_linehash","decoder","TextDecoder","GtfAdapter","BaseFeatureDataAdapter","calculatedIntervalTreeMap","loadDataP","opts","statusCallback","buf","openLocation","getConf","pluginManager","readFile","buffer","isGzip","updateStatus","unzip","headerLines","featureMap","blockStart","n","indexOf","subarray","decode","startsWith","ret","floor","toLocaleString","intervalTreeMap","fromEntries","lines","sc","intervalTree","IntervalTree","gtf","flat","SimpleFeature","insert","get","header","loadData","gtfFeatures","catch","e","getRefNames","getHeader","getFeatures","query","ObservableCreate","async","search","observer","next","complete","error","signal","freeResources"],"sourceRoot":""}