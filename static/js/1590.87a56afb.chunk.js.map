{"version":3,"file":"static/js/1590.87a56afb.chunk.js","mappings":"4NAWe,MAAMA,UAAsBC,EAAAA,oBAOzC,oBAAcC,GACZ,MAAMC,GAAOC,EAAAA,EAAAA,gBAAeC,KAAKC,OAAQ,sBAIzC,GAAiB,iCAAbH,EAAKI,KAAuD,KAAbJ,EAAKI,IAAY,CAClE,MAAMC,GAAOC,EAAAA,EAAAA,cAAaN,EAAME,KAAKK,eAC/BC,QAAaH,EAAKI,SAAS,QACjC,OAAOC,OAAOC,YACZH,EACGI,MAAM,cACNC,QAAOC,KAAUA,EAAKC,SACtBC,KAAIF,IACH,MAAOG,EAAMC,GAAUJ,EAAKF,MAAM,MAClC,MAAO,CAACK,GAAQC,EAAQ,IAGhC,CAEF,CAEAC,WAAAA,CACEhB,EACAiB,EACAb,GAEAc,MAAMlB,EAAQiB,EAAeb,GAC7B,MAAMe,EAAKpB,KAAKK,cAChBL,KAAKqB,eAAiBrB,KAAKH,iBAC3BG,KAAKsB,OAAS,IAAIC,EAAAA,EAAW,CAC3BC,YAAYpB,EAAAA,EAAAA,cAAaJ,KAAKyB,QAAQ,kBAAmBL,IAE7D,CAEA,iBAAaM,GACX,MAAML,QAAuBrB,KAAKqB,eAClC,OAAIA,EACKb,OAAOmB,KAAKN,GAEdrB,KAAKsB,OAAOM,kBACrB,CAEA,gBAAaC,GACX,MAAMR,QAAuBrB,KAAKqB,eAClC,GAAIA,EACF,OAAOb,OAAOmB,KAAKN,GAAgBP,KAAIgB,IAAW,CAChDA,UACAC,MAAO,EACPC,IAAKX,EAAeS,OAGxB,MAAMG,QAAiBjC,KAAKsB,OAAOY,mBACnC,OAAO1B,OAAOmB,KAAKM,GAAUnB,KAAIgB,IAAW,CAC1CA,UACAC,MAAO,EACPC,IAAKC,EAASH,MAElB,CAOOK,WAAAA,EAAY,QAAEL,EAAO,MAAEC,EAAK,IAAEC,IACnC,OAAOI,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAMC,QAAatC,KAAKsB,OAAOiB,gBAAgBT,GACzCU,OAAqBC,IAATH,EAAqBI,KAAKC,IAAIL,EAAMN,GAAOA,EACvDY,QAAY5C,KAAKsB,OAAOuB,YAAYf,EAASC,EAAOS,GACtDI,GACFE,EAASC,KACP,IAAIC,EAAAA,EAAc,CAChBC,GAAI,GAAGnB,KAAWC,KAASS,IAC3BlC,KAAM,CAAEwB,UAASC,QAAOC,IAAKQ,EAAWI,UAI9CE,EAASI,UAAU,GAEvB,CAOOC,aAAAA,GAAuC,E","sources":["../../../plugins/sequence/src/TwoBitAdapter/TwoBitAdapter.ts"],"sourcesContent":["import { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { TwoBitFile } from '@gmod/twobit'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport default class TwoBitAdapter extends BaseSequenceAdapter {\n  private twobit: TwoBitFile\n\n  // the chromSizesData can be used to speed up loading since TwoBit has to do\n  // many range requests at startup to perform the getRegions request\n  protected chromSizesData: Promise<Record<string, number> | undefined>\n\n  private async initChromSizes() {\n    const conf = readConfObject(this.config, 'chromSizesLocation')\n    // check against default and empty in case someone makes the field blank in\n    // config editor, may want better way to check \"optional config slots\" in\n    // future\n    if (conf.uri !== '/path/to/default.chrom.sizes' && conf.uri !== '') {\n      const file = openLocation(conf, this.pluginManager)\n      const data = await file.readFile('utf8')\n      return Object.fromEntries(\n        data\n          .split(/\\n|\\r\\n|\\r/)\n          .filter(line => !!line.trim())\n          .map(line => {\n            const [name, length] = line.split('\\t')\n            return [name!, +length!]\n          }),\n      )\n    }\n    return undefined\n  }\n\n  constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const pm = this.pluginManager\n    this.chromSizesData = this.initChromSizes()\n    this.twobit = new TwoBitFile({\n      filehandle: openLocation(this.getConf('twoBitLocation'), pm),\n    })\n  }\n\n  public async getRefNames() {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData)\n    }\n    return this.twobit.getSequenceNames()\n  }\n\n  public async getRegions(): Promise<NoAssemblyRegion[]> {\n    const chromSizesData = await this.chromSizesData\n    if (chromSizesData) {\n      return Object.keys(chromSizesData).map(refName => ({\n        refName,\n        start: 0,\n        end: chromSizesData[refName]!,\n      }))\n    }\n    const refSizes = await this.twobit.getSequenceSizes()\n    return Object.keys(refSizes).map(refName => ({\n      refName,\n      start: 0,\n      end: refSizes[refName]!,\n    }))\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const size = await this.twobit.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const seq = await this.twobit.getSequence(refName, start, regionEnd)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["TwoBitAdapter","BaseSequenceAdapter","initChromSizes","conf","readConfObject","this","config","uri","file","openLocation","pluginManager","data","readFile","Object","fromEntries","split","filter","line","trim","map","name","length","constructor","getSubAdapter","super","pm","chromSizesData","twobit","TwoBitFile","filehandle","getConf","getRefNames","keys","getSequenceNames","getRegions","refName","start","end","refSizes","getSequenceSizes","getFeatures","ObservableCreate","async","size","getSequenceSize","regionEnd","undefined","Math","min","seq","getSequence","observer","next","SimpleFeature","id","complete","freeResources"],"sourceRoot":""}