{"version":3,"file":"static/js/439.6ea1e105.chunk.js","mappings":"gMAYe,SAASA,EAAeC,GACrC,MAAM,MAAEC,EAAQ,aAAY,QAAEC,GAAYF,EAC1C,OACEG,EAAAA,EAAAA,KAACC,EAAAA,QAAQ,IAAKJ,EAAOC,MAAOA,EAAMI,UAChCF,EAAAA,EAAAA,KAACG,EAAAA,QAAU,IAAKN,EAAOO,WAAYL,KAGzC,C,gGCVA,MAsBA,GAtB0CM,EAAAA,EAAAA,WAAS,UAAU,MAC3DC,IASA,MAAM,YAAEC,GAAgBD,GAClB,SAAEE,EAAQ,SAAEC,GAAaC,gBAAgBH,GAC/C,OACEI,EAAAA,EAAAA,MAACC,EAAAA,EAAK,CAAAV,SAAA,EACJF,EAAAA,EAAAA,KAACa,EAAAA,gBAAe,CAACf,MAAM,YAAYC,QAASS,KAC5CR,EAAAA,EAAAA,KAACa,EAAAA,gBAAe,CAACf,MAAM,YAAYC,QAASU,KAC5CT,EAAAA,EAAAA,KAACJ,EAAAA,eAAc,CAACE,MAAM,uBAAuBC,QAASS,KACtDR,EAAAA,EAAAA,KAACJ,EAAAA,eAAc,CAACE,MAAM,uBAAuBC,QAASU,MAG5D,G,mQCpBA,MAuBA,GAvB0BJ,EAAAA,EAAAA,WAAS,UAAU,MAAEC,IAC7C,MAAM,MAAEQ,EAAK,aAAEC,EAAY,YAAER,GAAgBD,EAE7C,GAAIQ,EACF,OAAOd,EAAAA,EAAAA,KAACgB,EAAAA,aAAY,CAACF,MAAOA,IACvB,GAAKP,EAEL,CAKL,MAAMU,GAAeC,EAAAA,EAAAA,IAAyBX,GAC9C,OAAOY,EAAAA,EAAAA,IAAQF,GAAgB,MAC7BjB,EAAAA,EAAAA,KAACoB,EAAAA,QAAc,CACbd,MAAOA,EACPP,QAASkB,EACTF,aAAcA,GAGpB,CAdE,OAAO,IAeX,G,qFCzBe,SAASF,EAAgBhB,GACtC,MAAM,MAAEC,EAAQ,gBAAmBD,EACnC,OACEG,EAAAA,EAAAA,KAACC,EAAAA,QAAQ,IAAKJ,EAAOC,MAAOA,EAAMI,UAChCF,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,IAAKxB,KAGvB,C","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseAttributes.tsx","../../../plugins/breakpoint-split-view/src/BreakpointAlignmentsFeatureDetail/BreakpointAlignmentsFeatureDetail.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/index.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCoreDetails.tsx"],"sourcesContent":["import Attributes from './Attributes'\nimport BaseCard from './BaseCard'\n\nimport type { BaseCardProps, BaseProps } from '../types'\n\nexport interface BaseInputProps extends BaseCardProps {\n  omit?: string[]\n  model: any\n  descriptions?: Record<string, React.ReactNode>\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}\n\nexport default function BaseAttributes(props: BaseProps) {\n  const { title = 'Attributes', feature } = props\n  return (\n    <BaseCard {...props} title={title}>\n      <Attributes {...props} attributes={feature} />\n    </BaseCard>\n  )\n}\n","import {\n  BaseAttributes,\n  BaseCoreDetails,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\nconst BreakpointAlignmentsFeatureDetail = observer(function ({\n  model,\n}: {\n  model: {\n    featureData: {\n      feature1: SimpleFeatureSerialized\n      feature2: SimpleFeatureSerialized\n    }\n  }\n}) {\n  const { featureData } = model\n  const { feature1, feature2 } = structuredClone(featureData)\n  return (\n    <Paper>\n      <BaseCoreDetails title=\"Feature 1\" feature={feature1} />\n      <BaseCoreDetails title=\"Feature 2\" feature={feature2} />\n      <BaseAttributes title=\"Feature 1 attributes\" feature={feature1} />\n      <BaseAttributes title=\"Feature 2 attributes\" feature={feature2} />\n    </Paper>\n  )\n})\n\nexport default BreakpointAlignmentsFeatureDetail\n","import { observer } from 'mobx-react'\n\nimport { isEmpty } from './util'\nimport { replaceUndefinedWithNull } from '../util'\nimport FeatureDetails from './FeatureDetails'\nimport { ErrorMessage } from '../../ui'\n\nimport type { BaseInputProps } from './types'\n\nconst BaseFeatureDetail = observer(function ({ model }: BaseInputProps) {\n  const { error, descriptions, featureData } = model\n\n  if (error) {\n    return <ErrorMessage error={error} />\n  } else if (!featureData) {\n    return null\n  } else {\n    // replacing undefined with null helps with allowing fields to be hidden,\n    // setting null is not allowed by jexl so we set it to undefined to hide.\n    // see config guide. this replacement happens both here and when\n    // snapshotting the featureData\n    const featureData2 = replaceUndefinedWithNull(featureData)\n    return isEmpty(featureData2) ? null : (\n      <FeatureDetails\n        model={model}\n        feature={featureData2}\n        descriptions={descriptions}\n      />\n    )\n  }\n})\n\nexport default BaseFeatureDetail\n\nexport { default as BaseCard } from './BaseCard'\nexport { default as BaseAttributes } from './BaseAttributes'\nexport { default as BaseCoreDetails } from './BaseCoreDetails'\nexport { default as FeatureDetails } from './FeatureDetails'\n","import BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\n\nimport type { BaseProps } from '../types'\n\nexport default function BaseCoreDetails(props: BaseProps) {\n  const { title = 'Primary data' } = props\n  return (\n    <BaseCard {...props} title={title}>\n      <CoreDetails {...props} />\n    </BaseCard>\n  )\n}\n"],"names":["BaseAttributes","props","title","feature","_jsx","BaseCard","children","Attributes","attributes","observer","model","featureData","feature1","feature2","structuredClone","_jsxs","Paper","BaseCoreDetails","error","descriptions","ErrorMessage","featureData2","replaceUndefinedWithNull","isEmpty","FeatureDetails","CoreDetails"],"sourceRoot":""}