{"version":3,"file":"static/js/2724.b35771b1.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddTrackWidget/components/AddTrackStatusMessage.tsx","../../../plugins/data-management/src/AddTrackWidget/components/util.ts","../../../plugins/data-management/src/AddTrackWidget/components/TrackAdapterSelector.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackUnknownAdapterPrompt.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TextIndexingConfig.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackTypeSelector.tsx","../../../plugins/data-management/src/AddTrackWidget/components/Unsupported.tsx","../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/DefaultAddTrackWorkflow.tsx","../../../plugins/data-management/src/AddTrackWidget/components/doSubmit.ts","../../../plugins/data-management/src/AddTrackWidget/components/PasteConfigWorkflow.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"sourcesContent":["import { Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const { classes } = useStyles()\n  const { type, subadapter } = trackAdapter\n  return type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter <code>{type}</code> with\n      subadapter <code>{subadapter?.type}</code>. Please enter a track name and,\n      if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n","import type { AdapterType } from '@jbrowse/core/pluggableElementTypes'\n\n// collate adapters into a map with\n// - key: category\n// - value: array of adapters with that category\nexport function categorizeAdapters(adaptersList: AdapterType[]) {\n  const map = {} as Record<string, AdapterType[]>\n  for (const adapter of adaptersList) {\n    const key = adapter.adapterMetadata?.category || 'Default'\n    if (!map[key]) {\n      map[key] = []\n    }\n    map[key].push(adapter)\n  }\n  return map\n}\n","import { getEnv } from '@jbrowse/core/util'\nimport { ListSubheader, MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { categorizeAdapters } from './util'\n\nimport type { AddTrackModel } from '../model'\n\nconst TrackAdapterSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const { trackAdapter } = model\n  const { pluginManager } = getEnv(model)\n\n  return (\n    <TextField\n      value={trackAdapter?.type !== 'UNKNOWN' ? trackAdapter?.type : ''}\n      label=\"Adapter type\"\n      variant=\"outlined\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      slotProps={{\n        select: {\n          SelectDisplayProps: {\n            // @ts-expect-error\n            'data-testid': 'adapterTypeSelect',\n          },\n        },\n      }}\n    >\n      {Object.entries(\n        categorizeAdapters(\n          pluginManager\n            .getAdapterElements()\n            .filter(e => !e.adapterMetadata?.hiddenFromGUI),\n        ),\n      ).map(([key, val]) => [\n        // returning array avoids needing to use a react fragment which\n        // Select/TextField sub-elements disagree with\n        <ListSubheader key={key}>{key}</ListSubheader>,\n        val.map(elt => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.displayName}\n          </MenuItem>\n        )),\n      ])}\n    </TextField>\n  )\n})\n\nexport default TrackAdapterSelector\n","import { Link, Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport TrackAdapterSelector from './TrackAdapterSelector'\n\nimport type { AddTrackModel } from '../model'\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function UnknownAdapterPrompt({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        JBrowse was not able to guess the adapter type for this data, but it may\n        be in the list below. If not, you can{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/releases\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          check for new releases\n        </Link>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <Link\n          href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          file an issue\n        </Link>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector model={model} />\n    </>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  Paper,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst TextIndexingConfig = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [attributes, setAttributes] = useState(['Name', 'ID'])\n  const [exclude, setExclude] = useState(['CDS', 'exon'])\n  const sections = [\n    {\n      label: 'Indexing attributes',\n      values: attributes,\n    },\n    {\n      label: 'Feature types to exclude',\n      values: exclude,\n    },\n  ]\n  useEffect(() => {\n    model.setTextIndexingConf({ attributes, exclude })\n  }, [model, attributes, exclude])\n\n  return (\n    <Paper className={classes.paper}>\n      <InputLabel>Indexing configuration</InputLabel>\n      {sections.map((section, index) => (\n        <Card raised key={section.label} className={classes.card}>\n          <CardContent>\n            <InputLabel>{section.label}</InputLabel>\n            <List disablePadding>\n              {section.values.map((val, idx) => (\n                /* biome-ignore lint/suspicious/noArrayIndexKey: */\n                <ListItem key={`${val}-${idx}`} disableGutters>\n                  <TextField\n                    value={val}\n                    slotProps={{\n                      input: {\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={() => {\n                                const newAttr = section.values.filter(\n                                  (_, i) => i !== idx,\n                                )\n                                if (index === 0) {\n                                  setAttributes(newAttr)\n                                } else {\n                                  setExclude(newAttr)\n                                }\n                              }}\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      },\n                    }}\n                  />\n                </ListItem>\n              ))}\n              <ListItem disableGutters>\n                <TextField\n                  value={index === 0 ? value1 : value2}\n                  placeholder=\"add new\"\n                  onChange={event => {\n                    if (index === 0) {\n                      setValue1(event.target.value)\n                    } else {\n                      setValue2(event.target.value)\n                    }\n                  }}\n                  slotProps={{\n                    input: {\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={() => {\n                              if (index === 0) {\n                                setAttributes([...attributes, value1])\n                                setValue1('')\n                              } else {\n                                setExclude([...exclude, value2])\n                                setValue2('')\n                              }\n                            }}\n                            disabled={\n                              index === 0 ? value1 === '' : value2 === ''\n                            }\n                            data-testid=\"stringArrayAdd-Feat\"\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    },\n                  }}\n                />\n              </ListItem>\n            </List>\n          </CardContent>\n        </Card>\n      ))}\n    </Paper>\n  )\n})\n\nexport default TextIndexingConfig\n","import { getEnv } from '@jbrowse/core/util'\nimport { MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { AddTrackModel } from '../model'\n\nconst TrackTypeSelector = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { pluginManager } = getEnv(model)\n  const { trackType } = model\n  const trackTypes = pluginManager.getTrackElements()\n\n  return (\n    <TextField\n      value={trackType}\n      variant=\"outlined\"\n      label=\"Track type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setTrackType(event.target.value)\n      }}\n      slotProps={{\n        select: {\n          SelectDisplayProps: {\n            // @ts-expect-error\n            'data-testid': 'trackTypeSelect',\n          },\n        },\n      }}\n    >\n      {trackTypes.map(({ name, displayName }) => (\n        <MenuItem key={name} value={name}>\n          {displayName}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nexport default TrackTypeSelector\n","import { Link, Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function Unsupported() {\n  const { classes } = useStyles()\n  return (\n    <Typography className={classes.spacing}>\n      This version of JBrowse cannot display data of this type. It is possible,\n      however, that there is a newer version that can display them. You can{' '}\n      <Link\n        href=\"https://github.com/GMOD/jbrowse-components/releases\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        check for new releases\n      </Link>{' '}\n      of JBrowse or{' '}\n      <Link\n        href=\"https://github.com/GMOD/jbrowse-components/issues/new\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        file an issue\n      </Link>{' '}\n      and add a feature request for this data type.\n    </Typography>\n  )\n}\n","import { Suspense, useEffect, useState } from 'react'\n\nimport { AssemblySelector } from '@jbrowse/core/ui'\nimport {\n  getEnv,\n  getSession,\n  isElectron,\n  isSupportedIndexingAdapter,\n} from '@jbrowse/core/util'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport StatusMessage from './AddTrackStatusMessage'\nimport UnknownAdapterPrompt from './AddTrackUnknownAdapterPrompt'\nimport TextIndexingConfig from './TextIndexingConfig'\nimport TrackAdapterSelector from './TrackAdapterSelector'\nimport TrackTypeSelector from './TrackTypeSelector'\nimport Unsupported from './Unsupported'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nconst ConfirmTrack = observer(function ConfirmTrack({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [check, setCheck] = useState(true)\n  const session = getSession(model)\n  const {\n    trackName,\n    unsupported,\n    trackAdapter,\n    trackType,\n    warningMessage,\n    adapterHint,\n  } = model\n\n  useEffect(() => {\n    if (adapterHint === '' && trackAdapter) {\n      model.setAdapterHint(trackAdapter.type)\n    }\n  }, [adapterHint, trackAdapter, trackAdapter?.type, model])\n\n  if (unsupported) {\n    return <Unsupported />\n  } else if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  } else if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  } else {\n    const supportedForIndexing = isSupportedIndexingAdapter(trackAdapter.type)\n    const { pluginManager } = getEnv(model)\n    const Component = pluginManager.evaluateExtensionPoint(\n      'Core-addTrackComponent',\n      ({ model }: { model: AddTrackModel }) => (\n        <AssemblySelector\n          session={session}\n          helperText=\"Select assembly to add track to\"\n          selected={model.assembly}\n          onChange={asm => {\n            model.setAssembly(asm)\n          }}\n          TextFieldProps={{\n            fullWidth: true,\n            SelectProps: {\n              SelectDisplayProps: {\n                // @ts-expect-error\n                'data-testid': 'assemblyNameSelect',\n              },\n            },\n          }}\n        />\n      ),\n      { model },\n    ) as React.FC<any>\n    return (\n      <div>\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n        {warningMessage ? (\n          <Typography color=\"warning\">{warningMessage}</Typography>\n        ) : null}\n        <TextField\n          className={classes.spacing}\n          label=\"trackName\"\n          helperText=\"A name for this track\"\n          fullWidth\n          value={trackName}\n          onChange={event => {\n            model.setTrackName(event.target.value)\n          }}\n          slotProps={{\n            htmlInput: {\n              'data-testid': 'trackNameInput',\n            },\n          }}\n        />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 10,\n          }}\n        >\n          <TrackAdapterSelector model={model} />\n          <TrackTypeSelector model={model} />\n\n          <Suspense fallback={null}>\n            <Component model={model} />\n          </Suspense>\n        </div>\n\n        {isElectron && supportedForIndexing && (\n          <FormControl>\n            <FormControlLabel\n              label=\"Index track for text searching?\"\n              control={\n                <Checkbox\n                  checked={check}\n                  onChange={e => {\n                    setCheck(e.target.checked)\n                    model.setTextIndexTrack(e.target.checked)\n                  }}\n                />\n              }\n            />\n          </FormControl>\n        )}\n        {isElectron && check && supportedForIndexing ? (\n          <TextIndexingConfig model={model} />\n        ) : null}\n      </div>\n    )\n  }\n})\n\nexport default ConfirmTrack\n","import { FileSelector } from '@jbrowse/core/ui'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getRoot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\nimport type { AbstractRootModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n}))\n\nconst TrackSourceSelect = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const rootModel = getRoot<AbstractRootModel>(model)\n\n  return (\n    <Paper className={classes.paper}>\n      <FileSelector\n        name=\"Main file\"\n        description=\"\"\n        location={model.trackData}\n        setLocation={model.setTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n      <div className={classes.spacer} />\n      <FileSelector\n        name=\"Index file\"\n        description=\"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\"\n        location={model.indexTrackData}\n        setLocation={model.setIndexTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n    </Paper>\n  )\n})\n\nexport default TrackSourceSelect\n","import { useState } from 'react'\n\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { doSubmit } from './doSubmit'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginTop: theme.spacing(10),\n    marginBottom: theme.spacing(2),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nconst DefaultAddTrackWorkflow = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  className={classes.button}\n                  onClick={() => {\n                    setActiveStep(activeStep - 1)\n                  }}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (activeStep !== steps.length - 1) {\n                      setActiveStep(activeStep + 1)\n                    } else {\n                      try {\n                        doSubmit({ model })\n                      } catch (e) {\n                        getSession(model).notifyError(`${e}`, e)\n                      }\n                    }\n                  }}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n})\nexport default DefaultAddTrackWorkflow\n","import {\n  getSession,\n  isElectron,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n  isSupportedIndexingAdapter,\n} from '@jbrowse/core/util'\nimport { getRoot } from 'mobx-state-tree'\n\nimport type { AddTrackModel } from '../model'\n\nfunction doTextIndexTrack({\n  trackId,\n  model,\n}: {\n  trackId: string\n  model: AddTrackModel\n}) {\n  const { textIndexingConf, trackName, assembly } = model\n  const { jobsManager } = getRoot<any>(model)\n  const attr = textIndexingConf || {\n    attributes: ['Name', 'ID'],\n    exclude: ['CDS', 'exon'],\n  }\n  const indexName = `${trackName}-index`\n  jobsManager.queueJob({\n    indexingParams: {\n      ...attr,\n      assemblies: [assembly],\n      tracks: [trackId],\n      indexType: 'perTrack',\n      name: indexName,\n      timestamp: new Date().toISOString(),\n    },\n    name: indexName,\n    cancelCallback: () => jobsManager.abortJob(),\n  })\n}\n\nexport function doSubmit({ model }: { model: AddTrackModel }) {\n  const { textIndexTrack, trackAdapter, view } = model\n  const session = getSession(model)\n  const trackConfig = model.getTrackConfig(Date.now())\n\n  if (!isSessionWithAddTracks(session)) {\n    throw new Error(\"Can't add tracks to this session\")\n  } else if (trackConfig && trackAdapter) {\n    const { trackId } = trackConfig\n    session.addTrackConf(trackConfig)\n    view?.showTrack?.(trackId)\n\n    if (\n      isElectron &&\n      textIndexTrack &&\n      isSupportedIndexingAdapter(trackAdapter.type)\n    ) {\n      doTextIndexTrack({\n        model,\n        trackId,\n      })\n    }\n    model.clearData()\n    if (isSessionModelWithWidgets(session)) {\n      session.hideWidget(model)\n    }\n  } else {\n    throw new Error(\n      'Failed to add track.\\nThe configuration of this file is not currently supported.',\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  getSession,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n} from '@jbrowse/core/util'\nimport { Button, TextField } from '@mui/material'\nimport { transaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()({\n  textbox: {\n    width: '100%',\n  },\n  submit: {\n    marginTop: 25,\n    marginBottom: 100,\n    display: 'block',\n  },\n})\n\nconst PasteConfigAddTrackWorkflow = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [error, setError] = useState<unknown>()\n\n  return (\n    <div>\n      {error ? <ErrorMessage error={error} /> : null}\n      <TextField\n        multiline\n        rows={10}\n        value={val}\n        placeholder=\"Paste track config or array of track configs in JSON format\"\n        variant=\"outlined\"\n        className={classes.textbox}\n        onChange={event => {\n          setVal(event.target.value)\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        className={classes.submit}\n        onClick={() => {\n          try {\n            setError(undefined)\n            const session = getSession(model)\n            const conf = JSON.parse(val)\n            const confs = Array.isArray(conf) ? conf : [conf]\n            if (\n              isSessionWithAddTracks(session) &&\n              isSessionModelWithWidgets(session)\n            ) {\n              transaction(() => {\n                for (const c of confs) {\n                  session.addTrackConf(c)\n                }\n                for (const c of confs) {\n                  model.view.showTrack(c.trackId)\n                }\n                model.clearData()\n              })\n\n              session.hideWidget(model)\n            }\n          } catch (e) {\n            console.error(e)\n            setError(e)\n          }\n        }}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n})\nexport default PasteConfigAddTrackWorkflow\n","import { Suspense, useState } from 'react'\n\nimport { getEnv } from '@jbrowse/core/util'\nimport { FormControl, FormHelperText, MenuItem, Select } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport DefaultAddTrackWorkflow from './DefaultAddTrackWorkflow'\nimport PasteConfigWorkflow from './PasteConfigWorkflow'\n\nimport type { AddTrackModel } from '../model'\n\nconst AddTrackSelector = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const [val, setVal] = useState('Default add track workflow')\n  const ComponentMap = {\n    'Default add track workflow': DefaultAddTrackWorkflow,\n    'Add track JSON': PasteConfigWorkflow,\n    ...Object.fromEntries(\n      getEnv(model)\n        .pluginManager.getAddTrackWorkflowElements()\n        .map(w => [w.name, w.ReactComponent]),\n    ),\n  } as Record<string, React.FC<{ model: AddTrackModel }>>\n\n  // make sure the selected value is in the list\n  const val2 = ComponentMap[val] ? val : 'Default add track workflow'\n  const Component = ComponentMap[val2]!\n  return (\n    <>\n      <FormControl>\n        <Select\n          value={val2}\n          onChange={event => {\n            setVal(event.target.value)\n          }}\n        >\n          {Object.keys(ComponentMap).map(e => (\n            <MenuItem key={e} value={e}>\n              {e}\n            </MenuItem>\n          ))}\n        </Select>\n        <FormHelperText>Type of add track workflow</FormHelperText>\n      </FormControl>\n\n      <Suspense fallback={null}>\n        <Component model={model} />\n      </Suspense>\n    </>\n  )\n})\n\nexport default AddTrackSelector\n"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","trackAdapter","trackType","classes","type","subadapter","_jsxs","Typography","className","children","_jsx","categorizeAdapters","adaptersList","map","adapter","key","adapterMetadata","category","push","observer","model","pluginManager","getEnv","TextField","value","label","variant","select","fullWidth","onChange","event","setAdapterHint","target","slotProps","SelectDisplayProps","Object","entries","getAdapterElements","filter","e","hiddenFromGUI","val","ListSubheader","elt","MenuItem","name","displayName","UnknownAdapterPrompt","_Fragment","Link","href","rel","TrackAdapterSelector","paper","display","flexDirection","padding","card","marginTop","value1","setValue1","useState","value2","setValue2","attributes","setAttributes","exclude","setExclude","sections","values","useEffect","setTextIndexingConf","Paper","InputLabel","section","index","Card","raised","CardContent","List","disablePadding","idx","ListItem","disableGutters","input","endAdornment","InputAdornment","position","IconButton","onClick","newAttr","_","i","DeleteIcon","placeholder","disabled","AddIcon","trackTypes","getTrackElements","setTrackType","Unsupported","check","setCheck","session","getSession","trackName","unsupported","warningMessage","adapterHint","UNKNOWN","supportedForIndexing","isSupportedIndexingAdapter","Component","evaluateExtensionPoint","AssemblySelector","helperText","selected","assembly","asm","setAssembly","TextFieldProps","SelectProps","color","setTrackName","htmlInput","style","gap","TrackTypeSelector","Suspense","fallback","isElectron","FormControl","FormControlLabel","control","Checkbox","checked","setTextIndexTrack","TextIndexingConfig","spacer","height","rootModel","getRoot","FileSelector","description","location","trackData","setLocation","setTrackData","setName","indexTrackData","setIndexTrackData","root","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","alertContainer","steps","activeStep","setActiveStep","getStepContent","step","TrackSourceSelect","ConfirmTrack","isNextDisabled","Stepper","orientation","Step","StepLabel","StepContent","Button","length","textIndexTrack","view","trackConfig","getTrackConfig","Date","now","isSessionWithAddTracks","Error","trackId","addTrackConf","showTrack","textIndexingConf","jobsManager","attr","indexName","queueJob","indexingParams","assemblies","tracks","indexType","timestamp","toISOString","cancelCallback","abortJob","doTextIndexTrack","clearData","isSessionModelWithWidgets","hideWidget","doSubmit","notifyError","textbox","width","submit","setVal","error","setError","ErrorMessage","multiline","rows","undefined","conf","JSON","parse","confs","Array","isArray","transaction","c","console","ComponentMap","DefaultAddTrackWorkflow","PasteConfigWorkflow","fromEntries","getAddTrackWorkflowElements","w","ReactComponent","val2","Select","keys","FormHelperText"],"sourceRoot":""}