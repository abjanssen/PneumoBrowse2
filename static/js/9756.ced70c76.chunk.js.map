{"version":3,"file":"static/js/9756.ced70c76.chunk.js","mappings":"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","sources":["../../../plugins/gccontent/src/GCContentAdapter/GCContentAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature, updateStatus } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\nimport { firstValueFrom } from 'rxjs'\nimport { toArray } from 'rxjs/operators'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class GCContentAdapter extends BaseFeatureDataAdapter {\n  private gcMode = 'content'\n\n  public static capabilities = ['hasLocalStats']\n\n  public async configure() {\n    const adapter = await this.getSubAdapter?.(this.getConf('sequenceAdapter'))\n    if (!adapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return adapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const adapter = await this.configure()\n    return adapter.getRefNames(opts)\n  }\n\n  public getFeatures(query: Region, opts?: BaseOptions) {\n    const { statusCallback = () => {}, stopToken } = opts || {}\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const windowSize = this.getConf('windowSize')\n      const windowDelta = this.getConf('windowDelta')\n      const halfWindowSize = windowSize === 1 ? 1 : Math.ceil(windowSize / 2) // Half the window size\n      const isWindowSizeOneBp = windowSize === 1\n\n      const qs = Math.max(\n        0,\n        Math.floor((query.start - halfWindowSize) / windowSize) * windowSize,\n      )\n      const qe =\n        Math.ceil((query.end + halfWindowSize) / windowSize) * windowSize\n\n      if (qe < 0 || qs > qe) {\n        observer.complete()\n        return\n      }\n\n      const feats = await firstValueFrom(\n        sequenceAdapter\n          .getFeatures(\n            {\n              ...query,\n              start: qs,\n              end: qe,\n            },\n            opts,\n          )\n          .pipe(toArray()),\n      )\n      const residues = feats[0]?.get('seq') || ''\n\n      await updateStatus('Calculating GC', statusCallback, () => {\n        // Initialize the first window\n        let nc = 0\n        let ng = 0\n        let len = 0\n        let start = performance.now()\n\n        // Calculate initial window\n        const startIdx = halfWindowSize\n        for (\n          let j = startIdx - halfWindowSize;\n          j < startIdx + halfWindowSize;\n          j++\n        ) {\n          const letter = residues[j]\n          if (letter === 'c' || letter === 'C') {\n            nc++\n          } else if (letter === 'g' || letter === 'G') {\n            ng++\n          }\n          if (letter !== 'N') {\n            len++\n          }\n        }\n\n        for (\n          let i = halfWindowSize;\n          i < residues.length - halfWindowSize;\n          i += windowDelta\n        ) {\n          if (performance.now() - start > 400) {\n            checkStopToken(stopToken)\n            start = performance.now()\n          }\n\n          // For windowSize === 1, just get the single character\n          if (isWindowSizeOneBp) {\n            const letter = residues[i]\n            nc = letter === 'c' || letter === 'C' ? 1 : 0\n            ng = letter === 'g' || letter === 'G' ? 1 : 0\n            len = letter !== 'N' ? 1 : 0\n          } else if (i > halfWindowSize) {\n            // Rolling window: remove characters that are no longer in window\n            // and add new characters that entered the window\n            const prevStart = i - windowDelta - halfWindowSize\n            const prevEnd = i - windowDelta + halfWindowSize\n            const currStart = i - halfWindowSize\n            const currEnd = i + halfWindowSize\n\n            // Remove old characters\n            for (let j = prevStart; j < Math.min(prevEnd, currStart); j++) {\n              if (j >= 0 && j < residues.length) {\n                const letter = residues[j]\n                if (letter === 'c' || letter === 'C') {\n                  nc--\n                } else if (letter === 'g' || letter === 'G') {\n                  ng--\n                }\n                if (letter !== 'N') {\n                  len--\n                }\n              }\n            }\n\n            // Add new characters\n            for (let j = Math.max(prevEnd, currStart); j < currEnd; j++) {\n              if (j >= 0 && j < residues.length) {\n                const letter = residues[j]\n                if (letter === 'c' || letter === 'C') {\n                  nc++\n                } else if (letter === 'g' || letter === 'G') {\n                  ng++\n                }\n                if (letter !== 'N') {\n                  len++\n                }\n              }\n            }\n          }\n\n          const pos = qs\n          const score =\n            this.gcMode === 'content'\n              ? (ng + nc) / (len || 1)\n              : this.gcMode === 'skew'\n                ? (ng - nc) / (ng + nc || 1)\n                : 0\n\n          observer.next(\n            new SimpleFeature({\n              uniqueId: `${this.id}_${pos + i}`,\n              refName: query.refName,\n              start: pos + i,\n              end: pos + i + windowDelta,\n              score,\n            }),\n          )\n        }\n      })\n\n      observer.complete()\n    })\n  }\n}\n"],"names":["GCContentAdapter","BaseFeatureDataAdapter","gcMode","configure","adapter","this","getSubAdapter","getConf","Error","dataAdapter","getRefNames","opts","getFeatures","query","statusCallback","stopToken","ObservableCreate","async","sequenceAdapter","windowSize","windowDelta","halfWindowSize","Math","ceil","isWindowSizeOneBp","qs","max","floor","start","qe","end","observer","complete","feats","firstValueFrom","pipe","toArray","residues","get","updateStatus","nc","ng","len","performance","now","startIdx","j","letter","i","length","checkStopToken","prevEnd","currStart","currEnd","min","pos","score","next","SimpleFeature","uniqueId","id","refName"],"sourceRoot":""}