{"version":3,"file":"static/js/8658.68150f7f.chunk.js","mappings":"qSAiBA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAaC,IAAS,CACtCC,YAAa,CACXC,SAAU,WACVC,MAAOH,EAAMI,QAAQ,GACrBC,IAAKL,EAAMI,QAAQ,GACnBE,MAAON,EAAMO,QAAQC,KAAK,SAI9B,SAAAC,EAAAC,GAAA,MAAAC,GAAAC,EAAAA,EAAAA,GAAA,GACEC,GAAYC,EAAAA,EAAAA,QAAA,MAA4B,IAAAC,EAS1B,OAT0BJ,EAAA,KAAAD,GAEtCK,GAAAC,EAAAA,EAAAA,KAACC,IAAS,CACCJ,QAAAA,EACDK,OAAA,mCAECC,QAA4DC,EAAAC,UAErEL,EAAAA,EAAAA,KAACM,EAAAA,EAAK,CAAMT,IAAAA,KAASH,MACXC,EAAA,GAAAD,EAAAC,EAAA,GAAAI,GAAAA,EAAAJ,EAAA,GAPZI,CAOY,CAVhB,SAAAK,EAAAG,GAAA,MAOsB,GAAGA,EAAGC,QAAAC,YAAoBC,SAAU,iBAAiB,CAO3E,MA8BA,GA9BwBC,EAAAA,EAAAA,UAAS,SAC/BjB,GAEA,MAAM,QAAEkB,GAAY9B,KACd,MAAE+B,EAAK,SAAER,EAAQ,QAAES,GAAYpB,EAErC,OACEM,EAAAA,EAAAA,KAACe,EAAAA,EAAM,IAAKrB,EAAOD,eAAgBA,EAAeY,UAChDW,EAAAA,EAAAA,MAACC,EAAAA,EAAiB,CAAAZ,SAAA,EAChBW,EAAAA,EAAAA,MAACE,EAAAA,EAAW,CAACC,MAAO,CAAEC,OAAQ,QAASf,SAAA,CACpCQ,EACAC,GACCd,EAAAA,EAAAA,KAACqB,EAAAA,EAAU,CACTZ,UAAWG,EAAQ3B,YACnBqC,QAASA,KAEPR,KACAT,UAEFL,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,MAEV,SAENvB,EAAAA,EAAAA,KAACwB,EAAAA,EAAO,IACPnB,MAIT,E,gFCzDO,SAASoB,EAAOC,EAAyBC,EAAkBC,EAAK,GACrE,MAAMC,EAAOF,EACVG,IAAIC,GAAKL,EAAIM,UAAUC,GAAKA,EAAEC,OAASH,IACvCI,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACtB,IAAIC,EAAU,EACd,IAAK,MAAMC,KAAOV,EAAM,CACtB,MAAMW,EAAMC,KAAKC,IAAIJ,EAASC,EAAMX,GAChCY,GAAOF,GACTZ,EAAIiB,OAAOH,EAAK,EAAGd,EAAIiB,OAAOJ,EAAK,GAAG,IAExCD,GAAoB,CACtB,CAEA,OAAOZ,CACT,CAEO,SAASkB,EAASlB,EAAyBC,EAAkBC,EAAK,GACvE,MAAMC,EAAOF,EACVG,IAAIC,GAAKL,EAAIM,UAAUC,GAAKA,EAAEC,OAASH,IACvCI,KAAK,CAACC,EAAGC,IAAMA,EAAID,GACtB,IAAIE,EAAUZ,EAAImB,OAAS,EAC3B,IAAK,MAAMN,KAAOV,EAAM,CACtB,MAAMW,EAAMC,KAAKK,IAAIR,EAASC,EAAMX,GAChCY,GAAOF,GACTZ,EAAIiB,OAAOH,EAAK,EAAGd,EAAIiB,OAAOJ,EAAK,GAAG,IAExCD,GAAoB,CACtB,CAEA,OAAOZ,CACT,CAEA,MAAMqB,EAAqB,KAEpB,SAASC,EAAUC,GACxB,MAAM,cAAEC,GAAkBD,GACpB,YAAEE,IAAgBC,EAAAA,EAAAA,mBAAkBH,GACpCI,GAAQC,EAAAA,EAAAA,oBAAmBL,GAC3BM,GAAYC,EAAAA,EAAAA,SAAQH,EAAO,QACjC,MAAuB,gBAAhBF,GAAkCD,EAErC,IADAO,EAAAA,EAAAA,aAAYF,EAAWR,GAAsB,GAEnD,C,6OCnCA,MAAMjE,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7B2E,KAAM,CACJC,WAAY,SACZC,SAAU,SACVC,aAAc,cASlB,SAAAC,EAAAC,GAAA,OAkHoDA,EAAC7B,IAAA,CAlHrD,SAAA9B,EAAA4D,GAAA,OAsF2BA,EAAG9B,IAAA,CA6E9B,QAnKA,SAAAnC,GAAA,MAAAJ,GAAAC,EAAAA,EAAAA,GAAA,KAAqB,KAAAqE,EAAA,SAAAC,EAAA,SAAAC,GAAApE,GASb,QAANa,GAAoB9B,KACpBsF,EAAAC,IAAgCC,EAAAA,EAAAA,UAAA,MAAkC,IAAAC,EAAA5E,EAAA,KAAA6E,OAAAC,IAAA,8BACzBF,EAAA,GAAE5E,EAAA,GAAA4E,GAAAA,EAAA5E,EAAA,GAA3C,MAAA+E,EAAAC,IAAgCL,EAAAA,EAAAA,UAASC,GAAkB,IAAAK,EAAA,GAAAjF,EAAA,KAAAsE,EAAA,IAC3D,MAAA/B,KAAA2C,EAAAvF,MAAAwF,EAAAC,QAAAC,KAAAC,GAAmEhB,EAAK,GAAxEW,EAAAK,EAA2EtF,EAAA,GAAAsE,EAAA,GAAAtE,EAAA,GAAAiF,CAAA,MAAAA,EAAAjF,EAAA,GAC3E,MAAAuF,EAAAC,IAAsCb,EAAAA,EAAAA,UAAS,QAAO,IAAAW,EAAAtF,EAAA,KAAA6E,OAAAC,IAAA,8BACFQ,EAAA,CAAAzC,IAAA,EAAA4C,MAAA,MAGnDzF,EAAA,GAAAsF,GAAAA,EAAAtF,EAAA,GAHD,MAAA0F,EAAAC,IAAgChB,EAAAA,EAAAA,UAAoBW,GAQpCM,GAACb,EAAQ7B,OAAO,IAAA2C,EAGzBC,EAHyB9F,EAAA,KAAA6E,OAAAC,IAAA,8BACjBe,EAAAE,IACPrB,EAAYqB,EAAKC,gBAClBhG,EAAA,GAAA6F,GAAAA,EAAA7F,EAAA,GAAAA,EAAA,KAAA4F,GAJHE,GAAAzF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACKC,SAAAN,EACDjE,QAAAkE,EAERnF,SACF,mCAEQV,EAAA,GAAA4F,EAAA5F,EAAA,GAAA8F,GAAAA,EAAA9F,EAAA,GAEG,MAAAmG,GAACpB,EAAQ7B,OAAO,IAAAkD,EAGzBC,EAHyBrG,EAAA,KAAAuE,GAAAvE,EAAA,KAAAsE,GAAAtE,EAAA,KAAA+E,GACjBqB,EAAAA,KACP7B,GAASzC,EAAAA,EAAAA,IAAA,IAAWwC,GAAOS,KAC5B/E,EAAA,GAAAuE,EAAAvE,EAAA,GAAAsE,EAAAtE,EAAA,GAAA+E,EAAA/E,EAAA,IAAAoG,GAAAA,EAAApG,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAEDuB,GAAAhG,EAAAA,EAAAA,KAACiG,EAAAA,EAAmB,IAAGtG,EAAA,IAAAqG,GAAAA,EAAArG,EAAA,IACtB,MAAAuG,EAAA/B,EAAW,yBAA2B,KAAI,IAAAgC,EAAAxG,EAAA,MAAAmG,GAAAnG,EAAA,MAAAoG,GAAApG,EAAA,MAAAuG,GAP7CC,GAAAnF,EAAAA,EAAAA,MAAC4E,EAAAA,EAAM,CACKC,SAAAC,EACDxE,QAAAyE,EAER1F,SAAA,CAED2F,EACCE,KACMvG,EAAA,IAAAmG,EAAAnG,EAAA,IAAAoG,EAAApG,EAAA,IAAAuG,EAAAvG,EAAA,IAAAwG,GAAAA,EAAAxG,EAAA,IAEG,MAAAyG,GAAC1B,EAAQ7B,OAAO,IAAAwD,EAGzBC,EAHyB3G,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAAAtE,EAAA,MAAA+E,GACjB2B,EAAAA,KACPnC,GAAStB,EAAAA,EAAAA,IAAA,IAAaqB,GAAOS,KAC9B/E,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAA+E,EAAA/E,EAAA,IAAA0G,GAAAA,EAAA1G,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAED6B,GAAAtG,EAAAA,EAAAA,KAACuG,EAAAA,EAAqB,IAAG5G,EAAA,IAAA2G,GAAAA,EAAA3G,EAAA,IACxB,MAAA6G,EAAArC,EAAW,2BAA6B,KAAI,IAAAsC,EAAA9G,EAAA,MAAAyG,GAAAzG,EAAA,MAAA0G,GAAA1G,EAAA,MAAA6G,GAP/CC,GAAAzF,EAAAA,EAAAA,MAAC4E,EAAAA,EAAM,CACKC,SAAAO,EACD9E,QAAA+E,EAERhG,SAAA,CAEDiG,EACCE,KACM7G,EAAA,IAAAyG,EAAAzG,EAAA,IAAA0G,EAAA1G,EAAA,IAAA6G,EAAA7G,EAAA,IAAA8G,GAAAA,EAAA9G,EAAA,IAEG,MAAA+G,GAAChC,EAAQ7B,OAAO,IAAA8D,EAGzBC,EAHyBjH,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAAAtE,EAAA,MAAA+E,GACjBiC,EAAAA,KACPzC,GAASzC,EAAAA,EAAAA,IAAA,IAAWwC,GAAOS,EAAUT,EAAIpB,UAC1ClD,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAA+E,EAAA/E,EAAA,IAAAgH,GAAAA,EAAAhH,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAEDmC,GAAA5G,EAAAA,EAAAA,KAAC6G,EAAAA,EAAyB,IAAGlH,EAAA,IAAAiH,GAAAA,EAAAjH,EAAA,IAC5B,MAAAmH,EAAA3C,EAAW,6BAA+B,KAAI,IAAA4C,EAAApH,EAAA,MAAA+G,GAAA/G,EAAA,MAAAgH,GAAAhH,EAAA,MAAAmH,GAPjDC,GAAA/F,EAAAA,EAAAA,MAAC4E,EAAAA,EAAM,CACKC,SAAAa,EACDpF,QAAAqF,EAERtG,SAAA,CAEDuG,EACCE,KACMnH,EAAA,IAAA+G,EAAA/G,EAAA,IAAAgH,EAAAhH,EAAA,IAAAmH,EAAAnH,EAAA,IAAAoH,GAAAA,EAAApH,EAAA,IAEG,MAAAqH,GAACtC,EAAQ7B,OAAO,IAAAoE,EAGzBC,EAHyBvH,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAAAtE,EAAA,MAAA+E,GACjBuC,EAAAA,KACP/C,GAAStB,EAAAA,EAAAA,IAAA,IAAaqB,GAAOS,EAAUT,EAAIpB,UAC5ClD,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAA+E,EAAA/E,EAAA,IAAAsH,GAAAA,EAAAtH,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAEDyC,GAAAlH,EAAAA,EAAAA,KAACmH,EAAAA,EAA2B,IAAGxH,EAAA,IAAAuH,GAAAA,EAAAvH,EAAA,IAC9B,MAAAyH,GAAAjD,EAAW,gCAAkC,KAAI,IAAAkD,GAC3CC,GAcNC,GAGAC,GACDC,GACwCC,GAOrCC,GAoBEC,GAI+CC,GAC/CC,GACmBC,GAanBC,GACFC,GAIEC,GAsBFC,GAECC,GACF,OAhGgDzI,EAAA,MAAAqH,GAAArH,EAAA,MAAAsH,GAAAtH,EAAA,MAAAyH,IAPpDC,IAAArG,EAAAA,EAAAA,MAAC4E,EAAAA,EAAM,CACKC,SAAAmB,EACD1F,QAAA2F,EAER5G,SAAA,CAED6G,EACCE,MACMzH,EAAA,IAAAqH,EAAArH,EAAA,IAAAsH,EAAAtH,EAAA,IAAAyH,GAAAzH,EAAA,IAAA0H,IAAAA,GAAA1H,EAAA,IAAAA,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAAAtE,EAAA,MAAA+E,GAIG4C,GAAAe,IACRlD,EAAekD,GAAE,IACZ,MAAAC,KAAY5D,EAAU,CACzB,MAAA6D,EAAYtE,EAAIuE,KAAAC,GAAWA,EAACvG,OAAUoG,GAClCC,IACFA,EAAGjJ,MAAS+I,EAAC,CAIjBnE,EAAS,IAAID,KACdtE,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAA+E,EAAA/E,EAAA,IAAA2H,IAAAA,GAAA3H,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BACQ8C,GAAAA,KACPlD,EAAY,OACb1E,EAAA,IAAA4H,IAAAA,GAAA5H,EAAA,IAAAA,EAAA,MAAAyE,GAAAzE,EAAA,MAAA2H,IAAA3H,EAAA,MAAAuF,GAhBHsC,IAAAxH,EAAAA,EAAAA,KAAC0I,EAAAA,GAAY,CACDtE,SAAAA,EACHc,MAAAA,EACGhB,SAAAoD,GAWDxG,QAAAyG,KAGT5H,EAAA,IAAAyE,EAAAzE,EAAA,IAAA2H,GAAA3H,EAAA,IAAAuF,EAAAvF,EAAA,IAAA6H,IAAAA,GAAA7H,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BACUgD,GAAA,CAAAkB,OAAA,IAAAC,MAAsB,QAAQjJ,EAAA,IAAA8H,IAAAA,GAAA9H,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAKXiD,GAAAnH,IACzBoE,EAAY,IAAIpE,EAAGsI,OACpBlJ,EAAA,IAAA+H,IAAAA,GAAA/H,EAAA,IAAAA,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAKC0D,GAAA,CAAAvC,MACS,QAAO0D,WACF,QAAOC,WAAAnB,IACN,YAAAoB,EAAAV,GAAAW,GAAArB,EAAa,OACxB5H,EAAAA,EAAAA,KAACkJ,EAAAA,GAAW,CACH5J,MAAA0J,GAAS,OACN9E,SAMTiF,IALC,MAAAC,EAAYnF,EAAIuE,KAAAa,GAAWZ,EAACvG,OAAUoG,GAClCC,IACFA,EAAGjJ,MAAS+I,GAEdnE,EAAS,IAAID,SAIpBtE,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAAgI,IAAAA,GAAAhI,EAAA,IAAAA,EAAA,MAAAsE,GAIQ2D,IAAA0B,EAAAA,EAAAA,kBAAiBrF,EAAInC,IAAAgC,IAAkBnE,EAAA,IAAAsE,EAAAtE,EAAA,IAAAiI,IAAAA,GAAAjI,EAAA,IAAAA,EAAA,MAAAiI,IAHhDC,GAAA,CAAAzC,MACS,OAAM0D,WACD,OAAMF,MACXhB,IACRjI,EAAA,IAAAiI,GAAAjI,EAAA,IAAAkI,IAAAA,GAAAlI,EAAA,IAAAA,EAAA,MAAAiF,GACEkD,GAAAyB,OAAAC,KAAY5E,GAAKjF,EAAA,IAAAiF,EAAAjF,EAAA,IAAAmI,IAAAA,GAAAnI,EAAA,IAAAA,EAAA,MAAAiB,GAAAjB,EAAA,MAAAsE,GAAAtE,EAAA,MAAAmI,IAAjBC,GAAAD,GAAiBhG,IAAA2H,IAAA,CAAArE,MAGPqE,EAAGV,WAAAf,IACG,MAAAgB,MAAAU,GAAA1B,EAAS,OACpBhI,EAAAA,EAAAA,KAAA,OAAgBS,UAAAG,EAAO8C,KAAKrD,UAC1BL,EAAAA,EAAAA,KAAC2J,EAAAA,cAAa,CAAOC,MAAAC,EAAAA,EAAAA,QAAOb,QACxBJ,OAEDU,EAAAA,EAAAA,kBACLrF,EAAInC,IAAAgI,GAAU,GAAG/F,EAAE0F,UAG1B9J,EAAA,IAAAiB,EAAAjB,EAAA,IAAAsE,EAAAtE,EAAA,IAAAmI,GAAAnI,EAAA,IAAAoI,IAAAA,GAAApI,EAAA,IAAAA,EAAA,MAAAgI,IAAAhI,EAAA,MAAAkI,IAAAlI,EAAA,MAAAoI,IAnCMC,GAAA,CACPL,GAgBAE,MAKGE,IAcJpI,EAAA,IAAAgI,GAAAhI,EAAA,IAAAkI,GAAAlI,EAAA,IAAAoI,GAAApI,EAAA,IAAAqI,IAAAA,GAAArI,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BAECwD,GAAA,GAECtI,EAAA,IAAAsI,IAAAA,GAAAtI,EAAA,IAAAA,EAAA,MAAA0F,EAAAD,OAAAzF,EAAA,MAAA0F,EAAA7C,KAAA7C,EAAA,MAAAuE,GAAAvE,EAAA,MAAAsE,GAEgBiE,GAAA6B,IACjB,MAAA5H,EAAa4H,EAAK,GAKlBvH,GAAa6C,EAAQ7C,IAAA,GAAY,EACjC4C,EAAcjD,EAAIiD,OAAWC,EAAQD,MACrCE,EAAY,CAAD9C,MAAA4C,UACXlB,EACEkB,EACI,IAAInB,GAAI9B,KAAA,CAAAC,EAAAC,KACN,MAAA2H,GAAWH,EAAAA,EAAAA,QAAOzH,EAAEgD,IACpB6E,GAAWJ,EAAAA,EAAAA,QAAOxH,EAAE+C,IAAuB,OAC5B,IAAR5C,EACHwH,EAAEE,cAAeD,GACjBA,EAAEC,cAAeF,KAEvB/F,IAEPtE,EAAA,IAAA0F,EAAAD,MAAAzF,EAAA,IAAA0F,EAAA7C,IAAA7C,EAAA,IAAAuE,EAAAvE,EAAA,IAAAsE,EAAAtE,EAAA,IAAAuI,IAAAA,GAAAvI,EAAA,IAAAA,EAAA,MAAAsE,GAAAtE,EAAA,MAAAqI,IAAArI,EAAA,MAAAuI,IAzELC,IAAAnI,EAAAA,EAAAA,KAAA,OAAYmB,MAAAsG,GAA8BpH,UACxCL,EAAAA,EAAAA,KAACmK,EAAAA,EAAQ,CACPC,4BAA0B,EAChBC,SAAejK,EACzBkK,mBAAiB,EACUC,0BAAA7C,GAGrBzD,KAAAA,EACKuG,UAAE,GACOC,mBAAE,GACbC,QAAA1C,GAsCP2C,UAAA1C,GAIiB2C,kBAAA1C,OAsBjBvI,EAAA,IAAAsE,EAAAtE,EAAA,IAAAqI,GAAArI,EAAA,IAAAuI,GAAAvI,EAAA,IAAAwI,IAAAA,GAAAxI,EAAA,IAAAA,EAAA,MAAAwG,GAAAxG,EAAA,MAAA8G,GAAA9G,EAAA,MAAAoH,GAAApH,EAAA,MAAA0H,IAAA1H,EAAA,MAAA6H,IAAA7H,EAAA,MAAAwI,IAAAxI,EAAA,MAAA8F,GA1IR2C,IAAApH,EAAAA,EAAAA,MAAA,OAAAX,SAAA,CACEoF,EAQAU,EASAM,EASAM,EASAM,GASAG,GAkBAW,MA4EIxI,EAAA,IAAAwG,EAAAxG,EAAA,IAAA8G,EAAA9G,EAAA,IAAAoH,EAAApH,EAAA,IAAA0H,GAAA1H,EAAA,IAAA6H,GAAA7H,EAAA,IAAAwI,GAAAxI,EAAA,IAAA8F,EAAA9F,EAAA,IAAAyI,IAAAA,GAAAzI,EAAA,IA3INyI,EA2IM,ECnLJtJ,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7B8L,QAAS,CACPC,SAAU,KAEZC,MAAO,CACLA,MAAO,WAIX,SAAAC,IAAA,MAAArL,GAAAC,EAAAA,EAAAA,GAAA,OAAAG,EAgBO,OAhBPJ,EAAA,KAAA6E,OAAAC,IAAA,8BAEI1E,GAAAiB,EAAAA,EAAAA,MAAAiK,EAAAA,SAAA,CAAA5K,SAAA,CAAE,gBAEAW,EAAAA,EAAAA,MAAA,MAAAX,SAAA,EACEL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,0DACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,gEACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,gEACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,gEACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,6CACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,oEACJL,EAAAA,EAAAA,KAAA,MAAAK,SAAI,0GAKLV,EAAA,GAAAI,GAAAA,EAAAJ,EAAA,GAdHI,CAcG,CAIQ,SAAAmL,EAAAnL,GAAA,MAAAJ,GAAAC,EAAAA,EAAAA,GAAA,KAAwB,MAAAqD,EAAA,YAAAkI,GAAApL,GAW/B,QAANa,GAAoB9B,KACd,QAANsM,GAAoBnI,EAAK,IAAAsB,EACiDU,EADjDtF,EAAA,KAAAyL,GACoC7G,EAAA6G,GAAW,GAAEzL,EAAA,GAAAyL,EAAAzL,EAAA,GAAA4E,GAAAA,EAAA5E,EAAA,GAAAA,EAAA,KAAA4E,GAA7BU,EAAAoG,gBAAgB9G,GAAc5E,EAAA,GAAA4E,EAAA5E,EAAA,GAAAsF,GAAAA,EAAAtF,EAAA,GAA3E,MAAA2L,EAAAC,IAAoCjH,EAAAA,EAAAA,UAASW,IAC7Cd,EAAAqH,IAAgCC,EAAAA,EAAAA,iBAAgB,wBAAwB,GAAM,IAAAlG,EAAA5F,EAAA,KAAA6L,GAAA7L,EAAA,KAAAwE,GAY7DoB,EAAAA,KACPiG,GAAarH,IACdxE,EAAA,GAAA6L,EAAA7L,EAAA,GAAAwE,EAAAxE,EAAA,GAAA4F,GAAAA,EAAA5F,EAAA,GAEA,MAAA6F,EAAArB,EAAW,YAAc,YAAW,IAAAsB,EAC9BK,EACHC,EAC4BC,EAKhCE,EACYC,EAYLC,EAUAC,EAWAC,EACKE,EACA,OA5CyB7G,EAAA,KAAAiB,EAAAmK,OAAApL,EAAA,KAAA4F,GAAA5F,EAAA,KAAA6F,GAPvCC,GAAAzF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACG8F,QAAA,YACGjL,UAAAG,EAAOmK,MACTzJ,QAAAiE,EAERlF,SAEAmF,IACM7F,EAAA,GAAAiB,EAAAmK,MAAApL,EAAA,GAAA4F,EAAA5F,EAAA,GAAA6F,EAAA7F,EAAA,IAAA8F,GAAAA,EAAA9F,EAAA,IAAAA,EAAA,MAAA6E,OAAAC,IAAA,8BACTqB,GAAA9F,EAAAA,EAAAA,KAAA,SAAML,EAAA,IAAAmG,GAAAA,EAAAnG,EAAA,IAAAA,EAAA,MAAAwE,GACL4B,EAAA5B,GAAWnE,EAAAA,EAAAA,KAACgL,EAAW,IAAM,KAAIrL,EAAA,IAAAwE,EAAAxE,EAAA,IAAAoG,GAAAA,EAAApG,EAAA,IAAAA,EAAA,MAAA2L,GAAA3L,EAAA,MAAAwE,GAClC6B,GAAAhG,EAAAA,EAAAA,KAAC2L,EAAW,CACJL,KAAAA,EACIC,SAAAA,EACApH,SAAAA,IACVxE,EAAA,IAAA2L,EAAA3L,EAAA,IAAAwE,EAAAxE,EAAA,IAAAqG,GAAAA,EAAArG,EAAA,IAAAA,EAAA,MAAAiB,EAAAiK,SAAAlL,EAAA,MAAA8F,GAAA9F,EAAA,MAAAoG,GAAApG,EAAA,MAAAqG,GAhBJE,GAAAlF,EAAAA,EAAAA,MAAC4K,EAAAA,EAAa,CAAYnL,UAAAG,EAAOiK,QAAQxK,SAAA,CACvCoF,EASAK,EACCC,EACDC,KAKcrG,EAAA,IAAAiB,EAAAiK,QAAAlL,EAAA,IAAA8F,EAAA9F,EAAA,IAAAoG,EAAApG,EAAA,IAAAqG,EAAArG,EAAA,IAAAuG,GAAAA,EAAAvG,EAAA,IAAAA,EAAA,MAAAsD,GAEdkD,GAAAnG,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACG8F,QAAA,YACHG,KAAA,SACCvM,MAAA,UACGgC,QAGRA,KAFC2B,EAAK6I,cACLP,EAActI,EAAKmI,SAAA,KACpB/K,SACF,0BAEQV,EAAA,IAAAsD,EAAAtD,EAAA,IAAAwG,GAAAA,EAAAxG,EAAA,IAAAA,EAAA,MAAAwL,GAAAxL,EAAA,MAAAsD,EAAAmI,SACThF,GAAApG,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACG8F,QAAA,YACFpM,MAAA,YACGgC,QAGRA,KAFC6J,IACAI,EAAc,IAAKtI,EAAKmI,SAAA,MACzB/K,SACF,WAEQV,EAAA,IAAAwL,EAAAxL,EAAA,IAAAsD,EAAAmI,QAAAzL,EAAA,IAAAyG,GAAAA,EAAAzG,EAAA,IAAAA,EAAA,MAAA2L,GAAA3L,EAAA,MAAAwL,GAAAxL,EAAA,MAAAsD,GACToD,GAAArG,EAAAA,EAAAA,KAAC4F,EAAAA,EAAM,CACG8F,QAAA,YACFpM,MAAA,UACDuM,KAAA,SACIvK,QAGRA,KAFC2B,EAAK8I,UAAWT,GAChBH,KACD9K,SACF,WAEQV,EAAA,IAAA2L,EAAA3L,EAAA,IAAAwL,EAAAxL,EAAA,IAAAsD,EAAAtD,EAAA,IAAA0G,GAAAA,EAAA1G,EAAA,IAAAA,EAAA,MAAAwG,GAAAxG,EAAA,MAAAyG,GAAAzG,EAAA,MAAA0G,GAhCXC,GAAAtF,EAAAA,EAAAA,MAACgL,EAAAA,EAAa,CAAA3L,SAAA,CACZ8F,EAWAC,EAUAC,KAWc1G,EAAA,IAAAwG,EAAAxG,EAAA,IAAAyG,EAAAzG,EAAA,IAAA0G,EAAA1G,EAAA,IAAA2G,GAAAA,EAAA3G,EAAA,IAAAA,EAAA,MAAAwL,GAAAxL,EAAA,MAAA2G,GAAA3G,EAAA,MAAAuG,GAzDlBM,GAAAxF,EAAAA,EAAAA,MAACiL,EAAAA,EAAe,CACdC,MAAI,EACKf,QAAAA,EACAgB,SAAA,KACHtL,MAAA,wCAAuCR,SAAA,CAE7C6F,EAkBAI,KAkCgB3G,EAAA,IAAAwL,EAAAxL,EAAA,IAAA2G,EAAA3G,EAAA,IAAAuG,EAAAvG,EAAA,IAAA6G,GAAAA,EAAA7G,EAAA,IA1DlB6G,CA0DkB,C","sources":["../../../packages/core/ui/DraggableDialog.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SourcesGrid.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SetColorDialog.tsx"],"sourcesContent":["import { useRef } from 'react'\n\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport Draggable from 'react-draggable'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DialogProps, PaperProps } from '@mui/material'\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction PaperComponent(props: PaperProps) {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <Draggable\n      nodeRef={ref}\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n      // @ts-expect-error\n      onStart={arg => `${arg.target?.className}`.includes('MuiDialogTitle')}\n    >\n      <Paper ref={ref} {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog {...props} PaperComponent={PaperComponent}>\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }}>\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","import { getConf } from '@jbrowse/core/configuration'\nimport {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport type { GridRowId } from '@mui/x-data-grid'\n\nexport function moveUp(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n","import { useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport { Button } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { moveDown, moveUp } from './util'\n\nimport type { Source } from '../../util'\nimport type { GridColDef, GridRowId } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\n\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const { classes } = useStyles()\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [selected, setSelected] = useState([] as GridRowId[])\n  const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0]!\n  const [widgetColor, setWidgetColor] = useState('blue')\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div>\n      <Button\n        disabled={!selected.length}\n        onClick={event => {\n          setAnchorEl(event.currentTarget)\n        }}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        disabled={!selected.length}\n        onClick={() => {\n          onChange(moveUp([...rows], selected))\n        }}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        disabled={!selected.length}\n        onClick={() => {\n          onChange(moveDown([...rows], selected))\n        }}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        disabled={!selected.length}\n        onClick={() => {\n          onChange(moveUp([...rows], selected, rows.length))\n        }}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        disabled={!selected.length}\n        onClick={() => {\n          onChange(moveDown([...rows], selected, rows.length))\n        }}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          for (const id of selected) {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          }\n\n          onChange([...rows])\n        }}\n        onClose={() => {\n          setAnchorEl(null)\n        }}\n      />\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          disableRowSelectionOnClick\n          getRowId={row => row.name}\n          checkboxSelection\n          onRowSelectionModelChange={arg => {\n            setSelected([...arg.ids])\n          }}\n          rows={rows}\n          rowHeight={25}\n          columnHeaderHeight={33}\n          columns={[\n            {\n              field: 'color',\n              headerName: 'Color',\n              renderCell: ({ value, id }) => (\n                <ColorPicker\n                  color={value || 'blue'}\n                  onChange={c => {\n                    const elt = rows.find(f => f.name === id)\n                    if (elt) {\n                      elt.color = c\n                    }\n                    onChange([...rows])\n                  }}\n                />\n              ),\n            },\n            {\n              field: 'name',\n              headerName: 'Name',\n              width: measureGridWidth(rows.map(r => r.name)),\n            },\n            ...Object.keys(rest).map(\n              val =>\n                ({\n                  field: val,\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value)} />\n                    </div>\n                  ),\n                  width: measureGridWidth(\n                    rows.map(r => `${r[val as keyof Source]}`),\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            ),\n          ]}\n          sortModel={\n            [\n              /* we control the sort as a controlled component using onSortModelChange */\n            ]\n          }\n          onSortModelChange={args => {\n            const sort = args[0]\n            // this idx%2 flip flops the sorting order, we could inspect args\n            // for sort direction asc or desc but this is just a simplified\n            // thing since we are controlling sort instead of the default data\n            // grid sort anyways\n            const idx = (currSort.idx + 1) % 2\n            const field = sort!.field || currSort.field\n            setCurrSort({ idx, field })\n            onChange(\n              field\n                ? [...rows].sort((a, b) => {\n                    const aa = getStr(a[field as keyof Source])\n                    const bb = getStr(b[field as keyof Source])\n                    return idx === 1\n                      ? aa.localeCompare(bb)\n                      : bb.localeCompare(aa)\n                  })\n                : rows,\n            )\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SourcesGrid\n","import { useState } from 'react'\n\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog'\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport SourcesGrid from './SourcesGrid'\n\nimport type { Source } from '../../util'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  float: {\n    float: 'right',\n  },\n})\n\nfunction HelpfulTips() {\n  return (\n    <>\n      Helpful tips\n      <ul>\n        <li>You can select rows in the table with the checkboxes</li>\n        <li>Multi-select is enabled with shift-click and control-click</li>\n        <li>The \"Move selected items up/down\" can re-arrange subtracks</li>\n        <li>Sorting the data grid itself can also re-arrange subtracks</li>\n        <li>Changes are applied when you hit Submit</li>\n        <li>You can click and drag the dialog box to move it on the screen</li>\n        <li>\n          Columns in the table can be hidden using a vertical '...' menu on the\n          right side of each column\n        </li>\n      </ul>\n    </>\n  )\n}\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    sources?: Source[]\n    setLayout: (s: Source[]) => void\n    clearLayout: () => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [currLayout, setCurrLayout] = useState(structuredClone(sources || []))\n  const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', false)\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title=\"Multi-wiggle color/arrangement editor\"\n    >\n      <DialogContent className={classes.content}>\n        <Button\n          variant=\"contained\"\n          className={classes.float}\n          onClick={() => {\n            setShowTips(!showTips)\n          }}\n        >\n          {showTips ? 'Hide tips' : 'Show tips'}\n        </Button>\n        <br />\n        {showTips ? <HelpfulTips /> : null}\n        <SourcesGrid\n          rows={currLayout}\n          onChange={setCurrLayout}\n          showTips={showTips}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"inherit\"\n          onClick={() => {\n            model.clearLayout()\n            setCurrLayout(model.sources || [])\n          }}\n        >\n          Clear custom settings\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            setCurrLayout([...(model.sources || [])])\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            model.setLayout(currLayout)\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </DraggableDialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","$","_c","ref","useRef","t0","_jsx","Draggable","cancel","onStart","_temp","children","Paper","arg","target","className","includes","observer","classes","title","onClose","Dialog","_jsxs","ScopedCssBaseline","DialogTitle","style","cursor","IconButton","onClick","CloseIcon","Divider","moveUp","arr","sel","by","idxs","map","l","findIndex","v","name","sort","a","b","lastIdx","old","idx","Math","max","splice","moveDown","length","min","trackLabelFontSize","getOffset","model","prefersOffset","trackLabels","getContainingView","track","getContainingTrack","trackName","getConf","measureText","cell","whiteSpace","overflow","textOverflow","_temp2","r","row","rows","onChange","showTips","anchorEl","setAnchorEl","useState","t1","Symbol","for","selected","setSelected","rest","_name","_color","baseUri","_baseUri","t2","widgetColor","setWidgetColor","field","currSort","setCurrSort","t3","t4","t5","event","currentTarget","Button","disabled","t6","t7","t8","KeyboardArrowUpIcon","t9","t10","t11","t12","t13","KeyboardArrowDownIcon","t14","t15","t16","t17","t18","KeyboardDoubleArrowUpIcon","t19","t20","t21","t22","t23","KeyboardDoubleArrowDownIcon","t24","t25","t26","t27","t28","t29","t30","t31","t32","t33","t34","t35","t36","t37","t38","t39","t40","c","id","elt","find","f","ColorPopover","height","width","ids","headerName","renderCell","value","id_0","ColorPicker","c_0","elt_0","f_0","measureGridWidth","Object","keys","val","value_0","SanitizedHTML","html","getStr","r_0","args","aa","bb","localeCompare","DataGrid","disableRowSelectionOnClick","getRowId","checkboxSelection","onRowSelectionModelChange","rowHeight","columnHeaderHeight","columns","sortModel","onSortModelChange","content","minWidth","float","HelpfulTips","_Fragment","SetColorDialog","handleClose","sources","structuredClone","currLayout","setCurrLayout","setShowTips","useLocalStorage","variant","SourcesGrid","DialogContent","type","clearLayout","setLayout","DialogActions","DraggableDialog","open","maxWidth"],"sourceRoot":""}