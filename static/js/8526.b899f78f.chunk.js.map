{"version":3,"file":"static/js/8526.b899f78f.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/RectBg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/LegendItem.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ColorLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/FullHeightScaleBar.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ScoreLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/IndividualScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/YScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\nimport YScaleBars from './YScaleBars'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst MultiLinearWiggleDisplayComponent = observer(function (props: {\n  model: WiggleDisplayModel\n}) {\n  const { model } = props\n\n  return (\n    <div>\n      <BaseLinearDisplayComponent {...props} />\n      <YScaleBars model={model} />\n    </div>\n  )\n})\n\nexport default MultiLinearWiggleDisplayComponent\n","import { getFillProps } from '@jbrowse/core/util'\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} {...getFillProps(color)} />\n}\n\nexport default RectBg\n","import RectBg from './RectBg'\n\nimport type { Source } from '../../util'\nimport type { WiggleDisplayModel } from '../model'\n\nconst LegendItem = function ({\n  source,\n  idx,\n  rowHeight,\n  labelWidth,\n  model,\n  exportSVG,\n}: {\n  source: Source\n  idx: number\n  rowHeight: number\n  labelWidth: number\n  model: WiggleDisplayModel\n  exportSVG?: boolean\n}) {\n  const boxHeight = Math.min(20, rowHeight)\n  const {\n    needsCustomLegend,\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n  return (\n    <>\n      {needsFullHeightScalebar ? null : (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={legendWidth}\n          height={boxHeight}\n        />\n      )}\n      {source.color ? (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={colorBoxWidth}\n          height={needsCustomLegend ? rowHeight : boxHeight}\n          color={source.color}\n        />\n      ) : null}\n      {canDisplayLabel ? (\n        <text\n          y={idx * rowHeight + 13}\n          x={extraOffset + colorBoxWidth + 2}\n          fontSize={svgFontSize}\n        >\n          {source.name}\n        </text>\n      ) : null}\n    </>\n  )\n}\n\nexport default LegendItem\n","import { observer } from 'mobx-react'\n\nimport LegendItem from './LegendItem'\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  exportSVG?: boolean\n}) {\n  const {\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n    labelWidth,\n  } = model\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => (\n        <LegendItem\n          key={`${source.name}-${idx}`}\n          source={source}\n          idx={idx}\n          model={model}\n          rowHeight={rowHeight}\n          exportSVG={exportSVG}\n          labelWidth={labelWidth}\n        />\n      ))}\n    </>\n  ) : null\n})\n\nexport default ColorLegend\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport { getOffset } from './util'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst FullHeightScaleBar = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { labelWidth } = model\n  const { width: viewWidth } = getContainingView(model) as LinearGenomeViewModel\n  return (\n    <>\n      <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n        <YScaleBar model={model} orientation={orientation} />\n      </g>\n      <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n        <ColorLegend exportSVG={exportSVG} model={model} rowHeight={12} />\n      </g>\n    </>\n  )\n})\n\nexport default FullHeightScaleBar\n","import { getContainingView, measureText } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend = `[${ticks?.values[0]}-${ticks?.values[1]}]${scaleType === 'log' ? ' (log scale)' : ''}`\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nexport default ScoreLegend\n","import { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport ScoreLegend from './ScoreLegend'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst IndividualScaleBars = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const {\n    sources,\n    rowHeight,\n    rowHeightTooSmallForScalebar,\n    needsCustomLegend,\n    ticks,\n  } = model\n\n  return sources?.length ? (\n    <>\n      <ColorLegend\n        exportSVG={exportSVG}\n        model={model}\n        rowHeight={model.rowHeight}\n      />\n\n      {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n        <ScoreLegend model={model} />\n      ) : (\n        sources.map((_source, idx) => (\n          <g\n            transform={`translate(0 ${rowHeight * idx})`}\n            key={`${JSON.stringify(ticks)}-${idx}`}\n          >\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n        ))\n      )}\n    </>\n  ) : null\n})\n\nexport default IndividualScaleBars\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport FullHeightScaleBar from './FullHeightScaleBar'\nimport IndividualScaleBars from './IndividualScaleBars'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  const { height } = model\n  return exportSVG ? (\n    children\n  ) : (\n    <svg\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none',\n        height,\n        width: getContainingView(model).width,\n      }}\n    >\n      {children}\n    </svg>\n  )\n})\n\nexport const YScaleBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const { stats, needsFullHeightScalebar, sources } = model\n  return stats && sources ? (\n    <Wrapper {...props}>\n      {needsFullHeightScalebar ? (\n        <FullHeightScaleBar\n          model={model}\n          orientation={orientation}\n          exportSVG={exportSVG}\n        />\n      ) : (\n        <IndividualScaleBars\n          model={model}\n          orientation={orientation}\n          exportSVG={exportSVG}\n        />\n      )}\n    </Wrapper>\n  ) : null\n})\n\nexport default YScaleBars\n","import { getConf } from '@jbrowse/core/configuration'\nimport {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["observer","props","model","_jsxs","children","_jsx","BaseLinearDisplayComponent","YScaleBars","color","getFillProps","source","idx","rowHeight","labelWidth","exportSVG","boxHeight","Math","min","needsCustomLegend","graphType","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","svgFontSize","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","_Fragment","RectBg","y","x","width","height","fontSize","name","sources","length","map","LegendItem","orientation","viewWidth","getContainingView","transform","getOffset","YScaleBar","ColorLegend","ticks","scaleType","legend","values","len","measureText","xpos","ScoreLegend","_source","JSON","stringify","Wrapper","style","position","top","left","pointerEvents","stats","FullHeightScaleBar","IndividualScaleBars","moveUp","arr","sel","by","idxs","l","findIndex","v","sort","a","b","lastIdx","old","max","splice","moveDown","trackLabelFontSize","prefersOffset","trackLabels","track","getContainingTrack","trackName","getConf"],"sourceRoot":""}