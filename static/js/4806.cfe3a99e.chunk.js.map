{"version":3,"file":"static/js/4806.cfe3a99e.chunk.js","mappings":"uSA2BA,MAiNA,GAjNyBA,EAAAA,EAAAA,WAAS,SAAUC,GAO1C,MAAM,MAAEC,EAAK,YAAEC,GAAgBF,GACxBG,EAAKC,IAAiBC,EAAAA,EAAAA,UAAS,KAC/BC,EAAQC,IAAoBF,EAAAA,EAAAA,aAC5BG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAOC,IAAYN,EAAAA,EAAAA,YAEpBO,EAAW,wBAAwBC,KAAKV,GACxCW,EAA2B,IAAfX,EAAIY,SAAiBH,EACjCI,GAAeC,EAAAA,EAAAA,aAAYd,EAAK,MAC/Be,EAAMC,IAAWd,EAAAA,EAAAA,UAAS,IAyBjC,OAvBAe,EAAAA,EAAAA,YAAU,KAEP,WACC,IACE,IAAKN,EAAW,CACdH,OAASU,GACTZ,GAAW,GACX,MAAMa,QAAaC,EAAAA,EAAAA,GAAc,CAC/BC,KAAMvB,EACNE,IAAKa,EACLS,QAASC,EAAAA,EAAAA,mBAAkBzB,GACxB0B,eAELpB,EAAiBe,EACnB,CACF,CAAE,MAAOM,GACPC,QAAQnB,MAAMkB,GACdjB,EAASiB,EACX,CAAE,QACAnB,GAAW,EACb,CACD,EAnBA,EAmBG,GACH,CAACR,EAAOa,EAAWE,IAEpBc,EAAAA,cAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAAS/B,EAAagC,MAAM,YACvCJ,EAAAA,cAACK,EAAAA,EAAa,KACZL,EAAAA,cAACM,EAAAA,EAAU,KAAC,8IAIZN,EAAAA,cAACO,EAAAA,EAAS,CACRC,WAAS,EACTC,MAAOrB,EACPsB,SAAUC,IACRtB,EAAQsB,EAAMC,OAAOH,MAAM,EAE7BI,MAAM,cACNC,QAAM,GAENd,EAAAA,cAACe,EAAAA,EAAQ,CAACN,MAAM,UAAS,UACzBT,EAAAA,cAACe,EAAAA,EAAQ,CAACN,MAAM,OAAM,QAEd,QAATrB,EACCY,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACM,EAAAA,EAAU,CAACU,MAAM,iBAAgB,uDAIlChB,EAAAA,cAACO,EAAAA,EAAS,CACRE,MAAOpC,EACPqC,SAAUC,IACRrC,EAAcqC,EAAMC,OAAOH,MAAM,EAEnCQ,YAAY,iBACZrC,MAAOI,EACPkC,WAAYlC,EAAY,kBAAoB,GAC5CmC,aAAa,MACb,cAAY,iBACZC,UAAW,CACTC,UAAW,CACTC,UAAW,EACX,cAAe,2BAIpB1C,EACCoB,EAAAA,cAACuB,EAAAA,aAAY,CAAC3C,MAAOA,IACnBF,EACFsB,EAAAA,cAACwB,EAAAA,gBAAe,CAACpB,MAAM,wBACrB5B,EACFwB,EAAAA,cAAA,WACEA,EAAAA,cAAA,WAAK,gBAAc3B,EAAI,YACvB2B,EAAAA,cAAA,WAAMxB,EAAOiD,KAAK,QAElB,MAEJ,MAENzB,EAAAA,cAAC0B,EAAAA,EAAa,KACZ1B,EAAAA,cAAC2B,EAAAA,EAAM,CACLC,QAAQ,YACRZ,MAAM,UACN5B,KAAK,SACLyC,UAAWrD,EACXsD,WAAS,EACTC,QAASA,KACP,MAAMC,GAAQC,EAAAA,EAAAA,oBAAmB9D,GAC3B+D,EAAYC,iBAAgBC,EAAAA,EAAAA,aAAYJ,EAAMK,gBAC9CC,GAAUC,EAAAA,EAAAA,YAAWpE,GACrBqE,GAAO5C,EAAAA,EAAAA,mBAAkBzB,GAC/B,GAAa,QAATiB,GACF,GAAIZ,EAAQ,CACV,MAAMiE,EAAM,IAAIjE,OAAQe,GACxB,IAAK,MAAMmD,KAAYD,EAAK,CAC1B,MAAME,EAAK,GAAGT,EAAUU,WAAWvE,KAAOqE,MAAaG,KAAKC,qBAE5DR,EAAQS,aAAa,IAChBb,EACHU,QAASD,EACTK,KAAM,GAAGd,EAAUc,WACnBC,SAAU,CACR,CACEC,UAAW,GAAGP,4BACdvD,KAAM,0BACN+D,cAAe,CACbD,UAAW,GAAGP,gDACdvD,KAAM,sBACNgE,SAAU,IACLC,EAAAA,GACHC,UAAW,CACTjF,MACAoC,MAAOiC,SAOnBF,EAAKe,UAAUZ,EACjB,CACF,OACK,GAAa,WAATvD,EAAmB,CAC5B,MAAMuD,EAAK,GAAGT,EAAUU,WAAWvE,UAAYwE,KAAKC,qBAC9CU,EAAK,GAAGtB,EAAUU,WAAWvE,UAAYwE,KAAKC,qBAGpDR,EAAQS,aAAa,IAChBb,EACHU,QAASD,EACTK,KAAM,GAAGd,EAAUc,WACnBC,SAAU,CACR,CACEC,UAAW,GAAGP,4BACdvD,KAAM,0BACN+D,cAAe,CACbD,UAAW,GAAGP,gDACdvD,KAAM,sBACNgE,SAAUK,EAAAA,KAGd,CACEP,UAAW,GAAGP,6BACdvD,KAAM,2BACNgE,SAAUK,EAAAA,OAKhBnB,EAAQS,aAAa,IAChBb,EACHU,QAASY,EACTR,KAAM,GAAGd,EAAUc,WACnBC,SAAU,CACR,CACEC,UAAW,GAAGM,4BACdpE,KAAM,0BACN+D,cAAe,CACbD,UAAW,GAAGM,gDACdpE,KAAM,sBACNgE,SAAUM,EAAAA,KAGd,CACER,UAAW,GAAGM,6BACdpE,KAAM,2BACNgE,SAAUM,EAAAA,OAIhBlB,EAAKe,UAAUZ,GACfH,EAAKe,UAAUC,EACjB,CACApF,GAAa,GAEhB,UAGD4B,EAAAA,cAAC2B,EAAAA,EAAM,CACLC,QAAQ,YACRZ,MAAM,YACNe,QAASA,KACP3D,GAAa,GAEhB,WAMT,G","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/GroupByDialog.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\n\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  getContainingTrack,\n  getContainingView,\n  getSession,\n  useDebounce,\n} from '@jbrowse/core/util'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\nimport { getUniqueTags } from '../../shared/getUniqueTags'\nimport { defaultFilterFlags, negFlags, posFlags } from '../../shared/util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\nconst GroupByTagDialog = observer(function (props: {\n  model: {\n    adapterConfig: AnyConfigurationModel\n    configuration: AnyConfigurationModel\n  } & IAnyStateTreeNode\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const [tag, setGroupByTag] = useState('')\n  const [tagSet, setGroupByTagSet] = useState<string[]>()\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n  const isInvalid = tag.length === 2 && !validTag\n  const debouncedTag = useDebounce(tag, 1000)\n  const [type, setType] = useState('')\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        if (!isInvalid) {\n          setError(undefined)\n          setLoading(true)\n          const vals = await getUniqueTags({\n            self: model,\n            tag: debouncedTag,\n            blocks: (getContainingView(model) as LinearGenomeViewModel)\n              .staticBlocks,\n          })\n          setGroupByTagSet(vals)\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    })()\n  }, [model, isInvalid, debouncedTag])\n  return (\n    <Dialog open onClose={handleClose} title=\"Group by\">\n      <DialogContent>\n        <Typography>\n          NOTE: this will create new session tracks with the \"filter by\" set to\n          the values chosen here rather than affecting the current track state\n        </Typography>\n        <TextField\n          fullWidth\n          value={type}\n          onChange={event => {\n            setType(event.target.value)\n          }}\n          label=\"Group by...\"\n          select\n        >\n          <MenuItem value=\"strand\">Strand</MenuItem>\n          <MenuItem value=\"tag\">Tag</MenuItem>\n        </TextField>\n        {type === 'tag' ? (\n          <>\n            <Typography color=\"textSecondary\">\n              Examples: HP for haplotype, RG for read group, etc.\n            </Typography>\n\n            <TextField\n              value={tag}\n              onChange={event => {\n                setGroupByTag(event.target.value)\n              }}\n              placeholder=\"Enter tag name\"\n              error={isInvalid}\n              helperText={isInvalid ? 'Not a valid tag' : ''}\n              autoComplete=\"off\"\n              data-testid=\"group-tag-name\"\n              slotProps={{\n                htmlInput: {\n                  maxLength: 2,\n                  'data-testid': 'group-tag-name-input',\n                },\n              }}\n            />\n            {error ? (\n              <ErrorMessage error={error} />\n            ) : loading ? (\n              <LoadingEllipses title=\"Loading unique tags\" />\n            ) : tagSet ? (\n              <div>\n                <div>Found unique {tag} values:</div>\n                <div>{tagSet.join(', ')}</div>\n              </div>\n            ) : null}\n          </>\n        ) : null}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          disabled={!tagSet}\n          autoFocus\n          onClick={() => {\n            const track = getContainingTrack(model)\n            const trackConf = structuredClone(getSnapshot(track.configuration))\n            const session = getSession(model)\n            const view = getContainingView(model) as LinearGenomeViewModel\n            if (type === 'tag') {\n              if (tagSet) {\n                const ret = [...tagSet, undefined] as (string | undefined)[]\n                for (const tagValue of ret) {\n                  const t1 = `${trackConf.trackId}-${tag}:${tagValue}-${+Date.now()}-sessionTrack`\n                  // @ts-expect-error\n                  session.addTrackConf({\n                    ...trackConf,\n                    trackId: t1,\n                    name: `${trackConf.name} (-)`,\n                    displays: [\n                      {\n                        displayId: `${t1}-LinearAlignmentsDisplay`,\n                        type: 'LinearAlignmentsDisplay',\n                        pileupDisplay: {\n                          displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                          type: 'LinearPileupDisplay',\n                          filterBy: {\n                            ...defaultFilterFlags,\n                            tagFilter: {\n                              tag,\n                              value: tagValue,\n                            },\n                          },\n                        },\n                      },\n                    ],\n                  })\n                  view.showTrack(t1)\n                }\n              }\n            } else if (type === 'strand') {\n              const t1 = `${trackConf.trackId}-${tag}:(-)-${+Date.now()}-sessionTrack`\n              const t2 = `${trackConf.trackId}-${tag}:(+)-${+Date.now()}-sessionTrack`\n\n              // @ts-expect-error\n              session.addTrackConf({\n                ...trackConf,\n                trackId: t1,\n                name: `${trackConf.name} (-)`,\n                displays: [\n                  {\n                    displayId: `${t1}-LinearAlignmentsDisplay`,\n                    type: 'LinearAlignmentsDisplay',\n                    pileupDisplay: {\n                      displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                      type: 'LinearPileupDisplay',\n                      filterBy: negFlags,\n                    },\n                  },\n                  {\n                    displayId: `${t1}-LinearSNPCoverageDisplay`,\n                    type: 'LinearSNPCoverageDisplay',\n                    filterBy: negFlags,\n                  },\n                ],\n              })\n              // @ts-expect-error\n              session.addTrackConf({\n                ...trackConf,\n                trackId: t2,\n                name: `${trackConf.name} (+)`,\n                displays: [\n                  {\n                    displayId: `${t2}-LinearAlignmentsDisplay`,\n                    type: 'LinearAlignmentsDisplay',\n                    pileupDisplay: {\n                      displayId: `${t2}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                      type: 'LinearPileupDisplay',\n                      filterBy: posFlags,\n                    },\n                  },\n                  {\n                    displayId: `${t2}-LinearSNPCoverageDisplay`,\n                    type: 'LinearSNPCoverageDisplay',\n                    filterBy: posFlags,\n                  },\n                ],\n              })\n              view.showTrack(t1)\n              view.showTrack(t2)\n            }\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default GroupByTagDialog\n"],"names":["observer","props","model","handleClose","tag","setGroupByTag","useState","tagSet","setGroupByTagSet","loading","setLoading","error","setError","validTag","exec","isInvalid","length","debouncedTag","useDebounce","type","setType","useEffect","undefined","vals","getUniqueTags","self","blocks","getContainingView","staticBlocks","e","console","React","Dialog","open","onClose","title","DialogContent","Typography","TextField","fullWidth","value","onChange","event","target","label","select","MenuItem","color","placeholder","helperText","autoComplete","slotProps","htmlInput","maxLength","ErrorMessage","LoadingEllipses","join","DialogActions","Button","variant","disabled","autoFocus","onClick","track","getContainingTrack","trackConf","structuredClone","getSnapshot","configuration","session","getSession","view","ret","tagValue","t1","trackId","Date","now","addTrackConf","name","displays","displayId","pileupDisplay","filterBy","defaultFilterFlags","tagFilter","showTrack","t2","negFlags","posFlags"],"sourceRoot":""}