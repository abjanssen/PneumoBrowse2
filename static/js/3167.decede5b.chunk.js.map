{"version":3,"file":"static/js/3167.decede5b.chunk.js","mappings":"wOAoBe,MAAMA,UAAmBC,EAAAA,uBACtC,oBAA6B,CAAC,cAAe,eAItCC,WAAAA,CACLC,EACAC,EACAC,GAEAC,MAAMH,EAAQC,EAAeC,GAC7B,MAAME,EAAWC,KAAKC,QAAQ,iBACxBC,EAAOF,KAAKC,QAAQ,CAAC,QAAS,cAC9BE,EAAMH,KAAKC,QAAQ,CAAC,QAAS,aAC7BG,EAAKJ,KAAKH,cAEhBG,KAAKK,IAAM,IAAIC,EAAAA,GAAiB,CAC9BC,YAAYC,EAAAA,EAAAA,cAAaT,EAAUK,GACnCK,cAAwB,QAATP,GAAiBM,EAAAA,EAAAA,cAAaL,EAAKC,QAAMM,EACxDC,cAAwB,QAATT,GAAiBM,EAAAA,EAAAA,cAAaL,EAAKC,QAAMM,EACxDE,eAAgB,UAEpB,CACA,eAAMC,GACJ,OAAOb,KAAKK,IAAIQ,WAClB,CAEAC,gBAAAA,GACE,MAAMC,EAAgBf,KAAKC,QAAQ,iBACnC,OAA6B,IAAzBc,EAAcC,OACT,CACLhB,KAAKC,QAAQ,iBACbD,KAAKC,QAAQ,mBAGVc,CACT,CAEA,uBAAaE,GACX,OAAO,CACT,CAEA,iBAAMC,CAAYC,EAA6C,CAAC,GAC9D,MAAMC,EAAKD,EAAKE,UAAU,IAAIC,aAC9B,IAAKF,EACH,MAAM,IAAIG,MAAM,6BAGlB,MAAMC,EAAMxB,KAAKc,mBAAmBW,QAAQL,GACtCM,QAAc1B,KAAKK,IAAIsB,0BAA0BR,GACvD,OAAY,IAARK,EACKE,EAAME,QAAOC,GAAKA,EAAEC,WAAW,OAAMC,KAAIF,GAAKA,EAAEG,MAAM,KAC5C,IAARR,EACFE,EAAME,QAAOC,GAAKA,EAAEC,WAAW,OAAMC,KAAIF,GAAKA,EAAEG,MAAM,KAEtD,EAEX,CAEAC,WAAAA,CAAYC,EAAef,EAAmB,CAAC,GAC7C,MAAM,eAAEgB,EAAiBA,QAAahB,EACtC,OAAOiB,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,aAAEf,GAAiBY,EAEnBnB,EAAgBf,KAAKc,mBAErBwB,EAAiB,IADTvB,EAAcU,QAAQH,GAE9BiB,EAASD,EAAO,IAAM,UAEtBE,EAAAA,EAAAA,cAAa,uBAAwBL,GAAgB,IACzDnC,KAAKK,IAAIoC,SAASF,EAASL,EAAMQ,QAASR,EAAMS,MAAOT,EAAMU,IAAK,CAChEC,aAAcA,CAACC,EAAMC,KACnB,MAAMC,GAAIC,EAAAA,EAAAA,IAAaH,GACjBJ,EAAUM,EAAEE,MAAMlB,MAAM,GACxBW,EAAQK,EAAEG,OACVP,EAAMI,EAAEI,KACRC,EAAWL,EAAEM,MACbC,EAAYP,EAAEQ,OACdC,EAAUT,EAAEU,MAEZ,MAAEC,EAAK,OAAEC,GAAWZ,GACpB,WAAEa,EAAa,EAAC,SAAEC,EAAW,EAAC,GAAEC,KAAOC,GAASL,EAEtDM,EAASC,KACP,IAAIC,EAAAA,EAAe,CACjBC,SAAUrB,EAAazB,EACvBA,eACAqB,QACAC,MACA1C,KAAM,QACNwC,UACAkB,YACGI,EACHK,MAAOV,EAAMI,GACbO,UAAWvB,EACXwB,SAAUV,EAAaC,EACvBD,aACAC,WACAU,KAAM,CACJ7B,MAAOY,EACPX,IAAKa,EACLf,QAASW,EACT/B,aAAcP,GAAeuB,MAGlC,EAEHmC,UAAWtD,EAAKsD,cAIpBR,EAASS,UAAU,GAEvB,CAEAC,aAAAA,GAAsC,E,6DCpIxC,MAAM,cAAEC,GAAkBC,EAAAA,GAEX,MAAMV,UAAuBW,EAAAA,cAC1CC,GAAAA,CAAIC,GACF,MAAY,eAARA,EACKJ,EAAc5E,KAAK+E,IAAI,UAEzBjF,MAAMiF,IAAIC,EACnB,E,yGCFK,SAASC,EAASC,GACvB,OAAO,IAAIC,IACTD,EACGE,MAAM,cACNxD,QAAOyD,KAAOA,GAAKA,EAAEvD,WAAW,OAChCC,KAAIe,IACH,MAAOJ,EAASC,EAAOC,EAAK0C,EAAMC,EAAO3B,GAAUd,EAAKsC,MAAM,MAC9D,MAAO,CACLE,EACA,CACE5C,UACAC,OAAQA,EACRC,KAAMA,EACN2C,OAAQA,EACRD,OACA1B,OAAmB,MAAXA,GAAkB,EAAI,GAEjC,IAGT,CAEOvB,eAAemD,EAASC,EAAyBtE,GACtD,OAAOuE,EAAAA,EAAAA,wBAAuBD,EAAMtE,EACtC,CAEO,SAASwE,EAAIC,EAAaC,GAC/B,OAAOD,EAAE7D,KAAI,CAAC+D,EAAGC,IAAM,CAACD,EAAGD,EAAEE,KAC/B,CAEO,SAASC,EACdC,EACAC,EACA/E,GAEA,MAAM,eAAEgB,EAAiBA,QAAahB,GAAQ,CAAC,EAC/C,IAAIgF,EAAa,EACjB,MAAMC,EAAe,GACfC,EAAU,IAAIC,YAAY,QAEhC,IAAIP,EAAI,EACR,KAAOI,EAAaF,EAAOjF,QAAQ,CACjC,MAAMa,EAAIoE,EAAOxE,QAAQ,GAAI0E,GAC7B,IAAW,IAAPtE,EACF,MAEF,MAAMgE,EAAII,EAAOM,SAASJ,EAAYtE,GAChCiB,EAAOuD,EAAQG,OAAOX,GAAGY,OAC/B,GAAI3D,EAAM,CACR,MAAM4D,EAAQR,EAAGpD,GACb4D,GACFN,EAAQO,KAAKD,EAEjB,CACIX,IAAM,KAAW,GACnB5D,EACE,YAAWyE,EAAAA,EAAAA,uBAAsBT,EAAYF,EAAOjF,WAGxDmF,EAAatE,EAAI,CACnB,CACA,OAAOuE,CACT,CAEO,SAASnD,EAAaH,GAC3B,MAAM+D,EAAQ/D,EAAKsC,MAAM,MACnB0B,EAAcD,EAAM7E,MAAM,IAC1B2B,EAAyC,CAC7CE,YAAagD,EAAM,GACnB/C,UAAW+C,EAAM,IACjBE,aAAcF,EAAM,KAItB,GAAIC,EAAY9F,OACd,IAAK,MAAMgG,KAASF,EAAa,CAC/B,MAAMG,EAAaD,EAAMvF,QAAQ,KACjCkC,EAAMqD,EAAMhF,MAAM,EAAGiF,IAAeD,EAAMhF,MAAMiF,EAAa,EAC/D,CAGF,MAAO,CACL3D,MAAOuD,EAAM,GACbrD,QAASqD,EAAM,GACfnD,MAAOmD,EAAM,GACb3D,MAAO2D,EAAM,GACb1D,QAAS0D,EAAM,GACfzD,MAAOyD,EAAM,GACbjD,OAAqB,MAAbiD,EAAM,IAAc,EAAI,EAChClD,QAEJ,CAEO,SAASuD,EAAUC,GACxB,MAAMC,EAAM,GACZ,IAAK,IAAIrB,EAAIoB,EAAMnG,OAAS,EAAG+E,GAAK,EAAGA,GAAK,EAAG,CAC7CqB,EAAIT,KAAKQ,EAAMpB,IACf,MAAMsB,EAAKF,EAAMpB,EAAI,GACV,MAAPsB,EACFD,EAAIT,KAAK,KACO,MAAPU,EACTD,EAAIT,KAAK,KAETS,EAAIT,KAAKU,EAEb,CACA,OAAOD,CACT,CAEO,SAASE,EAAeH,GAC7B,OAAOA,EAAMI,WAAW,IAAK,KAAKA,WAAW,IAAK,KAAKA,WAAW,IAAK,IACzE,C","sources":["../../../plugins/comparative-adapters/src/PairwiseIndexedPAFAdapter/PairwiseIndexedPAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { updateStatus } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport SyntenyFeature from '../SyntenyFeature'\nimport { parsePAFLine } from '../util'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { FileLocation, Region } from '@jbrowse/core/util/types'\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  protected pif: TabixIndexedFile\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const pifGzLoc = this.getConf('pifGzLocation') as FileLocation\n    const type = this.getConf(['index', 'indexType'])\n    const loc = this.getConf(['index', 'location'])\n    const pm = this.pluginManager\n\n    this.pif = new TabixIndexedFile({\n      filehandle: openLocation(pifGzLoc, pm),\n      csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n      tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n  }\n  async getHeader() {\n    return this.pif.getHeader()\n  }\n\n  getAssemblyNames(): string[] {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      return [\n        this.getConf('queryAssembly') as string,\n        this.getConf('targetAssembly') as string,\n      ]\n    }\n    return assemblyNames\n  }\n\n  public async hasDataForRefName() {\n    return true\n  }\n\n  async getRefNames(opts: BaseOptions & { regions?: Region[] } = {}) {\n    const r1 = opts.regions?.[0]?.assemblyName\n    if (!r1) {\n      throw new Error('no assembly name provided')\n    }\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    const names = await this.pif.getReferenceSequenceNames(opts)\n    if (idx === 0) {\n      return names.filter(n => n.startsWith('q')).map(n => n.slice(1))\n    } else if (idx === 1) {\n      return names.filter(n => n.startsWith('t')).map(n => n.slice(1))\n    } else {\n      return []\n    }\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    const { statusCallback = () => {} } = opts\n    return ObservableCreate<Feature>(async observer => {\n      const { assemblyName } = query\n\n      const assemblyNames = this.getAssemblyNames()\n      const index = assemblyNames.indexOf(assemblyName)\n      const flip = index === 0\n      const letter = flip ? 'q' : 't'\n\n      await updateStatus('Downloading features', statusCallback, () =>\n        this.pif.getLines(letter + query.refName, query.start, query.end, {\n          lineCallback: (line, fileOffset) => {\n            const r = parsePAFLine(line)\n            const refName = r.qname.slice(1)\n            const start = r.qstart\n            const end = r.qend\n            const mateName = r.tname\n            const mateStart = r.tstart\n            const mateEnd = r.tend\n\n            const { extra, strand } = r\n            const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n            observer.next(\n              new SyntenyFeature({\n                uniqueId: fileOffset + assemblyName,\n                assemblyName,\n                start,\n                end,\n                type: 'match',\n                refName,\n                strand,\n                ...rest,\n                CIGAR: extra.cg,\n                syntenyId: fileOffset,\n                identity: numMatches / blockLen,\n                numMatches,\n                blockLen,\n                mate: {\n                  start: mateStart,\n                  end: mateEnd,\n                  refName: mateName,\n                  assemblyName: assemblyNames[+flip],\n                },\n              }),\n            )\n          },\n          stopToken: opts.stopToken,\n        }),\n      )\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import {\n  fetchAndMaybeUnzipText,\n  getProgressDisplayStr,\n} from '@jbrowse/core/util'\n\nimport type { PAFRecord } from './PAFAdapter/util'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  return fetchAndMaybeUnzipText(file, opts)\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nexport function parseLineByLine<T>(\n  buffer: Uint8Array,\n  cb: (line: string) => T | undefined,\n  opts?: BaseOptions,\n): T[] {\n  const { statusCallback = () => {} } = opts || {}\n  let blockStart = 0\n  const entries: T[] = []\n  const decoder = new TextDecoder('utf8')\n\n  let i = 0\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf(10, blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = decoder.decode(b).trim()\n    if (line) {\n      const entry = cb(line)\n      if (entry) {\n        entries.push(entry)\n      }\n    }\n    if (i++ % 10_000 === 0) {\n      statusCallback(\n        `Loading ${getProgressDisplayStr(blockStart, buffer.length)}`,\n      )\n    }\n    blockStart = n + 1\n  }\n  return entries\n}\n\nexport function parsePAFLine(line: string) {\n  const parts = line.split('\\t')\n  const extraFields = parts.slice(12)\n  const extra: Record<string, string | number> = {\n    numMatches: +parts[9]!,\n    blockLen: +parts[10]!,\n    mappingQual: +parts[11]!,\n  }\n\n  // Process extra fields only if they exist\n  if (extraFields.length) {\n    for (const field of extraFields) {\n      const colonIndex = field.indexOf(':')\n      extra[field.slice(0, colonIndex)] = field.slice(colonIndex + 3)\n    }\n  }\n\n  return {\n    tname: parts[5],\n    tstart: +parts[7]!,\n    tend: +parts[8]!,\n    qname: parts[0],\n    qstart: +parts[2]!,\n    qend: +parts[3]!,\n    strand: parts[4] === '-' ? -1 : 1,\n    extra,\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["PAFAdapter","BaseFeatureDataAdapter","constructor","config","getSubAdapter","pluginManager","super","pifGzLoc","this","getConf","type","loc","pm","pif","TabixIndexedFile","filehandle","openLocation","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","getHeader","getAssemblyNames","assemblyNames","length","hasDataForRefName","getRefNames","opts","r1","regions","assemblyName","Error","idx","indexOf","names","getReferenceSequenceNames","filter","n","startsWith","map","slice","getFeatures","query","statusCallback","ObservableCreate","async","flip","letter","updateStatus","getLines","refName","start","end","lineCallback","line","fileOffset","r","parsePAFLine","qname","qstart","qend","mateName","tname","mateStart","tstart","mateEnd","tend","extra","strand","numMatches","blockLen","cg","rest","observer","next","SyntenyFeature","uniqueId","CIGAR","syntenyId","identity","mate","stopToken","complete","freeResources","getMismatches","MismatchParser","SimpleFeature","get","arg","parseBed","text","Map","split","f","name","score","readFile","file","fetchAndMaybeUnzipText","zip","a","b","e","i","parseLineByLine","buffer","cb","blockStart","entries","decoder","TextDecoder","subarray","decode","trim","entry","push","getProgressDisplayStr","parts","extraFields","mappingQual","field","colonIndex","flipCigar","cigar","arr","op","swapIndelCigar","replaceAll"],"sourceRoot":""}