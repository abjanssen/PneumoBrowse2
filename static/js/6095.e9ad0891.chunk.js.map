{"version":3,"file":"static/js/6095.e9ad0891.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/icons-material/esm/BookmarkAdd.js","components/ShareDialogLinkField.tsx","components/ShareDialog.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 7h-2v2h-2V7h-2V5h2V3h2v2h2zm-2 14-7-3-7 3V5c0-1.1.9-2 2-2h7c-.63.84-1 1.87-1 3 0 2.76 2.24 5 5 5 .34 0 .68-.03 1-.1z\"\n}), 'BookmarkAdd');","import { TextField } from '@mui/material'\n\nexport default function ShareDialogLinkField({ url }: { url: string }) {\n  return (\n    <TextField\n      label=\"URL\"\n      value={url}\n      variant=\"filled\"\n      fullWidth\n      onClick={event => {\n        const target = event.target as HTMLTextAreaElement\n        target.select()\n      }}\n      slotProps={{\n        input: {\n          readOnly: true,\n        },\n      }}\n    />\n  )\n}\n","import { lazy, useEffect, useState } from 'react'\n\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons'\nimport {\n  type AbstractSessionModel,\n  localStorageGetItem,\n} from '@jbrowse/core/util'\nimport BookmarkAddIcon from '@mui/icons-material/BookmarkAdd'\nimport SettingsIcon from '@mui/icons-material/Settings'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  IconButton,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { StringParam, useQueryParam } from 'use-query-params'\n\nimport { shareSessionToDynamo } from '../sessionSharing'\nimport { toUrlSafeB64 } from '../util'\nimport ShareDialogLinkField from './ShareDialogLinkField'\n\nconst SettingsDialog = lazy(() => import('./ShareSettingsDialog'))\n\nconst SHARE_URL_LOCALSTORAGE_KEY = 'jbrowse-shareURL'\n\nconst ShareDialog = observer(function ({\n  handleClose,\n  session,\n}: {\n  handleClose: () => void\n  session: AbstractSessionModel & { shareURL: string }\n}) {\n  const [sessionParam, setSessionParam] = useState('')\n  const [passwordParam, setPasswordParam] = useState('')\n  const [shortUrl, setShortUrl] = useState('')\n  const [longUrl, setLongUrl] = useState('')\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<unknown>()\n  const [settingsDialogOpen, setSettingsDialogOpen] = useState(false)\n  const [, setPassword] = useQueryParam('password', StringParam)\n  const [, setSession] = useQueryParam('session', StringParam)\n\n  const url = session.shareURL\n  const currentSetting =\n    localStorageGetItem(SHARE_URL_LOCALSTORAGE_KEY) || 'short'\n  const snap = getSnapshot(session)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      // checking !error allows retry when error state is cleared\n      if (error) {\n        return\n      }\n      try {\n        if (currentSetting === 'short') {\n          setLoading(true)\n          const locationUrl = new URL(window.location.href)\n          const result = await shareSessionToDynamo(snap, url, locationUrl.href)\n          const params = new URLSearchParams(locationUrl.search)\n          params.set('session', `share-${result.json.sessionId}`)\n          params.set('password', result.password)\n          locationUrl.search = params.toString()\n          setShortUrl(locationUrl.href)\n\n          setSessionParam(`share-${result.json.sessionId}`)\n          setPasswordParam(result.password)\n        } else {\n          const sess = await toUrlSafeB64(JSON.stringify(getSnapshot(session)))\n          const longUrl = new URL(window.location.href)\n          const longParams = new URLSearchParams(longUrl.search)\n          longParams.set('session', `encoded-${sess}`)\n          setSessionParam(`encoded-${sess}`)\n          longUrl.search = longParams.toString()\n          setLongUrl(longUrl.toString())\n        }\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      } finally {\n        setLoading(false)\n      }\n    })()\n  }, [currentSetting, error, session, url, snap])\n\n  const disabled = (currentSetting === 'short' && loading) || !!error\n  return (\n    <>\n      <Dialog\n        maxWidth=\"xl\"\n        open\n        onClose={handleClose}\n        title=\"JBrowse Shareable Link\"\n      >\n        <DialogContent>\n          <DialogContentText>\n            Copy the URL below to share your current JBrowse session.\n            <IconButton\n              onClick={() => {\n                setSettingsDialogOpen(true)\n              }}\n            >\n              <SettingsIcon />\n            </IconButton>\n          </DialogContentText>\n\n          {currentSetting === 'short' ? (\n            error ? (\n              <ErrorMessage\n                error={error}\n                onReset={() => {\n                  setError(undefined)\n                }}\n              />\n            ) : loading ? (\n              <Typography>Generating short URL...</Typography>\n            ) : (\n              <ShareDialogLinkField url={shortUrl} />\n            )\n          ) : (\n            <ShareDialogLinkField url={longUrl} />\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button\n            startIcon={<BookmarkAddIcon />}\n            disabled={disabled}\n            onClick={event => {\n              event.preventDefault()\n              setPassword(passwordParam, 'replaceIn')\n              setSession(sessionParam, 'replaceIn')\n              alert('Now press Ctrl+D (PC) or Cmd+D (Mac)')\n            }}\n          >\n            Create browser Bookmark\n          </Button>\n\n          <Button\n            startIcon={<ContentCopyIcon />}\n            disabled={disabled}\n            onClick={() => {\n              copy(shortUrl || longUrl)\n              session.notify('Copied to clipboard', 'success')\n            }}\n          >\n            Copy to Clipboard\n          </Button>\n\n          <Button onClick={handleClose} autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      <SettingsDialog\n        open={settingsDialogOpen}\n        currentSetting={currentSetting}\n        onClose={() => {\n          setSettingsDialogOpen(false)\n        }}\n      />\n    </>\n  )\n})\n\nexport default ShareDialog\n"],"names":["createSvgIcon","d","ShareDialogLinkField","url","_jsx","TextField","label","value","variant","fullWidth","onClick","event","target","select","slotProps","input","readOnly","SettingsDialog","lazy","observer","handleClose","session","sessionParam","setSessionParam","useState","passwordParam","setPasswordParam","shortUrl","setShortUrl","longUrl","setLongUrl","loading","setLoading","error","setError","settingsDialogOpen","setSettingsDialogOpen","setPassword","useQueryParam","StringParam","setSession","shareURL","currentSetting","localStorageGetItem","snap","getSnapshot","useEffect","locationUrl","URL","window","location","href","result","shareSessionToDynamo","params","URLSearchParams","search","set","json","sessionId","password","toString","sess","toUrlSafeB64","JSON","stringify","longParams","e","console","disabled","_jsxs","_Fragment","children","Dialog","maxWidth","open","onClose","title","DialogContent","DialogContentText","IconButton","SettingsIcon","ErrorMessage","onReset","undefined","Typography","DialogActions","Button","startIcon","BookmarkAddIcon","preventDefault","alert","ContentCopyIcon","copy","notify","autoFocus"],"sourceRoot":""}