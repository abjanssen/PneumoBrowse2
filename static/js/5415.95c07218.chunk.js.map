{"version":3,"file":"static/js/5415.95c07218.chunk.js","mappings":"iNAaO,SAASA,EAAcC,IAgB5BC,EAAAA,EAAAA,IACED,GACAE,UACE,MAAMC,GAAOC,EAAAA,EAAAA,mBAAkBJ,GAC1BA,EAAMK,cAIXL,EAAMM,mBAAmBH,EAAKI,QAAQ,GAExC,CAAEC,MAAO,OAEXP,EAAAA,EAAAA,IACED,GACAE,UACE,MAAM,WAAEO,IAAeC,EAAAA,EAAAA,YAAWV,GAC5BG,GAAOC,EAAAA,EAAAA,mBAAkBJ,GAC/B,IAAKA,EAAMK,aACT,OAGF,MAAM,SAAEM,EAAQ,cAAEC,EAAa,aAAEC,EAAY,UAAEC,GAAcd,GACvD,QAAEO,GAAYJ,EAEpB,GAAIQ,KAAcG,GAAad,EAAMe,kBAAoBZ,EAAKI,SAAU,CACtE,MAAM,IAAES,EAAG,QAAEC,EAAO,aAAEC,GAAiBP,QAGjCX,EAAMa,aAAaM,eAAeV,EAAY,CAClDS,eACAE,QAAS,CACP,CACEC,MAAOL,EACPM,IAAKN,EAAM,EACXC,UACAC,iBAGJN,gBACAC,aAAcA,EAAaU,KAC3BC,WAAWC,EAAAA,EAAAA,iBAAgBzB,GAC3B0B,SAAUvB,EAAKwB,GACfC,QAAS,IACTC,eAAiBC,IACf9B,EAAM+B,WAAWD,EAAI,KAEpB9B,EAAMgC,kBAEb,EACIC,EAAAA,EAAAA,SAAQjC,KACVA,EAAMM,mBAAmBC,GACzBP,EAAMkC,cAAa,GACrB,GAEF,CAAE1B,MAAO,OAGXP,EAAAA,EAAAA,IACED,GACAE,UACE,IAAKF,EAAMK,aACT,OAEF,MAAM,cAAEO,GAAkBZ,GACpB,aAAEmC,IAAiB/B,EAAAA,EAAAA,mBAAkBJ,GACrCoC,QAAaC,EAAAA,EAAAA,GAAuB,CACxCrC,QACAY,gBACA0B,OAAQH,KAENF,EAAAA,EAAAA,SAAQjC,KACVA,EAAMuC,2BAA2BH,GACjCpC,EAAMwC,uBAAsB,GAC9B,GAEF,CAAEhC,MAAO,KAEb,C","sources":["../../../plugins/alignments/src/LinearPileupDisplay/doAfterAttach.ts"],"sourcesContent":["import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport { isAlive } from 'mobx-state-tree'\n\nimport { getUniqueModifications } from '../shared/getUniqueModifications'\nimport { createAutorun } from '../util'\n\nimport type { ModificationType, SortedBy } from '../shared/types'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nexport function doAfterAttach(model: {\n  autorunReady: boolean\n  sortedBy?: SortedBy\n  adapterConfig: AnyConfigurationModel\n  rendererType: { name: string }\n  sortReady: boolean\n  currSortBpPerPx: number\n  parentTrack: any\n  renderPropsPre: () => Record<string, unknown>\n  setCurrSortBpPerPx: (arg: number) => void\n  setError: (arg: unknown) => void\n  updateVisibleModifications: (arg: ModificationType[]) => void\n  setModificationsReady: (arg: boolean) => void\n  setSortReady: (arg: boolean) => void\n  setMessage: (arg: string) => void\n}) {\n  createAutorun(\n    model,\n    async () => {\n      const view = getContainingView(model) as LGV\n      if (!model.autorunReady) {\n        return\n      }\n\n      model.setCurrSortBpPerPx(view.bpPerPx)\n    },\n    { delay: 1000 },\n  )\n  createAutorun(\n    model,\n    async () => {\n      const { rpcManager } = getSession(model)\n      const view = getContainingView(model) as LGV\n      if (!model.autorunReady) {\n        return\n      }\n\n      const { sortedBy, adapterConfig, rendererType, sortReady } = model\n      const { bpPerPx } = view\n\n      if (sortedBy && (!sortReady || model.currSortBpPerPx === view.bpPerPx)) {\n        const { pos, refName, assemblyName } = sortedBy\n        // render just the sorted region first\n        // @ts-expect-error\n        await model.rendererType.renderInClient(rpcManager, {\n          assemblyName,\n          regions: [\n            {\n              start: pos,\n              end: pos + 1,\n              refName,\n              assemblyName,\n            },\n          ],\n          adapterConfig,\n          rendererType: rendererType.name,\n          sessionId: getRpcSessionId(model),\n          layoutId: view.id,\n          timeout: 1_000_000,\n          statusCallback: (arg: string) => {\n            model.setMessage(arg)\n          },\n          ...model.renderPropsPre(),\n        })\n      }\n      if (isAlive(model)) {\n        model.setCurrSortBpPerPx(bpPerPx)\n        model.setSortReady(true)\n      }\n    },\n    { delay: 1000 },\n  )\n\n  createAutorun(\n    model,\n    async () => {\n      if (!model.autorunReady) {\n        return\n      }\n      const { adapterConfig } = model\n      const { staticBlocks } = getContainingView(model) as LGV\n      const vals = await getUniqueModifications({\n        model,\n        adapterConfig,\n        blocks: staticBlocks,\n      })\n      if (isAlive(model)) {\n        model.updateVisibleModifications(vals)\n        model.setModificationsReady(true)\n      }\n    },\n    { delay: 1000 },\n  )\n}\n"],"names":["doAfterAttach","model","createAutorun","async","view","getContainingView","autorunReady","setCurrSortBpPerPx","bpPerPx","delay","rpcManager","getSession","sortedBy","adapterConfig","rendererType","sortReady","currSortBpPerPx","pos","refName","assemblyName","renderInClient","regions","start","end","name","sessionId","getRpcSessionId","layoutId","id","timeout","statusCallback","arg","setMessage","renderPropsPre","isAlive","setSortReady","staticBlocks","vals","getUniqueModifications","blocks","updateVisibleModifications","setModificationsReady"],"sourceRoot":""}