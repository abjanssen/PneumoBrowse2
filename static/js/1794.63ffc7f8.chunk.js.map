{"version":3,"file":"static/js/1794.63ffc7f8.chunk.js","mappings":"0IACA,IAAIA,EAAQ,CACR,EAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WACpF,WAAY,SAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WACpF,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,SAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WACpF,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,SACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WACpF,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UACpF,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAE9D,oBAAfC,aACPD,EAAQ,IAAIC,WAAWD,IAE3B,MAQA,EARc,CAACE,EAASC,KAEpB,IAAIC,EAAmB,IAAbD,EAAiB,GAAkB,EAAZA,EACjC,IAAK,IAAIE,EAAQ,EAAGA,EAAQH,EAAQI,OAAQD,IACxCD,EAAMJ,EAA+B,KAAxBI,EAAMF,EAAQG,KAAmBD,IAAQ,EAE1D,OAAc,EAAPA,E,4DCzCI,MAAMG,EAGnB,WAAAC,CACSC,EACAC,EACAC,EACAC,GAHA,KAAAH,KAAAA,EACA,KAAAC,KAAAA,EACA,KAAAC,IAAAA,EACA,KAAAC,aAAAA,CACN,CAEH,cAAAC,GACE,MAAO,GAAGC,KAAKL,KAAKM,eAAeD,KAAKJ,KAAKK,mBAC3CD,KAAKH,oBACUG,KAAKE,gBACxB,CAEA,QAAAD,GACE,OAAOD,KAAKD,gBACd,CAEA,SAAAI,CAAUC,GACR,OACEJ,KAAKL,KAAKQ,UAAUC,EAAET,OACtBK,KAAKJ,KAAKO,UAAUC,EAAER,OACtBI,KAAKH,IAAMO,EAAEP,GAEjB,CAEA,WAAAK,GACE,YAA0BG,IAAtBL,KAAKF,aACAE,KAAKF,aAEPE,KAAKJ,KAAKU,cAAgB,MAAYN,KAAKL,KAAKW,aACzD,EC/Ba,MAAeC,EAI5B,WAAAb,EAAY,WACVc,EAAU,aACVC,EAAgBC,GAAcA,IAK9BV,KAAKQ,WAAaA,EAClBR,KAAKS,aAAeA,CACtB,ECfK,SAASE,EAAwBC,EAAoBC,EAAI,GAC9D,MAAMC,EACJF,EAAOC,GACND,EAAOC,EAAI,IAAO,EAClBD,EAAOC,EAAI,IAAO,GAClBD,EAAOC,EAAI,IAAO,GAMrB,OAb4BE,aAS1BH,EAAOC,EAAI,GACVD,EAAOC,EAAI,IAAO,EAClBD,EAAOC,EAAI,IAAO,GAClBD,EAAOC,EAAI,IAAO,MACJ,IAAuBC,IAAQ,EAClD,CCXO,SAASE,EAAQC,GACtB,OAAO,IAAIC,QAAQC,GAAWC,WAAWD,EAASF,GACpD,CA2CO,SAASI,EAAeC,EAAeC,GAC5C,OACEA,EAAO5B,KAAKW,cAAgBgB,EAAO1B,KAAKU,cAAgB,MACxDiB,EAAO3B,KAAKU,cAAgBgB,EAAO3B,KAAKW,cAAgB,GAE5D,CAiBO,SAASkB,EAAeC,EAAiBC,GAC9C,MAAMC,EAAwB,GAC9B,IAAIC,EAEJ,GAAsB,IAAlBH,EAAOjC,OACT,OAAOiC,EAGTA,EAAOI,KAAK,CAACC,EAAIC,KACf,MAAMC,EAAMF,EAAGnC,KAAKW,cAAgByB,EAAGpC,KAAKW,cAC5C,OAAe,IAAR0B,EAAYF,EAAGnC,KAAKsC,aAAeF,EAAGpC,KAAKsC,aAAeD,IAGnE,IAAK,MAAME,KAAST,IACbC,GAAUQ,EAAMtC,KAAKO,UAAUuB,GAAU,UAC1BrB,IAAduB,GACFD,EAAaQ,KAAKD,GAClBN,EAAYM,GAERb,EAAeO,EAAWM,GACxBA,EAAMtC,KAAKO,UAAUyB,EAAUhC,MAAQ,IACzCgC,EAAUhC,KAAOsC,EAAMtC,OAGzB+B,EAAaQ,KAAKD,GAClBN,EAAYM,IAMpB,OAAOP,CACT,CAEO,SAASS,EAAeC,EAAmBC,GAChD,MAAO,CACLC,UAAW5B,EAAwB0B,EAAOC,GAE9C,CAEO,SAASE,EACdC,EACAC,GAEA,OAAOD,EACHA,EAActC,UAAUuC,GAAiB,EACvCA,EACAD,EACFC,CACN,CAEO,SAASC,EACdC,EACAnC,EAAwCoC,GAAKA,GAE7C,IAAIC,EAAY,EACZC,EAAgB,EACpB,MAAMC,EAAc,GACdC,EAAsC,CAAC,EAC7C,IAAK,IAAIpC,EAAI,EAAGA,EAAI+B,EAAWpD,OAAQqB,GAAK,EAC1C,IAAK+B,EAAW/B,GAAI,CAClB,GAAIkC,EAAgBlC,EAAG,CACrB,IAAIqC,EAAU,GACd,IAAK,IAAIC,EAAIJ,EAAeI,EAAItC,EAAGsC,IACjCD,GAAWE,OAAOC,aAAaT,EAAWO,IAE5CD,EAAUzC,EAAayC,GACvBF,EAAYF,GAAaI,EACzBD,EAAYC,GAAWJ,CACzB,CACAC,EAAgBlC,EAAI,EACpBiC,GAAa,CACf,CAEF,MAAO,CAAEG,cAAaD,cACxB,CC3IO,MAAMM,EAGX,WAAA5D,CAAYY,EAAuB2B,GACjCjC,KAAKM,cAAgBA,EACrBN,KAAKiC,aAAeA,CACtB,CAEA,QAAAhC,GACE,MAAO,GAAGD,KAAKM,iBAAiBN,KAAKiC,cACvC,CAEA,SAAA9B,CAAUC,GACR,OACEJ,KAAKM,cAAgBF,EAAEE,eAAiBN,KAAKiC,aAAe7B,EAAE6B,YAElE,EAEK,SAASsB,EAAUlB,EAAmBC,EAAS,EAAGkB,GAAY,GACnE,GAAIA,EACF,MAAM,IAAIC,MAAM,mDAGlB,OAAO,IAAIH,EACY,cAArBjB,EAAMC,EAAS,GACQ,WAArBD,EAAMC,EAAS,GACM,SAArBD,EAAMC,EAAS,GACM,MAArBD,EAAMC,EAAS,GACM,IAArBD,EAAMC,EAAS,GACfD,EAAMC,EAAS,GAChBD,EAAMC,EAAS,IAAO,EAAKD,EAAMC,GAEtC,CCAe,MAAMoB,UAAYnD,EAG/B,eAAMgC,CAAUoB,EAAeC,GAC7B,MAAMC,QAAkB7D,KAAK8D,MAAMF,GACnC,OAAOC,EAAUE,QAAQJ,IAAQK,OAAOzB,WAAa,CACvD,CAEA,YAAM0B,CAAOC,GACX,MAAM7B,QAAcrC,KAAKQ,WAAW2D,WAC9BC,EAAW,IAAIC,SAAShC,EAAMiC,QAGpC,GAxCc,WAwCVF,EAASG,UAAU,GAAG,GACxB,MAAM,IAAId,MAAM,kBAGlB,MAAMe,EAAWJ,EAASK,SAAS,GAAG,GAKtC,IACIhC,EADAiC,EAAO,EAGX,MAAMC,EAAU,GAChB,IAAK,IAAI9D,EAAI,EAAGA,EAAI2D,EAAU3D,IAAK,CACjC8D,EAAQxC,KAAKuC,GACb,MAAME,EAAWR,EAASK,SAASC,GAAM,GAEzCA,GAAQ,EAER,IAAK,IAAIvB,EAAI,EAAGA,EAAIyB,EAAUzB,GAAK,EAAG,CACpC,MAAMtD,EAAMuE,EAASG,UAAUG,GAAM,GAErC,GADAA,GAAQ,EACIG,QAARhF,EACF6E,GAAQ,EACRA,GAAQ,OACH,IAAI7E,EAAMgF,MACf,MAAM,IAAIpB,MAAM,oDACX,CACL,MAAMqB,EAAaV,EAASK,SAASC,GAAM,GAC3CA,GAAQ,EACR,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAYC,IAC9BL,GAAQ,EACRA,GAAQ,CAEZ,EACF,CAEA,MAAMM,EAAcZ,EAASK,SAASC,GAAM,GAC5CA,GAAQ,EAIR,MAAMO,EAAc,IAAIC,MAAqBF,GAC7C,IAAK,IAAI7B,EAAI,EAAGA,EAAI6B,EAAa7B,IAAK,CACpC,MAAMb,EAASiB,EAAUlB,EAAOqC,GAChCA,GAAQ,EACRjC,EAAgBD,EAAcC,EAAeH,GAC7C2C,EAAY9B,GAAKb,CACnB,CACF,CACA,MAAM6C,EAAe,IAAI,EAAgD,CACvEC,QAAS,IA2DX,MAAO,CACLC,KAAK,EACL5C,gBACA6C,aAAc,MACdvB,QAAUJ,IACR,IAAKwB,EAAaI,IAAI5B,GAAQ,CAC5B,MAAM6B,EA9DZ,SAAoB7B,GAClB,IAAIe,EAAOC,EAAQhB,GACnB,QAAatD,IAATqE,EACF,OAEF,MAAME,EAAWR,EAASK,SAASC,GAAM,GACzC,IAAIV,EAEJU,GAAQ,EACR,MAAMe,EAAoC,CAAC,EAE3C,IAAK,IAAItC,EAAI,EAAGA,EAAIyB,EAAUzB,GAAK,EAAG,CACpC,MAAMtD,EAAMuE,EAASG,UAAUG,GAAM,GAErC,GADAA,GAAQ,EACIG,QAARhF,EACF6E,GAAQ,EACRV,EAAQ5B,EAAeC,EAAOqC,EAAO,IACrCA,GAAQ,OACH,IAAI7E,EAAMgF,MACf,MAAM,IAAIpB,MAAM,oDACX,CACL,MAAMqB,EAAaV,EAASK,SAASC,GAAM,GAC3CA,GAAQ,EACR,MAAMjD,EAAS,IAAIyD,MAAaJ,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAYC,IAAK,CACnC,MAAMW,EAAInC,EAAUlB,EAAOqC,GAC3BA,GAAQ,EACR,MAAMiB,EAAIpC,EAAUlB,EAAOqC,GAC3BA,GAAQ,EACRjC,EAAgBD,EAAcC,EAAeiD,GAC7CjE,EAAOsD,GAAK,IAAItF,EAAMiG,EAAGC,EAAG9F,EAC9B,CACA4F,EAAS5F,GAAO4B,CAClB,EACF,CAEA,MAAMuD,EAAcZ,EAASK,SAASC,GAAM,GAC5CA,GAAQ,EAIR,MAAMO,EAAc,IAAIC,MAAqBF,GAC7C,IAAK,IAAI7B,EAAI,EAAGA,EAAI6B,EAAa7B,IAAK,CACpC,MAAMb,EAASiB,EAAUlB,EAAOqC,GAChCA,GAAQ,EACRjC,EAAgBD,EAAcC,EAAeH,GAC7C2C,EAAY9B,GAAKb,CACnB,CAEA,MAAO,CACLmD,WACAR,cACAjB,QAEJ,CAQqB4B,CAAWjC,GAI1B,OAHI6B,GACFL,EAAaU,IAAIlC,EAAO6B,GAEnBA,CACT,CACA,OAAOL,EAAaW,IAAInC,IAE1Ba,WAEJ,CAEA,cAAMuB,CACJC,EACAC,EACAC,EACAtC,GAEA,MAAM+B,EAAI,MACJQ,OAAkB9F,IAAV4F,EAERG,SADkBpG,KAAK8D,MAAMF,IACVG,QAAQiC,GAEjC,IAAKI,EACH,MAAO,GAET,MAAM,YAAEnB,EAAc,GAAE,MAAEjB,GAAUoC,EACpC,GAA2B,IAAvBnB,EAAYzF,OACd,MAAO,GAET,MAAM6G,OAAYhG,IAAR6F,GAAqBjB,EAAYzF,OAAS,GAAKmG,GArL5CjF,EAqLwDwF,GApL3DxF,EAoLgEiF,QArL9E,IAAiBjF,EAsLb,MAAMmC,OAAcxC,IAAV4F,EAAsB,EAzLpC,SAAmBvF,GACjB,OAAOA,EAAKA,EAwL2CiF,KAvLzD,CAuLwCW,CAAUL,GACxCM,EACF,IAAIrB,MADOiB,GACAE,EAAIxD,GAAK8C,EACVV,EAAYzF,OAAS,GAC7BgH,EAAYvB,EAAYA,EAAYzF,OAAS,GAAIc,cACvD,GAAI+F,GAAKpB,EAAYzF,OAAS,GAAKmG,EACjC,MAAM,IAAIlC,MAAM,0CAElB,IAAIgD,EAAaxB,EAAYpC,EAAI8C,GAAIrF,cACrC,IAAK,IAAIO,EAAIgC,EAAI8C,EAAGxC,EAAI,EAAGtC,EAAIwF,EAAIV,EAAG9E,IAAKsC,IACzCoD,EAAOpD,GAAK,CACVuD,MAAOzB,EAAYpE,EAAI,GAAIP,cAAgBmG,EAC3CR,MAAOpF,EAAI8E,EACXO,IAAKrF,EAAI8E,EAAIA,GAEfc,EAAaxB,EAAYpE,EAAI,GAAIP,cAEnC,OAAOiG,EAAOI,IAAIC,IAAK,IAClBA,EACHF,MAAQE,EAAEF,OAAS1C,GAAOzB,WAAa,GAAMiE,IAEjD,CAEA,oBAAMK,CACJlD,EACAmD,EACAC,EACAnD,EAAiB,CAAC,GAEdkD,EAAM,IACRA,EAAM,GAGR,MAAMjD,QAAkB7D,KAAK8D,MAAMF,GAEnC,IAAKC,EACH,MAAO,GAET,MAAMmD,EAAKnD,EAAUE,QAAQJ,GAE7B,IAAKqD,EACH,MAAO,GAIT,MAAMC,GAzNqBf,EAyNWa,EAvNjC,CACL,CAAC,EAAG,GACJ,CAAC,IAJaG,EAyNmBJ,IArNpB,IAAK,IAHpBZ,GAAO,IAGyB,KAC9B,CAAC,GAAKgB,GAAO,IAAK,GAAKhB,GAAO,KAC9B,CAAC,IAAMgB,GAAO,IAAK,IAAMhB,GAAO,KAChC,CAAC,KAAOgB,GAAO,IAAK,KAAOhB,GAAO,KAClC,CAAC,MAAQgB,GAAO,IAAK,MAAQhB,GAAO,OARxC,IAAkBgB,EAAahB,EA0N3B,MAAMzE,EAAkB,GAGxB,IAAK,MAAOwE,EAAOC,KAAQe,EACzB,IAAK,IAAIpH,EAAMoG,EAAOpG,GAAOqG,EAAKrG,IAChC,GAAImH,EAAGvB,SAAS5F,GAAM,CACpB,MAAMsH,EAAYH,EAAGvB,SAAS5F,GAC9B,IAAK,MAAMuH,KAAYD,EACrB1F,EAAOU,KAAK,IAAI1C,EAAM2H,EAASzH,KAAMyH,EAASxH,KAAMC,GAExD,CAMJ,MAAMwH,EAAQL,EAAG/B,YAAYzF,OAC7B,IAAIkC,EACJ,MAAM4F,EAASC,KAAKT,IAAIA,GAAO,GAAIO,EAAQ,GACrCG,EAASD,KAAKT,IAAIC,GAAO,GAAIM,EAAQ,GAC3C,IAAK,IAAIxG,EAAIyG,EAAQzG,GAAK2G,IAAU3G,EAAG,CACrC,MAAM4G,EAAKT,EAAG/B,YAAYpE,GAEtB4G,KAAQ/F,GAAU+F,EAAGtH,UAAUuB,GAAU,KAC3CA,EAAS+F,EAEb,CAEA,OAAOjG,EAAeC,EAAQC,EAChC,CAEA,WAAMoC,CAAMF,EAAiB,CAAC,GAO5B,OANK5D,KAAK0H,SACR1H,KAAK0H,OAAS1H,KAAKiE,OAAOL,GAAM+D,MAAOtB,IAErC,MADArG,KAAK0H,YAASrH,EACRgG,KAGHrG,KAAK0H,MACd,CAEA,eAAME,CAAU5B,EAAepC,EAAiB,CAAC,GAC/C,MAAMiE,QAAe7H,KAAK8D,MAAMF,GAChC,QAASiE,EAAO9D,QAAQiC,IAAQP,QAClC,E,gDC/QF,SAASqC,EAAOC,EAAaC,GAC3B,OAAOD,EAAM,GAAKC,CACpB,CACA,SAASC,EAAOF,EAAaC,GAC3B,OAAOT,KAAKW,MAAMH,EAAM,GAAKC,EAC/B,CAEe,MAAMG,UAAY5H,EAAjC,c,oBACU,KAAA6H,aAAe,EACf,KAAAC,MAAQ,EACR,KAAAC,SAAW,CAuPrB,CAnPE,eAAM/F,CAAUoB,EAAeC,GAC7B,MAAMC,QAAkB7D,KAAK8D,MAAMF,GACnC,OAAOC,EAAUE,QAAQJ,IAAQK,OAAOzB,WAAa,CACvD,CAEA,cAAMwD,GACJ,MAAO,EACT,CAEA,YAAAwC,CAAalG,EAAmBC,GAC9B,MAAM8B,EAAW,IAAIC,SAAShC,EAAMiC,QAC9BkE,EAAcpE,EAASG,UAAUjC,GAAQ,GACzCmG,EACU,MAAdD,EAAwB,uBAAyB,iBAC7CE,EACJ,CAAE,EAAG,UAAW,EAAG,MAAO,EAAG,OACf,GAAdF,GACF,IAAKE,EACH,MAAM,IAAIjF,MAAM,qCAAqC+E,KAEvD,MAAMG,EAAgB,CACpBC,IAAKxE,EAASK,SAASnC,EAAS,GAAG,GACnC2D,MAAO7B,EAASK,SAASnC,EAAS,GAAG,GACrC4D,IAAK9B,EAASK,SAASnC,EAAS,IAAI,IAEhCuG,EAAYzE,EAASK,SAASnC,EAAS,IAAI,GAC3CwG,EAAWD,EAAYzF,OAAOC,aAAawF,GAAa,GACxDE,EAAY3E,EAASK,SAASnC,EAAS,IAAI,GAC3C0G,EAAoB5E,EAASK,SAASnC,EAAS,IAAI,GAEzD,MAAO,CACLqG,gBACAF,iBACAI,YACAC,WACAC,YACAL,SACAF,iBACG7F,EACDN,EAAM4G,SAAS3G,EAAS,GAAIA,EAAS,GAAK0G,GAC1ChJ,KAAKS,cAGX,CAGA,YAAMwD,CAAOL,GACX,MAAMU,QAAetE,KAAKQ,WAAW2D,SAASP,GACxCvB,QAAc,QAAMiC,GAEpBF,EAAW,IAAIC,SAAShC,EAAMiC,QACpC,IAAI4E,EACJ,MAAMC,EAAQ/E,EAASG,UAAU,GAAG,GAEpC,GAvEe,WAuEX4E,EACFD,EAAa,MACR,IAxEQ,WAwEJC,EAGT,MAAM,IAAI1F,MAAM,kBAAkB0F,KAFlCD,EAAa,CAIf,CAEAlJ,KAAKsI,SAAWlE,EAASK,SAAS,GAAG,GACrCzE,KAAKqI,MAAQjE,EAASK,SAAS,GAAG,GAClCzE,KAAKoI,eAAiB,GAAyB,GAAlBpI,KAAKqI,MAAQ,IAAW,GAAK,EAC1D,MAAMD,EAAepI,KAAKoI,aACpBgB,EAAYhF,EAASK,SAAS,IAAI,GAClC4E,EAAMD,GAAa,GAAKpJ,KAAKuI,aAAalG,EAAO,SAAMhC,EACvDmE,EAAWJ,EAASK,SAAS,GAAK2E,GAAW,GAGnD,IACI3G,EADAiC,EAAO,GAAK0E,EAAY,EAE5B,MAAMzE,EAAU,GAChB,IAAK,IAAI9D,EAAI,EAAGA,EAAI2D,EAAU3D,IAAK,CACjC8D,EAAQxC,KAAKuC,GACb,MAAME,EAAWR,EAASK,SAASC,GAAM,GACzCA,GAAQ,EACR,IAAK,IAAIvB,EAAI,EAAGA,EAAIyB,EAAUzB,IAAK,CACjC,MAAMtD,EAAMuE,EAASG,UAAUG,GAAM,GAErC,GADAA,GAAQ,EACJ7E,EAAMG,KAAKoI,aACb1D,GAAQ,OACH,CACLA,GAAQ,EACR,MAAMI,EAAaV,EAASK,SAASC,GAAM,GAC3CA,GAAQ,EACR,IAAK,IAAIK,EAAI,EAAGA,EAAID,EAAYC,GAAK,EAAG,CACtC,MAAMW,EAAInC,EAAUlB,EAAOqC,GAC3BA,GAAQ,EACRA,GAAQ,EACRjC,EAAgBD,EAAcC,EAAeiD,EAC/C,CACF,CACF,CACF,CAEA,MAAMP,EAAe,IAAI,EAAgD,CACvEC,QAAS,IA0CX,MAAO,CACL8D,aACAzG,gBACAsB,QAAUJ,IACR,IAAKwB,EAAaI,IAAI5B,GAAQ,CAC5B,MAAM6B,EA5CZ,SAAoB7B,GAClB,IAAIe,EAAOC,EAAQhB,GACnB,QAAatD,IAATqE,EACF,OAGF,MAAME,EAAWR,EAASK,SAASC,GAAM,GACzCA,GAAQ,EACR,MAAMe,EAAoC,CAAC,EAC3C,IAAI6D,EACJ,IAAK,IAAInG,EAAI,EAAGA,EAAIyB,EAAUzB,IAAK,CACjC,MAAMtD,EAAMuE,EAASG,UAAUG,GAAM,GAErC,GADAA,GAAQ,EACJ7E,EAAMuI,EACRkB,EAAiBlH,EAAeC,EAAOqC,EAAO,IAC9CA,GAAQ,OACH,CACLjC,EAAgBD,EAAcC,EAAec,EAAUlB,EAAOqC,IAC9DA,GAAQ,EACR,MAAMI,EAAaV,EAASK,SAASC,GAAM,GAC3CA,GAAQ,EACR,MAAMjD,EAAS,IAAIyD,MAAaJ,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAYC,GAAK,EAAG,CACtC,MAAMW,EAAInC,EAAUlB,EAAOqC,GAC3BA,GAAQ,EACR,MAAMiB,EAAIpC,EAAUlB,EAAOqC,GAC3BA,GAAQ,EACRjD,EAAOsD,GAAK,IAAItF,EAAMiG,EAAGC,EAAG9F,EAC9B,CACA4F,EAAS5F,GAAO4B,CAClB,CACF,CAEA,MAAO,CACLgE,WACAzB,MAAOsF,EAEX,CAOqB1D,CAAWjC,GAI1B,OAHI6B,GACFL,EAAaU,IAAIlC,EAAO6B,GAEnBA,CACT,CACA,OAAOL,EAAaW,IAAInC,IAE1Ba,WACA+E,KAAK,EACLjE,aAAc,SACX+D,EAEP,CAEA,oBAAMxC,CACJlD,EACAmD,EACAC,EACAnD,EAAiB,CAAC,GAEdkD,EAAM,IACRA,EAAM,GAGR,MACME,SADkBhH,KAAK8D,MAAMF,IACdG,QAAQJ,GAE7B,IAAKqD,EACH,MAAO,GAET,MAAMC,EAAkBjH,KAAKwJ,SAAS1C,EAAKC,GAE3C,GAA+B,IAA3BE,EAAgBzH,OAClB,MAAO,GAGT,MAAMiC,EAAS,GAEf,IAAK,MAAOwE,EAAOC,KAAQe,EACzB,IAAK,IAAIpH,EAAMoG,EAAOpG,GAAOqG,EAAKrG,IAChC,GAAImH,EAAGvB,SAAS5F,GAAM,CACpB,MAAMsH,EAAYH,EAAGvB,SAAS5F,GAC9B,IAAK,MAAM4J,KAAKtC,EACd1F,EAAOU,KAAKsH,EAEhB,CAIJ,OAAOjI,EAAeC,EAAQ,IAAI6B,EAAc,EAAG,GACrD,CAMA,QAAAkG,CAAStC,EAAahB,IACpBgB,GAAO,GACG,IACRA,EAAM,GAEJhB,EAAM,GAAK,KACbA,EAAM,GAAK,IAEbA,GAAO,EACP,IAAIwD,EAAI,EACJC,EAAI,EACJ9G,EAAI7C,KAAKsI,SAAwB,EAAbtI,KAAKqI,MAC7B,MAAMuB,EAAO,GACb,KAAOF,GAAK1J,KAAKqI,MAAOxF,GAAK,EAAG8G,GAAK7B,EAAO,EAAO,EAAJ4B,GAAQA,GAAK,EAAG,CAC7D,MAAMtJ,EAAIuJ,EAAI1B,EAAOf,EAAKrE,GACpBwD,EAAIsD,EAAI1B,EAAO/B,EAAKrD,GAC1B,GAAIwD,EAAIjG,EAAIwJ,EAAKpK,OAASQ,KAAKoI,aAC7B,MAAM,IAAI3E,MACR,SAASyD,KAAOhB,oDAAsDlG,KAAKsI,mBAAmBtI,KAAKqI,iEAGvGuB,EAAKzH,KAAK,CAAC/B,EAAGiG,GAChB,CACA,OAAOuD,CACT,CAEA,WAAM9F,CAAMF,EAAiB,CAAC,GAO5B,OANK5D,KAAK0H,SACR1H,KAAK0H,OAAS1H,KAAKiE,OAAOL,GAAM+D,MAAOtB,IAErC,MADArG,KAAK0H,YAASrH,EACRgG,KAGHrG,KAAK0H,MACd,CAEA,eAAME,CAAU5B,EAAepC,EAAiB,CAAC,GAC/C,MAAMiE,QAAe7H,KAAK8D,MAAMF,GAChC,QAASiE,EAAO9D,QAAQiC,IAAQP,QAClC,EClRa,MAAMoE,EACZ,IAAAC,GACL,MAAM,IAAIrG,MAAM,eAClB,CACO,IAAAsG,GACL,MAAM,IAAItG,MAAM,eAClB,CAEO,QAAAU,GACL,MAAM,IAAIV,MAAM,eAClB,CAEO,KAAAuG,GACL,MAAM,IAAIvG,MAAM,eAClB,E,gTCZF,MAAMwG,EAAiB,mBAAmBC,MAAM,IAC1CC,EAAgB,mBAAmBD,MAAM,IAQ/C,MAAqBE,EAKnB,WAAA1K,CAAY2K,GAFZ,mBAGErK,KAAKqC,MAAQgI,EAAKhI,MAClBrC,KAAKsK,WAAaD,EAAKC,W,+VACvB,CAAAtK,KAAI,EAAa,IAAIqE,SAASrE,KAAKqC,MAAMkI,UAAUjG,QAAO,IAC5D,CAEA,aAAIiG,GACF,OAAOvK,KAAKqC,MAAMkI,SACpB,CAEA,SAAIC,GACF,OAC0D,WAAvD,EAAAxK,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,KAAuB,EAE3E,CACA,UAAIwE,GACF,OAAO,EAAAzK,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,GAAG,EACvD,CAEA,SAAIA,GACF,OAAO,EAAAjG,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,GAAG,EACvD,CAEA,OAAIC,GACF,OAAOlG,KAAKiG,MAAQjG,KAAK0K,aAC3B,CAEA,MAAIC,GACF,OAAO3K,KAAKsK,UACd,CAEA,MAAIM,GACF,MAAMA,GAAuB,MAAjB5K,KAAK6K,YAAuB,EACxC,OAAc,MAAPD,OAAavK,EAAYuK,CAClC,CAEA,SAAIlE,GACF,OAAO1G,KAAK4K,EACd,CAEA,QAAIE,GACF,GAAI9K,KAAK+K,oBACP,OAGF,MAAMC,EACJhL,KAAKiL,GACLjL,KAAKkL,iBACgB,EAArBlL,KAAKmL,cACLnL,KAAKoL,cACP,OAAOpL,KAAKuK,UAAUtB,SAAS+B,EAAGA,EAAIhL,KAAKqL,WAC7C,CAEA,UAAIC,GACF,OAAOtL,KAAKuL,yBAA2B,EAAI,CAC7C,CAEA,MAAIN,GACF,OAAOjL,KAAKqC,MAAM4D,MAAQ,EAC5B,CACA,QAAIuF,GACF,IAAIC,EAAM,GACV,IAAK,IAAI5K,EAAI,EAAGA,EAAIb,KAAKkL,iBAAmB,EAAGrK,IAC7C4K,GAAOrI,OAAOC,aAAarD,KAAKuK,UAAUvK,KAAKiL,GAAKpK,IAEtD,OAAO4K,CACT,CAEA,QAAIC,GACF,IAAIV,EACFhL,KAAKiL,GACLjL,KAAKkL,iBACgB,EAArBlL,KAAKmL,cACLnL,KAAKoL,cACLpL,KAAKqL,WAEP,MAAMM,EAAW3L,KAAKqC,MAAM6D,IACtBwF,EAAO,CAAC,EACd,KAAOV,EAAIW,GAAU,CACnB,MAAMC,EAAMxI,OAAOC,aACjBrD,KAAKuK,UAAUS,GACfhL,KAAKuK,UAAUS,EAAI,IAEfa,EAAOzI,OAAOC,aAAarD,KAAKuK,UAAUS,EAAI,IAGpD,GAFAA,GAAK,EAEQ,MAATa,EACFH,EAAKE,GAAOxI,OAAOC,aAAarD,KAAKuK,UAAUS,IAC/CA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAWyE,SAASuG,GAAG,GACvCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAWuE,UAAUyG,GAAG,GACxCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAW8L,QAAQd,GACnCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAW+L,SAASf,GACpCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAWgM,SAAShB,GAAG,GACvCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAWiM,UAAUjB,GAAG,GACxCA,GAAK,OACA,GAAa,MAATa,EACTH,EAAKE,GAAO,EAAA5L,KAAI,OAAWkM,WAAWlB,GAAG,GACzCA,GAAK,OACA,GAAa,MAATa,GAAyB,MAATA,EAAc,CACvC,MAAMM,EAAQ,GACd,KAAOnB,GAAKW,GAAU,CACpB,MAAMS,EAAKpM,KAAKuK,UAAUS,KAC1B,GAAW,IAAPoB,EAGF,MAFAD,EAAMhK,KAAKiB,OAAOC,aAAa+I,GAInC,CACAV,EAAKE,GAAOO,EAAME,KAAK,GACzB,KAAO,IAAa,MAATR,EA+EJ,CACLS,QAAQC,MAAM,uBAAwBV,GACtC,KACF,CAlFyB,CACvB,MAAMO,EAAKpM,KAAKuK,UAAUS,KACpBwB,EAAQpJ,OAAOC,aAAa+I,GAC5BK,EAAQ,EAAAzM,KAAI,OAAWyE,SAASuG,GAAG,GAEzC,GADAA,GAAK,EACS,MAAVwB,EACF,GAAY,OAARZ,EAAc,CAChB,MAAMO,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IAAK,CAC9B,MAAM2H,EAAQ,EAAA1M,KAAI,OAAWyE,SAASuG,GAAG,GACnC2B,EAAMD,GAAS,EACfE,EAAKzC,EAAsB,GAARuC,GACzBP,EAAMhK,KAAKwK,EAAMC,GACjB5B,GAAK,CACP,CACAU,EAAKE,GAAOO,EAAME,KAAK,GACzB,KAAO,CACL,MAAMF,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAWyE,SAASuG,GAAG,IACtCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MACK,GAAc,MAAVK,EACT,GAAY,OAARZ,EAAc,CAChB,MAAMO,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IAAK,CAC9B,MAAM2H,EAAQ,EAAA1M,KAAI,OAAWuE,UAAUyG,GAAG,GACpC2B,EAAMD,GAAS,EACfE,EAAKzC,EAAsB,GAARuC,GACzBP,EAAMhK,KAAKwK,EAAMC,GACjB5B,GAAK,CACP,CACAU,EAAKE,GAAOO,EAAME,KAAK,GACzB,KAAO,CACL,MAAMF,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAWuE,UAAUyG,GAAG,IACvCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MACK,GAAc,MAAVK,EAAe,CACxB,MAAML,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAWgM,SAAShB,GAAG,IACtCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MAAO,GAAc,MAAVK,EAAe,CACxB,MAAML,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAWiM,UAAUjB,GAAG,IACvCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MAAO,GAAc,MAAVK,EAAe,CACxB,MAAML,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAW8L,QAAQd,IAClCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MAAO,GAAc,MAAVK,EAAe,CACxB,MAAML,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAW+L,SAASf,IACnCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,MAAO,GAAc,MAAVK,EAAe,CACxB,MAAML,EAAQ,GACd,IAAK,IAAIpH,EAAI,EAAGA,EAAI0H,EAAO1H,IACzBoH,EAAMhK,KAAK,EAAAnC,KAAI,OAAWkM,WAAWlB,GAAG,IACxCA,GAAK,EAEPU,EAAKE,GAAOO,CACd,CACF,CAGA,CACF,CACA,OAAOT,CACT,CAMA,QAAAmB,GACE,SCnOW,EDmOD7M,KAAKwK,MACjB,CAGA,gBAAAsC,GACE,SCtOgB,EDsON9M,KAAKwK,MACjB,CAGA,iBAAAO,GACE,SCzOU,EDyOA/K,KAAKwK,MACjB,CAGA,cAAAuC,GACE,SC5OW,ED4OD/M,KAAKwK,MACjB,CAGA,qBAAAe,GACE,SC/OY,GD+OFvL,KAAKwK,MACjB,CAGA,yBAAAwC,GACE,SClPa,GDkPHhN,KAAKwK,MACjB,CAGA,OAAAyC,GACE,SCrPU,GDqPAjN,KAAKwK,MACjB,CAGA,OAAA0C,GACE,SCxPU,IDwPAlN,KAAKwK,MACjB,CAGA,WAAA2C,GACE,SC3Pc,ID2PJnN,KAAKwK,MACjB,CAGA,UAAA4C,GACE,SC9PW,ID8PDpN,KAAKwK,MACjB,CAGA,WAAA6C,GACE,SCjQQ,KDiQErN,KAAKwK,MACjB,CAGA,eAAA8C,GACE,SCpQkB,KDoQRtN,KAAKwK,MACjB,CAEA,kBAAI+C,GACF,GAAIvN,KAAK+K,oBACP,MAAO,CACLL,cAAe,EACf8C,MAAO,IAIX,MAAMC,EAAczN,KAAKmL,cACzB,IAAIH,EAAIhL,KAAKiL,GAAKjL,KAAKkL,iBACvB,MAAMsC,EAAQ,GAId,IAAId,EAAQ,EAAA1M,KAAI,OAAWyE,SAASuG,GAAG,GACnC2B,EAAMD,GAAS,EACfE,EAAKzC,EAAsB,GAARuC,GACvB,GAAW,MAAPE,GAAcD,IAAQ3M,KAAKqL,WAU7B,OAPAL,GAAK,EACL0B,EAAQ,EAAA1M,KAAI,OAAWyE,SAASuG,GAAG,GACnC2B,EAAMD,GAAS,EACfE,EAAKzC,EAAsB,GAARuC,GACR,MAAPE,GACFN,QAAQoB,KAAK,wBAER,CACLF,MAAOxN,KAAK0L,KAAKiC,GACjBjD,cAAeiC,GAEZ,CACL,IAAIiB,EAAO,EACX,IAAK,IAAInE,EAAI,EAAGA,EAAIgE,IAAehE,EACjCiD,EAAQ,EAAA1M,KAAI,OAAWyE,SAASuG,GAAG,GACnC2B,EAAMD,GAAS,EACfE,EAAKzC,EAAsB,GAARuC,GACnBc,EAAMrL,KAAKwK,EAAMC,GAGN,MAAPA,GAAqB,MAAPA,GAAqB,MAAPA,IAC9BgB,GAAQjB,GAGV3B,GAAK,EAGP,MAAO,CACLwC,MAAOA,EAAMnB,KAAK,IAClB3B,cAAekD,EAEnB,CACF,CAEA,iBAAIlD,GACF,OAAO1K,KAAKuN,eAAe7C,aAC7B,CAEA,SAAI8C,GACF,OAAOxN,KAAKuN,eAAeC,KAC7B,CAEA,iBAAIrC,GACF,OAAsB,MAAfnL,KAAK6N,OACd,CAEA,oBAAI3C,GACF,OAAwB,IAAjBlL,KAAK6K,SACd,CAEA,iBAAIO,GACF,OAAQpL,KAAKqL,WAAa,GAAM,CAClC,CAEA,OAAIyC,GACF,MAAM9C,EAAIhL,KAAKiL,GAAKjL,KAAKkL,iBAAwC,EAArBlL,KAAKmL,cAC3C4C,EAAW/N,KAAKoL,cAChB4C,EAAMhO,KAAKqL,WACX4C,EAAM,GACZ,IAAIpN,EAAI,EACR,IAAK,IAAIsC,EAAI,EAAGA,EAAI4K,IAAY5K,EAAG,CACjC,MAAM+K,EAAKlO,KAAKuK,UAAUS,EAAI7H,GAC9B8K,EAAI9L,KAAK8H,GAAqB,IAALiE,IAAc,IACvCrN,IACIA,EAAImN,IACNC,EAAI9L,KAAK8H,EAAoB,GAALiE,IACxBrN,IAEJ,CACA,OAAOoN,EAAI5B,KAAK,GAClB,CAGA,oBAAI8B,GACF,IACGnO,KAAK+K,sBACL/K,KAAK+M,kBACN/M,KAAKyK,SAAWzK,KAAKoO,WACrB,CACA,MAAMC,EAAKrO,KAAKuL,wBAA0B,IAAM,IAC1C+C,EAAKtO,KAAKgN,4BAA8B,IAAM,IACpD,IAAIuB,EAAK,IACLC,EAAK,IACLxO,KAAKiN,WACPsB,EAAK,IACLC,EAAK,KACIxO,KAAKkN,YACdqB,EAAK,IACLC,EAAK,KAGP,MAAMC,EAAM,GAaZ,OAZczO,KAAK0O,gBACP,GACVD,EAAI,GAAKJ,EACTI,EAAI,GAAKF,EACTE,EAAI,GAAKH,EACTG,EAAI,GAAKD,IAETC,EAAI,GAAKJ,EACTI,EAAI,GAAKF,EACTE,EAAI,GAAKH,EACTG,EAAI,GAAKD,GAEJC,EAAIpC,KAAK,GAClB,CAEF,CAEA,aAAIxB,GACF,OAAO,EAAA7K,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,WAAI4H,GACF,OAAO,EAAA7N,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,cAAIoF,GACF,OAAO,EAAArL,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,cAAImI,GACF,OAAO,EAAApO,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,YAAI0I,GACF,OAAO,EAAA3O,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,mBAAIyI,GACF,OAAO,EAAA1O,KAAI,OAAWyE,SAASzE,KAAKqC,MAAM4D,MAAQ,IAAI,EACxD,CAEA,MAAA2I,GACE,MAAMC,EAA4B,CAAC,EACnC,IAAK,MAAM9J,KAAK+J,OAAOC,KAAK/O,MACtB+E,EAAEiK,WAAW,MAAc,UAANjK,IAIzB8J,EAAK9J,GAAK/E,KAAK+E,IAGjB,OAAO8J,CACT,E,wBAGF,SAASI,EAAeC,EAAwBC,GAC9C,MAAMC,EAAON,OAAOO,yBAAyBH,EAAKI,UAAWH,GAC7D,IAAKC,EACH,MAAM,IAAI3L,MAAM,iCAGlB,MAAM8L,EAASH,EAAKtJ,IACpB,IAAKyJ,EACH,MAAM,IAAI9L,MAAM,uBAElBqL,OAAOU,eAAeN,EAAKI,UAAWH,EAAM,CAC1C,GAAArJ,GACE,MAAM2J,EAAMF,EAAOG,KAAK1P,MAExB,OADA8O,OAAOU,eAAexP,KAAMmP,EAAM,CAAEhD,MAAOsD,IACpCA,CACT,GAEJ,CEvdO,SAASE,EAAgBC,GAC9B,MAAMC,EAAQD,EAAK1F,MAAM,SACnB2E,EAAkE,GACxE,IAAK,MAAMiB,KAAQD,EAAO,CACxB,MAAOjE,KAAQmE,GAAUD,EAAK5F,MAAM,MAChC0B,GACFiD,EAAK1M,KAAK,CACRyJ,IAAKA,EAAIoE,MAAM,GACfnB,KAAMkB,EAAOpJ,IAAIsJ,IACf,MAAMC,EAAID,EAAEE,QAAQ,KAGpB,MAAO,CAAEvE,IAFQqE,EAAED,MAAM,EAAGE,GAEJ/D,MADV8D,EAAED,MAAME,EAAI,OAKlC,CACA,OAAOrB,CACT,CFucAI,EAAY7E,EAAW,QACvB6E,EAAY7E,EAAW,kBACvB6E,EAAY7E,EAAW,OACvB6E,EAAY7E,EAAW,QG7chB,MAAMgG,EAAY,SAIV,MAAMC,EAWnB,WAAA3Q,EAAY,cACV4Q,EAAa,QACbC,EAAO,OACPC,EAAM,QACNC,EAAO,cACPC,EAAa,OACbC,EAAM,QACNC,EAAO,cACPC,EAAa,OACbC,EAAM,OACNC,EAAM,gBACNC,EAAkB,IAAG,cACrBC,EAAgBvQ,GAAKA,IAiBrB,GAhCK,KAAAqQ,QAAS,EA8Bd/Q,KAAKS,aAAewQ,EAEhBX,EACFtQ,KAAKkR,IAAMZ,OACN,GAAIC,EACTvQ,KAAKkR,IAAM,IAAI,KAAUX,QACpB,GAAIC,EACTxQ,KAAKkR,IAAM,IAAI,IAAWV,OACrB,KAAIO,EAIT,MAAM,IAAItN,MAAM,4BAHhBzD,KAAK+Q,QAAS,EACd/Q,KAAKkR,IAAM,IAAIrH,CAGjB,CACA,GAAIgH,EACF7Q,KAAKT,MAAQ,IAAI4I,EAAI,CAAE3H,WAAYqQ,SAC9B,GAAID,EACT5Q,KAAKT,MAAQ,IAAI4I,EAAI,CAAE3H,WAAY,IAAI,KAAUoQ,UAC5C,GAAIE,EACT9Q,KAAKT,MAAQ,IAAI4I,EAAI,CAAE3H,WAAY,IAAI,IAAWsQ,UAC7C,GAAIJ,EACT1Q,KAAKT,MAAQ,IAAImE,EAAI,CAAElD,WAAYkQ,SAC9B,GAAID,EACTzQ,KAAKT,MAAQ,IAAImE,EAAI,CAAElD,WAAY,IAAI,KAAUiQ,UAC5C,GAAIE,EACT3Q,KAAKT,MAAQ,IAAImE,EAAI,CAAElD,WAAY,IAAI,IAAWmQ,UAC7C,GAAIJ,EACTvQ,KAAKT,MAAQ,IAAImE,EAAI,CAAElD,WAAY,IAAI,KAAU,GAAG+P,gBAC/C,GAAIC,EACTxQ,KAAKT,MAAQ,IAAImE,EAAI,CAAElD,WAAY,IAAI,IAAW,GAAGgQ,eAChD,KAAIO,EAGT,MAAM,IAAItN,MAAM,gCAFhBzD,KAAK+Q,QAAS,CAGhB,CACA/Q,KAAKgR,gBAAkBA,CACzB,CAEA,kBAAMG,CAAaC,GACjB,MAAMxN,ER7BH,SAAkByN,EAA8B,CAAC,GACtD,MAAO,YAAaA,EAAO,CAAEC,OAAQD,GAAqBA,CAC5D,CQ2BiBE,CAASH,GACtB,IAAKpR,KAAKT,MACR,OAEF,MAAMsE,QAAkB7D,KAAKT,MAAMuE,MAAMF,GACnC6L,EAAM5L,EAAUpB,cAClBoB,EAAUpB,cAAcnC,cAAgB,WACxCD,EACJ,IAAIiE,EACJ,GAAImL,EAAK,CACP,MAAM5M,EAAI4M,EAzFC,MA0FXnL,QAAetE,KAAKkR,IAAIpH,KAAKjH,EAAG,EAClC,MACEyB,QAAetE,KAAKkR,IAAI/M,SAASP,GAGnC,MAAM4N,QAAc,QAAMlN,GACpBF,EAAW,IAAIC,SAASmN,EAAMlN,QAEpC,GAAIF,EAASK,SAAS,GAAG,KAAU2L,EACjC,MAAM,IAAI3M,MAAM,kBAElB,MAAMgO,EAAUrN,EAASK,SAAS,GAAG,GAE/BiN,EAAU,IAAIC,YAAY,QAChC3R,KAAK6H,OAAS6J,EAAQE,OAAOJ,EAAMvI,SAAS,EAAG,EAAIwI,IACnD,MAAM,WAAEI,EAAU,WAAEC,SAAqB9R,KAAK+R,aAC5CN,EAAU,EACV,MACA7N,GAKF,OAHA5D,KAAK6R,WAAaA,EAClB7R,KAAK8R,WAAaA,EAEXnC,EAAgB3P,KAAK6H,OAC9B,CAEA,SAAAmK,CAAUpO,GAOR,OANK5D,KAAKiS,UACRjS,KAAKiS,QAAUjS,KAAKmR,aAAavN,GAAM+D,MAAOtB,IAE5C,MADArG,KAAKiS,aAAU5R,EACTgG,KAGHrG,KAAKiS,OACd,CAEA,mBAAMC,CAActO,EAAiB,CAAC,GAEpC,aADM5D,KAAKgS,UAAUpO,GACd5D,KAAK6H,MACd,CAIA,kBAAMkK,CACJ9L,EACAkM,EACAvO,GAKA,GAAIqC,EAAQkM,EACV,OAAOnS,KAAK+R,aAAa9L,EAAqB,EAAdkM,EAAiBvO,GAGnD,MAAMU,QAAetE,KAAKkR,IAAIpH,KAAKqI,EAAa,EAAGvO,GAC7C4N,QAAc,QAAMlN,GACpBF,EAAW,IAAIC,SAASmN,EAAMlN,QAC9B8N,EAAOhO,EAASK,SAASwB,GAAO,GACtC,IAAI+E,EAAI/E,EAAQ,EAChB,MAAM4L,EAAqC,CAAC,EACtCC,EAAoD,GACpDJ,EAAU,IAAIC,YAAY,QAChC,IAAK,IAAI9Q,EAAI,EAAGA,EAAIuR,EAAMvR,GAAK,EAAG,CAChC,MAAMwR,EAAQjO,EAASK,SAASuG,GAAG,GAC7B9H,EAAUlD,KAAKS,aACnBiR,EAAQE,OAAOJ,EAAMvI,SAAS+B,EAAI,EAAGA,EAAI,EAAIqH,EAAQ,KAEjDC,EAAOlO,EAASK,SAASuG,EAAIqH,EAAQ,GAAG,GAM9C,GAJAR,EAAW3O,GAAWrC,EACtBiR,EAAW3P,KAAK,CAAEe,UAAS1D,OAAQ8S,IAEnCtH,EAAIA,EAAI,EAAIqH,EACRrH,EAAIwG,EAAMhS,OAIZ,OAHA8M,QAAQoB,KACN,wCAAwCyE,YAEnCnS,KAAK+R,aAAa9L,EAAqB,EAAdkM,EAAiBvO,EAErD,CACA,MAAO,CAAEiO,aAAYC,aACvB,CAEA,wBAAMS,CACJC,EACA1L,EACAC,EACAnD,GAEA,ORhCG6O,eAA4BC,GACjC,IAAIC,EAAW,GACf,UAAW,MAAMC,KAAKF,EACpBC,EAAMA,EAAIE,OAAOD,GAEnB,OAAOD,CACT,CQ0BWG,CAAU9S,KAAK+S,sBAAsBP,EAAK1L,EAAKC,EAAKnD,GAC7D,CAEA,2BAAOmP,CACLP,EACA1L,EACAC,EACAnD,SAEM5D,KAAKgS,UAAUpO,GACrB,MAAMoP,EAAQhT,KAAK6R,aAAaW,GAChC,QAAcnS,IAAV2S,GAAwBhT,KAAKT,MAE1B,CACL,MAAMkC,QAAezB,KAAKT,MAAMsH,eAAemM,EAAOlM,EAAM,EAAGC,EAAKnD,SAC7D5D,KAAKiT,oBAAoBxR,EAAQuR,EAAOlM,EAAKC,EAAKnD,EAC3D,WAJQ,EAKV,CAEA,yBAAOqP,CACLxR,EACAuR,EACAlM,EACAC,EACAnD,EAAgB,CAAC,GAEjB,MAAM,YAAEsP,GAAgBtP,EAClBuP,EAAQ,GACd,IAAIC,GAAO,EAEX,IAAK,MAAMlR,KAAST,EAAQ,CAC1B,MAAM,KAAEoN,EAAI,WAAEwE,EAAU,WAAEC,SAAqBtT,KAAKuT,WAAW,CAC7DrR,QACA0B,SAEI4P,QAAgBxT,KAAKyT,gBACzB5E,EACAwE,EACAC,EACApR,GAGIwR,EAAO,GACb,IAAK,MAAMC,KAAWH,EACpB,GAAIG,EAAQlJ,SAAWuI,EAAO,CAC5B,GAAIW,EAAQ1N,OAASc,EAAK,CAExBqM,GAAO,EACP,KACF,CAAWO,EAAQzN,KAAOY,GAExB4M,EAAKvR,KAAKwR,EAEd,CAIF,GAFAR,EAAMhR,KAAKuR,SACLA,EACFN,EACF,KAEJ,ER7OG,SAA0B9B,GAC/B,GAAKA,GAIDA,EAAOsC,QAAS,CAElB,GAA4B,oBAAjBC,aAA8B,CACvC,MAAMxN,EAAI,IAAI5C,MAAM,WAGpB,MADA4C,EAAEyN,KAAO,cACHzN,CACR,CACE,MAAM,IAAIwN,aAAa,UAAW,aAEtC,CACF,EQ+NIE,CAAiBnQ,EAAK0N,QAClB4B,UACIlT,KAAKgU,WAAWhB,EAAOG,EAAOvP,GAExC,CAEA,gBAAMoQ,CAAWhB,EAAeG,EAAuBvP,GACrD,MAAM,cAAEqQ,EAAa,cAAEC,EAAgB,KAAWtQ,EAC5CuQ,EAAwC,CAAC,EACzCC,EAAkC,CAAC,EACzCjB,EAAMxM,IAAI8I,IACR,MAAM4E,EAAoC,CAAC,EAC3C,IAAK,MAAMC,KAAW7E,EAAK,CACzB,MAAMjE,EAAO8I,EAAQ9I,KACfb,EAAK2J,EAAQ3J,GACd0J,EAAU7I,KACb6I,EAAU7I,GAAQ,GAEpB6I,EAAU7I,KACV4I,EAAQzJ,GAAM,CAChB,CACA,IAAK,MAAO5F,EAAGY,KAAMmJ,OAAOyF,QAAQF,GACxB,IAAN1O,IACFwO,EAAapP,IAAK,KAKxB,MAAMyP,EAAmC,GACzCrB,EAAMxM,IAAI8I,IACR,IAAK,MAAMQ,KAAKR,EAAK,CACnB,MAAMjE,EAAOyE,EAAEzE,KACTvF,EAAQgK,EAAEhK,MACVwO,EAAQxE,EAAEtB,SACV+F,EAAQzE,EAAE7B,WAEdpO,KAAKT,OACL4U,EAAa3I,KACZyI,GACES,IAAU1B,GAASzL,KAAKoN,IAAI1O,EAAQwO,GAASP,IAEhDM,EAAarS,KACXnC,KAAKT,MAAMsH,eAAe6N,EAAOD,EAAOA,EAAQ,EAAG7Q,GAGzD,IAKF,MAAM+C,EAAM,IAAIiO,IACVC,QAAY3T,QAAQ4T,IAAIN,GAC9B,IAAK,MAAMO,KAAKF,EAAIG,OACbrO,EAAIpB,IAAIwP,EAAE9U,aACb0G,EAAId,IAAIkP,EAAE9U,WAAY8U,GAwB1B,aApB+B7T,QAAQ4T,IACrC,IAAInO,EAAIsO,UAAUtO,IAAI8L,MAAMhJ,IAC1B,MAAM,KAAEoF,EAAI,WAAEwE,EAAU,WAAEC,EAAU,MAAEpR,SAAgBlC,KAAKuT,WAAW,CACpErR,MAAOuH,EACP7F,SAEIsR,EAAW,GACjB,IAAK,MAAMvB,WAAiB3T,KAAKyT,gBAC/B5E,EACAwE,EACAC,EACApR,GAEIiS,EAAaR,EAAQnI,QAAU4I,EAAQT,EAAQhJ,KACjDuK,EAAS/S,KAAKwR,GAGlB,OAAOuB,MAGaF,MAC1B,CAEA,gBAAMzB,EAAW,MAAErR,EAAK,KAAE0B,IACxB,MAAMqK,QAAYjO,KAAKkR,IAAIpH,KACzB5H,EAAMhC,cACNgC,EAAMvC,KAAKW,cACXsD,IAIAU,OAAQuK,EAAI,WACZwE,EAAU,WACVC,SACQ,QAAgBrF,EAAK/L,GAC/B,MAAO,CAAE2M,OAAMwE,aAAYC,aAAYpR,QACzC,CAEA,qBAAMuR,CACJzM,EACAqM,EACAC,EACApR,GAEA,IAAIiT,EAAa,EACjB,MAAMC,EAAO,GACb,IAAIC,EAAM,EACNC,GAAQC,KAAKC,MAEjB,MAAMpR,EAAW,IAAIC,SAAS2C,EAAG1C,QACjC,KAAO6Q,EAAa,EAAInO,EAAGxH,QAAQ,CACjC,MACMmM,EAAWwJ,EAAa,EADZ/Q,EAASK,SAAS0Q,GAAY,GACF,EAI9C,GAAI7B,EAAY,CACd,KAAO6B,EAAajT,EAAMvC,KAAKsC,cAAgBqR,EAAW+B,OAC1DA,GACF,CAGA,GAAI1J,EAAW3E,EAAGxH,OAAQ,CACxB,MAAMmU,EAAU,IAAI,EAAW,CAC7BtR,MAAO,CACLkI,UAAWvD,EACXf,MAAOkP,EACPjP,IAAKyF,GAsBPrB,WACE+I,EAAW7T,OAAS,EACG,IAAnB6T,EAAWgC,IACVF,EAAa7B,EAAW+B,IACzBnT,EAAMvC,KAAKsC,aACX,GAIA,EAAAwT,EAAA,GAAMzO,EAAGiC,SAASkM,EAAYxJ,MAAe,IAGrDyJ,EAAKjT,KAAKwR,GACN3T,KAAKgR,kBAAoBuE,KAAKC,MAAQF,EAAOtV,KAAKgR,wBAC9ChQ,EAAQ,GACdsU,GAAQC,KAAKC,MAEjB,CAEAL,EAAaxJ,EAAW,CAC1B,CACA,OAAOyJ,CACT,CAEA,eAAMxN,CAAU8N,GACd,MAAM1P,EAAQhG,KAAK6R,aAAa6D,GAChC,YAAiBrV,IAAV2F,GAA8BhG,KAAKT,OAAOqI,UAAU5B,EAC7D,CAEA,eAAMzD,CAAUmT,GACd,MAAM1P,EAAQhG,KAAK6R,aAAa6D,GAChC,YAAiBrV,IAAV2F,GAAwBhG,KAAKT,MAAYS,KAAKT,MAAMgD,UAAUyD,GAAzB,CAC9C,CAEA,cAAMD,CAAS2P,EAAiBzP,EAAgBC,GAC9C,IAAKlG,KAAKT,MACR,MAAO,SAEHS,KAAKT,MAAMuE,QACjB,MAAMkC,EAAQhG,KAAK6R,aAAa6D,GAChC,YAAiBrV,IAAV2F,EAAsB,GAAKhG,KAAKT,MAAMwG,SAASC,EAAOC,EAAOC,EACtE,CAEA,oBAAMW,CACJ6O,EACAzP,EACAC,EACAtC,GAEA,IAAK5D,KAAKT,MACR,MAAO,SAEHS,KAAKT,MAAMuE,QACjB,MAAMkC,EAAQhG,KAAK6R,aAAa6D,GAChC,YAAiBrV,IAAV2F,EACH,GACAhG,KAAKT,MAAMsH,eAAeb,EAAOC,EAAOC,EAAKtC,EACnD,ECjcF6O,eAAeI,EAAO8C,EAAoB/R,GACxC,MAAMiR,QAAY3T,QAAQ4T,IACxBa,EAAIhP,IAAI8L,MAAMvQ,IACZ,MAAM,IAAE0T,EAAG,QAAEC,GAAY3T,EACzB,GAAI0T,EAAI5G,WAAW,SAAU,CAG3B,MAAM6F,QAAYiB,MAAMF,GACxB,IAAKf,EAAIkB,GACP,MAAM,IAAItS,MAAM,2BAElB,MAAMgM,QAAYoF,EAAImB,cACtB,OAAO,IAAIC,WAAWxG,EACxB,CAAO,CAIL,MAAM,QAAEyG,KAAYC,GAASN,EACvBhB,QAAYiB,MAAMF,EAAK,IACxBhS,EACHiS,QAAS,IAAKjS,GAAMiS,WAAYM,KAElC,IAAKtB,EAAIkB,GACP,MAAM,IAAItS,MACR,QAAQoR,EAAIuB,mBAAmBR,YAAcf,EAAIjF,UAGrD,OAAO,IAAIqG,iBAAiBpB,EAAImB,cAClC,KAIJ,OT6GK,SAA0B3L,GAC/B,MAAMgM,EAAc,IAAIJ,WARnB,SAAaK,GAClB,IAAIC,EAAM,EACV,IAAK,MAAMC,KAASF,EAClBC,GAAOC,EAAMhX,OAEf,OAAO+W,CACT,CAEqCA,CAAIlM,IACvC,IAAI/H,EAAS,EACb,IAAK,MAAMkU,KAASnM,EAClBgM,EAAYxQ,IAAI2Q,EAAOlU,GACvBA,GAAUkU,EAAMhX,OAElB,OAAO6W,CACT,CSrHSI,OAAuBvV,QAAQ4T,IAAID,EAAIlO,IAAI+P,IAAO,QAAMA,KACjE,CAEe,MAAMC,UAAmBtG,EAKtC,WAAA3Q,CAAY2K,GACVuM,MAAM,CAAE7F,QAAQ,IAChB/Q,KAAK6W,QAAUxM,EAAKwM,QACpB7W,KAAK8W,QAAUzM,EAAKyM,OACtB,CAEA,2BAAO/D,CACLP,EACA1L,EACAC,EACAnD,GAEA,MACMgS,EAAM,GADI5V,KAAK6W,WAAW7W,KAAK8W,yBACAtE,WAAa1L,SAAWC,eACvDiM,EAAQhT,KAAK6R,aAAaW,GAChC,QAAcnS,IAAV2S,OACI,OACD,CACL,MAAMxN,QAAesQ,MAAMF,EAAK,IAAKhS,IACrC,IAAK4B,EAAOuQ,GACV,MAAM,IAAItS,MACR,QAAQ+B,EAAO4Q,mBAAmBR,YAAcpQ,EAAOoK,UAG3D,MAAMf,QAAarJ,EAAOuR,OACpBvF,QAAcqB,EAAOhE,EAAKkC,OAAOiG,KAAKhH,MAAM,GAAIpM,SAE/C5D,KAAKiT,oBACV,CAEE,CACE3O,OAAQkN,EACR1R,kBAAcO,EACdR,IAAK,EACLM,UAAS,IACA,EAETJ,eAAc,IACL,GAAGyS,KAAO1L,KAAOC,IAE1B7G,YAAW,IACF,EAETP,KAAM,CACJsC,aAAc,EACd3B,cAAe,EACfH,UAAW,IAAM,GAEnBP,KAAM,CACJqC,aAAcgV,OAAOC,iBACrB5W,cAAe,EACfH,UAAW,IAAM,GAEnBF,SAAQ,IACC,GAAGuS,KAAO1L,KAAOC,MAI9BiM,EACAlM,EACAC,EACAnD,EAEJ,CACF,CAGA,gBAAM2P,EAAW,MAAErR,IACjB,IAAKA,EAAMoC,OACT,MAAM,IAAIb,MAAM,mCAElB,MAAO,CACLoL,KAAM3M,EAAMoC,OACZ+O,WAAY,GACZC,WAAY,GACZpR,QAEJ,CAEA,eAAM8P,CAAUpO,EAAiB,CAAC,GAChC,MAAMgS,EAAM,GAAG5V,KAAK6W,WAAW7W,KAAK8W,wCAC9BtR,QAAesQ,MAAMF,EAAKhS,GAChC,IAAK4B,EAAOuQ,GACV,MAAM,IAAItS,MACR,QAAQ+B,EAAO4Q,mBAAmBR,YAAcpQ,EAAOoK,UAG3D,MAAMf,QAAarJ,EAAOuR,OACpBvF,QAAcqB,EAAOhE,EAAKkC,OAAOiG,KAAMpT,GACvCQ,EAAW,IAAIC,SAASmN,EAAMlN,QAEpC,GAAIF,EAASK,SAAS,GAAG,KAAU2L,EACjC,MAAM,IAAI3M,MAAM,kBAElB,MAAMgO,EAAUrN,EAASK,SAAS,GAAG,GAI/B0S,EAAYxH,EAFF,IAAIgC,YAAY,QACLC,OAAOJ,EAAMvI,SAAS,EAAG,EAAIwI,KAKlD2F,EAAkD,GAClDC,EAAmC,CAAC,EACpCC,EAAUH,EAAUI,OAAO7N,GAAe,OAAVA,EAAEkC,KACxC,IAAK,MAAOjI,EAAO6T,KAAWF,EAAQ/C,UAAW,CAC/C,IAAIrR,EAAU,GACV1D,EAAS,EACb,IAAK,MAAMiY,KAAQD,EAAO3I,KACP,OAAb4I,EAAK7L,IACP1I,EAAUuU,EAAKtL,MACO,OAAbsL,EAAK7L,MACdpM,GAAUiY,EAAKtL,OAGnBkL,EAASnU,GAAWS,EACpByT,EAASzT,GAAS,CAAET,UAAS1D,SAC/B,CAGA,OAFAQ,KAAK6R,WAAawF,EAClBrX,KAAK8R,WAAasF,EACXD,CACT,E","sources":["../../../node_modules/crc/mjs/calculators/crc32.js","../../../node_modules/@gmod/bam/src/chunk.ts","../../../node_modules/@gmod/bam/src/indexFile.ts","../../../node_modules/@gmod/bam/src/long.ts","../../../node_modules/@gmod/bam/src/util.ts","../../../node_modules/@gmod/bam/src/virtualOffset.ts","../../../node_modules/@gmod/bam/src/bai.ts","../../../node_modules/@gmod/bam/src/csi.ts","../../../node_modules/@gmod/bam/src/nullFilehandle.ts","../../../node_modules/@gmod/bam/src/record.ts","../../../node_modules/@gmod/bam/src/constants.ts","../../../node_modules/@gmod/bam/src/sam.ts","../../../node_modules/@gmod/bam/src/bamFile.ts","../../../node_modules/@gmod/bam/src/htsget.ts"],"sourcesContent":["// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc32 = (current, previous) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\nexport default crc32;\n","import { Offset } from './virtualOffset.ts'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public buffer?: Uint8Array\n\n  constructor(\n    public minv: Offset,\n    public maxv: Offset,\n    public bin: number,\n    public _fetchedSize?: number,\n  ) {}\n\n  toUniqueString() {\n    return `${this.minv.toString()}..${this.maxv.toString()} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import Chunk from './chunk.ts'\nimport { BaseOpts } from './util.ts'\n\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (s: string) => string\n\n  constructor({\n    filehandle,\n    renameRefSeq = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeq?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeq\n  }\n  public abstract lineCount(refId: number): Promise<number>\n  public abstract indexCov(\n    refId: number,\n    start?: number,\n    end?: number,\n  ): Promise<{ start: number; end: number; score: number }[]>\n\n  public abstract blocksForRange(\n    chrId: number,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ): Promise<Chunk[]>\n}\n","export const TWO_PWR_16_DBL = 1 << 16\nexport const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL\n\nexport function longFromBytesToUnsigned(source: Uint8Array, i = 0) {\n  const low =\n    source[i]! |\n    (source[i + 1]! << 8) |\n    (source[i + 2]! << 16) |\n    (source[i + 3]! << 24)\n  const high =\n    source[i + 4]! |\n    (source[i + 5]! << 8) |\n    (source[i + 6]! << 16) |\n    (source[i + 7]! << 24)\n  return (high >>> 0) * TWO_PWR_32_DBL + (low >>> 0)\n}\n","import Chunk from './chunk.ts'\nimport { longFromBytesToUnsigned } from './long.ts'\nimport { Offset, VirtualOffset } from './virtualOffset.ts'\n\nexport function timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n *\n * Per the standard, if the signal reads as aborted, this function throws\n * either a DOMException AbortError, or a regular error with a `code` attribute\n * set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new Error('aborted')\n      // @ts-ignore\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport interface BamOpts {\n  viewAsPairs?: boolean\n  pairAcrossChr?: boolean\n  maxInsertSize?: number\n  signal?: AbortSignal\n}\n\nexport interface BaseOpts {\n  signal?: AbortSignal\n}\n\nexport function makeOpts(obj: AbortSignal | BaseOpts = {}): BaseOpts {\n  return 'aborted' in obj ? ({ signal: obj } as BaseOpts) : obj\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest?: Offset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | undefined\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort((c0, c1) => {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif === 0 ? c0.minv.dataPosition - c1.minv.dataPosition : dif\n  })\n\n  for (const chunk of chunks) {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === undefined) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  }\n\n  return mergedChunks\n}\n\nexport function parsePseudoBin(bytes: Uint8Array, offset: number) {\n  return {\n    lineCount: longFromBytesToUnsigned(bytes, offset),\n  }\n}\n\nexport function findFirstData(\n  firstDataLine: VirtualOffset | undefined,\n  virtualOffset: VirtualOffset,\n) {\n  return firstDataLine\n    ? firstDataLine.compareTo(virtualOffset) > 0\n      ? virtualOffset\n      : firstDataLine\n    : virtualOffset\n}\n\nexport function parseNameBytes(\n  namesBytes: Uint8Array,\n  renameRefSeq: (arg: string) => string = s => s,\n) {\n  let currRefId = 0\n  let currNameStart = 0\n  const refIdToName = []\n  const refNameToId: Record<string, number> = {}\n  for (let i = 0; i < namesBytes.length; i += 1) {\n    if (!namesBytes[i]) {\n      if (currNameStart < i) {\n        let refName = ''\n        for (let j = currNameStart; j < i; j++) {\n          refName += String.fromCharCode(namesBytes[j]!)\n        }\n        refName = renameRefSeq(refName)\n        refIdToName[currRefId] = refName\n        refNameToId[refName] = currRefId\n      }\n      currNameStart = i + 1\n      currRefId += 1\n    }\n  }\n  return { refNameToId, refIdToName }\n}\n\nexport function sum(array: Uint8Array[]) {\n  let sum = 0\n  for (const entry of array) {\n    sum += entry.length\n  }\n  return sum\n}\nexport function concatUint8Array(args: Uint8Array[]) {\n  const mergedArray = new Uint8Array(sum(args))\n  let offset = 0\n  for (const entry of args) {\n    mergedArray.set(entry, offset)\n    offset += entry.length\n  }\n  return mergedArray\n}\n\nexport async function gen2array<T>(gen: AsyncIterable<T[]>): Promise<T[]> {\n  let out: T[] = []\n  for await (const x of gen) {\n    out = out.concat(x)\n  }\n  return out\n}\n","export interface Offset {\n  blockPosition: number\n  dataPosition: number\n  toString(): string\n  compareTo(arg: Offset): number\n}\n\nexport class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n}\nexport function fromBytes(bytes: Uint8Array, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7]! * 0x10000000000 +\n      bytes[offset + 6]! * 0x100000000 +\n      bytes[offset + 5]! * 0x1000000 +\n      bytes[offset + 4]! * 0x10000 +\n      bytes[offset + 3]! * 0x100 +\n      bytes[offset + 2]!,\n    (bytes[offset + 1]! << 8) | bytes[offset]!,\n  )\n}\n","import QuickLRU from 'quick-lru'\n\nimport Chunk from './chunk.ts'\nimport IndexFile from './indexFile.ts'\nimport {\n  BaseOpts,\n  findFirstData,\n  optimizeChunks,\n  parsePseudoBin,\n} from './util.ts'\nimport { VirtualOffset, fromBytes } from './virtualOffset.ts'\n\nconst BAI_MAGIC = 21578050 // BAI\\1\n\nfunction roundDown(n: number, multiple: number) {\n  return n - (n % multiple)\n}\nfunction roundUp(n: number, multiple: number) {\n  return n - (n % multiple) + multiple\n}\n\nexport interface IndexCovEntry {\n  start: number\n  end: number\n  score: number\n}\n\nfunction reg2bins(beg: number, end: number) {\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ] as const\n}\n\nexport default class BAI extends IndexFile {\n  public setupP?: ReturnType<BAI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices(refId)?.stats?.lineCount || 0\n  }\n\n  async _parse(_opts?: BaseOpts) {\n    const bytes = await this.filehandle.readFile()\n    const dataView = new DataView(bytes.buffer)\n\n    // check BAI magic numbers\n    if (dataView.getUint32(0, true) !== BAI_MAGIC) {\n      throw new Error('Not a BAI file')\n    }\n\n    const refCount = dataView.getInt32(4, true)\n    const depth = 5\n    const binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7\n\n    // read the indexes for each reference sequence\n    let curr = 8\n    let firstDataLine: VirtualOffset | undefined\n\n    const offsets = [] as number[]\n    for (let i = 0; i < refCount; i++) {\n      offsets.push(curr)\n      const binCount = dataView.getInt32(curr, true)\n\n      curr += 4\n\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin === binLimit + 1) {\n          curr += 4\n          curr += 32\n        } else if (bin > binLimit + 1) {\n          throw new Error('bai index contains too many bins, please use CSI')\n        } else {\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          for (let k = 0; k < chunkCount; k++) {\n            curr += 8\n            curr += 8\n          }\n        }\n      }\n\n      const linearCount = dataView.getInt32(curr, true)\n      curr += 4\n      // as we're going through the linear index, figure out the smallest\n      // virtual offset in the indexes, which tells us where the BAM header\n      // ends\n      const linearIndex = new Array<VirtualOffset>(linearCount)\n      for (let j = 0; j < linearCount; j++) {\n        const offset = fromBytes(bytes, curr)\n        curr += 8\n        firstDataLine = findFirstData(firstDataLine, offset)\n        linearIndex[j] = offset\n      }\n    }\n    const indicesCache = new QuickLRU<number, ReturnType<typeof getIndices>>({\n      maxSize: 5,\n    })\n\n    function getIndices(refId: number) {\n      let curr = offsets[refId]\n      if (curr === undefined) {\n        return undefined\n      }\n      const binCount = dataView.getInt32(curr, true)\n      let stats\n\n      curr += 4\n      const binIndex: Record<number, Chunk[]> = {}\n\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin === binLimit + 1) {\n          curr += 4\n          stats = parsePseudoBin(bytes, curr + 16)\n          curr += 32\n        } else if (bin > binLimit + 1) {\n          throw new Error('bai index contains too many bins, please use CSI')\n        } else {\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k++) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      const linearCount = dataView.getInt32(curr, true)\n      curr += 4\n      // as we're going through the linear index, figure out the smallest\n      // virtual offset in the indexes, which tells us where the BAM header\n      // ends\n      const linearIndex = new Array<VirtualOffset>(linearCount)\n      for (let j = 0; j < linearCount; j++) {\n        const offset = fromBytes(bytes, curr)\n        curr += 8\n        firstDataLine = findFirstData(firstDataLine, offset)\n        linearIndex[j] = offset\n      }\n\n      return {\n        binIndex,\n        linearIndex,\n        stats,\n      }\n    }\n\n    return {\n      bai: true,\n      firstDataLine,\n      maxBlockSize: 1 << 16,\n      indices: (refId: number) => {\n        if (!indicesCache.has(refId)) {\n          const result = getIndices(refId)\n          if (result) {\n            indicesCache.set(refId, result)\n          }\n          return result\n        }\n        return indicesCache.get(refId)\n      },\n      refCount,\n    }\n  }\n\n  async indexCov(\n    seqId: number,\n    start?: number,\n    end?: number,\n    opts?: BaseOpts,\n  ): Promise<IndexCovEntry[]> {\n    const v = 16384\n    const range = start !== undefined\n    const indexData = await this.parse(opts)\n    const seqIdx = indexData.indices(seqId)\n\n    if (!seqIdx) {\n      return []\n    }\n    const { linearIndex = [], stats } = seqIdx\n    if (linearIndex.length === 0) {\n      return []\n    }\n    const e = end === undefined ? (linearIndex.length - 1) * v : roundUp(end, v)\n    const s = start === undefined ? 0 : roundDown(start, v)\n    const depths = range\n      ? new Array((e - s) / v)\n      : new Array(linearIndex.length - 1)\n    const totalSize = linearIndex[linearIndex.length - 1]!.blockPosition\n    if (e > (linearIndex.length - 1) * v) {\n      throw new Error('query outside of range of linear index')\n    }\n    let currentPos = linearIndex[s / v]!.blockPosition\n    for (let i = s / v, j = 0; i < e / v; i++, j++) {\n      depths[j] = {\n        score: linearIndex[i + 1]!.blockPosition - currentPos,\n        start: i * v,\n        end: i * v + v,\n      }\n      currentPos = linearIndex[i + 1]!.blockPosition\n    }\n    return depths.map(d => ({\n      ...d,\n      score: (d.score * (stats?.lineCount || 0)) / totalSize,\n    }))\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!indexData) {\n      return []\n    }\n    const ba = indexData.indices(refId)\n\n    if (!ba) {\n      return []\n    }\n\n    // List of bin #s that overlap min, max\n    const overlappingBins = reg2bins(min, max)\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]!\n          for (const binChunk of binChunks) {\n            chunks.push(new Chunk(binChunk.minv, binChunk.maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest: VirtualOffset | undefined\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n\n      if (vp && (!lowest || vp.compareTo(lowest) < 0)) {\n        lowest = vp\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices(seqId)?.binIndex\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport QuickLRU from 'quick-lru'\n\nimport Chunk from './chunk.ts'\nimport IndexFile from './indexFile.ts'\nimport {\n  findFirstData,\n  optimizeChunks,\n  parseNameBytes,\n  parsePseudoBin,\n} from './util.ts'\nimport { VirtualOffset, fromBytes } from './virtualOffset.ts'\n\nimport type { BaseOpts } from './util.ts'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber = 0\n  private depth = 0\n  private minShift = 0\n\n  public setupP?: ReturnType<CSI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices(refId)?.stats?.lineCount || 0\n  }\n\n  async indexCov() {\n    return []\n  }\n\n  parseAuxData(bytes: Uint8Array, offset: number) {\n    const dataView = new DataView(bytes.buffer)\n    const formatFlags = dataView.getUint32(offset, true)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = (\n      { 0: 'generic', 1: 'SAM', 2: 'VCF' } as Record<number, string>\n    )[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: dataView.getInt32(offset + 4, true),\n      start: dataView.getInt32(offset + 8, true),\n      end: dataView.getInt32(offset + 12, true),\n    }\n    const metaValue = dataView.getInt32(offset + 16, true)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : ''\n    const skipLines = dataView.getInt32(offset + 20, true)\n    const nameSectionLength = dataView.getInt32(offset + 24, true)\n\n    return {\n      columnNumbers,\n      coordinateType,\n      metaValue,\n      metaChar,\n      skipLines,\n      format,\n      formatFlags,\n      ...parseNameBytes(\n        bytes.subarray(offset + 28, offset + 28 + nameSectionLength),\n        this.renameRefSeq,\n      ),\n    }\n  }\n\n  // fetch and parse the index\n  async _parse(opts: { signal?: AbortSignal }) {\n    const buffer = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buffer)\n\n    const dataView = new DataView(bytes.buffer)\n    let csiVersion\n    const magic = dataView.getUint32(0, true)\n\n    if (magic === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (magic === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error(`Not a CSI file ${magic}`)\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = dataView.getInt32(4, true)\n    this.depth = dataView.getInt32(8, true)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxBinNumber = this.maxBinNumber\n    const auxLength = dataView.getInt32(12, true)\n    const aux = auxLength >= 30 ? this.parseAuxData(bytes, 16) : undefined\n    const refCount = dataView.getInt32(16 + auxLength, true)\n\n    // read the indexes for each reference sequence\n    let curr = 16 + auxLength + 4\n    let firstDataLine: VirtualOffset | undefined\n    const offsets = [] as number[]\n    for (let i = 0; i < refCount; i++) {\n      offsets.push(curr)\n      const binCount = dataView.getInt32(curr, true)\n      curr += 4\n      for (let j = 0; j < binCount; j++) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin > this.maxBinNumber) {\n          curr += 28 + 16\n        } else {\n          curr += 8\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n          }\n        }\n      }\n    }\n\n    const indicesCache = new QuickLRU<number, ReturnType<typeof getIndices>>({\n      maxSize: 5,\n    })\n\n    function getIndices(refId: number) {\n      let curr = offsets[refId]\n      if (curr === undefined) {\n        return undefined\n      }\n      // the binning index\n      const binCount = dataView.getInt32(curr, true)\n      curr += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let pseudoBinStats\n      for (let j = 0; j < binCount; j++) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin > maxBinNumber) {\n          pseudoBinStats = parsePseudoBin(bytes, curr + 28)\n          curr += 28 + 16\n        } else {\n          firstDataLine = findFirstData(firstDataLine, fromBytes(bytes, curr))\n          curr += 8\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return {\n        binIndex,\n        stats: pseudoBinStats,\n      }\n    }\n\n    return {\n      csiVersion,\n      firstDataLine,\n      indices: (refId: number) => {\n        if (!indicesCache.has(refId)) {\n          const result = getIndices(refId)\n          if (result) {\n            indicesCache.set(refId, result)\n          }\n          return result\n        }\n        return indicesCache.get(refId)\n      },\n      refCount,\n      csi: true,\n      maxBlockSize: 1 << 16,\n      ...aux,\n    }\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const ba = indexData.indices(refId)\n\n    if (!ba) {\n      return []\n    }\n    const overlappingBins = this.reg2bins(min, max)\n\n    if (overlappingBins.length === 0) {\n      return []\n    }\n\n    const chunks = []\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]!\n          for (const c of binChunks) {\n            chunks.push(c)\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end)\n   * (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e] as const)\n    }\n    return bins\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices(seqId)?.binIndex\n  }\n}\n","export default class NullFilehandle {\n  public read(): Promise<any> {\n    throw new Error('never called')\n  }\n  public stat(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public readFile(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public close(): Promise<any> {\n    throw new Error('never called')\n  }\n}\n","import Constants from './constants.ts'\n\nconst SEQRET_DECODER = '=ACMGRSVTWYHKDBN'.split('')\nconst CIGAR_DECODER = 'MIDNSHP=X???????'.split('')\n\ninterface Bytes {\n  start: number\n  end: number\n  byteArray: Uint8Array\n}\n\nexport default class BamRecord {\n  public fileOffset: number\n  private bytes: Bytes\n  #dataView: DataView\n\n  constructor(args: { bytes: Bytes; fileOffset: number }) {\n    this.bytes = args.bytes\n    this.fileOffset = args.fileOffset\n    this.#dataView = new DataView(this.bytes.byteArray.buffer)\n  }\n\n  get byteArray() {\n    return this.bytes.byteArray\n  }\n\n  get flags() {\n    return (\n      (this.#dataView.getInt32(this.bytes.start + 16, true) & 0xffff0000) >> 16\n    )\n  }\n  get ref_id() {\n    return this.#dataView.getInt32(this.bytes.start + 4, true)\n  }\n\n  get start() {\n    return this.#dataView.getInt32(this.bytes.start + 8, true)\n  }\n\n  get end() {\n    return this.start + this.length_on_ref\n  }\n\n  get id() {\n    return this.fileOffset\n  }\n\n  get mq() {\n    const mq = (this.bin_mq_nl & 0xff00) >> 8\n    return mq === 255 ? undefined : mq\n  }\n\n  get score() {\n    return this.mq\n  }\n\n  get qual() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const p =\n      this.b0 +\n      this.read_name_length +\n      this.num_cigar_ops * 4 +\n      this.num_seq_bytes\n    return this.byteArray.subarray(p, p + this.seq_length)\n  }\n\n  get strand() {\n    return this.isReverseComplemented() ? -1 : 1\n  }\n\n  get b0() {\n    return this.bytes.start + 36\n  }\n  get name() {\n    let str = ''\n    for (let i = 0; i < this.read_name_length - 1; i++) {\n      str += String.fromCharCode(this.byteArray[this.b0 + i]!)\n    }\n    return str\n  }\n\n  get tags() {\n    let p =\n      this.b0 +\n      this.read_name_length +\n      this.num_cigar_ops * 4 +\n      this.num_seq_bytes +\n      this.seq_length\n\n    const blockEnd = this.bytes.end\n    const tags = {} as Record<string, unknown>\n    while (p < blockEnd) {\n      const tag = String.fromCharCode(\n        this.byteArray[p]!,\n        this.byteArray[p + 1]!,\n      )\n      const type = String.fromCharCode(this.byteArray[p + 2]!)\n      p += 3\n\n      if (type === 'A') {\n        tags[tag] = String.fromCharCode(this.byteArray[p]!)\n        p += 1\n      } else if (type === 'i') {\n        tags[tag] = this.#dataView.getInt32(p, true)\n        p += 4\n      } else if (type === 'I') {\n        tags[tag] = this.#dataView.getUint32(p, true)\n        p += 4\n      } else if (type === 'c') {\n        tags[tag] = this.#dataView.getInt8(p)\n        p += 1\n      } else if (type === 'C') {\n        tags[tag] = this.#dataView.getUint8(p)\n        p += 1\n      } else if (type === 's') {\n        tags[tag] = this.#dataView.getInt16(p, true)\n        p += 2\n      } else if (type === 'S') {\n        tags[tag] = this.#dataView.getUint16(p, true)\n        p += 2\n      } else if (type === 'f') {\n        tags[tag] = this.#dataView.getFloat32(p, true)\n        p += 4\n      } else if (type === 'Z' || type === 'H') {\n        const value = []\n        while (p <= blockEnd) {\n          const cc = this.byteArray[p++]!\n          if (cc !== 0) {\n            value.push(String.fromCharCode(cc))\n          } else {\n            break\n          }\n        }\n        tags[tag] = value.join('')\n      } else if (type === 'B') {\n        const cc = this.byteArray[p++]!\n        const Btype = String.fromCharCode(cc)\n        const limit = this.#dataView.getInt32(p, true)\n        p += 4\n        if (Btype === 'i') {\n          if (tag === 'CG') {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              const cigop = this.#dataView.getInt32(p, true)\n              const lop = cigop >> 4\n              const op = CIGAR_DECODER[cigop & 0xf]!\n              value.push(lop + op)\n              p += 4\n            }\n            tags[tag] = value.join('')\n          } else {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              value.push(this.#dataView.getInt32(p, true))\n              p += 4\n            }\n            tags[tag] = value\n          }\n        } else if (Btype === 'I') {\n          if (tag === 'CG') {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              const cigop = this.#dataView.getUint32(p, true)\n              const lop = cigop >> 4\n              const op = CIGAR_DECODER[cigop & 0xf]!\n              value.push(lop + op)\n              p += 4\n            }\n            tags[tag] = value.join('')\n          } else {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              value.push(this.#dataView.getUint32(p, true))\n              p += 4\n            }\n            tags[tag] = value\n          }\n        } else if (Btype === 's') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getInt16(p, true))\n            p += 2\n          }\n          tags[tag] = value\n        } else if (Btype === 'S') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getUint16(p, true))\n            p += 2\n          }\n          tags[tag] = value\n        } else if (Btype === 'c') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getInt8(p))\n            p += 1\n          }\n          tags[tag] = value\n        } else if (Btype === 'C') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getUint8(p))\n            p += 1\n          }\n          tags[tag] = value\n        } else if (Btype === 'f') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getFloat32(p, true))\n            p += 4\n          }\n          tags[tag] = value\n        }\n      } else {\n        console.error('Unknown BAM tag type', type)\n        break\n      }\n    }\n    return tags\n  }\n\n  /**\n   * @returns {boolean} true if the read is paired, regardless of whether both\n   * segments are mapped\n   */\n  isPaired() {\n    return !!(this.flags & Constants.BAM_FPAIRED)\n  }\n\n  /** @returns {boolean} true if the read is paired, and both segments are mapped */\n  isProperlyPaired() {\n    return !!(this.flags & Constants.BAM_FPROPER_PAIR)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isSegmentUnmapped() {\n    return !!(this.flags & Constants.BAM_FUNMAP)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isMateUnmapped() {\n    return !!(this.flags & Constants.BAM_FMUNMAP)\n  }\n\n  /** @returns {boolean} true if the read is mapped to the reverse strand */\n  isReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FREVERSE)\n  }\n\n  /** @returns {boolean} true if the mate is mapped to the reverse strand */\n  isMateReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FMREVERSE)\n  }\n\n  /** @returns {boolean} true if this is read number 1 in a pair */\n  isRead1() {\n    return !!(this.flags & Constants.BAM_FREAD1)\n  }\n\n  /** @returns {boolean} true if this is read number 2 in a pair */\n  isRead2() {\n    return !!(this.flags & Constants.BAM_FREAD2)\n  }\n\n  /** @returns {boolean} true if this is a secondary alignment */\n  isSecondary() {\n    return !!(this.flags & Constants.BAM_FSECONDARY)\n  }\n\n  /** @returns {boolean} true if this read has failed QC checks */\n  isFailedQc() {\n    return !!(this.flags & Constants.BAM_FQCFAIL)\n  }\n\n  /** @returns {boolean} true if the read is an optical or PCR duplicate */\n  isDuplicate() {\n    return !!(this.flags & Constants.BAM_FDUP)\n  }\n\n  /** @returns {boolean} true if this is a supplementary alignment */\n  isSupplementary() {\n    return !!(this.flags & Constants.BAM_FSUPPLEMENTARY)\n  }\n\n  get cigarAndLength() {\n    if (this.isSegmentUnmapped()) {\n      return {\n        length_on_ref: 0,\n        CIGAR: '',\n      }\n    }\n\n    const numCigarOps = this.num_cigar_ops\n    let p = this.b0 + this.read_name_length\n    const CIGAR = []\n\n    // check for CG tag by inspecting whether the CIGAR field contains a clip\n    // that consumes entire seqLen\n    let cigop = this.#dataView.getInt32(p, true)\n    let lop = cigop >> 4\n    let op = CIGAR_DECODER[cigop & 0xf]\n    if (op === 'S' && lop === this.seq_length) {\n      // if there is a CG the second CIGAR field will be a N tag the represents\n      // the length on ref\n      p += 4\n      cigop = this.#dataView.getInt32(p, true)\n      lop = cigop >> 4\n      op = CIGAR_DECODER[cigop & 0xf]\n      if (op !== 'N') {\n        console.warn('CG tag with no N tag')\n      }\n      return {\n        CIGAR: this.tags.CG as string,\n        length_on_ref: lop,\n      }\n    } else {\n      let lref = 0\n      for (let c = 0; c < numCigarOps; ++c) {\n        cigop = this.#dataView.getInt32(p, true)\n        lop = cigop >> 4\n        op = CIGAR_DECODER[cigop & 0xf]!\n        CIGAR.push(lop + op)\n        // soft clip, hard clip, and insertion don't count toward the length on\n        // the reference\n        if (op !== 'H' && op !== 'S' && op !== 'I') {\n          lref += lop\n        }\n\n        p += 4\n      }\n\n      return {\n        CIGAR: CIGAR.join(''),\n        length_on_ref: lref,\n      }\n    }\n  }\n\n  get length_on_ref() {\n    return this.cigarAndLength.length_on_ref\n  }\n\n  get CIGAR() {\n    return this.cigarAndLength.CIGAR\n  }\n\n  get num_cigar_ops() {\n    return this.flag_nc & 0xffff\n  }\n\n  get read_name_length() {\n    return this.bin_mq_nl & 0xff\n  }\n\n  get num_seq_bytes() {\n    return (this.seq_length + 1) >> 1\n  }\n\n  get seq() {\n    const p = this.b0 + this.read_name_length + this.num_cigar_ops * 4\n    const seqBytes = this.num_seq_bytes\n    const len = this.seq_length\n    const buf = []\n    let i = 0\n    for (let j = 0; j < seqBytes; ++j) {\n      const sb = this.byteArray[p + j]!\n      buf.push(SEQRET_DECODER[(sb & 0xf0) >> 4])\n      i++\n      if (i < len) {\n        buf.push(SEQRET_DECODER[sb & 0x0f])\n        i++\n      }\n    }\n    return buf.join('')\n  }\n\n  // adapted from igv.js\n  get pair_orientation() {\n    if (\n      !this.isSegmentUnmapped() &&\n      !this.isMateUnmapped() &&\n      this.ref_id === this.next_refid\n    ) {\n      const s1 = this.isReverseComplemented() ? 'R' : 'F'\n      const s2 = this.isMateReverseComplemented() ? 'R' : 'F'\n      let o1 = ' '\n      let o2 = ' '\n      if (this.isRead1()) {\n        o1 = '1'\n        o2 = '2'\n      } else if (this.isRead2()) {\n        o1 = '2'\n        o2 = '1'\n      }\n\n      const tmp = []\n      const isize = this.template_length\n      if (isize > 0) {\n        tmp[0] = s1\n        tmp[1] = o1\n        tmp[2] = s2\n        tmp[3] = o2\n      } else {\n        tmp[2] = s1\n        tmp[3] = o1\n        tmp[0] = s2\n        tmp[1] = o2\n      }\n      return tmp.join('')\n    }\n    return undefined\n  }\n\n  get bin_mq_nl() {\n    return this.#dataView.getInt32(this.bytes.start + 12, true)\n  }\n\n  get flag_nc() {\n    return this.#dataView.getInt32(this.bytes.start + 16, true)\n  }\n\n  get seq_length() {\n    return this.#dataView.getInt32(this.bytes.start + 20, true)\n  }\n\n  get next_refid() {\n    return this.#dataView.getInt32(this.bytes.start + 24, true)\n  }\n\n  get next_pos() {\n    return this.#dataView.getInt32(this.bytes.start + 28, true)\n  }\n\n  get template_length() {\n    return this.#dataView.getInt32(this.bytes.start + 32, true)\n  }\n\n  toJSON() {\n    const data: Record<string, any> = {}\n    for (const k of Object.keys(this)) {\n      if (k.startsWith('_') || k === 'bytes') {\n        continue\n      }\n      // @ts-ignore\n      data[k] = this[k]\n    }\n\n    return data\n  }\n}\n\nfunction cacheGetter<T>(ctor: { prototype: T }, prop: keyof T): void {\n  const desc = Object.getOwnPropertyDescriptor(ctor.prototype, prop)\n  if (!desc) {\n    throw new Error('OH NO, NO PROPERTY DESCRIPTOR')\n  }\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const getter = desc.get\n  if (!getter) {\n    throw new Error('OH NO, NOT A GETTER')\n  }\n  Object.defineProperty(ctor.prototype, prop, {\n    get() {\n      const ret = getter.call(this)\n      Object.defineProperty(this, prop, { value: ret })\n      return ret\n    },\n  })\n}\n\ncacheGetter(BamRecord, 'tags')\ncacheGetter(BamRecord, 'cigarAndLength')\ncacheGetter(BamRecord, 'seq')\ncacheGetter(BamRecord, 'qual')\n","export default {\n  //  the read is paired in sequencing, no matter whether it is mapped in a pair\n  BAM_FPAIRED: 1,\n  //  the read is mapped in a proper pair\n  BAM_FPROPER_PAIR: 2,\n  //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n  BAM_FUNMAP: 4,\n  //  the mate is unmapped\n  BAM_FMUNMAP: 8,\n  //  the read is mapped to the reverse strand\n  BAM_FREVERSE: 16,\n  //  the mate is mapped to the reverse strand\n  BAM_FMREVERSE: 32,\n  //  this is read1\n  BAM_FREAD1: 64,\n  //  this is read2\n  BAM_FREAD2: 128,\n  //  not primary alignment\n  BAM_FSECONDARY: 256,\n  //  QC failure\n  BAM_FQCFAIL: 512,\n  //  optical or PCR duplicate\n  BAM_FDUP: 1024,\n  //  supplementary alignment\n  BAM_FSUPPLEMENTARY: 2048,\n}\n","export function parseHeaderText(text: string) {\n  const lines = text.split(/\\r?\\n/)\n  const data: { tag: string; data: { tag: string; value: string }[] }[] = []\n  for (const line of lines) {\n    const [tag, ...fields] = line.split(/\\t/)\n    if (tag) {\n      data.push({\n        tag: tag.slice(1),\n        data: fields.map(f => {\n          const r = f.indexOf(':')\n          const fieldTag = f.slice(0, r)\n          const value = f.slice(r + 1)\n          return { tag: fieldTag, value }\n        }),\n      })\n    }\n  }\n  return data\n}\n","import { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport crc32 from 'crc/calculators/crc32'\nimport { LocalFile, RemoteFile } from 'generic-filehandle2'\n\nimport BAI from './bai.ts'\nimport Chunk from './chunk.ts'\nimport CSI from './csi.ts'\nimport NullFilehandle from './nullFilehandle.ts'\nimport BAMFeature from './record.ts'\nimport { parseHeaderText } from './sam.ts'\nimport { checkAbortSignal, gen2array, makeOpts, timeout } from './util.ts'\n\nimport type { BamOpts, BaseOpts } from './util.ts'\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport const BAM_MAGIC = 21840194\n\nconst blockLen = 1 << 16\n\nexport default class BamFile {\n  public renameRefSeq: (a: string) => string\n  public bam: GenericFilehandle\n  public header?: string\n  public chrToIndex?: Record<string, number>\n  public indexToChr?: { refName: string; length: number }[]\n  public yieldThreadTime: number\n  public index?: BAI | CSI\n  public htsget = false\n  public headerP?: ReturnType<BamFile['getHeaderPre']>\n\n  constructor({\n    bamFilehandle,\n    bamPath,\n    bamUrl,\n    baiPath,\n    baiFilehandle,\n    baiUrl,\n    csiPath,\n    csiFilehandle,\n    csiUrl,\n    htsget,\n    yieldThreadTime = 100,\n    renameRefSeqs = n => n,\n  }: {\n    bamFilehandle?: GenericFilehandle\n    bamPath?: string\n    bamUrl?: string\n    baiPath?: string\n    baiFilehandle?: GenericFilehandle\n    baiUrl?: string\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    csiUrl?: string\n    renameRefSeqs?: (a: string) => string\n    yieldThreadTime?: number\n    htsget?: boolean\n  }) {\n    this.renameRefSeq = renameRefSeqs\n\n    if (bamFilehandle) {\n      this.bam = bamFilehandle\n    } else if (bamPath) {\n      this.bam = new LocalFile(bamPath)\n    } else if (bamUrl) {\n      this.bam = new RemoteFile(bamUrl)\n    } else if (htsget) {\n      this.htsget = true\n      this.bam = new NullFilehandle()\n    } else {\n      throw new Error('unable to initialize bam')\n    }\n    if (csiFilehandle) {\n      this.index = new CSI({ filehandle: csiFilehandle })\n    } else if (csiPath) {\n      this.index = new CSI({ filehandle: new LocalFile(csiPath) })\n    } else if (csiUrl) {\n      this.index = new CSI({ filehandle: new RemoteFile(csiUrl) })\n    } else if (baiFilehandle) {\n      this.index = new BAI({ filehandle: baiFilehandle })\n    } else if (baiPath) {\n      this.index = new BAI({ filehandle: new LocalFile(baiPath) })\n    } else if (baiUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(baiUrl) })\n    } else if (bamPath) {\n      this.index = new BAI({ filehandle: new LocalFile(`${bamPath}.bai`) })\n    } else if (bamUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(`${bamUrl}.bai`) })\n    } else if (htsget) {\n      this.htsget = true\n    } else {\n      throw new Error('unable to infer index format')\n    }\n    this.yieldThreadTime = yieldThreadTime\n  }\n\n  async getHeaderPre(origOpts?: BaseOpts) {\n    const opts = makeOpts(origOpts)\n    if (!this.index) {\n      return\n    }\n    const indexData = await this.index.parse(opts)\n    const ret = indexData.firstDataLine\n      ? indexData.firstDataLine.blockPosition + 65535\n      : undefined\n    let buffer\n    if (ret) {\n      const s = ret + blockLen\n      buffer = await this.bam.read(s, 0)\n    } else {\n      buffer = await this.bam.readFile(opts)\n    }\n\n    const uncba = await unzip(buffer)\n    const dataView = new DataView(uncba.buffer)\n\n    if (dataView.getInt32(0, true) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = dataView.getInt32(4, true)\n\n    const decoder = new TextDecoder('utf8')\n    this.header = decoder.decode(uncba.subarray(8, 8 + headLen))\n    const { chrToIndex, indexToChr } = await this._readRefSeqs(\n      headLen + 8,\n      65535,\n      opts,\n    )\n    this.chrToIndex = chrToIndex\n    this.indexToChr = indexToChr\n\n    return parseHeaderText(this.header)\n  }\n\n  getHeader(opts?: BaseOpts) {\n    if (!this.headerP) {\n      this.headerP = this.getHeaderPre(opts).catch((e: unknown) => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  async getHeaderText(opts: BaseOpts = {}) {\n    await this.getHeader(opts)\n    return this.header\n  }\n\n  // the full length of the refseq block is not given in advance so this grabs\n  // a chunk and doubles it if all refseqs haven't been processed\n  async _readRefSeqs(\n    start: number,\n    refSeqBytes: number,\n    opts?: BaseOpts,\n  ): Promise<{\n    chrToIndex: Record<string, number>\n    indexToChr: { refName: string; length: number }[]\n  }> {\n    if (start > refSeqBytes) {\n      return this._readRefSeqs(start, refSeqBytes * 2, opts)\n    }\n    // const size = refSeqBytes + blockLen <-- use this?\n    const buffer = await this.bam.read(refSeqBytes, 0, opts)\n    const uncba = await unzip(buffer)\n    const dataView = new DataView(uncba.buffer)\n    const nRef = dataView.getInt32(start, true)\n    let p = start + 4\n    const chrToIndex: Record<string, number> = {}\n    const indexToChr: { refName: string; length: number }[] = []\n    const decoder = new TextDecoder('utf8')\n    for (let i = 0; i < nRef; i += 1) {\n      const lName = dataView.getInt32(p, true)\n      const refName = this.renameRefSeq(\n        decoder.decode(uncba.subarray(p + 4, p + 4 + lName - 1)),\n      )\n      const lRef = dataView.getInt32(p + lName + 4, true)\n\n      chrToIndex[refName] = i\n      indexToChr.push({ refName, length: lRef })\n\n      p = p + 8 + lName\n      if (p > uncba.length) {\n        console.warn(\n          `BAM header is very big.  Re-fetching ${refSeqBytes} bytes.`,\n        )\n        return this._readRefSeqs(start, refSeqBytes * 2, opts)\n      }\n    }\n    return { chrToIndex, indexToChr }\n  }\n\n  async getRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    return gen2array(this.streamRecordsForRange(chr, min, max, opts))\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    await this.getHeader(opts)\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined || !this.index) {\n      yield []\n    } else {\n      const chunks = await this.index.blocksForRange(chrId, min - 1, max, opts)\n      yield* this._fetchChunkFeatures(chunks, chrId, min, max, opts)\n    }\n  }\n\n  async *_fetchChunkFeatures(\n    chunks: Chunk[],\n    chrId: number,\n    min: number,\n    max: number,\n    opts: BamOpts = {},\n  ) {\n    const { viewAsPairs } = opts\n    const feats = [] as BAMFeature[][]\n    let done = false\n\n    for (const chunk of chunks) {\n      const { data, cpositions, dpositions } = await this._readChunk({\n        chunk,\n        opts,\n      })\n      const records = await this.readBamFeatures(\n        data,\n        cpositions,\n        dpositions,\n        chunk,\n      )\n\n      const recs = [] as BAMFeature[]\n      for (const feature of records) {\n        if (feature.ref_id === chrId) {\n          if (feature.start >= max) {\n            // past end of range, can stop iterating\n            done = true\n            break\n          } else if (feature.end >= min) {\n            // must be in range\n            recs.push(feature)\n          }\n        }\n      }\n      feats.push(recs)\n      yield recs\n      if (done) {\n        break\n      }\n    }\n\n    checkAbortSignal(opts.signal)\n    if (viewAsPairs) {\n      yield this.fetchPairs(chrId, feats, opts)\n    }\n  }\n\n  async fetchPairs(chrId: number, feats: BAMFeature[][], opts: BamOpts) {\n    const { pairAcrossChr, maxInsertSize = 200000 } = opts\n    const unmatedPairs: Record<string, boolean> = {}\n    const readIds: Record<string, number> = {}\n    feats.map(ret => {\n      const readNames: Record<string, number> = {}\n      for (const element of ret) {\n        const name = element.name\n        const id = element.id\n        if (!readNames[name]) {\n          readNames[name] = 0\n        }\n        readNames[name]++\n        readIds[id] = 1\n      }\n      for (const [k, v] of Object.entries(readNames)) {\n        if (v === 1) {\n          unmatedPairs[k] = true\n        }\n      }\n    })\n\n    const matePromises: Promise<Chunk[]>[] = []\n    feats.map(ret => {\n      for (const f of ret) {\n        const name = f.name\n        const start = f.start\n        const pnext = f.next_pos\n        const rnext = f.next_refid\n        if (\n          this.index &&\n          unmatedPairs[name] &&\n          (pairAcrossChr ||\n            (rnext === chrId && Math.abs(start - pnext) < maxInsertSize))\n        ) {\n          matePromises.push(\n            this.index.blocksForRange(rnext, pnext, pnext + 1, opts),\n          )\n        }\n      }\n    })\n\n    // filter out duplicate chunks (the blocks are lists of chunks, blocks are\n    // concatenated, then filter dup chunks)\n    const map = new Map<string, Chunk>()\n    const res = await Promise.all(matePromises)\n    for (const m of res.flat()) {\n      if (!map.has(m.toString())) {\n        map.set(m.toString(), m)\n      }\n    }\n\n    const mateFeatPromises = await Promise.all(\n      [...map.values()].map(async c => {\n        const { data, cpositions, dpositions, chunk } = await this._readChunk({\n          chunk: c,\n          opts,\n        })\n        const mateRecs = [] as BAMFeature[]\n        for (const feature of await this.readBamFeatures(\n          data,\n          cpositions,\n          dpositions,\n          chunk,\n        )) {\n          if (unmatedPairs[feature.name] && !readIds[feature.id]) {\n            mateRecs.push(feature)\n          }\n        }\n        return mateRecs\n      }),\n    )\n    return mateFeatPromises.flat()\n  }\n\n  async _readChunk({ chunk, opts }: { chunk: Chunk; opts: BaseOpts }) {\n    const buf = await this.bam.read(\n      chunk.fetchedSize(),\n      chunk.minv.blockPosition,\n      opts,\n    )\n\n    const {\n      buffer: data,\n      cpositions,\n      dpositions,\n    } = await unzipChunkSlice(buf, chunk)\n    return { data, cpositions, dpositions, chunk }\n  }\n\n  async readBamFeatures(\n    ba: Uint8Array,\n    cpositions: number[],\n    dpositions: number[],\n    chunk: Chunk,\n  ) {\n    let blockStart = 0\n    const sink = [] as BAMFeature[]\n    let pos = 0\n    let last = +Date.now()\n\n    const dataView = new DataView(ba.buffer)\n    while (blockStart + 4 < ba.length) {\n      const blockSize = dataView.getInt32(blockStart, true)\n      const blockEnd = blockStart + 4 + blockSize - 1\n\n      // increment position to the current decompressed status\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (dpositions) {\n        while (blockStart + chunk.minv.dataPosition >= dpositions[pos++]!) {}\n        pos--\n      }\n\n      // only try to read the feature if we have all the bytes for it\n      if (blockEnd < ba.length) {\n        const feature = new BAMFeature({\n          bytes: {\n            byteArray: ba,\n            start: blockStart,\n            end: blockEnd,\n          },\n          // the below results in an automatically calculated file-offset based\n          // ID if the info for that is available, otherwise crc32 of the\n          // features\n          //\n          // cpositions[pos] refers to actual file offset of a bgzip block\n          // boundaries\n          //\n          // we multiply by (1 <<8) in order to make sure each block has a\n          // \"unique\" address space so that data in that block could never\n          // overlap\n          //\n          // then the blockStart-dpositions is an uncompressed file offset from\n          // that bgzip block boundary, and since the cpositions are multiplied\n          // by (1 << 8) these uncompressed offsets get a unique space\n          //\n          // this has an extra chunk.minv.dataPosition added on because it\n          // blockStart starts at 0 instead of chunk.minv.dataPosition\n          //\n          // the +1 is just to avoid any possible uniqueId 0 but this does not\n          // realistically happen\n          fileOffset:\n            cpositions.length > 0\n              ? cpositions[pos]! * (1 << 8) +\n                (blockStart - dpositions[pos]!) +\n                chunk.minv.dataPosition +\n                1\n              : // this shift >>> 0 is equivalent to crc32(b).unsigned but uses the\n                // internal calculator of crc32 to avoid accidentally importing buffer\n                // https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/define_crc.ts#L5\n                crc32(ba.subarray(blockStart, blockEnd)) >>> 0,\n        })\n\n        sink.push(feature)\n        if (this.yieldThreadTime && +Date.now() - last > this.yieldThreadTime) {\n          await timeout(1)\n          last = +Date.now()\n        }\n      }\n\n      blockStart = blockEnd + 1\n    }\n    return sink\n  }\n\n  async hasRefSeq(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? false : this.index?.hasRefSeq(seqId)\n  }\n\n  async lineCount(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined || !this.index ? 0 : this.index.lineCount(seqId)\n  }\n\n  async indexCov(seqName: string, start?: number, end?: number) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? [] : this.index.indexCov(seqId, start, end)\n  }\n\n  async blocksForRange(\n    seqName: string,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined\n      ? []\n      : this.index.blocksForRange(seqId, start, end, opts)\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\n\nimport BamFile, { BAM_MAGIC } from './bamFile.ts'\nimport Chunk from './chunk.ts'\nimport { parseHeaderText } from './sam.ts'\nimport { concatUint8Array } from './util.ts'\n\nimport type { BamOpts, BaseOpts } from './util.ts'\n\ninterface HtsgetChunk {\n  url: string\n  headers?: Record<string, string>\n}\n\nasync function concat(arr: HtsgetChunk[], opts?: Record<string, any>) {\n  const res = await Promise.all(\n    arr.map(async chunk => {\n      const { url, headers } = chunk\n      if (url.startsWith('data:')) {\n        // pass base64 data url to fetch to decode to buffer\n        // https://stackoverflow.com/a/54123275/2129219\n        const res = await fetch(url)\n        if (!res.ok) {\n          throw new Error('failed to decode base64')\n        }\n        const ret = await res.arrayBuffer()\n        return new Uint8Array(ret)\n      } else {\n        // remove referer header, it is not even allowed to be specified\n        // @ts-expect-error\n\n        const { referer, ...rest } = headers\n        const res = await fetch(url, {\n          ...opts,\n          headers: { ...opts?.headers, ...rest },\n        })\n        if (!res.ok) {\n          throw new Error(\n            `HTTP ${res.status} fetching ${url}: ${await res.text()}`,\n          )\n        }\n        return new Uint8Array(await res.arrayBuffer())\n      }\n    }),\n  )\n\n  return concatUint8Array(await Promise.all(res.map(elt => unzip(elt))))\n}\n\nexport default class HtsgetFile extends BamFile {\n  private baseUrl: string\n\n  private trackId: string\n\n  constructor(args: { trackId: string; baseUrl: string }) {\n    super({ htsget: true })\n    this.baseUrl = args.baseUrl\n    this.trackId = args.trackId\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    const base = `${this.baseUrl}/${this.trackId}`\n    const url = `${base}?referenceName=${chr}&start=${min}&end=${max}&format=BAM`\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined) {\n      yield []\n    } else {\n      const result = await fetch(url, { ...opts })\n      if (!result.ok) {\n        throw new Error(\n          `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n        )\n      }\n      const data = await result.json()\n      const uncba = await concat(data.htsget.urls.slice(1), opts)\n\n      yield* this._fetchChunkFeatures(\n        [\n          // fake stuff to pretend to be a Chunk\n          {\n            buffer: uncba,\n            _fetchedSize: undefined,\n            bin: 0,\n            compareTo() {\n              return 0\n            },\n            toUniqueString() {\n              return `${chr}_${min}_${max}`\n            },\n            fetchedSize() {\n              return 0\n            },\n            minv: {\n              dataPosition: 0,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            maxv: {\n              dataPosition: Number.MAX_SAFE_INTEGER,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            toString() {\n              return `${chr}_${min}_${max}`\n            },\n          },\n        ],\n        chrId,\n        min,\n        max,\n        opts,\n      )\n    }\n  }\n\n  // @ts-expect-error\n  async _readChunk({ chunk }: { chunk: Chunk; opts: BaseOpts }) {\n    if (!chunk.buffer) {\n      throw new Error('expected chunk.buffer in htsget')\n    }\n    return {\n      data: chunk.buffer,\n      cpositions: [],\n      dpositions: [],\n      chunk,\n    }\n  }\n\n  async getHeader(opts: BaseOpts = {}) {\n    const url = `${this.baseUrl}/${this.trackId}?referenceName=na&class=header`\n    const result = await fetch(url, opts)\n    if (!result.ok) {\n      throw new Error(\n        `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n      )\n    }\n    const data = await result.json()\n    const uncba = await concat(data.htsget.urls, opts)\n    const dataView = new DataView(uncba.buffer)\n\n    if (dataView.getInt32(0, true) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = dataView.getInt32(4, true)\n\n    const decoder = new TextDecoder('utf8')\n    const headerText = decoder.decode(uncba.subarray(8, 8 + headLen))\n    const samHeader = parseHeaderText(headerText)\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ref ID numbers and names\n    const idToName: { refName: string; length: number }[] = []\n    const nameToId: Record<string, number> = {}\n    const sqLines = samHeader.filter(l => l.tag === 'SQ')\n    for (const [refId, sqLine] of sqLines.entries()) {\n      let refName = ''\n      let length = 0\n      for (const item of sqLine.data) {\n        if (item.tag === 'SN') {\n          refName = item.value\n        } else if (item.tag === 'LN') {\n          length = +item.value\n        }\n      }\n      nameToId[refName] = refId\n      idToName[refId] = { refName, length }\n    }\n    this.chrToIndex = nameToId\n    this.indexToChr = idToName\n    return samHeader\n  }\n}\n"],"names":["TABLE","Int32Array","current","previous","crc","index","length","Chunk","constructor","minv","maxv","bin","_fetchedSize","toUniqueString","this","toString","fetchedSize","compareTo","b","undefined","blockPosition","IndexFile","filehandle","renameRefSeq","n","longFromBytesToUnsigned","source","i","low","TWO_PWR_16_DBL","timeout","ms","Promise","resolve","setTimeout","canMergeBlocks","chunk1","chunk2","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","sort","c0","c1","dif","dataPosition","chunk","push","parsePseudoBin","bytes","offset","lineCount","findFirstData","firstDataLine","virtualOffset","parseNameBytes","namesBytes","s","currRefId","currNameStart","refIdToName","refNameToId","refName","j","String","fromCharCode","VirtualOffset","fromBytes","bigendian","Error","BAI","refId","opts","indexData","parse","indices","stats","_parse","_opts","readFile","dataView","DataView","buffer","getUint32","refCount","getInt32","curr","offsets","binCount","binLimit","chunkCount","k","linearCount","linearIndex","Array","indicesCache","maxSize","bai","maxBlockSize","has","result","binIndex","u","v","getIndices","set","get","indexCov","seqId","start","end","range","seqIdx","e","roundDown","depths","totalSize","currentPos","score","map","d","blocksForRange","min","max","ba","overlappingBins","beg","binChunks","binChunk","nintv","minLin","Math","maxLin","vp","setupP","catch","hasRefSeq","header","lshift","num","bits","rshift","floor","CSI","maxBinNumber","depth","minShift","parseAuxData","formatFlags","coordinateType","format","columnNumbers","ref","metaValue","metaChar","skipLines","nameSectionLength","subarray","csiVersion","magic","auxLength","aux","pseudoBinStats","csi","reg2bins","c","l","t","bins","NullFilehandle","read","stat","close","SEQRET_DECODER","split","CIGAR_DECODER","BamRecord","args","fileOffset","byteArray","flags","ref_id","length_on_ref","id","mq","bin_mq_nl","qual","isSegmentUnmapped","p","b0","read_name_length","num_cigar_ops","num_seq_bytes","seq_length","strand","isReverseComplemented","name","str","tags","blockEnd","tag","type","getInt8","getUint8","getInt16","getUint16","getFloat32","value","cc","join","console","error","Btype","limit","cigop","lop","op","isPaired","isProperlyPaired","isMateUnmapped","isMateReverseComplemented","isRead1","isRead2","isSecondary","isFailedQc","isDuplicate","isSupplementary","cigarAndLength","CIGAR","numCigarOps","warn","CG","lref","flag_nc","seq","seqBytes","len","buf","sb","pair_orientation","next_refid","s1","s2","o1","o2","tmp","template_length","next_pos","toJSON","data","Object","keys","startsWith","cacheGetter","ctor","prop","desc","getOwnPropertyDescriptor","prototype","getter","defineProperty","ret","call","parseHeaderText","text","lines","line","fields","slice","f","r","indexOf","BAM_MAGIC","BamFile","bamFilehandle","bamPath","bamUrl","baiPath","baiFilehandle","baiUrl","csiPath","csiFilehandle","csiUrl","htsget","yieldThreadTime","renameRefSeqs","bam","getHeaderPre","origOpts","obj","signal","makeOpts","uncba","headLen","decoder","TextDecoder","decode","chrToIndex","indexToChr","_readRefSeqs","getHeader","headerP","getHeaderText","refSeqBytes","nRef","lName","lRef","getRecordsForRange","chr","async","gen","out","x","concat","gen2array","streamRecordsForRange","chrId","_fetchChunkFeatures","viewAsPairs","feats","done","cpositions","dpositions","_readChunk","records","readBamFeatures","recs","feature","aborted","DOMException","code","checkAbortSignal","fetchPairs","pairAcrossChr","maxInsertSize","unmatedPairs","readIds","readNames","element","entries","matePromises","pnext","rnext","abs","Map","res","all","m","flat","values","mateRecs","blockStart","sink","pos","last","Date","now","crc32","seqName","arr","url","headers","fetch","ok","arrayBuffer","Uint8Array","referer","rest","status","mergedArray","array","sum","entry","concatUint8Array","elt","HtsgetFile","super","baseUrl","trackId","json","urls","Number","MAX_SAFE_INTEGER","samHeader","idToName","nameToId","sqLines","filter","sqLine","item"],"sourceRoot":""}