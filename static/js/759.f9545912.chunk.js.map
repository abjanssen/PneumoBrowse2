{"version":3,"file":"static/js/759.f9545912.chunk.js","mappings":"2LAGA,SAASA,EAAgCC,GACvC,MAAMC,EAASD,EAAIE,MAAM,KACzB,MAAO,CACLC,QAASF,EAAO,GAChBG,OAAQH,EAAO,GACfI,KAAMJ,EAAO,GAAM,EACnBK,QAAQC,EAAAA,EAAAA,GAAYN,EAAO,IAE/B,CAEO,SAASO,EAAsBC,GACpC,MAAMC,GAAQC,EAAAA,EAAAA,GAAcF,GACtBG,EAAUF,EAAM,GAAIG,MAAM,GAAGX,MAAM,MACzC,MAAO,CACLU,QAASA,EAAQE,KAAIC,IAAK,CAAGC,KAAMD,MACnCE,OAAQ,CACNC,KAAMR,EAAMG,MAAM,GAAGC,KAAI,CAACK,EAAMC,KAC9B,MAAMC,EAAOF,EAAKjB,MAAM,MAClBoB,EAAMC,OAAOC,YACjBZ,EAAQE,KAAI,CAACW,EAAGC,IAAM,CAACD,GAAGE,EAAAA,EAAAA,GAASN,EAAKK,KAAOL,EAAKK,GAAKL,EAAKK,OAEhE,MAAO,CAELE,SAAUN,EAEVO,QAAS,CACPC,SAAU,MAAMV,OACbrB,EAAgCuB,EAAIS,gBACvCC,KAAMjC,EACJuB,EAAIW,kBAGT,KAIT,C,iBChCO,SAASN,EAASO,GACvB,MAAmB,iBAARA,EACFA,EAAMA,GAAQ,EACG,iBAARA,GAAmC,KAAfA,EAAIC,QACjCC,OAAOC,UAAUH,EAI5B,C,kCCfO,SAAS3B,EAAYD,GAC1B,MAAe,MAAXA,EACK,EACa,MAAXA,GACD,OAER,CAEJ,CAEO,SAASK,EAAcF,GAC5B,OAAO,IAAI6B,YAAY,QACpBC,OAAO9B,GACPP,MAAM,cACNY,KAAI0B,GAAKA,EAAEL,SACXM,QAAOD,KAAOA,GACnB,C","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/STARFusionImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/isNumber.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/util.ts"],"sourcesContent":["import { isNumber } from './isNumber'\nimport { bufferToLines, parseStrand } from './util'\n\nfunction parseSTARFusionBreakpointString(str: string) {\n  const fields = str.split(':')\n  return {\n    refName: fields[0],\n    start: +fields[1]!,\n    end: +fields[1]! + 1,\n    strand: parseStrand(fields[2]),\n  }\n}\n\nexport function parseSTARFusionBuffer(buffer: Uint8Array) {\n  const lines = bufferToLines(buffer)\n  const columns = lines[0]!.slice(1).split('\\t')\n  return {\n    columns: columns.map(c => ({ name: c })),\n    rowSet: {\n      rows: lines.slice(1).map((line, rowNumber) => {\n        const cols = line.split('\\t')\n        const row = Object.fromEntries(\n          columns.map((h, i) => [h, isNumber(cols[i]) ? +cols[i] : cols[i]!]),\n        )\n        return {\n          // what is displayed\n          cellData: row,\n          // an actual simplefeatureserialized\n          feature: {\n            uniqueId: `sf-${rowNumber}`,\n            ...parseSTARFusionBreakpointString(row.LeftBreakpoint! as string),\n            mate: parseSTARFusionBreakpointString(\n              row.RightBreakpoint! as string,\n            ),\n          },\n        }\n      }),\n    },\n  }\n}\n","/**\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nexport function isNumber(num: unknown): num is number {\n  if (typeof num === 'number') {\n    return num - num === 0\n  } else if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite(+num)\n  } else {\n    return false\n  }\n}\n","export function parseStrand(strand?: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else {\n    return undefined\n  }\n}\n\nexport function bufferToLines(buffer: Uint8Array) {\n  return new TextDecoder('utf8')\n    .decode(buffer)\n    .split(/\\n|\\r\\n|\\r/)\n    .map(f => f.trim())\n    .filter(f => !!f)\n}\n"],"names":["parseSTARFusionBreakpointString","str","fields","split","refName","start","end","strand","parseStrand","parseSTARFusionBuffer","buffer","lines","bufferToLines","columns","slice","map","c","name","rowSet","rows","line","rowNumber","cols","row","Object","fromEntries","h","i","isNumber","cellData","feature","uniqueId","LeftBreakpoint","mate","RightBreakpoint","num","trim","Number","isFinite","TextDecoder","decode","f","filter"],"sourceRoot":""}