{"version":3,"file":"static/js/5132.3464db08.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/util.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/Flags.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/Formatter.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/PairLink.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/tagInfo.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"sourcesContent":["import { getSession } from '@jbrowse/core/util'\n\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\nexport function getTag(\n  tag: string,\n  feat: {\n    tags?: Record<string, unknown>\n    [key: string]: unknown\n  },\n) {\n  return feat.tags?.[tag] || feat[tag]\n}\n\nexport async function navToLoc(locString: string, model: IAnyStateTreeNode) {\n  const session = getSession(model)\n  const { view } = model\n  try {\n    if (view) {\n      await view.navToLocString(locString)\n    } else {\n      throw new Error('No view associated with this view anymore')\n    }\n  } catch (e) {\n    console.error(e)\n    session.notify(`${e}`)\n  }\n}\n","import BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport SimpleField from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField'\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  compact: {\n    paddingRight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nexport default function AlignmentFlags(props: { flags: number }) {\n  const { classes } = useStyles()\n  const { flags } = props\n\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <SimpleField name=\"Flag\" value={flags} />\n      <FormGroup>\n        {flagNames.map((name, idx) => {\n          const val = flags & (1 << idx)\n          const key = `${name}_${val}`\n          return (\n            <FormControlLabel\n              key={key}\n              control={\n                <Checkbox\n                  className={classes.compact}\n                  checked={Boolean(val)}\n                  name={name}\n                  readOnly\n                />\n              }\n              label={name}\n            />\n          )\n        })}\n      </FormGroup>\n    </BaseCard>\n  )\n}\n","import { useState } from 'react'\n\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' used specifically as a formatter on alignments feature\n// details because long SEQ or CRAM files, even a single div full of a ton of\n// data from a long read, can slow down the rest of the app\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import { Link } from '@mui/material'\n\nimport { navToLoc } from './util'\n\nimport type { AlignmentFeatureWidgetModel } from './stateModelFactory'\n\nexport default function PairLink({\n  locString,\n  model,\n}: {\n  locString: string\n  model: AlignmentFeatureWidgetModel\n}) {\n  return (\n    <Link\n      onClick={event => {\n        event.preventDefault()\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        navToLoc(locString, model)\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n","export const tags = {\n  AM: 'The smallest template-independent mapping quality in the template',\n  AS: 'Alignment score generated by aligner',\n  BC: 'Barcode sequence identifying the sample',\n  BQ: 'Offset to base alignment quality (BAQ)',\n  BZ: 'Phred quality of the unique molecular barcode bases in the {OX} tag',\n  CB: 'Cell identifier',\n  CC: 'Reference name of the next hit',\n  CM: 'Edit distance between the color sequence and the color reference (see also {NM})',\n  CO: 'Free-text comments',\n  CP: 'Leftmost coordinate of the next hit',\n  CQ: 'Color read base qualities',\n  CR: 'Cellular barcode sequence bases (uncorrected)',\n  CS: 'Color read sequence',\n  CT: 'Complete read annotation tag, used for consensus annotation dummy features',\n  CY: 'Phred quality of the cellular barcode sequence in the {CR} tag',\n  E2: 'The 2nd most likely base calls',\n  FI: 'The index of segment in the template',\n  FS: 'Segment suffix',\n  FZ: 'Flow stopToken intensities',\n  GC: 'Reserved for backwards compatibility reasons',\n  GQ: 'Reserved for backwards compatibility reasons',\n  GS: 'Reserved for backwards compatibility reasons',\n  H0: 'Number of perfect hits',\n  H1: 'Number of 1-difference hits (see also {NM})',\n  H2: 'Number of 2-difference hits',\n  HI: 'Query hit index',\n  IH: 'Query hit total count',\n  LB: 'Library',\n  MC: 'CIGAR string for mate/next segment',\n  MD: 'String encoding mismatched and deleted reference bases',\n  MF: 'Reserved for backwards compatibility reasons',\n  MI: 'Molecular identifier; a string that uniquely identifies the molecule from which the record was derived',\n  ML: 'Base modification probabilities',\n  MM: 'Base modifications / methylation ',\n  MQ: 'Mapping quality of the mate/next segment',\n  NH: 'Number of reported alignments that contain the query in the current record',\n  NM: 'Edit distance to the reference',\n  OA: 'Original alignment',\n  OC: 'Original CIGAR (deprecated; use {OA} instead)',\n  OP: 'Original mapping position (deprecated; use {OA} instead)',\n  OQ: 'Original base quality',\n  OX: 'Original unique molecular barcode bases',\n  PG: 'Program',\n  PQ: 'Phred likelihood of the template',\n  PT: 'Read annotations for parts of the padded read sequence',\n  PU: 'Platform unit',\n  Q2: 'Phred quality of the mate/next segment sequence in the {R2} tag',\n  QT: 'Phred quality of the sample barcode sequence in the {BC} tag',\n  QX: 'Quality score of the unique molecular identifier in the {RX} tag',\n  R2: 'Sequence of the mate/next segment in the template',\n  RG: 'Read group',\n  RT: 'Reserved for backwards compatibility reasons',\n  RX: 'Sequence bases of the (possibly corrected) unique molecular identifier',\n  S2: 'Reserved for backwards compatibility reasons',\n  SA: 'Other canonical alignments in a chimeric alignment',\n  SM: 'Template-independent mapping quality',\n  SQ: 'Reserved for backwards compatibility reasons',\n  TC: 'The number of segments in the template',\n  TS: 'Transcript strand',\n  U2: 'Phred probability of the 2nd call being wrong conditional on the best being wrong',\n  UQ: 'Phred likelihood of the segment, conditional on the mapping being correct',\n}\n","import { lazy } from 'react'\n\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport Flags from './Flags'\nimport Formatter from './Formatter'\nimport PairLink from './PairLink'\nimport { tags } from './tagInfo'\nimport { getTag } from './util'\n\nimport type { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst SupplementaryAlignments = lazy(() => import('./SupplementaryAlignments'))\nconst LinkedPairedAlignments = lazy(() => import('./LinkedPairedAlignments'))\n\nconst FeatDefined = observer(function (props: {\n  feat: SimpleFeatureSerialized\n  model: AlignmentFeatureWidgetModel\n}) {\n  const { model, feat } = props\n  const flags = feat.flags as number | null\n  const SA = getTag('SA', feat) as string | undefined\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        descriptions={{ tags }}\n        feature={feat}\n        formatter={(value, key) =>\n          key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }\n      />\n\n      {SA !== undefined ? (\n        <SupplementaryAlignments model={model} tag={SA} feature={feat} />\n      ) : null}\n      {flags != null ? (\n        <>\n          {flags & 1 ? (\n            <LinkedPairedAlignments model={model} feature={feat} />\n          ) : null}\n\n          <Flags flags={flags} {...props} />\n        </>\n      ) : null}\n    </Paper>\n  )\n})\n\nconst AlignmentsFeatureDetails = observer(function (props: {\n  model: AlignmentFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = structuredClone(featureData)\n  return feat ? (\n    <FeatDefined feat={feat} {...props} />\n  ) : (\n    <div>\n      No feature loaded, may not be available after page refresh because it was\n      too large for localStorage\n    </div>\n  )\n})\n\nexport default AlignmentsFeatureDetails\n"],"names":["getTag","tag","feat","tags","async","navToLoc","locString","model","session","getSession","view","Error","navToLocString","e","console","error","notify","useStyles","makeStyles","compact","paddingRight","paddingTop","paddingBottom","flagNames","AlignmentFlags","props","classes","flags","_jsxs","BaseCard","title","children","_jsx","SimpleField","name","value","FormGroup","map","idx","val","key","FormControlLabel","control","Checkbox","className","checked","Boolean","readOnly","label","Formatter","show","setShow","useState","copied","setCopied","display","String","length","_Fragment","type","onClick","copy","setTimeout","slice","PairLink","Link","event","preventDefault","href","AM","AS","BC","BQ","BZ","CB","CC","CM","CO","CP","CQ","CR","CS","CT","CY","E2","FI","FS","FZ","GC","GQ","GS","H0","H1","H2","HI","IH","LB","MC","MD","MF","MI","ML","MM","MQ","NH","NM","OA","OC","OP","OQ","OX","PG","PQ","PT","PU","Q2","QT","QX","R2","RG","RT","RX","S2","SA","SM","SQ","TC","TS","U2","UQ","SupplementaryAlignments","lazy","LinkedPairedAlignments","FeatDefined","observer","Paper","FeatureDetails","descriptions","feature","formatter","undefined","Flags","featureData","structuredClone"],"sourceRoot":""}