{"version":3,"file":"static/js/5300.9e3732f5.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/core/ui/DataGridFlexContainer.tsx"],"sourcesContent":["import { isObject, max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  for (const elt of arr) {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  }\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n","import { isValidElement } from 'react'\n\nimport { Link } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n  formatter,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n  formatter?: (value: unknown, key: string) => React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return value != null ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={formatter ? formatter(value, name) : value} />\n    </div>\n  ) : null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\nimport { isObject } from '../../util'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  formatter,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  formatter?: (value: unknown, key: string) => React.ReactNode\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes\n        formatter={formatter}\n        attributes={value[0]}\n        prefix={[...prefix, name]}\n      />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={formatter ? formatter(value[0], name) : value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            formatter={formatter}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={formatter ? formatter(val, name) : val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport DataGridFlexContainer from '../../ui/DataGridFlexContainer'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <DataGridFlexContainer>\n          <DataGrid\n            disableRowSelectionOnClick\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            showToolbar={checked}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  width: widths[index],\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value || '')} />\n                    </div>\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </DataGridFlexContainer>\n      </div>\n    )\n  }\n  return null\n}\n","import { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isObject, isUriLocation } from '../../util'\n\nimport type { Descriptors } from '../types'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Descriptors\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const filteredFormattedAttributes = Object.entries({\n    ...rest,\n    ...__jbrowsefmt,\n  }).filter(([k, v]) => v != null && !omits.has(k))\n  const maxLabelWidth = generateMaxWidth(filteredFormattedAttributes, prefix)\n\n  return (\n    <>\n      {filteredFormattedAttributes.map(([key, value]) => {\n        const description = accessNested([...prefix, key], descriptions)\n        if (Array.isArray(value)) {\n          // check if it looks like an array of objects, which could be used\n          // in data grid\n          return value.length > 1 && value.every(val => isObject(val)) ? (\n            <DataGridDetails\n              key={key}\n              name={key}\n              prefix={prefix}\n              value={value}\n            />\n          ) : (\n            <ArrayValue\n              key={key}\n              name={key}\n              value={value}\n              formatter={formatter}\n              description={description}\n              prefix={prefix}\n            />\n          )\n        } else if (isObject(value)) {\n          const { omitSingleLevel, ...rest } = props\n          return isUriLocation(value) ? (\n            hideUris ? null : (\n              <UriAttribute\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            )\n          ) : (\n            <Attributes\n              key={key}\n              {...rest}\n              formatter={formatter}\n              attributes={value}\n              descriptions={descriptions}\n              prefix={[...prefix, key]}\n            />\n          )\n        } else {\n          return (\n            <SimpleField\n              key={key}\n              name={key}\n              formatter={formatter}\n              value={value}\n              description={description}\n              prefix={prefix}\n              width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n            />\n          )\n        }\n      })}\n    </>\n  )\n}\n","import { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  flexContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n})\n\n// https://mui.com/x/react-data-grid/layout/#flex-parent-container\nexport default function DataGridFlexContainer({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return <div className={classes.flexContainer}>{children}</div>\n}\n"],"names":["isEmpty","obj","Object","keys","length","generateTitle","name","id","type","ellipses","filter","f","join","generateMaxWidth","array","prefix","Math","ceil","max","map","key","measureText","accessNested","arr","obj2","elt","isObject","Description","undefined","useStyles","makeStyles","theme","fieldValue","wordBreak","maxHeight","fontSize","padding","spacing","overflow","BasicValue","t0","$","_c","value","classes","t1","exec","isLink","t2","t3","isValidElement","_jsx","Link","href","children","SanitizedHTML","html","JSON","stringify","String","className","field","display","flexWrap","SimpleField","description","width","formatter","_jsxs","FieldName","fieldSubvalue","border","palette","action","selected","boxSizing","ArrayValue","Attributes","attributes","every","_temp","t4","val","i","_Fragment","t5","t6","val_0","i_0","val_1","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","Symbol","for","bb0","sort","unionKeys","Set","rows","entries","k_0","add","k","colNames","has","delete","widths","e","measureGridWidth","r","size","event","target","Checkbox","onChange","Typography","variant","FormControlLabel","control","label","t8","DataGrid","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","hideFooter","columns","index","renderCell","t7","value_0","getStr","t9","t10","DataGridFlexContainer","rest","identifier","UriField","uri","baseUri","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","hideUris","omits","__jbrowsefmt","v","filteredFormattedAttributes","maxLabelWidth","Array","isArray","omitSingleLevel_0","rest_0","isUriLocation","UriAttribute","min","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","Tooltip","placement","style","flexContainer","flexDirection"],"sourceRoot":""}