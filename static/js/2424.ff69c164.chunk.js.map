{"version":3,"file":"static/js/2424.ff69c164.chunk.js","mappings":"sOAWA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAaC,IAAS,CACtCC,QAAS,CACPC,gBAAiBF,EAAMG,QAAQC,WAAWC,QAC1CC,gBAAiB,kEAAkEN,EAAMG,QAAQI,OAAOC,2BAA2BR,EAAMG,QAAQI,OAAOC,2BACxJC,SAAU,WACVC,OAAQ,EACRC,OAAQ,GACRC,MAAO,IACPC,MAAO,EACPC,cAAe,OACfC,UAAW,aAITC,GAAaC,EAAAA,EAAAA,UAAS,UAAU,MACpCC,IAIA,MAAM,MAAEC,GAAUD,EAClB,OACEE,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CACPC,QAAS,GAAGH,IACZI,SAAS,QACThB,QACEa,EAAAA,EAAAA,KAACI,EAAAA,EAAO,CAACC,MAAM,SAAQC,UACrBN,EAAAA,EAAAA,KAACO,EAAAA,EAAM,CACL,cAAY,gBACZC,QAASA,KACPV,EAAMW,UACNH,SACH,cAOX,GAEMI,GAAuBb,EAAAA,EAAAA,UAAS,UAAU,MAC9CC,EAAK,SACLQ,IAKA,MAAM,MAAEP,EAAK,eAAEY,GAAmBb,EAClC,OAAOC,GACLC,EAAAA,EAAAA,KAACJ,EAAU,CAACE,MAAOA,IACjBa,EACFb,EAAMc,0BAENZ,EAAAA,EAAAA,KAACa,EAAW,CAACf,MAAOA,EAAMQ,SAAEA,GAEhC,GAEMO,GAAchB,EAAAA,EAAAA,UAAS,UAAU,MACrCC,EAAK,SACLQ,IAKA,MAAM,MAAEQ,EAAK,QAAEjC,GAAYiB,EACrBiB,GAAOC,EAAAA,EAAAA,mBAAkBlB,GACzBmB,GAAQnB,EAAMoB,mBAAqB,GAAKH,EAAKI,SACnD,OAGEC,EAAAA,EAAAA,MAAA,OAAK,cAAa,SAASN,IAAQR,SAAA,EACjCN,EAAAA,EAAAA,KAAA,OAAKqB,MAAO,CAAEhC,SAAU,WAAY4B,QAAOX,SAAEA,IACnC,IAATW,GAAcpC,GAAUmB,EAAAA,EAAAA,KAACsB,EAAU,CAACxB,MAAOA,IAAY,OAG9D,GAEMwB,GAAazB,EAAAA,EAAAA,UAAS,UAAU,MACpCC,IAIA,MAAM,QAAEyB,GAAY7C,KACd,QAAEwB,GAAYJ,EACpB,OACEE,EAAAA,EAAAA,KAAA,OAAKwB,UAAWD,EAAQ1C,QAAQyB,UAC9BN,EAAAA,EAAAA,KAACyB,EAAAA,gBAAe,CAACvB,QAASA,KAGhC,GAEA,G,0GC1FA,MAAMwB,GAAO7B,EAAAA,EAAAA,UAAS,UAAU,MAC9BC,IAIA,MAAMiB,GAAOC,EAAAA,EAAAA,mBAAkBlB,GACzBN,EAAQmC,KAAKC,MAAMb,EAAKc,cAAcC,cACtCvC,EAASO,EAAMP,OAEfwC,GAAKC,EAAAA,EAAAA,aACRC,IACCnC,EAAMoC,OAAOD,IAGf,CAACnC,EAAON,EAAOD,IAIjB,OACES,EAAAA,EAAAA,KAAA,UACE,cAAY,aACZiC,IAAKF,EACLV,MAAO,CAAE7B,QAAOD,SAAQF,SAAU,YAClCG,MAAe,EAARA,EACPD,OAAiB,EAATA,GAGd,GAcA,GAZqCM,EAAAA,EAAAA,UAAS,UAAU,MACtDC,IAIA,OACEE,EAAAA,EAAAA,KAACU,EAAAA,EAAoB,CAACZ,MAAOA,EAAMQ,UACjCN,EAAAA,EAAAA,KAAC0B,EAAI,CAAC5B,MAAOA,KAGnB,E","sources":["../../../plugins/alignments/src/shared/components/BaseDisplayComponent.tsx","../../../plugins/alignments/src/LinearReadArcsDisplay/components/ReactComponent.tsx"],"sourcesContent":["import { LoadingEllipses } from '@jbrowse/core/ui'\nimport { getContainingView } from '@jbrowse/core/util'\nimport { BlockMsg } from '@jbrowse/plugin-linear-genome-view'\nimport { Button, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { LinearReadArcsDisplayModel } from '../../LinearReadArcsDisplay/model'\nimport type { LinearReadCloudDisplayModel } from '../../LinearReadCloudDisplay/model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  loading: {\n    backgroundColor: theme.palette.background.default,\n    backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,\n    position: 'absolute',\n    bottom: 0,\n    height: 50,\n    width: 300,\n    right: 0,\n    pointerEvents: 'none',\n    textAlign: 'center',\n  },\n}))\n\nconst BlockError = observer(function ({\n  model,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n}) {\n  const { error } = model\n  return (\n    <BlockMsg\n      message={`${error}`}\n      severity=\"error\"\n      action={\n        <Tooltip title=\"Reload\">\n          <Button\n            data-testid=\"reload_button\"\n            onClick={() => {\n              model.reload()\n            }}\n          >\n            Reload\n          </Button>\n        </Tooltip>\n      }\n    />\n  )\n})\n\nconst BaseDisplayComponent = observer(function ({\n  model,\n  children,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n  children?: React.ReactNode\n}) {\n  const { error, regionTooLarge } = model\n  return error ? (\n    <BlockError model={model} />\n  ) : regionTooLarge ? (\n    model.regionCannotBeRendered()\n  ) : (\n    <DataDisplay model={model}>{children}</DataDisplay>\n  )\n})\n\nconst DataDisplay = observer(function ({\n  model,\n  children,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n  children?: React.ReactNode\n}) {\n  const { drawn, loading } = model\n  const view = getContainingView(model) as LinearGenomeViewModel\n  const left = (model.lastDrawnOffsetPx || 0) - view.offsetPx\n  return (\n    // this data-testid is located here because changing props on the canvas\n    // itself is very sensitive to triggering ref invalidation\n    <div data-testid={`drawn-${drawn}`}>\n      <div style={{ position: 'absolute', left }}>{children}</div>\n      {left !== 0 || loading ? <LoadingBar model={model} /> : null}\n    </div>\n  )\n})\n\nconst LoadingBar = observer(function ({\n  model,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n}) {\n  const { classes } = useStyles()\n  const { message } = model\n  return (\n    <div className={classes.loading}>\n      <LoadingEllipses message={message} />\n    </div>\n  )\n})\n\nexport default BaseDisplayComponent\n","import { useCallback } from 'react'\n\nimport { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport BaseDisplayComponent from '../../shared/components/BaseDisplayComponent'\n\nimport type { LinearReadArcsDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nconst Arcs = observer(function ({\n  model,\n}: {\n  model: LinearReadArcsDisplayModel\n}) {\n  const view = getContainingView(model) as LGV\n  const width = Math.round(view.dynamicBlocks.totalWidthPx)\n  const height = model.height\n  // biome-ignore lint/correctness/useExhaustiveDependencies:\n  const cb = useCallback(\n    (ref: HTMLCanvasElement) => {\n      model.setRef(ref)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [model, width, height],\n  )\n\n  // note: the position absolute below avoids scrollbar from appearing on track\n  return (\n    <canvas\n      data-testid=\"arc-canvas\"\n      ref={cb}\n      style={{ width, height, position: 'absolute' }}\n      width={width * 2}\n      height={height * 2}\n    />\n  )\n})\n\nconst LinearReadArcsReactComponent = observer(function ({\n  model,\n}: {\n  model: LinearReadArcsDisplayModel\n}) {\n  return (\n    <BaseDisplayComponent model={model}>\n      <Arcs model={model} />\n    </BaseDisplayComponent>\n  )\n})\n\nexport default LinearReadArcsReactComponent\n"],"names":["useStyles","makeStyles","theme","loading","backgroundColor","palette","background","default","backgroundImage","action","disabledBackground","position","bottom","height","width","right","pointerEvents","textAlign","BlockError","observer","model","error","_jsx","BlockMsg","message","severity","Tooltip","title","children","Button","onClick","reload","BaseDisplayComponent","regionTooLarge","regionCannotBeRendered","DataDisplay","drawn","view","getContainingView","left","lastDrawnOffsetPx","offsetPx","_jsxs","style","LoadingBar","classes","className","LoadingEllipses","Arcs","Math","round","dynamicBlocks","totalWidthPx","cb","useCallback","ref","setRef"],"sourceRoot":""}