{"version":3,"file":"static/js/450.7e87ae20.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/getAdapter.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/selectors/SelectorTypes.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/selectors/SwapAssemblies.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/selectors/StandardFormatSelector.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/selectors/PifGzSelector.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/selectors/AnchorsSelector.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyOpenCustomTrack.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/util.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyPreConfigured.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/ImportSyntenyTrackSelectorArea.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/LeftPanel.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/LinearSyntenyImportForm.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ImportForm/doSubmit.tsx"],"sourcesContent":["import type { FileLocation } from '@jbrowse/core/util'\n\nexport function getAdapter({\n  radioOption,\n  assembly1,\n  assembly2,\n  fileLocation,\n  indexFileLocation,\n  bed1Location,\n  bed2Location,\n}: {\n  radioOption: string\n  assembly1: string\n  assembly2: string\n  fileLocation?: FileLocation\n  indexFileLocation?: FileLocation\n  bed1Location?: FileLocation\n  bed2Location?: FileLocation\n}) {\n  if (radioOption === '.paf') {\n    return {\n      type: 'PAFAdapter',\n      pafLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.out') {\n    return {\n      type: 'MashMapAdapter',\n      outLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.delta') {\n    return {\n      type: 'DeltaAdapter',\n      deltaLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.chain') {\n    return {\n      type: 'ChainAdapter',\n      chainLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.anchors') {\n    return {\n      type: 'MCScanAnchorsAdapter',\n      mcscanAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.anchors.simple') {\n    return {\n      type: 'MCScanSimpleAnchorsAdapter',\n      mcscanSimpleAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.pif.gz') {\n    return {\n      type: 'PairwiseIndexedPAFAdapter',\n      pifGzLocation: fileLocation,\n      index: {\n        location: indexFileLocation,\n      },\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else {\n    throw new Error(\n      `Unknown to detect type ${radioOption} from filename (select radio button to clarify)`,\n    )\n  }\n}\n","import type { FileLocation } from '@jbrowse/core/util/types'\n\nexport interface SelectorProps {\n  assembly1: string\n  assembly2: string\n  swap: boolean\n  setSwap?: (swap: boolean) => void\n  fileLocation: FileLocation | undefined\n  setFileLocation: (location: FileLocation | undefined) => void\n  indexFileLocation?: FileLocation | undefined\n  setIndexFileLocation?: (location: FileLocation | undefined) => void\n  bed1Location?: FileLocation | undefined\n  setBed1Location?: (location: FileLocation | undefined) => void\n  bed2Location?: FileLocation | undefined\n  setBed2Location?: (location: FileLocation | undefined) => void\n  radioOption: string\n}\n\n// Type for the FileSelector component's setLocation prop\nexport type SetLocationFunction = (location: FileLocation | undefined) => void\n\nexport type HelpStrings = Record<string, string>\n\nexport const helpStrings: HelpStrings = {\n  '.paf': 'minimap2 target.fa query.fa',\n  '.pif.gz': 'minimap2 target.fa query.fa',\n  '.out': 'mashmap target.fa query.fa',\n  '.delta': 'mummer target.fa query.fa',\n  '.chain': 'e.g. queryToTarget.chain',\n}\n","import type { ReactNode } from 'react'\n\nimport HelpIcon from '@mui/icons-material/Help'\nimport { Button, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { helpStrings } from './SelectorTypes'\n\nexport interface SwapAssembliesProps {\n  assembly1?: string\n  assembly2?: string\n  swap?: boolean\n  setSwap?: (arg: boolean) => void\n  radioOption: string\n  helpContent?: ReactNode\n  text1: string\n  text2: string\n}\n\nconst useStyles = makeStyles()({\n  row: {\n    display: 'flex',\n    gap: 20,\n  },\n  swap: {\n    display: 'grid',\n    gridTemplateColumns: '1fr 1fr',\n    gap: 4,\n    alignItems: 'center',\n  },\n})\n\nconst SwapAssemblies = observer(function ({\n  assembly1,\n  assembly2,\n  swap,\n  setSwap,\n  radioOption,\n  helpContent,\n  text1,\n  text2,\n}: SwapAssembliesProps) {\n  const { classes } = useStyles()\n  return (\n    <div>\n      <div>\n        Verify or click swap\n        <Tooltip title={helpContent || <code>{helpStrings[radioOption]}</code>}>\n          <HelpIcon />\n        </Tooltip>\n      </div>\n      <div className={classes.row}>\n        <div className={classes.swap}>\n          <div>\n            <i>{swap ? assembly2 : assembly1}</i>\n          </div>\n          <div>{text1}</div>\n          <div>\n            <i>{swap ? assembly1 : assembly2}</i>\n          </div>\n          <div>{text2}</div>\n        </div>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            if (setSwap) {\n              setSwap(!swap)\n            }\n          }}\n        >\n          Swap?\n        </Button>\n      </div>\n    </div>\n  )\n})\n\nexport default SwapAssemblies\n","import { FileSelector } from '@jbrowse/core/ui'\nimport HelpIcon from '@mui/icons-material/Help'\nimport { Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { helpStrings } from './SelectorTypes'\nimport SwapAssemblies from './SwapAssemblies'\n\nimport type { SelectorProps } from './SelectorTypes'\n\n/**\n * Component for selecting PAF, OUT, DELTA, or CHAIN format files\n */\nconst StandardFormatSelector = observer(function ({\n  assembly1,\n  assembly2,\n  swap,\n  setSwap,\n  fileLocation,\n  setFileLocation,\n  radioOption,\n}: SelectorProps) {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 10,\n      }}\n    >\n      <FileSelector\n        name={`${radioOption} location`}\n        inline\n        description=\"\"\n        location={fileLocation}\n        setLocation={setFileLocation}\n      />\n      <div>\n        <div>\n          Verify or click swap\n          <Tooltip title={<code>{helpStrings[radioOption]}</code>}>\n            <HelpIcon />\n          </Tooltip>\n        </div>\n        <SwapAssemblies\n          swap={swap}\n          radioOption={radioOption}\n          assembly1={assembly1}\n          assembly2={assembly2}\n          setSwap={setSwap}\n          text1=\"query assembly\"\n          text2=\"target assembly\"\n        />\n      </div>\n    </div>\n  )\n})\n\nexport default StandardFormatSelector\n","import { FileSelector } from '@jbrowse/core/ui'\nimport { observer } from 'mobx-react'\n\nimport SwapAssemblies from './SwapAssemblies'\n\nimport type { SelectorProps } from './SelectorTypes'\n\n/**\n * Component for selecting PIF.GZ format files and their indexes\n */\nconst PifGzSelector = observer(function ({\n  assembly1,\n  assembly2,\n  swap,\n  setSwap,\n  fileLocation,\n  setFileLocation,\n  indexFileLocation = undefined,\n  setIndexFileLocation = () => {},\n  radioOption,\n}: SelectorProps) {\n  return (\n    <div>\n      <div style={{ margin: 20 }}>\n        Open the {radioOption} and .pif.gz and index file (.pif.gz.tbi or\n        .pif.gz.csi) files for created by `jbrowse make-pif`\n      </div>\n      <div style={{ maxWidth: 400, margin: '0 auto' }}>\n        <FileSelector\n          name={`${radioOption} location`}\n          inline\n          description=\"\"\n          location={fileLocation}\n          setLocation={setFileLocation}\n        />\n        <FileSelector\n          name={`${radioOption} index location`}\n          inline\n          description=\"\"\n          location={indexFileLocation}\n          setLocation={setIndexFileLocation}\n        />\n        <SwapAssemblies\n          swap={swap}\n          radioOption={radioOption}\n          assembly1={assembly1}\n          assembly2={assembly2}\n          setSwap={setSwap}\n          text1=\"query assembly\"\n          text2=\"target assembly\"\n        />\n      </div>\n    </div>\n  )\n})\n\nexport default PifGzSelector\n","import { FileSelector } from '@jbrowse/core/ui'\nimport { observer } from 'mobx-react'\n\nimport SwapAssemblies from './SwapAssemblies'\n\nimport type { SelectorProps } from './SelectorTypes'\n\n/**\n * Component for selecting ANCHORS format files and their related BED files\n */\nconst AnchorsSelector = observer(function ({\n  assembly1,\n  assembly2,\n  swap,\n  setSwap,\n  fileLocation,\n  setFileLocation,\n  bed1Location = undefined,\n  setBed1Location = () => {},\n  bed2Location = undefined,\n  setBed2Location = () => {},\n  radioOption,\n}: SelectorProps) {\n  return (\n    <div>\n      <div style={{ margin: 20 }}>\n        Open the {radioOption} and .bed files for both genome assemblies from\n        the MCScan (Python version) pipeline{' '}\n        <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n          (more info)\n        </a>\n      </div>\n      <div style={{ maxWidth: 400, margin: '0 auto' }}>\n        <FileSelector\n          inline\n          name={radioOption}\n          location={fileLocation}\n          setLocation={setFileLocation}\n        />\n        <FileSelector\n          inline\n          name=\"genome 1 .bed (left column of anchors file)\"\n          description=\"\"\n          location={bed1Location}\n          setLocation={setBed1Location}\n        />\n        <FileSelector\n          inline\n          name=\"genome 2 .bed (right column of anchors file)\"\n          description=\"\"\n          location={bed2Location}\n          setLocation={setBed2Location}\n        />\n\n        <SwapAssemblies\n          swap={swap}\n          radioOption={radioOption}\n          assembly1={assembly1}\n          assembly2={assembly2}\n          setSwap={setSwap}\n          text1=\"bed 1 assembly\"\n          text2=\"bed 2 assembly\"\n        />\n      </div>\n    </div>\n  )\n})\n\nexport default AnchorsSelector\n","import { useEffect, useState } from 'react'\n\nimport { ErrorMessage, FileSelector } from '@jbrowse/core/ui'\nimport {\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { getAdapter } from './getAdapter'\nimport {\n  AnchorsSelector,\n  PifGzSelector,\n  StandardFormatSelector,\n} from './selectors'\nimport { basename, extName, getName, stripGz } from './util'\n\nimport type { LinearSyntenyViewModel } from '../../model'\nimport type { FileLocation } from '@jbrowse/core/util/types'\n\nconst ImportSyntenyOpenCustomTrack = observer(function ({\n  model,\n  assembly1,\n  assembly2,\n  selectedRow,\n}: {\n  model: LinearSyntenyViewModel\n  assembly1: string\n  assembly2: string\n  selectedRow: number\n}) {\n  const [swap, setSwap] = useState(false)\n  const [bed2Location, setBed2Location] = useState<FileLocation>()\n  const [bed1Location, setBed1Location] = useState<FileLocation>()\n  const [fileLocation, setFileLocation] = useState<FileLocation>()\n  const [indexFileLocation, setIndexFileLocation] = useState<FileLocation>()\n  const [value, setValue] = useState('')\n  const [error, setError] = useState<unknown>()\n  const fileName = getName(fileLocation)\n\n  const radioOption = value || (fileName ? extName(stripGz(fileName)) : '')\n\n  useEffect(() => {\n    try {\n      if (fileLocation) {\n        const fn = fileName ? basename(fileName) : 'MyTrack'\n        const trackId = `${fn}-${Date.now()}-sessionTrack`\n        setError(undefined)\n\n        model.setImportFormSyntenyTrack(selectedRow, {\n          type: 'userOpened',\n          value: {\n            trackId,\n            name: fn,\n            assemblyNames: [assembly2, assembly1],\n            type: 'SyntenyTrack',\n            adapter: getAdapter({\n              radioOption,\n              assembly1: swap ? assembly2 : assembly1,\n              assembly2: swap ? assembly1 : assembly2,\n              fileLocation,\n              indexFileLocation,\n              bed1Location,\n              bed2Location,\n            }),\n          },\n        })\n      }\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }, [\n    swap,\n    model,\n    selectedRow,\n    fileName,\n    assembly1,\n    assembly2,\n    bed1Location,\n    bed2Location,\n    fileLocation,\n    indexFileLocation,\n    radioOption,\n  ])\n  return (\n    <Paper style={{ padding: 12 }}>\n      {error ? <ErrorMessage error={error} /> : null}\n      <Typography style={{ textAlign: 'center' }}>\n        Add a .paf (minimap2), .delta (Mummer), .chain (UCSC liftover), .anchors\n        or .anchors.simple (MCScan), or .pif.gz (jbrowse CLI make-pif) file to\n        view. These file types can also be gzipped.\n      </Typography>\n      <RadioGroup\n        value={radioOption}\n        onChange={event => {\n          setValue(event.target.value)\n        }}\n      >\n        <Grid container justifyContent=\"center\">\n          {[\n            '.paf',\n            '.delta',\n            '.out',\n            '.chain',\n            '.anchors',\n            '.anchors.simple',\n            '.pif.gz',\n          ].map(extension => (\n            <FormControlLabel\n              key={extension}\n              value={extension}\n              control={<Radio />}\n              label={extension}\n            />\n          ))}\n        </Grid>\n      </RadioGroup>\n      <Grid container justifyContent=\"center\">\n        {radioOption === '.paf' ||\n        radioOption === '.out' ||\n        radioOption === '.delta' ||\n        radioOption === '.chain' ? (\n          <StandardFormatSelector\n            assembly1={assembly1}\n            assembly2={assembly2}\n            swap={swap}\n            setSwap={setSwap}\n            fileLocation={fileLocation}\n            setFileLocation={setFileLocation}\n            radioOption={radioOption}\n          />\n        ) : radioOption === '.pif.gz' ? (\n          <PifGzSelector\n            assembly1={assembly1}\n            assembly2={assembly2}\n            swap={swap}\n            setSwap={setSwap}\n            fileLocation={fileLocation}\n            setFileLocation={setFileLocation}\n            indexFileLocation={indexFileLocation}\n            setIndexFileLocation={setIndexFileLocation}\n            radioOption={radioOption}\n          />\n        ) : value === '.anchors' || value === '.anchors.simple' ? (\n          <AnchorsSelector\n            assembly1={assembly1}\n            assembly2={assembly2}\n            swap={swap}\n            setSwap={setSwap}\n            fileLocation={fileLocation}\n            setFileLocation={setFileLocation}\n            bed1Location={bed1Location}\n            setBed1Location={setBed1Location}\n            bed2Location={bed2Location}\n            setBed2Location={setBed2Location}\n            radioOption={value}\n          />\n        ) : (\n          <FileSelector\n            name={value ? `${value} location` : ''}\n            description=\"\"\n            location={fileLocation}\n            setLocation={loc => {\n              setFileLocation(loc)\n            }}\n          />\n        )}\n      </Grid>\n    </Paper>\n  )\n})\n\nexport default ImportSyntenyOpenCustomTrack\n","export function getName(\n  sessionTrackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return sessionTrackData\n    ? // @ts-expect-error\n      sessionTrackData.uri ||\n        // @ts-expect-error\n        sessionTrackData.localPath ||\n        // @ts-expect-error\n        sessionTrackData.name\n    : undefined\n}\n\nexport function stripGz(fileName: string) {\n  return fileName.endsWith('.gz') ? fileName.slice(0, -3) : fileName\n}\n\nexport function basename(str: string) {\n  return str.split('#')[0]!.split('?')[0]!.split('/').pop()\n}\n\nexport function extName(str: string) {\n  const r = str.split('.').pop()\n  return r ? `.${r}` : ''\n}\n","import { useEffect } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport { MenuItem, Paper, Select, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { LinearSyntenyViewModel } from '../../model'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst ImportSyntenyTrackSelector = observer(function ({\n  model,\n  selectedRow,\n  assembly1,\n  assembly2,\n}: {\n  model: LinearSyntenyViewModel\n  selectedRow: number\n  assembly1: string\n  assembly2: string\n}) {\n  const session = getSession(model)\n  const { importFormSyntenyTrackSelections } = model\n  const { tracks = [], sessionTracks = [] } = session\n  const allTracks = [...tracks, ...sessionTracks] as AnyConfigurationModel[]\n  const filteredTracks = allTracks.filter(track => {\n    const assemblyNames = readConfObject(track, 'assemblyNames')\n    return (\n      assemblyNames.includes(assembly1) &&\n      assemblyNames.includes(assembly2) &&\n      track.type.includes('Synteny')\n    )\n  })\n  const resetTrack = filteredTracks[0]?.trackId || ''\n  const r = importFormSyntenyTrackSelections[selectedRow]\n  const value = r?.type === 'preConfigured' ? r.value : undefined\n  useEffect(() => {\n    model.setImportFormSyntenyTrack(selectedRow, {\n      type: 'preConfigured',\n      value: resetTrack,\n    })\n  }, [assembly2, assembly1, resetTrack, selectedRow, model])\n  return (\n    <Paper style={{ padding: 12 }}>\n      <Typography>\n        Select a track from the select box below, the track will be shown when\n        you hit \"Launch\".\n      </Typography>\n\n      {value && filteredTracks.map(r => r.trackId).includes(value) ? (\n        <Select\n          value={value}\n          onChange={event => {\n            model.setImportFormSyntenyTrack(selectedRow, {\n              type: 'preConfigured',\n              value: event.target.value,\n            })\n          }}\n        >\n          {filteredTracks.map(track => (\n            <MenuItem key={track.trackId} value={track.trackId}>\n              {getTrackName(track, session)}\n            </MenuItem>\n          ))}\n        </Select>\n      ) : (\n        <ErrorMessage\n          error={`No synteny tracks found for ${assembly1},${assembly2}`}\n        />\n      )}\n    </Paper>\n  )\n})\n\nexport default ImportSyntenyTrackSelector\n","import { useEffect, useState } from 'react'\n\nimport { FormControl, FormControlLabel, Radio, RadioGroup } from '@mui/material'\n\nimport ImportCustomTrack from './ImportSyntenyOpenCustomTrack'\nimport ImportSyntenyTrackSelector from './ImportSyntenyPreConfigured'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nexport default function ImportSyntenyTrackSelectorArea({\n  model,\n  assembly1,\n  assembly2,\n  selectedRow,\n}: {\n  model: LinearSyntenyViewModel\n  assembly1: string\n  assembly2: string\n  selectedRow: number\n}) {\n  const [choice, setChoice] = useState('tracklist')\n\n  useEffect(() => {\n    if (choice === 'none') {\n      model.setImportFormSyntenyTrack(selectedRow, { type: 'none' })\n    }\n  }, [choice, model, selectedRow])\n  return (\n    <div>\n      <FormControl>\n        <RadioGroup\n          row\n          value={choice}\n          aria-labelledby=\"group-label\"\n          onChange={event => {\n            setChoice(event.target.value)\n          }}\n        >\n          <FormControlLabel value=\"none\" control={<Radio />} label=\"None\" />\n          <FormControlLabel\n            value=\"tracklist\"\n            control={<Radio />}\n            label=\"Existing track\"\n          />\n          <FormControlLabel\n            value=\"custom\"\n            control={<Radio />}\n            label=\"New track\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {choice === 'custom' ? (\n        <ImportCustomTrack\n          model={model}\n          selectedRow={selectedRow}\n          assembly2={assembly2}\n          assembly1={assembly1}\n        />\n      ) : null}\n      {choice === 'tracklist' ? (\n        <ImportSyntenyTrackSelector\n          model={model}\n          selectedRow={selectedRow}\n          assembly1={assembly1}\n          assembly2={assembly2}\n        />\n      ) : null}\n    </div>\n  )\n}\n","import { AssemblySelector } from '@jbrowse/core/ui'\nimport { getSession, notEmpty } from '@jbrowse/core/util'\nimport ArrowForwardIosIcon from '@mui/icons-material/ArrowForwardIos'\nimport CloseIcon from '@mui/icons-material/Close'\nimport { Button, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nconst useStyles = makeStyles()(theme => ({\n  mb: {\n    marginBottom: 10,\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  rel: {\n    position: 'relative',\n  },\n  synbutton: {\n    position: 'absolute',\n    top: 30,\n  },\n  bg: {\n    background: theme.palette.divider,\n  },\n}))\n\nconst AssemblyRows = observer(function ({\n  selectedRow,\n  selectedAssemblyNames,\n  setSelectedRow,\n  setSelectedAssemblyNames,\n  model,\n}: {\n  selectedRow: number\n  selectedAssemblyNames: string[]\n  setSelectedRow: (idx: number) => void\n  setSelectedAssemblyNames: (assemblies: string[]) => void\n  model: LinearSyntenyViewModel\n}) {\n  const { classes, cx } = useStyles()\n  const session = getSession(model)\n  return selectedAssemblyNames.map((assemblyName, idx) => (\n    <div key={`${assemblyName}-${idx}`} className={classes.rel}>\n      <span>Row {idx + 1}: </span>\n\n      <IconButton\n        disabled={selectedAssemblyNames.length <= 2}\n        onClick={() => {\n          model.importFormRemoveRow(idx)\n          setSelectedAssemblyNames(\n            selectedAssemblyNames\n              .map((asm, idx2) => (idx2 === idx ? undefined : asm))\n              .filter(notEmpty),\n          )\n          if (selectedRow >= selectedAssemblyNames.length - 2) {\n            setSelectedRow(0)\n          }\n        }}\n      >\n        <CloseIcon />\n      </IconButton>\n      <AssemblySelector\n        helperText=\"\"\n        selected={assemblyName}\n        onChange={newAssembly => {\n          setSelectedAssemblyNames(\n            selectedAssemblyNames.map((asm, idx2) =>\n              idx2 === idx ? newAssembly : asm,\n            ),\n          )\n        }}\n        session={session}\n      />\n      {idx !== selectedAssemblyNames.length - 1 ? (\n        <IconButton\n          data-testid=\"synbutton\"\n          className={cx(\n            classes.synbutton,\n            idx === selectedRow ? classes.bg : undefined,\n          )}\n          onClick={() => {\n            setSelectedRow(idx)\n          }}\n        >\n          <ArrowForwardIosIcon />\n        </IconButton>\n      ) : null}\n    </div>\n  ))\n})\n\nconst LeftPanel = observer(function ({\n  model,\n  selectedAssemblyNames,\n  setSelectedAssemblyNames,\n  selectedRow,\n  setSelectedRow,\n  defaultAssemblyName,\n  onLaunch,\n}: {\n  model: LinearSyntenyViewModel\n  selectedAssemblyNames: string[]\n  setSelectedAssemblyNames: (names: string[]) => void\n  selectedRow: number\n  setSelectedRow: (row: number) => void\n  defaultAssemblyName: string\n  onLaunch: () => void\n}) {\n  const { classes } = useStyles()\n\n  return (\n    <>\n      <div className={classes.mb}>\n        Select assemblies for linear synteny view\n      </div>\n      <AssemblyRows\n        model={model}\n        selectedAssemblyNames={selectedAssemblyNames}\n        setSelectedAssemblyNames={setSelectedAssemblyNames}\n        selectedRow={selectedRow}\n        setSelectedRow={setSelectedRow}\n      />\n\n      <div>\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            setSelectedAssemblyNames([\n              ...selectedAssemblyNames,\n              defaultAssemblyName,\n            ])\n          }}\n        >\n          Add row\n        </Button>\n        <Button\n          className={classes.button}\n          onClick={onLaunch}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Launch\n        </Button>\n      </div>\n    </>\n  )\n})\n\nexport default LeftPanel\n","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { Container } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ImportSyntenyTrackSelector from './ImportSyntenyTrackSelectorArea'\nimport LeftPanel from './LeftPanel'\nimport { doSubmit } from './doSubmit'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n  },\n  flex: {\n    display: 'flex',\n    gap: 90,\n  },\n  rightPanel: {\n    flexGrow: 11,\n  },\n  leftPanel: {\n    // proportionally smaller than right panel\n    flexGrow: 4,\n\n    // and don't shrink when right panel grows\n    flexShrink: 0,\n  },\n}))\n\nconst LinearSyntenyViewImportForm = observer(function ({\n  model,\n}: {\n  model: LinearSyntenyViewModel\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const defaultAssemblyName = assemblyNames[0] || ''\n  const [selectedRow, setSelectedRow] = useState(0)\n  const [selectedAssemblyNames, setSelectedAssemblyNames] = useState([\n    defaultAssemblyName,\n    defaultAssemblyName,\n  ])\n  const [error, setError] = useState<unknown>()\n\n  const handleLaunch = async () => {\n    try {\n      setError(undefined)\n      await doSubmit({\n        selectedAssemblyNames,\n        model,\n      })\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }\n\n  return (\n    <Container className={classes.importFormContainer}>\n      {error ? <ErrorMessage error={error} /> : null}\n      <div className={classes.flex}>\n        <div className={classes.leftPanel}>\n          <LeftPanel\n            model={model}\n            selectedAssemblyNames={selectedAssemblyNames}\n            setSelectedAssemblyNames={setSelectedAssemblyNames}\n            selectedRow={selectedRow}\n            setSelectedRow={setSelectedRow}\n            defaultAssemblyName={defaultAssemblyName}\n            onLaunch={() => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              handleLaunch()\n            }}\n          />\n        </div>\n\n        <div className={classes.rightPanel}>\n          <div>\n            Synteny dataset to display between row {selectedRow + 1} and{' '}\n            {selectedRow + 2}\n          </div>\n          <ImportSyntenyTrackSelector\n            model={model}\n            selectedRow={selectedRow}\n            assembly1={selectedAssemblyNames[selectedRow]!}\n            assembly2={selectedAssemblyNames[selectedRow + 1]!}\n          />\n        </div>\n      </div>\n    </Container>\n  )\n})\n\nexport default LinearSyntenyViewImportForm\n","import { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport { toJS } from 'mobx'\n\nimport type { LinearSyntenyViewModel } from '../../model'\n\nexport async function doSubmit({\n  selectedAssemblyNames,\n  model,\n}: {\n  selectedAssemblyNames: string[]\n  model: LinearSyntenyViewModel\n}) {\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const { importFormSyntenyTrackSelections } = model\n\n  model.setViews(\n    await Promise.all(\n      selectedAssemblyNames.map(async assemblyName => {\n        const asm = await assemblyManager.waitForAssembly(assemblyName)\n        if (!asm) {\n          throw new Error(`Assembly \"${assemblyName}\" failed to load`)\n        }\n        return {\n          type: 'LinearGenomeView' as const,\n          bpPerPx: 1,\n          offsetPx: 0,\n          hideHeader: true,\n          displayedRegions: asm.regions,\n        }\n      }),\n    ),\n  )\n  for (const view of model.views) {\n    view.setWidth(model.width)\n    view.showAllRegions()\n  }\n  if (!isSessionWithAddTracks(session)) {\n    session.notify(\"Can't add tracks\", 'warning')\n  } else {\n    toJS(importFormSyntenyTrackSelections).map((f, idx) => {\n      if (f.type === 'userOpened') {\n        session.addTrackConf(f.value)\n        model.toggleTrack(f.value?.trackId, idx)\n      } else if (f.type === 'preConfigured') {\n        model.showTrack(f.value, idx)\n      }\n    })\n  }\n  model.clearImportFormSyntenyTracks()\n}\n"],"names":["getAdapter","radioOption","assembly1","assembly2","fileLocation","indexFileLocation","bed1Location","bed2Location","type","pafLocation","queryAssembly","targetAssembly","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","assemblyNames","mcscanSimpleAnchorsLocation","pifGzLocation","index","location","Error","helpStrings","useStyles","makeStyles","row","display","gap","swap","gridTemplateColumns","alignItems","observer","setSwap","helpContent","text1","text2","classes","_jsxs","children","_jsx","Tooltip","title","HelpIcon","className","Button","variant","onClick","setFileLocation","style","flexDirection","FileSelector","name","inline","description","setLocation","SwapAssemblies","setIndexFileLocation","margin","maxWidth","setBed1Location","setBed2Location","href","model","selectedRow","useState","value","setValue","error","setError","fileName","sessionTrackData","uri","localPath","undefined","str","r","split","pop","extName","endsWith","slice","stripGz","useEffect","fn","trackId","Date","now","setImportFormSyntenyTrack","adapter","e","console","Paper","padding","ErrorMessage","Typography","textAlign","RadioGroup","onChange","event","target","Grid","container","justifyContent","map","extension","FormControlLabel","control","Radio","label","StandardFormatSelector","PifGzSelector","AnchorsSelector","loc","session","getSession","importFormSyntenyTrackSelections","tracks","sessionTracks","filteredTracks","filter","track","readConfObject","includes","resetTrack","Select","MenuItem","getTrackName","ImportSyntenyTrackSelectorArea","t0","$","_c","choice","setChoice","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","Symbol","for","FormControl","ImportCustomTrack","ImportSyntenyTrackSelector","theme","mb","marginBottom","button","spacing","rel","position","synbutton","top","bg","background","palette","divider","AssemblyRows","selectedAssemblyNames","setSelectedRow","setSelectedAssemblyNames","cx","assemblyName","idx","IconButton","disabled","length","importFormRemoveRow","asm","idx2","notEmpty","CloseIcon","AssemblySelector","helperText","selected","newAssembly","ArrowForwardIosIcon","defaultAssemblyName","onLaunch","_Fragment","color","importFormContainer","flex","rightPanel","flexGrow","leftPanel","flexShrink","Container","LeftPanel","async","assemblyManager","setViews","Promise","all","waitForAssembly","bpPerPx","offsetPx","hideHeader","displayedRegions","regions","view","views","setWidth","width","showAllRegions","isSessionWithAddTracks","toJS","f","addTrackConf","toggleTrack","showTrack","notify","clearImportFormSyntenyTracks","doSubmit","handleLaunch"],"sourceRoot":""}