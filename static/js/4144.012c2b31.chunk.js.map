{"version":3,"file":"static/js/4144.012c2b31.chunk.js","mappings":"wNASA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,MAAO,CACLC,QAAS,OACTC,SAAU,QAGZC,cAAe,CACbC,UAAW,aACXC,UAAW,IACXC,QAASP,EAAMQ,QAAQ,IACvBC,OAAQ,aAAaT,EAAMU,QAAQC,OAAOC,WAC1CC,UAAW,aACXC,SAAU,YAIC,SAASC,GAAW,KACjCC,EAAI,MACJC,EAAK,YACLC,EAAW,OACXC,EAAS,KAOT,MAAM,QAAEC,GAAYtB,IACpB,OAAqB,IAAjBmB,EAAMI,OACDC,IAASL,EAAM,IACpBM,EAAAA,cAACC,EAAU,CAACC,WAAYR,EAAM,GAAIE,OAAQ,IAAIA,EAAQH,KAEtDO,EAAAA,cAAA,OAAKG,UAAWN,EAAQnB,OACtBsB,EAAAA,cAACI,EAAAA,EAAS,CAACR,OAAQA,EAAQD,YAAaA,EAAaF,KAAMA,IAC3DO,EAAAA,cAACK,EAAAA,EAAU,CAACX,MAAOA,EAAM,MAGpBA,EAAMY,OAAMC,GAAOR,IAASQ,KAEnCP,EAAAA,cAAAA,EAAAA,SAAA,KACGN,EAAMc,KAAI,CAACD,EAAKE,IACfT,EAAAA,cAACC,EAAU,CACTS,IAAK,GAAGC,KAAKC,UAAUL,MAAQE,IAC/BP,WAAYK,EACZX,OAAQ,IAAIA,EAAQ,GAAGH,KAAQgB,UAOrCT,EAAAA,cAAA,OAAKG,UAAWN,EAAQnB,OACtBsB,EAAAA,cAACI,EAAAA,EAAS,CAACR,OAAQA,EAAQD,YAAaA,EAAaF,KAAMA,IAC1DC,EAAMc,KAAI,CAACD,EAAKE,IACfT,EAAAA,cAAA,OACEU,IAAK,GAAGC,KAAKC,UAAUL,MAAQE,IAC/BN,UAAWN,EAAQhB,eAEnBmB,EAAAA,cAACK,EAAAA,EAAU,CAACX,MAAOa,OAM/B,C,iFC7DA,MAAMhC,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCoC,OAAQ,CACNC,aAAcrC,EAAMQ,QAAQ,IAG9B8B,KAAM,CACJC,WAAY,SACZzB,SAAU,SACV0B,aAAc,gBASH,SAASC,GAAgB,MACtCxB,EAAK,OACLE,EAAM,KACNH,IAMA,MAAM,QAAEI,GAAYtB,KACb4C,EAASC,IAAcC,EAAAA,EAAAA,WAAS,GACjCC,EAAOC,OAAOD,KAAK5B,EAAM,IAAK8B,OAC9BC,EAAY,IAAIC,IAAIJ,GAGpBK,EAAOJ,OAAOK,QAAQlC,GAAOc,KAAI,EAAEqB,EAAGtB,MAC1C,MAAM,GAAEuB,KAAOC,GAASxB,EACxB,MAAO,CACLuB,GAAID,EACJG,WAAYF,KACTC,EACJ,IAGH,IAAK,MAAMxB,KAAOb,EAChB,IAAK,MAAMmC,KAAKN,OAAOD,KAAKf,GAC1BkB,EAAUQ,IAAIJ,GAKlB,IAAIK,EACAT,EAAUU,IAAI,OAChBV,EAAUW,OAAO,MACjBF,EAAW,CAAC,gBAAiBT,IAE7BS,EAAW,IAAIT,GAEjB,MAAMY,EAASH,EAAS1B,KAAI8B,IAAKC,EAAAA,EAAAA,kBAAiBZ,EAAKnB,KAAIgC,GAAKA,EAAEF,QAClE,OAAIb,EAAUgB,KAAOnB,EAAKxB,OAAS,EAE/BE,EAAAA,cAAA,OAAKG,UAAWN,EAAQgB,QACtBb,EAAAA,cAACI,EAAAA,EAAS,CAACR,OAAQA,EAAQH,KAAMA,IACjCO,EAAAA,cAAC0C,EAAAA,EAAgB,CACfC,QACE3C,EAAAA,cAAC4C,EAAAA,EAAQ,CACPzB,QAASA,EACT0B,SAAUC,IACR1B,EAAW0B,EAAMC,OAAO5B,QAAQ,IAItC6B,MAAOhD,EAAAA,cAACiD,EAAAA,EAAU,CAACC,QAAQ,SAAQ,kBAErClD,EAAAA,cAAA,OAAKmD,MAAO,CAAExE,QAAS,OAAQyE,cAAe,WAC5CpD,EAAAA,cAACqD,EAAAA,EAAQ,CACPC,4BAA0B,EAC1B3B,KAAMA,EACN4B,UAAW,GACXC,mBAAoB,GACpBC,WAAY9B,EAAK7B,OAAS,GAC1B4D,MAAO,CACLC,QAASxC,EAAUyC,EAAAA,EAAc,MAEnCC,UAAW,CACTF,QAAS,CACPG,aAAc,CACZC,sBAAsB,KAI5BC,QAAS9B,EAAS1B,KAChB,CAACD,EAAK0D,KAAK,CAEPvF,MAAO6B,EACP2D,WAAYC,IACV,MAAMzE,EAAQyE,EAAOzE,MACrB,OACEM,EAAAA,cAAA,OAAKG,UAAWN,EAAQkB,MACtBf,EAAAA,cAACoE,EAAAA,cAAa,CAACC,MAAMC,EAAAA,EAAAA,QAAO5E,GAAS,MACjC,EAGV6E,MAAOlC,EAAO4B,WAQvB,IACT,C,eClHA,MAAM1F,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BE,MAAO,CACLC,QAAS,OACTC,SAAU,UAIC,SAAS4F,GAAS,MAC/B9E,EAAK,OACLE,EAAM,KACNH,IAMA,MAAM,QAAEI,GAAYtB,KACd,IAAEkG,EAAG,QAAEC,EAAU,IAAOhF,EAC9B,IAAIiF,EACJ,IACEA,EAAO,IAAIC,IAAIH,EAAKC,GAASC,IAC/B,CAAE,MAAOrC,GACPqC,EAAOF,CACT,CACA,OACEzE,EAAAA,cAAA,OAAKG,UAAWN,EAAQnB,OACtBsB,EAAAA,cAACI,EAAAA,EAAS,CAACR,OAAQA,EAAQH,KAAMA,IACjCO,EAAAA,cAACK,EAAAA,EAAU,CAACX,MAAOiF,IAGzB,C,sOC1BA,MAAME,EAAuB,IAGvBC,EAAa,CACjB,eACA,SACA,WACA,cACA,WACA,aACA,WACA,aACA,YAGa,SAAS7E,EAAW8E,GAYjC,MAAM,WACJ7E,EAAU,KACV8E,EAAO,GAAE,gBACTC,EAAkB,GAAE,aACpBC,EAAY,UACZC,EAAY5E,GAAOA,EAAG,SACtB6E,EAAQ,OACRxF,EAAS,IACPmF,EAEEM,EAAQ,IAAI3D,IAAI,IAAIsD,KAASF,KAAeG,KAC5C,aAAEK,KAAiBvD,GAAS7B,EAC5BqF,EAAsB,IAAKxD,KAASuD,GAEpCE,GAAgBC,EAAAA,EAAAA,IACpBlE,OAAOK,QAAQ2D,GAAqBG,QAClC,EAAE7D,EAAG8D,UAAaC,IAAND,IAAoBN,EAAMlD,IAAIN,KAE5CjC,GAGF,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACGuB,OAAOK,QAAQ2D,GACbG,QAAO,EAAE7D,EAAG8D,UAAaC,IAAND,IAAoBN,EAAMlD,IAAIN,KACjDrB,KAAI,EAAEE,EAAKhB,MACV,MAAMC,GAAckG,EAAAA,EAAAA,IAAa,IAAIjG,EAAQc,GAAMwE,GACnD,GAAIY,MAAMC,QAAQrG,GAGhB,OAAOA,EAAMI,OAAS,GAAKJ,EAAMY,OAAMC,GAAOR,IAASQ,KACrDP,EAAAA,cAACkB,EAAe,CACdR,IAAKA,EACLjB,KAAMiB,EACNd,OAAQA,EACRF,MAAOA,IAGTM,EAAAA,cAACR,EAAU,CACTkB,IAAKA,EACLjB,KAAMiB,EACNhB,MAAOA,EACPC,YAAaA,EACbC,OAAQA,IAGP,GAAIG,IAASL,GAAQ,CAC1B,MAAM,gBAAEuF,KAAoBlD,GAASgD,EACrC,OAAOiB,EAAAA,EAAAA,eAActG,GACnB0F,EAAW,KACTpF,EAAAA,cAACiG,EAAY,CACXvF,IAAKA,EACLjB,KAAMiB,EACNd,OAAQA,EACRF,MAAOA,IAIXM,EAAAA,cAACC,EAAUiG,EAAA,CACTxF,IAAKA,GACDqB,EAAI,CACR7B,WAAYR,EACZwF,aAAcA,EACdtF,OAAQ,IAAIA,EAAQc,KAG1B,CACE,OACEV,EAAAA,cAACmG,EAAAA,EAAW,CACVzF,IAAKA,EACLjB,KAAMiB,EACNhB,MAAOyF,EAAUzF,EAAOgB,GACxBf,YAAaA,EACbC,OAAQA,EACR2E,MAAO6B,KAAKC,IAAIb,EAAeX,IAGrC,IAIV,C,oHC1GA,MAAMtG,GAAYC,E,SAAAA,KAAAA,EAAaC,IAAS,CACtC6H,sBAAuB,CACrB3H,QAAS,QACTK,QAASP,EAAMQ,QAAQ,IAEzBsH,KAAM,CACJC,MAAO/H,EAAMU,QAAQsH,SAASC,cAAgB,YAInC,SAASC,GAAS,SAC/BC,EAAQ,MACRC,EAAK,gBACLC,GAAkB,IAElB,MAAM,QAAEjH,GAAYtB,IACpB,OACEyB,EAAAA,cAAC+G,EAAAA,EAAS,CAACD,gBAAiBA,GAC1B9G,EAAAA,cAACgH,EAAAA,EAAgB,CAACC,WAAYjH,EAAAA,cAACkH,EAAAA,EAAU,CAAC/G,UAAWN,EAAQ0G,QAC3DvG,EAAAA,cAACiD,EAAAA,EAAU,CAACC,QAAQ,UAAU2D,IAEhC7G,EAAAA,cAACmH,EAAAA,EAAgB,CAAChH,UAAWN,EAAQyG,uBAClCM,GAIT,C,oGC/BA,MAAMrI,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtC2I,WAAY,CACVtI,UAAW,aACXC,UAAW,IACXsI,SAAU,GACVrI,QAASP,EAAMQ,QAAQ,IACvBM,SAAU,YAIC,SAASc,GAAW,MAAEX,IACnC,MAAM,QAAEG,GAAYtB,IACd+I,EAAS,eAAeC,KAAK,GAAG7H,KACtC,OACEM,EAAAA,cAAA,OAAKG,UAAWN,EAAQuH,YACrBpH,EAAAA,eAAqBN,GACpBA,EACE4H,EACFtH,EAAAA,cAACwH,EAAAA,EAAI,CAAC7C,KAAM,GAAGjF,KAAU,GAAGA,KAE5BM,EAAAA,cAACoE,EAAAA,cAAa,CACZC,KAAMtE,IAASL,GAASiB,KAAKC,UAAUlB,GAAS+H,OAAO/H,KAKjE,C,4DC5Be,SAASgI,EAAS3C,GAC/B,MAAM,QAAE4C,GAAY5C,EACd6C,EAASD,EAAQC,OACjBC,EAAoC,CACxC,KAAM,IACN,EAAK,GACL,EAAK,KAEDC,EAAMD,EAAUD,GAAU,IAAIC,EAAUD,MAAa,GACrDG,GAAMC,EAAAA,EAAAA,mBAAkBL,GAC9B,OAAO3H,EAAAA,cAAAA,EAAAA,SAAA,KAAG,GAAG+H,KAAOD,IACtB,C,uOCRe,SAASG,EAAYlD,GAClC,MAAM,QAAE4C,GAAY5C,EACdmD,EAAMP,EAeNQ,EAAgB,IAAKD,KAAQA,EAAI5C,eACjC,MAAE8C,EAAK,IAAEC,GAAQF,EAEjBG,EAAwC,IACzCH,EACHrI,QAAQyI,EAAAA,EAAAA,UAASF,EAAMD,IASzB,OACEpI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACmG,EAAAA,EAAW,CACV1G,KAAK,WACLC,MAAOM,EAAAA,cAAC0H,EAAQxB,EAAA,GAAKnB,EAAK,CAAE4C,QAASQ,OAEtC5G,OAAOK,QAZgB,CAC1BjC,YAAa,cACbF,KAAM,OACNK,OAAQ,SACR0I,KAAM,SASDhI,KAAI,EAAEE,EAAKjB,KAAU,CAACA,EAAM6I,EAAiB5H,MAC7CgF,QAAO,EAAE,CAAEhG,KAAoB,MAATA,IACtBc,KAAI,EAAEf,EAAMC,KACXM,EAAAA,cAACmG,EAAAA,EAAW,CAACzF,IAAKjB,EAAMA,KAAMA,EAAMC,MAAOA,MAIrD,C,gMCxCA,MAAM+I,GAAyBC,EAAAA,EAAAA,OAAK,IAAM,kCACpCC,GAAaD,EAAAA,EAAAA,OAAK,IAAM,kCAExBnK,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCmK,YAAa,CACX/H,OAAQ,GAGVgI,UAAW,CACTC,UAAWrK,EAAMQ,QAAQ,GACzB6B,aAAcrC,EAAMQ,QAAQ,QAqDhC,GA9C6B8J,EAAAA,EAAAA,WAAS,UAAU,MAC9CC,EAAK,QACLrB,IAKA,MAAM,QAAE9H,GAAYtB,KACb0K,EAAOC,IAAY7H,EAAAA,EAAAA,WAAS,GAEnC,OACErB,EAAAA,cAAA,OAAKG,UAAWN,EAAQgJ,WACtB7I,EAAAA,cAACmJ,EAAAA,EAAW,CAAChJ,UAAWN,EAAQ+I,aAC9B5I,EAAAA,cAACoJ,EAAAA,EAAM,CACLlG,QAAQ,YACRmG,QAASA,KACPH,GAAUD,EAAM,GAGjBA,EAAQ,wBAA0B,0BAIvCjJ,EAAAA,cAACsJ,EAAAA,EAAU,CACTD,QAASA,MACPE,EAAAA,EAAAA,YAAWP,GAAOQ,aAAYC,GAAe,CAC3Cd,EACA,CAAEc,iBACF,GAGJzJ,EAAAA,cAAC0J,EAAAA,EAAI,OAENT,EACCjJ,EAAAA,cAAC2J,EAAAA,SAAQ,CAACC,SAAU5J,EAAAA,cAAC6J,EAAAA,gBAAe,OAClC7J,EAAAA,cAACyI,EAAsB,CACrB/H,IAAKiH,EAAQmC,SACbd,MAAOA,EACPrB,QAASA,KAGX,KAGV,I,6PC1DA,MAAMoC,EAAc,CAClB,OACA,QACA,MACA,SACA,UACA,cACA,QAQa,SAASC,EAAejF,GAQrC,MAAM,KAAEC,EAAO,GAAE,MAAEgE,EAAK,QAAErB,EAAO,MAAEsC,EAAQ,GAAMlF,GAC3C,SAAEmF,GAAalB,GACf,KAAEmB,EAAI,KAAE1K,EAAO,GAAE,GAAEqC,EAAK,GAAE,KAAE0G,EAAO,GAAE,YAAE4B,EAAW,SAAEN,GAAanC,EACjE0C,GAAKC,EAAAA,EAAAA,QAAOtB,GAAOuB,cACnBC,GAAUjB,EAAAA,EAAAA,YAAWP,GAErByB,EAAaJ,EAAGK,uBAAuB,yBAA0B,KAAM,CAC3EF,UACA7C,UACAqB,UAEI2B,EAAIR,EACV,OACEnK,EAAAA,cAAC2G,EAAAA,QAAQ,CAACE,OAAO+D,EAAAA,EAAAA,IAAcnL,EAAMqC,EAAI0G,IACvCxI,EAAAA,cAACiD,EAAAA,EAAU,KAAC,gBACZjD,EAAAA,cAACiI,EAAAA,EAAgBlD,GAChB4F,EACC3K,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6K,EAAAA,EAAO,MACR7K,EAAAA,cAACiD,EAAAA,EAAU,KAAC,gBACZjD,EAAAA,cAACiI,EAAAA,EAAW/B,EAAA,GACNnB,EAAK,CACT4C,QAAS,IACJgD,EACHvC,MAAOuC,EAAEvC,MACTC,IAAKsC,EAAEtC,IACPyC,QAASH,EAAEG,QACXhB,SAAU,GAAGA,cAIjB,KAEJ9J,EAAAA,cAAC6K,EAAAA,EAAO,MACR7K,EAAAA,cAACiD,EAAAA,EAAU,KAAC,cACZjD,EAAAA,cAACC,EAAAA,QAAUiG,EAAA,CACThG,WAAYyH,GACR5C,EAAK,CACTC,KAAMA,EACNC,gBAAiB8E,KAGnB/J,EAAAA,cAAC+K,EAAAA,EAAa,CAACC,kBAAmB1I,GAAKtC,EAAAA,cAACiL,EAAAA,aAAY,CAACC,MAAO5I,EAAE4I,SAC5DlL,EAAAA,cAACyI,EAA2B1D,IAG7B0F,EACCzK,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6K,EAAAA,EAAO,MACR7K,EAAAA,cAAC2G,EAAAA,QAAQ,CAACE,MAAO4D,EAAWhL,MAC1BO,EAAAA,cAACyK,EAAWU,UAAcpG,KAG5B,KAEHkF,EAAQC,GAAYE,GAAatK,OAChCE,EAAAA,cAAC2G,EAAAA,QAAQ,CAACE,MAAM,cAAcC,gBAAiBmD,EAAQ,GACpDG,EAAY5J,KAAI,CAAC4K,EAAKC,IACrBrL,EAAAA,cAACgK,EAAc,CACbtJ,IAAKC,KAAKC,UAAUwK,GACpBzD,QAAS,IACJyD,EACHtB,SAAU,GAAGA,KAAYuB,KAE3BrC,MAAOA,EACPiB,MAAOA,EAAQ,OAInB,KAGV,C,4DC3GA,MAAM1L,GAAYC,E,SAAAA,KAAAA,EAAaC,IAAS,CACtC6M,iBAAkB,CAChB,UAAW,CACTC,WAAmC,SAAvB9M,EAAMU,QAAQqM,KAAkB,UAAY,WAG5DC,UAAW,CACT3M,UAAW,YACX4M,SAAU,GACVC,aAAc,kBACdtE,SAAU,GACVkE,WAAY9M,EAAMU,QAAQC,OAAOwM,mBACjCC,YAAapN,EAAMQ,QAAQ,GAC3BD,QAASP,EAAMQ,QAAQ,SAIZ,SAASmB,GAAU,YAChCT,EAAW,KACXF,EAAI,MACJ8E,EAAK,OACL3E,EAAS,KAOT,MAAM,QAAEC,EAAO,GAAEiM,GAAOvN,IAClBgC,EAAM,IAAIX,EAAQH,GAAMsM,KAAK,KACnC,OAAOpM,EACLK,EAAAA,cAACgM,EAAAA,EAAO,CAACnF,MAAOlH,EAAasM,UAAU,QACrCjM,EAAAA,cAAA,OAAKG,UAAW2L,EAAGjM,EAAQyL,iBAAkBzL,EAAQ4L,YAClDlL,IAILP,EAAAA,cAAA,OAAKG,UAAWN,EAAQ4L,UAAWtI,MAAO,CAAEoB,MAAOA,IAChDhE,EAGP,C,kFCvCA,MAAMhC,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BE,MAAO,CACLC,QAAS,OACTC,SAAU,UAIC,SAASuH,GAAY,KAClC1G,EAAI,MACJC,EAAK,YACLC,EAAW,OACXC,EAAM,MACN2E,IAQA,MAAM,QAAE1E,GAAYtB,IACpB,OAAOmB,QACLM,EAAAA,cAAA,OAAKG,UAAWN,EAAQnB,OACtBsB,EAAAA,cAACI,EAAAA,EAAS,CACRR,OAAQA,EACRD,YAAaA,EACbF,KAAMA,EACN8E,MAAOA,IAETvE,EAAAA,cAACK,EAAAA,EAAU,CAACX,MAAOA,KAEnB,IACN,C,wGClCO,SAASwM,EAAQhE,GACtB,OAAmC,IAA5B3G,OAAOD,KAAK4G,GAAKpI,MAC1B,CAEO,SAAS8K,EAAcnL,EAAeqC,EAAa0G,GACxD,MAAO,EAAC2D,EAAAA,EAAAA,IAAS,GAAG1M,GAAQqC,GAAM,MAAO,GAAG0G,KACzC9C,QAAO0G,KAAOA,IACdL,KAAK,MACV,CAEO,SAAStG,EAAiB4G,EAAoBzM,GACnD,OACEwG,KAAKkG,MACHC,EAAAA,EAAAA,KAAIF,EAAM7L,KAAIE,IAAO8L,EAAAA,EAAAA,aAAY,IAAI5M,EAAQc,EAAI,IAAIqL,KAAK,KAAM,QAC9D,EAER,CAOO,SAASlG,EAAa4G,EAAevE,EAA+B,CAAC,GAC1E,IAAIwE,EAAgBxE,EAMpB,OALAuE,EAAIE,SAAQC,IACN7M,IAAS2M,KACXA,EAAOA,EAAKE,GACd,IAEqB,iBAATF,EACVA,EACA3M,IAAS2M,IAAqC,iBAArBA,EAAKG,YAC5BH,EAAKG,iBACLjH,CACR,C","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Position.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/CoreDetails.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeaturePanel.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts"],"sourcesContent":["import React from 'react'\n\nimport isObject from 'is-object'\nimport { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes attributes={value[0]} prefix={[...prefix, name]} />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <DataGrid\n            disableRowSelectionOnClick\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            slots={{\n              toolbar: checked ? GridToolbar : null,\n            }}\n            slotProps={{\n              toolbar: {\n                printOptions: {\n                  disableToolbarButton: true,\n                },\n              },\n            }}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  renderCell: params => {\n                    const value = params.value as string\n                    return (\n                      <div className={classes.cell}>\n                        <SanitizedHTML html={getStr(value || '')} />\n                      </div>\n                    )\n                  },\n                  width: widths[index],\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n","import React from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport isObject from 'is-object'\n\nimport ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isUriLocation } from '../../util'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Record<string, React.ReactNode>\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter = val => val,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const formattedAttributes = { ...rest, ...__jbrowsefmt }\n\n  const maxLabelWidth = generateMaxWidth(\n    Object.entries(formattedAttributes).filter(\n      ([k, v]) => v !== undefined && !omits.has(k),\n    ),\n    prefix,\n  )\n\n  return (\n    <>\n      {Object.entries(formattedAttributes)\n        .filter(([k, v]) => v !== undefined && !omits.has(k))\n        .map(([key, value]) => {\n          const description = accessNested([...prefix, key], descriptions)\n          if (Array.isArray(value)) {\n            // check if it looks like an array of objects, which could be used\n            // in data grid\n            return value.length > 1 && value.every(val => isObject(val)) ? (\n              <DataGridDetails\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            ) : (\n              <ArrayValue\n                key={key}\n                name={key}\n                value={value}\n                description={description}\n                prefix={prefix}\n              />\n            )\n          } else if (isObject(value)) {\n            const { omitSingleLevel, ...rest } = props\n            return isUriLocation(value) ? (\n              hideUris ? null : (\n                <UriAttribute\n                  key={key}\n                  name={key}\n                  prefix={prefix}\n                  value={value}\n                />\n              )\n            ) : (\n              <Attributes\n                key={key}\n                {...rest}\n                attributes={value}\n                descriptions={descriptions}\n                prefix={[...prefix, key]}\n              />\n            )\n          } else {\n            return (\n              <SimpleField\n                key={key}\n                name={key}\n                value={formatter(value, key)}\n                description={description}\n                prefix={prefix}\n                width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n              />\n            )\n          }\n        })}\n    </>\n  )\n}\n","import React from 'react'\n\nimport ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React from 'react'\n\nimport { Link } from '@mui/material'\nimport isObject from 'is-object'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {React.isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { assembleLocString } from '../../util'\n\nimport type { BaseProps } from '../types'\n\nexport default function Position(props: BaseProps) {\n  const { feature } = props\n  const strand = feature.strand as number\n  const strandMap: Record<string, string> = {\n    '-1': '-',\n    '0': '',\n    '1': '+',\n  }\n  const str = strandMap[strand] ? `(${strandMap[strand]})` : ''\n  const loc = assembleLocString(feature)\n  return <>{`${loc} ${str}`}</>\n}\n","import React from 'react'\n\nimport Position from './Position'\nimport SimpleField from './SimpleField'\nimport { toLocale } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseProps } from '../types'\n\nexport default function CoreDetails(props: BaseProps) {\n  const { feature } = props\n  const obj = feature as SimpleFeatureSerialized & {\n    start: number\n    end: number\n    assemblyName?: string\n    strand: number\n    refName: string\n    __jbrowsefmt: {\n      start?: number\n      assemblyName?: string\n      end?: number\n      refName?: string\n      name?: string\n    }\n  }\n\n  const formattedFeat = { ...obj, ...obj.__jbrowsefmt }\n  const { start, end } = formattedFeat\n\n  const displayedDetails: Record<string, any> = {\n    ...formattedFeat,\n    length: toLocale(end - start),\n  }\n\n  const coreRenderedDetails = {\n    description: 'Description',\n    name: 'Name',\n    length: 'Length',\n    type: 'Type',\n  }\n  return (\n    <>\n      <SimpleField\n        name=\"Position\"\n        value={<Position {...props} feature={formattedFeat} />}\n      />\n      {Object.entries(coreRenderedDetails)\n        .map(([key, name]) => [name, displayedDetails[key]])\n        .filter(([, value]) => value != null)\n        .map(([name, value]) => (\n          <SimpleField key={name} name={name} value={value} />\n        ))}\n    </>\n  )\n}\n","import React, { Suspense, lazy, useState } from 'react'\n\nimport Help from '@mui/icons-material/Help'\nimport { Button, FormControl, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { LoadingEllipses } from '../../ui'\nimport { getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseFeatureWidgetModel } from '../stateModelFactory'\n\n// lazies\nconst SequenceFeatureDetails = lazy(() => import('./SequenceFeatureDetails'))\nconst HelpDialog = lazy(() => import('./dialogs/HelpDialog'))\n\nconst useStyles = makeStyles()(theme => ({\n  formControl: {\n    margin: 0,\n  },\n\n  container: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n}))\n\n// display the stitched-together sequence of a gene's CDS, cDNA, or protein\n// sequence. this is a best effort and weird genomic phenomena could lead these\n// to not be 100% accurate\nconst SequenceFeaturePanel = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { classes } = useStyles()\n  const [shown, setShown] = useState(false)\n\n  return (\n    <div className={classes.container}>\n      <FormControl className={classes.formControl}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setShown(!shown)\n          }}\n        >\n          {shown ? 'Hide feature sequence' : 'Show feature sequence'}\n        </Button>\n      </FormControl>\n\n      <IconButton\n        onClick={() => {\n          getSession(model).queueDialog(handleClose => [\n            HelpDialog,\n            { handleClose },\n          ])\n        }}\n      >\n        <Help />\n      </IconButton>\n      {shown ? (\n        <Suspense fallback={<LoadingEllipses />}>\n          <SequenceFeatureDetails\n            key={feature.uniqueId}\n            model={model}\n            feature={feature}\n          />\n        </Suspense>\n      ) : null}\n    </div>\n  )\n})\n\nexport default SequenceFeaturePanel\n","import React from 'react'\n\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { Divider, Typography } from '@mui/material'\n\nimport { generateTitle } from './util'\nimport SequenceFeatureDetails from '../SequenceFeatureDetails'\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\nimport { ErrorMessage } from '../../ui'\nimport { getEnv, getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// coreDetails are omitted in some circumstances\nconst coreDetails = [\n  'name',\n  'start',\n  'end',\n  'strand',\n  'refName',\n  'description',\n  'type',\n]\n\ninterface PanelDescriptor {\n  name: string\n  Component: React.FC<any>\n}\n\nexport default function FeatureDetails(props: {\n  model: IAnyStateTreeNode\n  feature: SimpleFeatureSerialized\n  depth?: number\n  omit?: string[]\n  descriptions?: Record<string, React.ReactNode>\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}) {\n  const { omit = [], model, feature, depth = 0 } = props\n  const { maxDepth } = model\n  const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature\n  const pm = getEnv(model).pluginManager\n  const session = getSession(model)\n\n  const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {\n    session,\n    feature,\n    model,\n  }) as PanelDescriptor | undefined\n  const m = mate as { start: number; end: number; refName: string } | undefined\n  return (\n    <BaseCard title={generateTitle(name, id, type)}>\n      <Typography>Core details</Typography>\n      <CoreDetails {...props} />\n      {m ? (\n        <>\n          <Divider />\n          <Typography>Mate details</Typography>\n          <CoreDetails\n            {...props}\n            feature={{\n              ...m,\n              start: m.start,\n              end: m.end,\n              refName: m.refName,\n              uniqueId: `${uniqueId}-mate`,\n            }}\n          />\n        </>\n      ) : null}\n\n      <Divider />\n      <Typography>Attributes</Typography>\n      <Attributes\n        attributes={feature}\n        {...props}\n        omit={omit}\n        omitSingleLevel={coreDetails}\n      />\n\n      <ErrorBoundary FallbackComponent={e => <ErrorMessage error={e.error} />}>\n        <SequenceFeatureDetails {...props} />\n      </ErrorBoundary>\n\n      {ExtraPanel ? (\n        <>\n          <Divider />\n          <BaseCard title={ExtraPanel.name}>\n            <ExtraPanel.Component {...props} />\n          </BaseCard>\n        </>\n      ) : null}\n\n      {depth < maxDepth && subfeatures?.length ? (\n        <BaseCard title=\"Subfeatures\" defaultExpanded={depth < 1}>\n          {subfeatures.map((sub, idx) => (\n            <FeatureDetails\n              key={JSON.stringify(sub)}\n              feature={{\n                ...sub,\n                uniqueId: `${uniqueId}_${idx}`,\n              }}\n              model={model}\n              depth={depth + 1}\n            />\n          ))}\n        </BaseCard>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import React from 'react'\n\nimport { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes } = useStyles()\n  return value !== null && value !== undefined ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={value} />\n    </div>\n  ) : null\n}\n","import isObject from 'is-object'\n\nimport { max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  arr.forEach(elt => {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  })\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n"],"names":["useStyles","makeStyles","theme","field","display","flexWrap","fieldSubvalue","wordBreak","maxHeight","padding","spacing","border","palette","action","selected","boxSizing","overflow","ArrayValue","name","value","description","prefix","classes","length","isObject","React","Attributes","attributes","className","FieldName","BasicValue","every","val","map","i","key","JSON","stringify","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","keys","Object","sort","unionKeys","Set","rows","entries","k","id","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","style","flexDirection","DataGrid","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","hideFooter","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","columns","index","renderCell","params","SanitizedHTML","html","getStr","width","UriField","uri","baseUri","href","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","formatter","hideUris","omits","__jbrowsefmt","formattedAttributes","maxLabelWidth","generateMaxWidth","filter","v","undefined","accessNested","Array","isArray","isUriLocation","UriAttribute","_extends","SimpleField","Math","min","expansionPanelDetails","icon","color","tertiary","contrastText","BaseCard","children","title","defaultExpanded","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","fieldValue","fontSize","isLink","exec","Link","String","Position","feature","strand","strandMap","str","loc","assembleLocString","CoreDetails","obj","formattedFeat","start","end","displayedDetails","toLocale","type","SequenceFeatureDetails","lazy","HelpDialog","formControl","container","marginTop","observer","model","shown","setShown","FormControl","Button","onClick","IconButton","getSession","queueDialog","handleClose","Help","Suspense","fallback","LoadingEllipses","uniqueId","coreDetails","FeatureDetails","depth","maxDepth","mate","subfeatures","pm","getEnv","pluginManager","session","ExtraPanel","evaluateExtensionPoint","m","generateTitle","Divider","refName","ErrorBoundary","FallbackComponent","ErrorMessage","error","Component","sub","idx","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","join","Tooltip","placement","isEmpty","ellipses","f","array","ceil","max","measureText","arr","obj2","forEach","elt","Description"],"sourceRoot":""}