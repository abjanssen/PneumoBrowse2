{"version":3,"file":"static/js/2724.89a8c58d.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddTrackWidget/components/AddTrackStatusMessage.tsx","../../../plugins/data-management/src/AddTrackWidget/components/util.ts","../../../plugins/data-management/src/AddTrackWidget/components/TrackAdapterSelector.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackUnknownAdapterPrompt.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TextIndexingConfig.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackTypeSelector.tsx","../../../plugins/data-management/src/AddTrackWidget/components/Unsupported.tsx","../../../plugins/data-management/src/AddTrackWidget/components/ConfirmTrack.tsx","../../../plugins/data-management/src/AddTrackWidget/components/TrackSourceSelect.tsx","../../../plugins/data-management/src/AddTrackWidget/components/DefaultAddTrackWorkflow.tsx","../../../plugins/data-management/src/AddTrackWidget/components/doSubmit.ts","../../../plugins/data-management/src/AddTrackWidget/components/PasteConfigWorkflow.tsx","../../../plugins/data-management/src/AddTrackWidget/components/AddTrackWidget.tsx"],"sourcesContent":["import { Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function StatusMessage({\n  trackAdapter,\n  trackType,\n}: {\n  trackAdapter: { type: string; subadapter?: { type: string } }\n  trackType: string\n}) {\n  const { classes } = useStyles()\n  const { type, subadapter } = trackAdapter\n  return type === 'SNPCoverageAdapter' ? (\n    <Typography className={classes.spacing}>\n      Selected <code>{trackType}</code>. Using adapter <code>{type}</code> with\n      subadapter <code>{subadapter?.type}</code>. Please enter a track name and,\n      if necessary, update the track type.\n    </Typography>\n  ) : (\n    <Typography className={classes.spacing}>\n      Using adapter <code>{type}</code> and guessing track type{' '}\n      <code>{trackType}</code>. Please enter a track name and, if necessary,\n      update the track type.\n    </Typography>\n  )\n}\n","import type { AdapterType } from '@jbrowse/core/pluggableElementTypes'\n\n// collate adapters into a map with\n// - key: category\n// - value: array of adapters with that category\nexport function categorizeAdapters(adaptersList: AdapterType[]) {\n  const map = {} as Record<string, AdapterType[]>\n  for (const adapter of adaptersList) {\n    const key = adapter.adapterMetadata?.category || 'Default'\n    if (!map[key]) {\n      map[key] = []\n    }\n    map[key].push(adapter)\n  }\n  return map\n}\n","import { getEnv } from '@jbrowse/core/util'\nimport { ListSubheader, MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { categorizeAdapters } from './util'\n\nimport type { AddTrackModel } from '../model'\n\nconst TrackAdapterSelector = observer(({ model }: { model: AddTrackModel }) => {\n  const { trackAdapter } = model\n  const { pluginManager } = getEnv(model)\n\n  return (\n    <TextField\n      value={trackAdapter?.type !== 'UNKNOWN' ? trackAdapter?.type : ''}\n      label=\"Adapter type\"\n      variant=\"outlined\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setAdapterHint(event.target.value)\n      }}\n      slotProps={{\n        select: {\n          SelectDisplayProps: {\n            // @ts-expect-error\n            'data-testid': 'adapterTypeSelect',\n          },\n        },\n      }}\n    >\n      {Object.entries(\n        categorizeAdapters(\n          pluginManager\n            .getAdapterElements()\n            .filter(e => !e.adapterMetadata?.hiddenFromGUI),\n        ),\n      ).map(([key, val]) => [\n        // returning array avoids needing to use a react fragment which\n        // Select/TextField sub-elements disagree with\n        <ListSubheader key={key}>{key}</ListSubheader>,\n        val.map(elt => (\n          <MenuItem key={elt.name} value={elt.name}>\n            {elt.displayName}\n          </MenuItem>\n        )),\n      ])}\n    </TextField>\n  )\n})\n\nexport default TrackAdapterSelector\n","import { ExternalLink } from '@jbrowse/core/ui'\nimport { Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport TrackAdapterSelector from './TrackAdapterSelector'\n\nimport type { AddTrackModel } from '../model'\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function UnknownAdapterPrompt({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <>\n      <Typography className={classes.spacing}>\n        JBrowse was not able to guess the adapter type for this data, but it may\n        be in the list below. If not, you can{' '}\n        <ExternalLink href=\"https://github.com/GMOD/jbrowse-components/releases\">\n          check for new releases\n        </ExternalLink>{' '}\n        of JBrowse to see if they support this data type or{' '}\n        <ExternalLink href=\"https://github.com/GMOD/jbrowse-components/issues/new\">\n          file an issue\n        </ExternalLink>{' '}\n        and add a feature request for this data type.\n      </Typography>\n      <TrackAdapterSelector model={model} />\n    </>\n  )\n}\n","import { useEffect, useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  Paper,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: theme.spacing(1),\n  },\n\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst TextIndexingConfig = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [value1, setValue1] = useState('')\n  const [value2, setValue2] = useState('')\n  const [attributes, setAttributes] = useState(['Name', 'ID'])\n  const [exclude, setExclude] = useState(['CDS', 'exon'])\n  const sections = [\n    {\n      label: 'Indexing attributes',\n      values: attributes,\n    },\n    {\n      label: 'Feature types to exclude',\n      values: exclude,\n    },\n  ]\n  useEffect(() => {\n    model.setTextIndexingConf({ attributes, exclude })\n  }, [model, attributes, exclude])\n\n  return (\n    <Paper className={classes.paper}>\n      <InputLabel>Indexing configuration</InputLabel>\n      {sections.map((section, index) => (\n        <Card raised key={section.label} className={classes.card}>\n          <CardContent>\n            <InputLabel>{section.label}</InputLabel>\n            <List disablePadding>\n              {section.values.map((val, idx) => (\n                /* biome-ignore lint/suspicious/noArrayIndexKey: */\n                <ListItem key={`${val}-${idx}`} disableGutters>\n                  <TextField\n                    value={val}\n                    slotProps={{\n                      input: {\n                        endAdornment: (\n                          <InputAdornment position=\"end\">\n                            <IconButton\n                              onClick={() => {\n                                const newAttr = section.values.filter(\n                                  (_, i) => i !== idx,\n                                )\n                                if (index === 0) {\n                                  setAttributes(newAttr)\n                                } else {\n                                  setExclude(newAttr)\n                                }\n                              }}\n                            >\n                              <DeleteIcon />\n                            </IconButton>\n                          </InputAdornment>\n                        ),\n                      },\n                    }}\n                  />\n                </ListItem>\n              ))}\n              <ListItem disableGutters>\n                <TextField\n                  value={index === 0 ? value1 : value2}\n                  placeholder=\"add new\"\n                  onChange={event => {\n                    if (index === 0) {\n                      setValue1(event.target.value)\n                    } else {\n                      setValue2(event.target.value)\n                    }\n                  }}\n                  slotProps={{\n                    input: {\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <IconButton\n                            onClick={() => {\n                              if (index === 0) {\n                                setAttributes([...attributes, value1])\n                                setValue1('')\n                              } else {\n                                setExclude([...exclude, value2])\n                                setValue2('')\n                              }\n                            }}\n                            disabled={\n                              index === 0 ? value1 === '' : value2 === ''\n                            }\n                            data-testid=\"stringArrayAdd-Feat\"\n                          >\n                            <AddIcon />\n                          </IconButton>\n                        </InputAdornment>\n                      ),\n                    },\n                  }}\n                />\n              </ListItem>\n            </List>\n          </CardContent>\n        </Card>\n      ))}\n    </Paper>\n  )\n})\n\nexport default TextIndexingConfig\n","import { getEnv } from '@jbrowse/core/util'\nimport { MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { AddTrackModel } from '../model'\n\nconst TrackTypeSelector = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { pluginManager } = getEnv(model)\n  const { trackType } = model\n  const trackTypes = pluginManager.getTrackElements()\n\n  return (\n    <TextField\n      value={trackType}\n      variant=\"outlined\"\n      label=\"Track type\"\n      select\n      fullWidth\n      onChange={event => {\n        model.setTrackType(event.target.value)\n      }}\n      slotProps={{\n        select: {\n          SelectDisplayProps: {\n            // @ts-expect-error\n            'data-testid': 'trackTypeSelect',\n          },\n        },\n      }}\n    >\n      {trackTypes.map(({ name, displayName }) => (\n        <MenuItem key={name} value={name}>\n          {displayName}\n        </MenuItem>\n      ))}\n    </TextField>\n  )\n})\n\nexport default TrackTypeSelector\n","import { ExternalLink } from '@jbrowse/core/ui'\nimport { Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nexport default function Unsupported() {\n  const { classes } = useStyles()\n  return (\n    <Typography className={classes.spacing}>\n      This version of JBrowse cannot display data of this type. It is possible,\n      however, that there is a newer version that can display them. You can{' '}\n      <ExternalLink href=\"https://github.com/GMOD/jbrowse-components/releases\">\n        check for new releases\n      </ExternalLink>{' '}\n      of JBrowse or{' '}\n      <ExternalLink href=\"https://github.com/GMOD/jbrowse-components/issues/new\">\n        file an issue\n      </ExternalLink>{' '}\n      and add a feature request for this data type.\n    </Typography>\n  )\n}\n","import { Suspense, useEffect, useState } from 'react'\n\nimport { AssemblySelector } from '@jbrowse/core/ui'\nimport {\n  getEnv,\n  getSession,\n  isElectron,\n  isSupportedIndexingAdapter,\n} from '@jbrowse/core/util'\nimport { UNKNOWN } from '@jbrowse/core/util/tracks'\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport StatusMessage from './AddTrackStatusMessage'\nimport UnknownAdapterPrompt from './AddTrackUnknownAdapterPrompt'\nimport TextIndexingConfig from './TextIndexingConfig'\nimport TrackAdapterSelector from './TrackAdapterSelector'\nimport TrackTypeSelector from './TrackTypeSelector'\nimport Unsupported from './Unsupported'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  spacing: {\n    marginBottom: theme.spacing(3),\n  },\n}))\n\nconst ConfirmTrack = observer(function ConfirmTrack({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [check, setCheck] = useState(true)\n  const session = getSession(model)\n  const {\n    trackName,\n    unsupported,\n    trackAdapter,\n    trackType,\n    warningMessage,\n    adapterHint,\n  } = model\n\n  useEffect(() => {\n    if (adapterHint === '' && trackAdapter) {\n      model.setAdapterHint(trackAdapter.type)\n    }\n  }, [adapterHint, trackAdapter, trackAdapter?.type, model])\n\n  if (unsupported) {\n    return <Unsupported />\n  } else if (trackAdapter?.type === UNKNOWN) {\n    return <UnknownAdapterPrompt model={model} />\n  } else if (!trackAdapter?.type) {\n    return <Typography>Could not recognize this data type.</Typography>\n  } else {\n    const supportedForIndexing = isSupportedIndexingAdapter(trackAdapter.type)\n    const { pluginManager } = getEnv(model)\n    const Component = pluginManager.evaluateExtensionPoint(\n      'Core-addTrackComponent',\n      ({ model }: { model: AddTrackModel }) => (\n        <AssemblySelector\n          session={session}\n          helperText=\"Select assembly to add track to\"\n          selected={model.assembly}\n          onChange={asm => {\n            model.setAssembly(asm)\n          }}\n          TextFieldProps={{\n            fullWidth: true,\n            SelectProps: {\n              SelectDisplayProps: {\n                // @ts-expect-error\n                'data-testid': 'assemblyNameSelect',\n              },\n            },\n          }}\n        />\n      ),\n      { model },\n    ) as React.FC<any>\n    return (\n      <div>\n        <StatusMessage trackAdapter={trackAdapter} trackType={trackType} />\n        {warningMessage ? (\n          <Typography color=\"warning\">{warningMessage}</Typography>\n        ) : null}\n        <TextField\n          className={classes.spacing}\n          label=\"trackName\"\n          helperText=\"A name for this track\"\n          fullWidth\n          value={trackName}\n          onChange={event => {\n            model.setTrackName(event.target.value)\n          }}\n          slotProps={{\n            htmlInput: {\n              'data-testid': 'trackNameInput',\n            },\n          }}\n        />\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            gap: 10,\n          }}\n        >\n          <TrackAdapterSelector model={model} />\n          <TrackTypeSelector model={model} />\n\n          <Suspense fallback={null}>\n            <Component model={model} />\n          </Suspense>\n        </div>\n\n        {isElectron && supportedForIndexing && (\n          <FormControl>\n            <FormControlLabel\n              label=\"Index track for text searching?\"\n              control={\n                <Checkbox\n                  checked={check}\n                  onChange={e => {\n                    setCheck(e.target.checked)\n                    model.setTextIndexTrack(e.target.checked)\n                  }}\n                />\n              }\n            />\n          </FormControl>\n        )}\n        {isElectron && check && supportedForIndexing ? (\n          <TextIndexingConfig model={model} />\n        ) : null}\n      </div>\n    )\n  }\n})\n\nexport default ConfirmTrack\n","import { FileSelector } from '@jbrowse/core/ui'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getRoot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\nimport type { AbstractRootModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n  },\n  spacer: {\n    height: theme.spacing(8),\n  },\n}))\n\nconst TrackSourceSelect = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const rootModel = getRoot<AbstractRootModel>(model)\n\n  return (\n    <Paper className={classes.paper}>\n      <FileSelector\n        name=\"Main file\"\n        description=\"\"\n        location={model.trackData}\n        setLocation={model.setTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n      <div className={classes.spacer} />\n      <FileSelector\n        name=\"Index file\"\n        description=\"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\"\n        location={model.indexTrackData}\n        setLocation={model.setIndexTrackData}\n        setName={model.setTrackName}\n        rootModel={rootModel}\n      />\n    </Paper>\n  )\n})\n\nexport default TrackSourceSelect\n","import { useState } from 'react'\n\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  Step,\n  StepContent,\n  StepLabel,\n  Stepper,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ConfirmTrack from './ConfirmTrack'\nimport TrackSourceSelect from './TrackSourceSelect'\nimport { doSubmit } from './doSubmit'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginTop: theme.spacing(10),\n    marginBottom: theme.spacing(2),\n  },\n  alertContainer: {\n    padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n  },\n}))\n\nconst steps = ['Enter track data', 'Confirm track type']\n\nconst DefaultAddTrackWorkflow = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n  const { assembly, trackAdapter, trackData, trackName, trackType } = model\n\n  function getStepContent(step: number) {\n    switch (step) {\n      case 0:\n        return <TrackSourceSelect model={model} />\n      case 1:\n        return <ConfirmTrack model={model} />\n      default:\n        return <Typography>Unknown step</Typography>\n    }\n  }\n\n  function isNextDisabled() {\n    switch (activeStep) {\n      case 0:\n        return !trackData\n      case 1:\n        return !(trackName && trackType && trackAdapter?.type && assembly)\n      default:\n        return true\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map((label, idx) => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {getStepContent(idx)}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  className={classes.button}\n                  onClick={() => {\n                    setActiveStep(activeStep - 1)\n                  }}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={isNextDisabled()}\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (activeStep !== steps.length - 1) {\n                      setActiveStep(activeStep + 1)\n                    } else {\n                      try {\n                        doSubmit({ model })\n                      } catch (e) {\n                        getSession(model).notifyError(`${e}`, e)\n                      }\n                    }\n                  }}\n                  className={classes.button}\n                  data-testid=\"addTrackNextButton\"\n                >\n                  {activeStep === steps.length - 1 ? 'Add' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n})\nexport default DefaultAddTrackWorkflow\n","import {\n  getSession,\n  isElectron,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n  isSupportedIndexingAdapter,\n} from '@jbrowse/core/util'\nimport { getRoot } from 'mobx-state-tree'\n\nimport type { AddTrackModel } from '../model'\n\nfunction doTextIndexTrack({\n  trackId,\n  model,\n}: {\n  trackId: string\n  model: AddTrackModel\n}) {\n  const { textIndexingConf, trackName, assembly } = model\n  const { jobsManager } = getRoot<any>(model)\n  const attr = textIndexingConf || {\n    attributes: ['Name', 'ID'],\n    exclude: ['CDS', 'exon'],\n  }\n  const indexName = `${trackName}-index`\n  jobsManager.queueJob({\n    indexingParams: {\n      ...attr,\n      assemblies: [assembly],\n      tracks: [trackId],\n      indexType: 'perTrack',\n      name: indexName,\n      timestamp: new Date().toISOString(),\n    },\n    name: indexName,\n    cancelCallback: () => jobsManager.abortJob(),\n  })\n}\n\nexport function doSubmit({ model }: { model: AddTrackModel }) {\n  const { textIndexTrack, trackAdapter, view } = model\n  const session = getSession(model)\n  const trackConfig = model.getTrackConfig(Date.now())\n\n  if (!isSessionWithAddTracks(session)) {\n    throw new Error(\"Can't add tracks to this session\")\n  } else if (trackConfig && trackAdapter) {\n    const { trackId } = trackConfig\n    session.addTrackConf(trackConfig)\n    view?.showTrack?.(trackId)\n\n    if (\n      isElectron &&\n      textIndexTrack &&\n      isSupportedIndexingAdapter(trackAdapter.type)\n    ) {\n      doTextIndexTrack({\n        model,\n        trackId,\n      })\n    }\n    model.clearData()\n    if (isSessionModelWithWidgets(session)) {\n      session.hideWidget(model)\n    }\n  } else {\n    throw new Error(\n      'Failed to add track.\\nThe configuration of this file is not currently supported.',\n    )\n  }\n}\n","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  getSession,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n} from '@jbrowse/core/util'\nimport { Button, TextField } from '@mui/material'\nimport { transaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AddTrackModel } from '../model'\n\nconst useStyles = makeStyles()({\n  textbox: {\n    width: '100%',\n  },\n  submit: {\n    marginTop: 25,\n    marginBottom: 100,\n    display: 'block',\n  },\n})\n\nconst PasteConfigAddTrackWorkflow = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [error, setError] = useState<unknown>()\n\n  return (\n    <div>\n      {error ? <ErrorMessage error={error} /> : null}\n      <TextField\n        multiline\n        rows={10}\n        value={val}\n        placeholder=\"Paste track config or array of track configs in JSON format\"\n        variant=\"outlined\"\n        className={classes.textbox}\n        onChange={event => {\n          setVal(event.target.value)\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        className={classes.submit}\n        onClick={() => {\n          try {\n            setError(undefined)\n            const session = getSession(model)\n            const conf = JSON.parse(val)\n            const confs = Array.isArray(conf) ? conf : [conf]\n            if (\n              isSessionWithAddTracks(session) &&\n              isSessionModelWithWidgets(session)\n            ) {\n              transaction(() => {\n                for (const c of confs) {\n                  session.addTrackConf(c)\n                }\n                for (const c of confs) {\n                  model.view.showTrack(c.trackId)\n                }\n                model.clearData()\n              })\n\n              session.hideWidget(model)\n            }\n          } catch (e) {\n            console.error(e)\n            setError(e)\n          }\n        }}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n})\nexport default PasteConfigAddTrackWorkflow\n","import { Suspense, useState } from 'react'\n\nimport { getEnv } from '@jbrowse/core/util'\nimport { FormControl, FormHelperText, MenuItem, Select } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport DefaultAddTrackWorkflow from './DefaultAddTrackWorkflow'\nimport PasteConfigWorkflow from './PasteConfigWorkflow'\n\nimport type { AddTrackModel } from '../model'\n\nconst AddTrackSelector = observer(function ({\n  model,\n}: {\n  model: AddTrackModel\n}) {\n  const [val, setVal] = useState('Default add track workflow')\n  const ComponentMap = {\n    'Default add track workflow': DefaultAddTrackWorkflow,\n    'Add track JSON': PasteConfigWorkflow,\n    ...Object.fromEntries(\n      getEnv(model)\n        .pluginManager.getAddTrackWorkflowElements()\n        .map(w => [w.name, w.ReactComponent]),\n    ),\n  } as Record<string, React.FC<{ model: AddTrackModel }>>\n\n  // make sure the selected value is in the list\n  const val2 = ComponentMap[val] ? val : 'Default add track workflow'\n  const Component = ComponentMap[val2]!\n  return (\n    <>\n      <FormControl>\n        <Select\n          value={val2}\n          onChange={event => {\n            setVal(event.target.value)\n          }}\n        >\n          {Object.keys(ComponentMap).map(e => (\n            <MenuItem key={e} value={e}>\n              {e}\n            </MenuItem>\n          ))}\n        </Select>\n        <FormHelperText>Type of add track workflow</FormHelperText>\n      </FormControl>\n\n      <Suspense fallback={null}>\n        <Component model={model} />\n      </Suspense>\n    </>\n  )\n})\n\nexport default AddTrackSelector\n"],"names":["useStyles","makeStyles","theme","spacing","marginBottom","StatusMessage","t0","$","_c","trackAdapter","trackType","classes","type","subadapter","t1","_jsxs","Typography","className","children","_jsx","categorizeAdapters","adaptersList","map","adapter","key","adapterMetadata","category","push","observer","model","pluginManager","getEnv","TextField","value","label","variant","select","fullWidth","onChange","event","setAdapterHint","target","slotProps","SelectDisplayProps","Object","entries","getAdapterElements","filter","e","hiddenFromGUI","val","ListSubheader","elt","MenuItem","name","displayName","UnknownAdapterPrompt","t2","t3","t4","t5","Symbol","for","ExternalLink","href","TrackAdapterSelector","_Fragment","paper","display","flexDirection","padding","card","marginTop","value1","setValue1","useState","value2","setValue2","attributes","setAttributes","exclude","setExclude","sections","values","useEffect","setTextIndexingConf","Paper","InputLabel","section","index","Card","raised","CardContent","List","disablePadding","idx","ListItem","disableGutters","input","endAdornment","InputAdornment","position","IconButton","onClick","newAttr","_","i","DeleteIcon","placeholder","disabled","AddIcon","trackTypes","getTrackElements","setTrackType","Unsupported","check","setCheck","session","getSession","trackName","unsupported","warningMessage","adapterHint","UNKNOWN","supportedForIndexing","isSupportedIndexingAdapter","Component","evaluateExtensionPoint","AssemblySelector","helperText","selected","assembly","asm","setAssembly","TextFieldProps","SelectProps","color","setTrackName","htmlInput","style","gap","TrackTypeSelector","Suspense","fallback","isElectron","FormControl","FormControlLabel","control","Checkbox","checked","setTextIndexTrack","TextIndexingConfig","spacer","height","rootModel","getRoot","FileSelector","description","location","trackData","setLocation","setTrackData","setName","indexTrackData","setIndexTrackData","root","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","alertContainer","steps","activeStep","setActiveStep","getStepContent","step","TrackSourceSelect","ConfirmTrack","isNextDisabled","Stepper","orientation","Step","StepLabel","StepContent","Button","length","textIndexTrack","view","trackConfig","getTrackConfig","Date","now","isSessionWithAddTracks","Error","trackId","addTrackConf","showTrack","textIndexingConf","jobsManager","attr","indexName","queueJob","indexingParams","assemblies","tracks","indexType","timestamp","toISOString","cancelCallback","abortJob","doTextIndexTrack","clearData","isSessionModelWithWidgets","hideWidget","doSubmit","notifyError","textbox","width","submit","setVal","error","setError","ErrorMessage","multiline","rows","undefined","conf","JSON","parse","confs","Array","isArray","transaction","c","console","ComponentMap","DefaultAddTrackWorkflow","PasteConfigWorkflow","fromEntries","getAddTrackWorkflowElements","w","ReactComponent","val2","Select","keys","FormHelperText"],"sourceRoot":""}