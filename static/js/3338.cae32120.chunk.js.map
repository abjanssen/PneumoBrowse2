{"version":3,"file":"static/js/3338.cae32120.chunk.js","mappings":"uOASA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,IAAK,CACHC,SAAU,YAEZC,OAAQ,CACNC,cAAe,OACfC,OAAQ,IACRH,SAAU,YAEZI,MAAO,CACLC,MAAO,GACPC,OAAQ,MAqCZ,GAjCkBC,EAAAA,EAAAA,WAAS,UAAU,OACnCC,EAAM,OACNC,EAAM,MACNC,IAMA,MAAM,QAAEC,GAAYd,KACd,gBAAEe,EAAe,OAAEN,EAAM,UAAEO,EAAS,UAAEC,EAAS,QAAEC,GAAYL,GAC7D,MAAEL,IAAUW,EAAAA,EAAAA,mBAAkBN,GAC9BO,EAASF,IAAUG,KAAKC,MAAMV,EAASK,IACvCM,EAAIX,EAASI,EACnB,OAAOI,GACLI,EAAAA,EAAAA,MAAA,OAAKC,UAAWX,EAAQZ,IAAIwB,SAAA,EAC1BF,EAAAA,EAAAA,MAAA,OACEC,UAAWX,EAAQV,OACnBI,MAAOA,EACPC,OAAQA,EACRkB,MAAO,CACLC,IAAKZ,GACLU,SAAA,EAEFG,EAAAA,EAAAA,KAAA,QAAMC,GAAI,EAAGC,GAAIvB,EAAOwB,GAAIT,EAAGU,GAAIV,EAAGW,OAAO,WAC7CL,EAAAA,EAAAA,KAAA,QAAMC,GAAInB,EAAQoB,GAAIpB,EAAQqB,GAAI,EAAGC,GAAIxB,EAAQyB,OAAO,cAG1DL,EAAAA,EAAAA,KAACM,EAAAA,EAAmB,CAACf,OAAQ,IAAKA,EAAQL,wBAE1C,IACN,I,eC7CA,MAiCA,GAjC2CL,EAAAA,EAAAA,WAAS,SAAU0B,GAG5D,MAAM,MAAEvB,GAAUuB,EACZC,GAAMC,EAAAA,EAAAA,QAAuB,OAC5B1B,EAAQ2B,IAAaC,EAAAA,EAAAA,aACrB7B,EAAQ8B,IAAaD,EAAAA,EAAAA,YAE5B,OACEhB,EAAAA,EAAAA,MAAA,OACEa,IAAKA,EACLK,YAAaC,IACX,MAAMC,EAAOP,EAAIQ,SAASC,wBACpBlB,EAAMgB,GAAMhB,KAAO,EACnBmB,EAAOH,GAAMG,MAAQ,EAC3BR,EAAUI,EAAMK,QAAUpB,GAC1Ba,EAAUE,EAAMM,QAAUF,EAAK,EAEjCG,aAAcA,KACZX,OAAUY,GACVV,OAAUU,EAAU,EACpBzB,SAAA,EAEFG,EAAAA,EAAAA,KAACuB,EAAAA,GAA0B,IAAKhB,KAChCP,EAAAA,EAAAA,KAACwB,EAAAA,EAAS,CAACxC,MAAOA,IAEjBF,GAAUC,GACTiB,EAAAA,EAAAA,KAACyB,EAAS,CAAC3C,OAAQA,EAAQC,OAAQA,EAAQC,MAAOA,IAChD,OAGV,G","sources":["../../../plugins/variants/src/MultiLinearVariantDisplay/components/Crosshair.tsx","../../../plugins/variants/src/MultiLinearVariantDisplay/components/VariantDisplayComponent.tsx"],"sourcesContent":["import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport MultiVariantTooltip from '../../shared/components/MultiVariantTooltip'\n\nimport type { MultiLinearVariantDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()({\n  rel: {\n    position: 'relative',\n  },\n  cursor: {\n    pointerEvents: 'none',\n    zIndex: 1000,\n    position: 'absolute',\n  },\n  color: {\n    width: 10,\n    height: 10,\n  },\n})\n\nconst Crosshair = observer(function ({\n  mouseX,\n  mouseY,\n  model,\n}: {\n  mouseX: number\n  mouseY: number\n  model: MultiLinearVariantDisplayModel\n}) {\n  const { classes } = useStyles()\n  const { hoveredGenotype, height, scrollTop, rowHeight, sources } = model\n  const { width } = getContainingView(model) as LinearGenomeViewModel\n  const source = sources?.[Math.floor(mouseY / rowHeight)]\n  const y = mouseY - scrollTop\n  return source ? (\n    <div className={classes.rel}>\n      <svg\n        className={classes.cursor}\n        width={width}\n        height={height}\n        style={{\n          top: scrollTop,\n        }}\n      >\n        <line x1={0} x2={width} y1={y} y2={y} stroke=\"black\" />\n        <line x1={mouseX} x2={mouseX} y1={0} y2={height} stroke=\"black\" />\n      </svg>\n\n      <MultiVariantTooltip source={{ ...source, hoveredGenotype }} />\n    </div>\n  ) : null\n})\n\nexport default Crosshair\n","import { useRef, useState } from 'react'\n\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\nimport Crosshair from './Crosshair'\nimport LegendBar from '../../shared/components/LegendBar'\n\nimport type { MultiLinearVariantDisplayModel } from '../model'\n\nconst MultiLinearVariantDisplayComponent = observer(function (props: {\n  model: MultiLinearVariantDisplayModel\n}) {\n  const { model } = props\n  const ref = useRef<HTMLDivElement>(null)\n  const [mouseY, setMouseY] = useState<number>()\n  const [mouseX, setMouseX] = useState<number>()\n\n  return (\n    <div\n      ref={ref}\n      onMouseMove={event => {\n        const rect = ref.current?.getBoundingClientRect()\n        const top = rect?.top || 0\n        const left = rect?.left || 0\n        setMouseY(event.clientY - top)\n        setMouseX(event.clientX - left)\n      }}\n      onMouseLeave={() => {\n        setMouseY(undefined)\n        setMouseX(undefined)\n      }}\n    >\n      <BaseLinearDisplayComponent {...props} />\n      <LegendBar model={model} />\n\n      {mouseX && mouseY ? (\n        <Crosshair mouseX={mouseX} mouseY={mouseY} model={model} />\n      ) : null}\n    </div>\n  )\n})\n\nexport default MultiLinearVariantDisplayComponent\n"],"names":["useStyles","makeStyles","rel","position","cursor","pointerEvents","zIndex","color","width","height","observer","mouseX","mouseY","model","classes","hoveredGenotype","scrollTop","rowHeight","sources","getContainingView","source","Math","floor","y","_jsxs","className","children","style","top","_jsx","x1","x2","y1","y2","stroke","MultiVariantTooltip","props","ref","useRef","setMouseY","useState","setMouseX","onMouseMove","event","rect","current","getBoundingClientRect","left","clientY","clientX","onMouseLeave","undefined","BaseLinearDisplayComponent","LegendBar","Crosshair"],"sourceRoot":""}