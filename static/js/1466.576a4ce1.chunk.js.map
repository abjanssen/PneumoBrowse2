{"version":3,"file":"static/js/1466.576a4ce1.chunk.js","mappings":"iMAaOA,eAAeC,EACpBC,EACAC,EACAC,SAEMC,EAAAA,EAAAA,OAAK,MAAQH,EAAKI,SAAWJ,EAAKK,6BACxC,MAAM,cAAEC,EAAa,MAAEF,GAAUJ,GAC3B,SAAEO,IAAaC,EAAAA,EAAAA,mBAAkBR,GACvC,OACES,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,eAAUP,EAAeD,IACxBK,GAAiBF,EAChBK,EAAAA,cAAA,KAAGC,UAAW,aAAaC,KAAKC,KAAKL,EAAU,OAC7CE,EAAAA,cAACI,EAAAA,EAAS,CAACC,MAAOd,EAAMe,YAAY,UAEpC,KAGV,C","sources":["../../../plugins/wiggle/src/LinearWiggleDisplay/renderSvg.tsx"],"sourcesContent":["import React from 'react'\n\nimport { getContainingView } from '@jbrowse/core/util'\nimport { when } from 'mobx'\n\nimport YScaleBar from '../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from './model'\nimport type {\n  ExportSvgDisplayOptions,\n  LinearGenomeViewModel,\n} from '@jbrowse/plugin-linear-genome-view'\n\nexport async function renderSvg(\n  self: WiggleDisplayModel,\n  opts: ExportSvgDisplayOptions,\n  superRenderSvg: (opts: ExportSvgDisplayOptions) => Promise<React.ReactNode>,\n) {\n  await when(() => !!self.stats && !!self.regionCannotBeRenderedText)\n  const { needsScalebar, stats } = self\n  const { offsetPx } = getContainingView(self) as LinearGenomeViewModel\n  return (\n    <>\n      <g>{await superRenderSvg(opts)}</g>\n      {needsScalebar && stats ? (\n        <g transform={`translate(${Math.max(-offsetPx, 0)})`}>\n          <YScaleBar model={self} orientation=\"left\" />\n        </g>\n      ) : null}\n    </>\n  )\n}\n"],"names":["async","renderSvg","self","opts","superRenderSvg","when","stats","regionCannotBeRenderedText","needsScalebar","offsetPx","getContainingView","React","transform","Math","max","YScaleBar","model","orientation"],"sourceRoot":""}