{"version":3,"file":"static/js/8751.040dd16a.chunk.js","mappings":"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","sources":["../../../packages/core/ui/DraggableDialog.tsx","../../../plugins/variants/src/shared/components/BulkEditPanel.tsx","../../../plugins/variants/src/shared/components/HelpfulTips.tsx","../../../plugins/variants/src/shared/components/RowPalettizer.tsx","../../../plugins/variants/src/shared/components/SourcesDataGrid.tsx","../../../plugins/variants/src/shared/sourcesGridUtils.ts","../../../plugins/variants/src/shared/components/SourcesGridHeader.tsx","../../../plugins/variants/src/shared/components/SourcesGrid.tsx","../../../plugins/variants/src/shared/components/SetColorDialog.tsx","../../../plugins/variants/src/shared/util.ts"],"sourcesContent":["import { useRef } from 'react'\n\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport Draggable from 'react-draggable'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DialogProps, PaperProps } from '@mui/material'\n\n// icons\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction PaperComponent(props: PaperProps) {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <Draggable\n      // @ts-expect-error\n      nodeRef={ref}\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n      // @ts-expect-error\n      onStart={arg => `${arg.target?.className}`.includes('MuiDialogTitle')}\n    >\n      <Paper ref={ref} {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog {...props} PaperComponent={PaperComponent}>\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }}>\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../types'\n\nconst useStyles = makeStyles()({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\nexport default function BulkEditPanel({\n  onClose,\n  currLayout,\n}: {\n  currLayout: Source[]\n  onClose: (arg?: Source[]) => void\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [error, setError] = useState<unknown>()\n  return (\n    <>\n      <DialogContent>\n        <Typography>\n          Paste CSV or TSV. If a header column is present. First line is a\n          header. If a column called \"name\" is present, it uses that to connect\n          to IDs in the table, otherwise it uses the first column no.\n        </Typography>\n\n        {error ? <ErrorMessage error={error} /> : null}\n        <TextField\n          variant=\"outlined\"\n          multiline\n          minRows={5}\n          placeholder={\n            'name,population\\nHG00098,GBR\\nHG00101,GBR\\nHG00459,CHS\\n...'\n          }\n          maxRows={10}\n          fullWidth\n          value={val}\n          onChange={event => {\n            setVal(event.target.value)\n          }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            const lines = val\n              .split('\\n')\n              .map(f => f.trim())\n              .filter(f => !!f)\n            const fields = lines[0]!.split(/[,\\t]/gm)\n            if (fields.includes('name')) {\n              setError('')\n              const oldLayout = Object.fromEntries(\n                currLayout.map(record => [record.name, record]),\n              )\n              const newData = Object.fromEntries(\n                lines.slice(1).map(line => {\n                  const cols = line.split(/[,\\t]/gm)\n                  const newRecord = Object.fromEntries(\n                    cols.map((col, idx) => [fields[idx], col]),\n                  )\n                  return [\n                    newRecord.name,\n                    {\n                      ...newRecord,\n                      ...oldLayout[newRecord.name],\n                    },\n                  ]\n                }),\n              )\n\n              onClose(\n                currLayout.map(record => ({\n                  ...record,\n                  ...newData[record.name],\n                })),\n              )\n            } else {\n              setError(new Error('No \"name\" column found on line 1'))\n            }\n          }}\n        >\n          Update rows\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            const lines = val\n              .split('\\n')\n              .map(f => f.trim())\n              .filter(f => !!f)\n            const fields = lines[0]!.split(/[,\\t]/gm)\n            if (fields.includes('name')) {\n              setError('')\n              const oldLayout = Object.fromEntries(\n                currLayout.map(record => [record.name, record]),\n              )\n              const newData = Object.fromEntries(\n                lines.slice(1).map(line => {\n                  const cols = line.split(/[,\\t]/gm)\n                  const newRecord = Object.fromEntries(\n                    cols.map((col, idx) => [fields[idx], col]),\n                  )\n                  return [\n                    newRecord.name,\n                    {\n                      ...newRecord,\n                      ...oldLayout[newRecord.name],\n                    },\n                  ]\n                }),\n              )\n\n              onClose(\n                currLayout.map(record => ({\n                  ...newData[record.name],\n                })),\n              )\n            } else {\n              setError(new Error('No \"name\" column found on line 1'))\n            }\n          }}\n        >\n          Replace rows\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"inherit\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n}\n","export default function HelpfulTips() {\n  return (\n    <>\n      Helpful tips\n      <ul>\n        <li>You can select rows in the table with the checkboxes</li>\n        <li>Multi-select is enabled with shift-click and control-click</li>\n        <li>The \"Move selected items up/down\" can re-arrange subtracks</li>\n        <li>Sorting the data grid itself can also re-arrange subtracks</li>\n        <li>Changes are applied when you hit Submit</li>\n        <li>You can click and drag the dialog box to move it on the screen</li>\n        <li>\n          Columns in the table can be hidden using a vertical '...' menu on the\n          right side of each column\n        </li>\n      </ul>\n    </>\n  )\n}\n","import { set1 } from '@jbrowse/core/ui/colors'\nimport { Button } from '@mui/material'\n\nimport { randomColor } from '../util'\n\nimport type { Source } from '../types'\n\nexport default function RowPalettizer({\n  setCurrLayout,\n  currLayout,\n}: {\n  currLayout: Source[]\n  setCurrLayout: (arg: Source[]) => void\n}) {\n  return (\n    <div>\n      Create color palette based on...\n      {Object.keys(currLayout[0] ?? [])\n        .filter(\n          f =>\n            f !== 'name' &&\n            f !== 'color' &&\n            f !== 'label' &&\n            f !== 'id' &&\n            f !== 'HP',\n        )\n        .map(r => (\n          <Button\n            key={r}\n            variant=\"contained\"\n            color=\"inherit\"\n            onClick={() => {\n              const map = new Map<string, number>()\n              for (const row of currLayout) {\n                const val = map.get(row[r] as string)\n                if (!val) {\n                  map.set(row[r] as string, 1)\n                } else {\n                  map.set(row[r] as string, val + 1)\n                }\n              }\n              const ret = Object.fromEntries(\n                [...map.entries()]\n                  .sort((a, b) => a[1] - b[1])\n                  .map((r, idx) => [r[0], set1[idx] || randomColor(r[0])]),\n              )\n\n              setCurrLayout(\n                currLayout.map(row => ({\n                  ...row,\n                  color: ret[row[r] as string],\n                })),\n              )\n            }}\n          >\n            {r}\n          </Button>\n        ))}\n      <Button\n        onClick={() => {\n          setCurrLayout(\n            currLayout.map(row => ({\n              ...row,\n              color: undefined,\n            })),\n          )\n        }}\n      >\n        Clear colors\n      </Button>\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../types'\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\n\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nexport default function SourcesDataGrid({\n  rows,\n  onChange,\n  setSelected,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  setSelected: (arg: string[]) => void\n}) {\n  const { classes } = useStyles()\n  const {\n    id: _id,\n    name: _name,\n    label: _label,\n    color: _color,\n    baseUri: _baseUri,\n    HP: _HP,\n    ...rest\n  } = rows[0]!\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        checkboxSelection\n        disableRowSelectionOnClick\n        onRowSelectionModelChange={arg => {\n          setSelected(arg as string[])\n        }}\n        rows={rows}\n        rowHeight={25}\n        columnHeaderHeight={33}\n        columns={[\n          {\n            field: 'color',\n            headerName: 'Color',\n            renderCell: params => {\n              const { value, id } = params\n              return (\n                <ColorPicker\n                  color={value || 'blue'}\n                  onChange={c => {\n                    const elt = rows.find(f => f.name === id)\n                    if (elt) {\n                      elt.color = c\n                    }\n                    onChange([...rows])\n                  }}\n                />\n              )\n            },\n          },\n          {\n            field: 'label',\n            headerName: 'Name',\n            width: measureGridWidth(rows.map(r => r.label)),\n          },\n          ...Object.keys(rest).map(\n            val =>\n              ({\n                field: val,\n                renderCell: ({ value }) => (\n                  <div className={classes.cell}>\n                    <SanitizedHTML html={getStr(value)} />\n                  </div>\n                ),\n                width: measureGridWidth(\n                  rows.map(r => `${r[val as keyof Source]}`),\n                ),\n              }) satisfies GridColDef<(typeof rows)[0]>,\n          ),\n        ]}\n        sortModel={\n          [\n            /* we control the sort as a controlled component using\n             * onSortModelChange */\n          ]\n        }\n        onSortModelChange={args => {\n          const sort = args[0]\n          // this idx%2 flip flops the sorting order, we could inspect args\n          // for sort direction asc or desc but this is just a simplified\n          // thing since we are controlling sort instead of the default data\n          // grid sort anyways\n          const idx = (currSort.idx + 1) % 2\n          const field = sort!.field || currSort.field\n          setCurrSort({ idx, field })\n          onChange(\n            field\n              ? [...rows].sort((a, b) => {\n                  const aa = getStr(a[field as keyof Source])\n                  const bb = getStr(b[field as keyof Source])\n                  return idx === 1 ? aa.localeCompare(bb) : bb.localeCompare(aa)\n                })\n              : rows,\n          )\n        }}\n      />\n    </div>\n  )\n}\n","export function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n","import { useState } from 'react'\n\nimport { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport { Button } from '@mui/material'\n\nimport { moveDown, moveUp } from '../sourcesGridUtils'\n\nimport type { Source } from '../types'\n\nexport default function SourcesGridHeader({\n  selected,\n  onChange,\n  rows,\n  showTips,\n}: {\n  onChange: (arg: Source[]) => void\n  rows: Source[]\n  selected: string[]\n  showTips: boolean\n}) {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [widgetColor, setWidgetColor] = useState('blue')\n  return (\n    <>\n      <Button\n        disabled={!selected.length}\n        onClick={event => {\n          setAnchorEl(event.currentTarget)\n        }}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          selected.forEach(id => {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          })\n\n          onChange([...rows])\n        }}\n        onClose={() => {\n          setAnchorEl(null)\n        }}\n      />\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport SourcesDataGrid from './SourcesDataGrid'\nimport SourcesGridHeader from './SourcesGridHeader'\n\nimport type { Source } from '../types'\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const [selected, setSelected] = useState([] as string[])\n\n  return (\n    <div>\n      <SourcesGridHeader\n        selected={selected}\n        rows={rows}\n        showTips={showTips}\n        onChange={onChange}\n      />\n      <SourcesDataGrid\n        rows={rows}\n        onChange={onChange}\n        setSelected={setSelected}\n      />\n    </div>\n  )\n}\n\nexport default SourcesGrid\n","import { useState } from 'react'\n\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog'\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport BulkEditPanel from './BulkEditPanel'\nimport HelpfulTips from './HelpfulTips'\nimport RowPalettizer from './RowPalettizer'\nimport SourcesGrid from './SourcesGrid'\n\nimport type { Source } from '../types'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  fr: {\n    float: 'right',\n    display: 'flex',\n    gap: 8,\n  },\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\ninterface ReducedModel {\n  sources?: Source[]\n  setLayout: (s: Source[]) => void\n  clearLayout: () => void\n}\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [showBulkEditor, setShowBulkEditor] = useState(false)\n  const [currLayout, setCurrLayout] = useState(sources || [])\n  const [showTips, setShowTips] = useLocalStorage(\n    'multivariant-showTips',\n    false,\n  )\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title=\"Multi-variant color/arrangement editor\"\n    >\n      {showBulkEditor ? (\n        <BulkEditPanel\n          currLayout={currLayout}\n          onClose={arg => {\n            if (arg) {\n              setCurrLayout(arg)\n            }\n\n            setShowBulkEditor(false)\n          }}\n        />\n      ) : (\n        <>\n          <DialogContent className={classes.content}>\n            <div className={classes.fr}>\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  setShowTips(!showTips)\n                }}\n              >\n                {showTips ? 'Hide tips' : 'Show tips'}\n              </Button>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => {\n                  setShowBulkEditor(!showBulkEditor)\n                }}\n              >\n                Show Bulk row editor\n              </Button>\n            </div>\n\n            {showTips ? <HelpfulTips /> : null}\n            <br />\n            <RowPalettizer\n              currLayout={currLayout}\n              setCurrLayout={setCurrLayout}\n            />\n\n            <SourcesGrid\n              rows={currLayout}\n              onChange={setCurrLayout}\n              showTips={showTips}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"inherit\"\n              onClick={() => {\n                model.clearLayout()\n                setCurrLayout(model.sources || [])\n              }}\n            >\n              Clear custom settings\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                handleClose()\n                setCurrLayout([...(model.sources || [])])\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                model.setLayout(currLayout)\n                handleClose()\n              }}\n            >\n              Submit\n            </Button>\n          </DialogActions>\n        </>\n      )}\n    </DraggableDialog>\n  )\n}\n","// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  color?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function randomColor(str: string) {\n  let sum = 0\n\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i)\n  }\n  return colorify(sum * 10)\n}\n\nexport function colorify(n: number) {\n  return `hsl(${n % 255}, 50%, 50%)`\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","ref","useRef","_jsx","Draggable","nodeRef","cancel","onStart","arg","target","className","includes","children","Paper","observer","classes","title","onClose","Dialog","_jsxs","ScopedCssBaseline","DialogTitle","style","cursor","IconButton","onClick","CloseIcon","Divider","textAreaFont","fontFamily","BulkEditPanel","currLayout","val","setVal","useState","error","setError","_Fragment","DialogContent","Typography","ErrorMessage","TextField","variant","multiline","minRows","placeholder","maxRows","fullWidth","value","onChange","event","slotProps","input","DialogActions","Button","lines","split","map","f","trim","filter","fields","oldLayout","Object","fromEntries","record","name","newData","slice","line","cols","newRecord","col","idx","Error","HelpfulTips","RowPalettizer","setCurrLayout","keys","r","Map","row","get","set","ret","entries","sort","a","b","set1","randomColor","undefined","cell","whiteSpace","overflow","textOverflow","SourcesDataGrid","rows","setSelected","id","_id","_name","label","_label","_color","baseUri","_baseUri","HP","_HP","rest","currSort","setCurrSort","field","height","width","DataGrid","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","rowHeight","columnHeaderHeight","columns","headerName","renderCell","params","ColorPicker","c","elt","find","measureGridWidth","SanitizedHTML","html","getStr","sortModel","onSortModelChange","args","aa","bb","localeCompare","moveUp","arr","sel","by","idxs","l","findIndex","v","lastIdx","old","Math","max","splice","moveDown","length","min","SourcesGridHeader","selected","showTips","anchorEl","setAnchorEl","widgetColor","setWidgetColor","disabled","currentTarget","KeyboardArrowUpIcon","KeyboardArrowDownIcon","KeyboardDoubleArrowUpIcon","KeyboardDoubleArrowDownIcon","ColorPopover","forEach","content","minWidth","fr","float","display","gap","SetColorDialog","model","handleClose","sources","showBulkEditor","setShowBulkEditor","setShowTips","useLocalStorage","DraggableDialog","open","maxWidth","SourcesGrid","type","clearLayout","setLayout","str","sum","i","charCodeAt","colorify","n"],"sourceRoot":""}