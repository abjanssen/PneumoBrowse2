{"version":3,"file":"static/js/8658.cbd0fa35.chunk.js","mappings":"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","sources":["../../../packages/core/ui/DraggableDialog.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SourcesGrid.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/SetColorDialog.tsx"],"sourcesContent":["import { useRef } from 'react'\n\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport Draggable from 'react-draggable'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DialogProps, PaperProps } from '@mui/material'\n\n// icons\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction PaperComponent(props: PaperProps) {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <Draggable\n      // @ts-expect-error\n      nodeRef={ref}\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n      // @ts-expect-error\n      onStart={arg => `${arg.target?.className}`.includes('MuiDialogTitle')}\n    >\n      <Paper ref={ref} {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog {...props} PaperComponent={PaperComponent}>\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }}>\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","import { getConf } from '@jbrowse/core/configuration'\nimport {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n","import { useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport { Button } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { moveDown, moveUp } from './util'\n\nimport type { Source } from '../../util'\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\n\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const { classes } = useStyles()\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [selected, setSelected] = useState([] as string[])\n  const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0]!\n  const [widgetColor, setWidgetColor] = useState('blue')\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div>\n      <Button\n        disabled={!selected.length}\n        onClick={event => {\n          setAnchorEl(event.currentTarget)\n        }}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          selected.forEach(id => {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          })\n\n          onChange([...rows])\n        }}\n        onClose={() => {\n          setAnchorEl(null)\n        }}\n      />\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          getRowId={row => row.name}\n          checkboxSelection\n          disableRowSelectionOnClick\n          onRowSelectionModelChange={arg => {\n            setSelected(arg as string[])\n          }}\n          rows={rows}\n          rowHeight={25}\n          columnHeaderHeight={33}\n          columns={[\n            {\n              field: 'color',\n              headerName: 'Color',\n              renderCell: ({ value, id }) => (\n                <ColorPicker\n                  color={value || 'blue'}\n                  onChange={c => {\n                    const elt = rows.find(f => f.name === id)\n                    if (elt) {\n                      elt.color = c\n                    }\n                    onChange([...rows])\n                  }}\n                />\n              ),\n            },\n            {\n              field: 'name',\n              headerName: 'Name',\n              width: measureGridWidth(rows.map(r => r.name)),\n            },\n            ...Object.keys(rest).map(\n              val =>\n                ({\n                  field: val,\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value)} />\n                    </div>\n                  ),\n                  width: measureGridWidth(\n                    rows.map(r => `${r[val as keyof Source]}`),\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            ),\n          ]}\n          sortModel={\n            [\n              /* we control the sort as a controlled component using onSortModelChange */\n            ]\n          }\n          onSortModelChange={args => {\n            const sort = args[0]\n            // this idx%2 flip flops the sorting order, we could inspect args\n            // for sort direction asc or desc but this is just a simplified\n            // thing since we are controlling sort instead of the default data\n            // grid sort anyways\n            const idx = (currSort.idx + 1) % 2\n            const field = sort!.field || currSort.field\n            setCurrSort({ idx, field })\n            onChange(\n              field\n                ? [...rows].sort((a, b) => {\n                    const aa = getStr(a[field as keyof Source])\n                    const bb = getStr(b[field as keyof Source])\n                    return idx === 1\n                      ? aa.localeCompare(bb)\n                      : bb.localeCompare(aa)\n                  })\n                : rows,\n            )\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default SourcesGrid\n","import { useState } from 'react'\n\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog'\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport SourcesGrid from './SourcesGrid'\n\nimport type { Source } from '../../util'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  float: {\n    float: 'right',\n  },\n})\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    sources?: Source[]\n    setLayout: (s: Source[]) => void\n    clearLayout: () => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [currLayout, setCurrLayout] = useState(structuredClone(sources || []))\n  const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', false)\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title=\"Multi-wiggle color/arrangement editor\"\n    >\n      <DialogContent className={classes.content}>\n        <Button\n          variant=\"contained\"\n          className={classes.float}\n          onClick={() => {\n            setShowTips(!showTips)\n          }}\n        >\n          {showTips ? 'Hide tips' : 'Show tips'}\n        </Button>\n        <br />\n        {showTips ? (\n          <>\n            Helpful tips\n            <ul>\n              <li>You can select rows in the table with the checkboxes</li>\n              <li>\n                Multi-select is enabled with shift-click and control-click\n              </li>\n              <li>\n                The \"Move selected items up/down\" can re-arrange subtracks\n              </li>\n              <li>\n                Sorting the data grid itself can also re-arrange subtracks\n              </li>\n              <li>Changes are applied when you hit Submit</li>\n              <li>\n                You can click and drag the dialog box to move it on the screen\n              </li>\n              <li>\n                Columns in the table can be hidden using a vertical '...' menu\n                on the right side of each column\n              </li>\n            </ul>\n          </>\n        ) : null}\n        <SourcesGrid\n          rows={currLayout}\n          onChange={setCurrLayout}\n          showTips={showTips}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"inherit\"\n          onClick={() => {\n            model.clearLayout()\n            setCurrLayout(model.sources || [])\n          }}\n        >\n          Clear custom settings\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            setCurrLayout([...(model.sources || [])])\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            model.setLayout(currLayout)\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </DraggableDialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","ref","useRef","_jsx","Draggable","nodeRef","cancel","onStart","arg","target","className","includes","children","Paper","observer","classes","title","onClose","Dialog","_jsxs","ScopedCssBaseline","DialogTitle","style","cursor","IconButton","onClick","CloseIcon","Divider","moveUp","arr","sel","by","idxs","map","l","findIndex","v","name","sort","a","b","lastIdx","old","idx","Math","max","splice","moveDown","length","min","trackLabelFontSize","getOffset","model","prefersOffset","trackLabels","getContainingView","track","getContainingTrack","trackName","getConf","measureText","cell","whiteSpace","overflow","textOverflow","rows","onChange","showTips","anchorEl","setAnchorEl","useState","selected","setSelected","_name","_color","baseUri","_baseUri","rest","widgetColor","setWidgetColor","currSort","setCurrSort","field","Button","disabled","event","currentTarget","KeyboardArrowUpIcon","KeyboardArrowDownIcon","KeyboardDoubleArrowUpIcon","KeyboardDoubleArrowDownIcon","ColorPopover","c","forEach","id","elt","find","f","height","width","DataGrid","getRowId","row","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","rowHeight","columnHeaderHeight","columns","headerName","renderCell","value","ColorPicker","measureGridWidth","r","Object","keys","val","SanitizedHTML","html","getStr","sortModel","onSortModelChange","args","aa","bb","localeCompare","content","minWidth","float","SetColorDialog","handleClose","sources","currLayout","setCurrLayout","structuredClone","setShowTips","useLocalStorage","DraggableDialog","open","maxWidth","DialogContent","variant","_Fragment","SourcesGrid","DialogActions","type","clearLayout","setLayout"],"sourceRoot":""}