{"version":3,"file":"static/js/3425.acda872d.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/AccordionDetails/AccordionDetails.js","../../../node_modules/@mui/material/esm/AccordionSummary/accordionSummaryClasses.js","../../../node_modules/@mui/material/esm/AccordionDetails/accordionDetailsClasses.js","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/dialogs/ImportBookmarksDialog.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/sessionSharing.ts","../../../node_modules/@mui/icons-material/esm/ExpandMore.js","../../../node_modules/@mui/material/esm/AccordionSummary/AccordionSummary.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { getAccordionDetailsUtilityClass } from \"./accordionDetailsClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getAccordionDetailsUtilityClass, classes);\n};\nconst AccordionDetailsRoot = styled('div', {\n  name: 'MuiAccordionDetails',\n  slot: 'Root'\n})(memoTheme(({\n  theme\n}) => ({\n  padding: theme.spacing(1, 2, 2)\n})));\nconst AccordionDetails = /*#__PURE__*/React.forwardRef(function AccordionDetails(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAccordionDetails'\n  });\n  const {\n    className,\n    ...other\n  } = props;\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(AccordionDetailsRoot, {\n    className: clsx(classes.root, className),\n    ref: ref,\n    ownerState: ownerState,\n    ...other\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionDetails.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default AccordionDetails;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAccordionSummaryUtilityClass(slot) {\n  return generateUtilityClass('MuiAccordionSummary', slot);\n}\nconst accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);\nexport default accordionSummaryClasses;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getAccordionDetailsUtilityClass(slot) {\n  return generateUtilityClass('MuiAccordionDetails', slot);\n}\nconst accordionDetailsClasses = generateUtilityClasses('MuiAccordionDetails', ['root']);\nexport default accordionDetailsClasses;","import { useState } from 'react'\n\nimport {\n  AssemblySelector,\n  Dialog,\n  ErrorMessage,\n  FileSelector,\n} from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { isSessionWithShareURL } from '@jbrowse/core/util/types'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport ImportIcon from '@mui/icons-material/Publish'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { readSessionFromDynamo } from '../../sessionSharing'\nimport { fromUrlSafeB64 } from '../../utils'\n\nimport type { GridBookmarkModel } from '../../model'\nimport type { FileLocation } from '@jbrowse/core/util/types'\n\nconst useStyles = makeStyles()(theme => ({\n  expandIcon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n  minWidth: {\n    minWidth: 500,\n  },\n}))\n\nasync function getBookmarksFromShareLink(shareLink: string, shareURL?: string) {\n  const defaultURL = 'https://share.jbrowse.org/api/v1/'\n  const urlParams = new URL(shareLink)\n  const sessionQueryParam = urlParams.searchParams.get('bookmarks')\n  const password = urlParams.searchParams.get('password')\n  const decryptedSession = await readSessionFromDynamo(\n    `${shareURL ?? defaultURL}load`,\n    sessionQueryParam || '',\n    password || '',\n  )\n\n  const sharedSession = JSON.parse(await fromUrlSafeB64(decryptedSession))\n  return sharedSession.sharedBookmarks\n}\n\nfunction guessFileType(header: string) {\n  return header.startsWith('chrom') && header.includes('assembly_name')\n    ? 'TSV'\n    : 'BED'\n}\n\nasync function getBookmarksFromTSVFile(lines: string[]) {\n  if (lines[0]!.startsWith('chrom')) {\n    lines = lines.slice(1)\n  }\n\n  return lines\n    .filter(f => !f.startsWith('#'))\n    .map(line => {\n      const [refName, start, end, label, assemblyName] = line.split('\\t')\n      return {\n        assemblyName: assemblyName!,\n        refName: refName!,\n        start: +start!,\n        end: +end!,\n        label: label === '.' ? undefined : label,\n      }\n    })\n}\n\nasync function getBookmarksFromBEDFile(lines: string[], selectedAsm: string) {\n  return lines\n    .filter(f => !f.startsWith('#'))\n    .map(line => {\n      const [refName, start, end, label] = line.split('\\t')\n      return {\n        assemblyName: selectedAsm,\n        refName: refName!,\n        start: +start!,\n        end: +end!,\n        label: label === '.' ? undefined : label,\n      }\n    })\n}\n\nconst ImportBookmarksDialog = observer(function ({\n  onClose,\n  model,\n}: {\n  onClose: () => void\n  model: GridBookmarkModel\n}) {\n  const { classes } = useStyles()\n  const [location, setLocation] = useState<FileLocation>()\n  const [error, setError] = useState<unknown>()\n  const [shareLink, setShareLink] = useState('')\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]!)\n  const [expanded, setExpanded] = useState<\n    'shareLinkAccordion' | 'fileAccordion'\n  >('shareLinkAccordion')\n\n  return (\n    <Dialog open onClose={onClose} maxWidth=\"xl\" title=\"Import bookmarks\">\n      <DialogContent className={classes.minWidth}>\n        <Accordion\n          expanded={expanded === 'shareLinkAccordion'}\n          onChange={() => {\n            setExpanded('shareLinkAccordion')\n          }}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n          >\n            <Typography\n              style={{ display: 'flex', alignItems: 'center', gap: '5px' }}\n            >\n              Import from share link\n            </Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <Typography>\n              Paste a bookmark share link generated by the 'Share' button from\n              the bookmarks widget\n            </Typography>\n            <TextField\n              label=\"Enter Share URL\"\n              variant=\"outlined\"\n              fullWidth\n              value={shareLink}\n              onChange={e => {\n                setShareLink(e.target.value)\n              }}\n            />\n          </AccordionDetails>\n        </Accordion>\n        <Accordion\n          expanded={expanded === 'fileAccordion'}\n          onChange={() => {\n            setExpanded('fileAccordion')\n          }}\n        >\n          <AccordionSummary\n            expandIcon={<ExpandMoreIcon className={classes.expandIcon} />}\n          >\n            <Typography>Import from file</Typography>\n          </AccordionSummary>\n          <AccordionDetails>\n            <FileSelector\n              location={location}\n              setLocation={setLocation}\n              name=\"File\"\n              description={`Choose a BED or TSV format file to import. Required TSV column headers are \"chrom, start, end, label, assembly_name\".`}\n            />\n            <AssemblySelector\n              onChange={val => {\n                setSelectedAsm(val)\n              }}\n              helperText={'Select the assembly for BED file.'}\n              session={session}\n              selected={selectedAsm}\n            />\n          </AccordionDetails>\n        </Accordion>\n        {error ? <ErrorMessage error={error} /> : null}\n      </DialogContent>\n      <DialogActions>\n        <Button variant=\"contained\" color=\"secondary\" onClick={onClose}>\n          Cancel\n        </Button>\n        <Button\n          data-testid=\"dialogImport\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={!location && !shareLink}\n          startIcon={<ImportIcon />}\n          onClick={async () => {\n            try {\n              if (expanded === 'fileAccordion' && location) {\n                const data = await openLocation(location).readFile('utf8')\n                const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f.trim())\n                const fileType = guessFileType(lines[0]!)\n                if (fileType === 'BED') {\n                  model.importBookmarks(\n                    await getBookmarksFromBEDFile(lines, selectedAsm),\n                  )\n                } else {\n                  // TSV\n                  model.importBookmarks(await getBookmarksFromTSVFile(lines))\n                }\n              } else if (\n                expanded === 'shareLinkAccordion' &&\n                shareLink &&\n                isSessionWithShareURL(session)\n              ) {\n                model.importBookmarks(\n                  await getBookmarksFromShareLink(shareLink, session.shareURL),\n                )\n              }\n              onClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            }\n          }}\n        >\n          Import\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\nexport default ImportBookmarksDialog\n","// duplicated from products/jbrowse-web/src/sessionSharing.ts ; could possibly be moved into a higher directory and shared between the two\nimport { toUrlSafeB64 } from './utils'\n\n// from https://stackoverflow.com/questions/1349404/\nfunction generateUID(length: number) {\n  return window\n    .btoa(\n      [...window.crypto.getRandomValues(new Uint8Array(length * 2))]\n        .map(b => String.fromCharCode(b))\n        .join(''),\n    )\n    .replaceAll(/[+/]/g, '')\n    .slice(0, length)\n}\n\nconst encrypt = async (text: string, password: string) => {\n  const AES = await import('crypto-js/aes')\n  return AES.encrypt(text, password).toString()\n}\n\nconst decrypt = async (text: string, password: string) => {\n  const AES = await import('crypto-js/aes')\n  const Utf8 = await import('crypto-js/enc-utf8')\n  const bytes = AES.decrypt(text, password)\n  return bytes.toString(Utf8)\n}\n\nfunction getErrorMsg(err: string) {\n  try {\n    const obj = JSON.parse(err)\n    return obj.message\n  } catch (e) {\n    return err\n  }\n}\n// writes the encrypted session, current datetime, and referer to DynamoDB\nexport async function shareSessionToDynamo(\n  session: unknown,\n  url: string,\n  referer: string,\n) {\n  const sess = await toUrlSafeB64(JSON.stringify(session))\n  const password = generateUID(5)\n  const encryptedSession = await encrypt(sess, password)\n\n  const data = new FormData()\n  data.append('session', encryptedSession)\n  data.append('dateShared', `${Date.now()}`)\n  data.append('referer', referer)\n\n  const response = await fetch(`${url}share`, {\n    method: 'POST',\n    mode: 'cors',\n    body: data,\n  })\n\n  if (!response.ok) {\n    const err = await response.text()\n    throw new Error(getErrorMsg(err))\n  }\n  const json = await response.json()\n  return {\n    json,\n    encryptedSession,\n    password,\n  }\n}\n\nexport async function readSessionFromDynamo(\n  baseUrl: string,\n  sessionQueryParam: string,\n  password: string,\n) {\n  const sessionId = sessionQueryParam.split('share-')[1]!\n  const url = `${baseUrl}?sessionId=${encodeURIComponent(sessionId)}`\n  const response = await fetch(url)\n  if (!response.ok) {\n    throw new Error(getErrorMsg(await response.text()))\n  }\n\n  const json = await response.json()\n  return decrypt(json.session, password)\n}\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z\"\n}), 'ExpandMore');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport ButtonBase from \"../ButtonBase/index.js\";\nimport AccordionContext from \"../Accordion/AccordionContext.js\";\nimport accordionSummaryClasses, { getAccordionSummaryUtilityClass } from \"./accordionSummaryClasses.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    expanded,\n    disabled,\n    disableGutters\n  } = ownerState;\n  const slots = {\n    root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],\n    focusVisible: ['focusVisible'],\n    content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],\n    expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']\n  };\n  return composeClasses(slots, getAccordionSummaryUtilityClass, classes);\n};\nconst AccordionSummaryRoot = styled(ButtonBase, {\n  name: 'MuiAccordionSummary',\n  slot: 'Root'\n})(memoTheme(({\n  theme\n}) => {\n  const transition = {\n    duration: theme.transitions.duration.shortest\n  };\n  return {\n    display: 'flex',\n    width: '100%',\n    minHeight: 48,\n    padding: theme.spacing(0, 2),\n    transition: theme.transitions.create(['min-height', 'background-color'], transition),\n    [`&.${accordionSummaryClasses.focusVisible}`]: {\n      backgroundColor: (theme.vars || theme).palette.action.focus\n    },\n    [`&.${accordionSummaryClasses.disabled}`]: {\n      opacity: (theme.vars || theme).palette.action.disabledOpacity\n    },\n    [`&:hover:not(.${accordionSummaryClasses.disabled})`]: {\n      cursor: 'pointer'\n    },\n    variants: [{\n      props: props => !props.disableGutters,\n      style: {\n        [`&.${accordionSummaryClasses.expanded}`]: {\n          minHeight: 64\n        }\n      }\n    }]\n  };\n}));\nconst AccordionSummaryContent = styled('span', {\n  name: 'MuiAccordionSummary',\n  slot: 'Content'\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'flex',\n  textAlign: 'start',\n  flexGrow: 1,\n  margin: '12px 0',\n  variants: [{\n    props: props => !props.disableGutters,\n    style: {\n      transition: theme.transitions.create(['margin'], {\n        duration: theme.transitions.duration.shortest\n      }),\n      [`&.${accordionSummaryClasses.expanded}`]: {\n        margin: '20px 0'\n      }\n    }\n  }]\n})));\nconst AccordionSummaryExpandIconWrapper = styled('span', {\n  name: 'MuiAccordionSummary',\n  slot: 'ExpandIconWrapper'\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'flex',\n  color: (theme.vars || theme).palette.action.active,\n  transform: 'rotate(0deg)',\n  transition: theme.transitions.create('transform', {\n    duration: theme.transitions.duration.shortest\n  }),\n  [`&.${accordionSummaryClasses.expanded}`]: {\n    transform: 'rotate(180deg)'\n  }\n})));\nconst AccordionSummary = /*#__PURE__*/React.forwardRef(function AccordionSummary(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiAccordionSummary'\n  });\n  const {\n    children,\n    className,\n    expandIcon,\n    focusVisibleClassName,\n    onClick,\n    slots,\n    slotProps,\n    ...other\n  } = props;\n  const {\n    disabled = false,\n    disableGutters,\n    expanded,\n    toggle\n  } = React.useContext(AccordionContext);\n  const handleChange = event => {\n    if (toggle) {\n      toggle(event);\n    }\n    if (onClick) {\n      onClick(event);\n    }\n  };\n  const ownerState = {\n    ...props,\n    expanded,\n    disabled,\n    disableGutters\n  };\n  const classes = useUtilityClasses(ownerState);\n  const externalForwardedProps = {\n    slots,\n    slotProps\n  };\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    shouldForwardComponentProp: true,\n    className: clsx(classes.root, className),\n    elementType: AccordionSummaryRoot,\n    externalForwardedProps: {\n      ...externalForwardedProps,\n      ...other\n    },\n    ownerState,\n    additionalProps: {\n      focusRipple: false,\n      disableRipple: true,\n      disabled,\n      'aria-expanded': expanded,\n      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName)\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onClick: event => {\n        handlers.onClick?.(event);\n        handleChange(event);\n      }\n    })\n  });\n  const [ContentSlot, contentSlotProps] = useSlot('content', {\n    className: classes.content,\n    elementType: AccordionSummaryContent,\n    externalForwardedProps,\n    ownerState\n  });\n  const [ExpandIconWrapperSlot, expandIconWrapperSlotProps] = useSlot('expandIconWrapper', {\n    className: classes.expandIconWrapper,\n    elementType: AccordionSummaryExpandIconWrapper,\n    externalForwardedProps,\n    ownerState\n  });\n  return /*#__PURE__*/_jsxs(RootSlot, {\n    ...rootSlotProps,\n    children: [/*#__PURE__*/_jsx(ContentSlot, {\n      ...contentSlotProps,\n      children: children\n    }), expandIcon && /*#__PURE__*/_jsx(ExpandIconWrapperSlot, {\n      ...expandIconWrapperSlotProps,\n      children: expandIcon\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? AccordionSummary.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The icon to display as the expand indicator.\n   */\n  expandIcon: PropTypes.node,\n  /**\n   * This prop can help identify which element has keyboard focus.\n   * The class name will be applied when the element gains the focus through keyboard interaction.\n   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).\n   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).\n   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components\n   * if needed.\n   */\n  focusVisibleClassName: PropTypes.string,\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    content: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    expandIconWrapper: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    content: PropTypes.elementType,\n    expandIconWrapper: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default AccordionSummary;"],"names":["AccordionDetailsRoot","name","slot","theme","padding","spacing","inProps","ref","props","className","other","ownerState","classes","root","useUtilityClasses","getAccordionSummaryUtilityClass","getAccordionDetailsUtilityClass","useStyles","makeStyles","expandIcon","color","palette","tertiary","contrastText","minWidth","observer","onClose","model","location","setLocation","useState","error","setError","shareLink","setShareLink","session","getSession","assemblyNames","selectedAsm","setSelectedAsm","expanded","setExpanded","_jsxs","Dialog","open","maxWidth","title","children","DialogContent","Accordion","onChange","_jsx","AccordionSummary","ExpandMoreIcon","Typography","style","display","alignItems","gap","AccordionDetails","TextField","label","variant","fullWidth","value","e","target","FileSelector","description","AssemblySelector","val","helperText","selected","ErrorMessage","DialogActions","Button","onClick","disabled","startIcon","ImportIcon","async","lines","openLocation","readFile","split","filter","f","trim","header","startsWith","includes","importBookmarks","map","line","refName","start","end","assemblyName","undefined","getBookmarksFromBEDFile","slice","getBookmarksFromTSVFile","isSessionWithShareURL","shareURL","urlParams","URL","sessionQueryParam","searchParams","get","password","decryptedSession","readSessionFromDynamo","JSON","parse","fromUrlSafeB64","sharedBookmarks","getBookmarksFromShareLink","console","encrypt","text","toString","decrypt","AES","Utf8","getErrorMsg","err","message","shareSessionToDynamo","url","referer","sess","toUrlSafeB64","stringify","window","btoa","crypto","getRandomValues","Uint8Array","length","b","String","fromCharCode","join","replaceAll","encryptedSession","data","FormData","append","Date","now","response","fetch","method","mode","body","ok","Error","json","baseUrl","sessionId","encodeURIComponent","d","AccordionSummaryRoot","transition","duration","transitions","shortest","width","minHeight","create","focusVisible","backgroundColor","vars","action","focus","opacity","disabledOpacity","cursor","variants","disableGutters","AccordionSummaryContent","textAlign","flexGrow","margin","AccordionSummaryExpandIconWrapper","active","transform","focusVisibleClassName","slots","slotProps","toggle","A","content","expandIconWrapper","externalForwardedProps","RootSlot","rootSlotProps","shouldForwardComponentProp","elementType","additionalProps","focusRipple","disableRipple","getSlotProps","handlers","event","handleChange","ContentSlot","contentSlotProps","ExpandIconWrapperSlot","expandIconWrapperSlotProps"],"sourceRoot":""}