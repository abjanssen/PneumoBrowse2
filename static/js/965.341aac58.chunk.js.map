{"version":3,"file":"static/js/965.341aac58.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts","../../../packages/product-core/src/ui/FileInfoPanel.tsx","../../../packages/product-core/src/ui/RefNameInfoDialog.tsx","../../../packages/product-core/src/ui/AboutDialogContents.tsx","../../../packages/product-core/src/ui/AboutDialog.tsx"],"sourcesContent":["import React from 'react'\n\nimport isObject from 'is-object'\nimport { makeStyles } from 'tss-react/mui'\n\nimport Attributes from './Attributes'\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes attributes={value[0]} prefix={[...prefix, name]} />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { useState } from 'react'\n\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\nimport { getStr, measureGridWidth } from '../../util'\n\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <div style={{ display: 'flex', flexDirection: 'column' }}>\n          <DataGrid\n            disableRowSelectionOnClick\n            rows={rows}\n            rowHeight={20}\n            columnHeaderHeight={35}\n            hideFooter={rows.length < 25}\n            slots={{\n              toolbar: checked ? GridToolbar : null,\n            }}\n            slotProps={{\n              toolbar: {\n                printOptions: {\n                  disableToolbarButton: true,\n                },\n              },\n            }}\n            columns={colNames.map(\n              (val, index) =>\n                ({\n                  field: val,\n                  renderCell: params => {\n                    const value = params.value as string\n                    return (\n                      <div className={classes.cell}>\n                        <SanitizedHTML html={getStr(value || '')} />\n                      </div>\n                    )\n                  },\n                  width: widths[index],\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            )}\n          />\n        </div>\n      </div>\n    )\n  }\n  return null\n}\n","import React from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import React from 'react'\n\nimport isObject from 'is-object'\n\nimport ArrayValue from './ArrayValue'\nimport DataGridDetails from './DataGridDetails'\nimport SimpleField from './SimpleField'\nimport UriAttribute from './UriField'\nimport { accessNested, generateMaxWidth } from './util'\nimport { isUriLocation } from '../../util'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Record<string, React.ReactNode>\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter = val => val,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const formattedAttributes = { ...rest, ...__jbrowsefmt }\n\n  const maxLabelWidth = generateMaxWidth(\n    Object.entries(formattedAttributes).filter(\n      ([k, v]) => v !== undefined && !omits.has(k),\n    ),\n    prefix,\n  )\n\n  return (\n    <>\n      {Object.entries(formattedAttributes)\n        .filter(([k, v]) => v !== undefined && !omits.has(k))\n        .map(([key, value]) => {\n          const description = accessNested([...prefix, key], descriptions)\n          if (Array.isArray(value)) {\n            // check if it looks like an array of objects, which could be used\n            // in data grid\n            return value.length > 1 && value.every(val => isObject(val)) ? (\n              <DataGridDetails\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            ) : (\n              <ArrayValue\n                key={key}\n                name={key}\n                value={value}\n                description={description}\n                prefix={prefix}\n              />\n            )\n          } else if (isObject(value)) {\n            const { omitSingleLevel, ...rest } = props\n            return isUriLocation(value) ? (\n              hideUris ? null : (\n                <UriAttribute\n                  key={key}\n                  name={key}\n                  prefix={prefix}\n                  value={value}\n                />\n              )\n            ) : (\n              <Attributes\n                key={key}\n                {...rest}\n                attributes={value}\n                descriptions={descriptions}\n                prefix={[...prefix, key]}\n              />\n            )\n          } else {\n            return (\n              <SimpleField\n                key={key}\n                name={key}\n                value={formatter(value, key)}\n                description={description}\n                prefix={prefix}\n                width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n              />\n            )\n          }\n        })}\n    </>\n  )\n}\n","import React from 'react'\n\nimport ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React from 'react'\n\nimport { Link } from '@mui/material'\nimport isObject from 'is-object'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { SanitizedHTML } from '../../ui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {React.isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport BasicValue from './BasicValue'\nimport FieldName from './FieldName'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes } = useStyles()\n  return value !== null && value !== undefined ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={value} />\n    </div>\n  ) : null\n}\n","import isObject from 'is-object'\n\nimport { max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  arr.forEach(elt => {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  })\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n","import React, { useEffect, useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\ntype FileInfo = Record<string, unknown> | string\n\nexport default function FileInfoPanel({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n        })\n        setInfo(result as FileInfo)\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replaceAll('<', '&lt;')\n            .replaceAll('>', '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <ErrorMessage error={error} />\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks'\nimport { Button, DialogContent } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst MAX_REF_NAMES = 10_000\n\nconst useStyles = makeStyles()(theme => ({\n  container: {\n    minWidth: 800,\n  },\n  refNames: {\n    maxHeight: 300,\n    overflow: 'auto',\n    flexGrow: 1,\n    background: theme.palette.background.default,\n  },\n}))\n\nconst RefNameInfoDialog = observer(function ({\n  config,\n  onClose,\n}: {\n  config: AnyConfigurationModel\n  onClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [error, setError] = useState<unknown>()\n  const [refNames, setRefNames] = useState<Record<string, string[]>>()\n  const [copied, setCopied] = useState(false)\n  const { rpcManager } = getSession(config)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const map = await Promise.all(\n          [...new Set(getConfAssemblyNames(config))].map(async assemblyName => {\n            const adapterConfig = readConfObject(config, 'adapter')\n            return [\n              assemblyName,\n              (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                adapterConfig,\n                // hack for synteny adapters\n                regions: [\n                  {\n                    assemblyName,\n                  },\n                ],\n              })) as string[],\n            ] as const\n          }),\n        )\n        setRefNames(Object.fromEntries(map))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const names = refNames ? Object.entries(refNames) : []\n  const result = names\n    .flatMap(([assemblyName, refNames]) => {\n      return [\n        `--- ${assemblyName} ---`,\n        ...refNames.slice(0, MAX_REF_NAMES),\n        refNames.length > MAX_REF_NAMES\n          ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n          : '',\n      ]\n    })\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog\n      open\n      title=\"Reference sequence names used in track\"\n      onClose={onClose}\n      maxWidth=\"xl\"\n    >\n      <DialogContent className={classes.container}>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : refNames === undefined ? (\n          <LoadingEllipses message=\"Loading refNames\" />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(\n                  names\n                    .flatMap(([assemblyName, refNames]) => [\n                      `--- ${assemblyName} ---`,\n                      ...refNames,\n                    ])\n                    .filter(f => !!f)\n                    .join('\\n'),\n                )\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy ref names'}\n            </Button>\n\n            <pre className={classes.refNames}>{result}</pre>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default RefNameInfoDialog\n","import React, { useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { getConf, readConfObject } from '@jbrowse/core/configuration'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { Button } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FileInfoPanel from './FileInfoPanel'\nimport RefNameInfoDialog from './RefNameInfoDialog'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  button: {\n    float: 'right',\n  },\n})\n\nfunction removeAttr(obj: Record<string, unknown>, attr: string) {\n  for (const prop in obj) {\n    if (prop === attr) {\n      delete obj[prop]\n    } else if (typeof obj[prop] === 'object') {\n      removeAttr(obj[prop] as Record<string, unknown>, attr)\n    }\n  }\n  return obj\n}\n\nconst AboutDialogContents = observer(function ({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [copied, setCopied] = useState(false)\n  const conf = readConfObject(config)\n  const session = getSession(config)\n  const { classes } = useStyles()\n  const [showRefNames, setShowRefNames] = useState(false)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as Record<string, unknown>\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n  ) as { name: string; Component: React.FC<any> } | null\n\n  return (\n    <div className={classes.content}>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <span className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setShowRefNames(true)\n              }}\n            >\n              Show ref names\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                const snap = removeAttr(structuredClone(conf), 'baseUri')\n                copy(JSON.stringify(snap, null, 2))\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy config'}\n            </Button>\n          </span>\n        ) : null}\n        <Attributes\n          attributes={confPostExt}\n          omit={['displays', 'baseUri', 'refNames', 'formatAbout']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n      {showRefNames ? (\n        <RefNameInfoDialog\n          config={config}\n          onClose={() => {\n            setShowRefNames(false)\n          }}\n        />\n      ) : null}\n    </div>\n  )\n})\n\nexport default AboutDialogContents\n","import React from 'react'\n\nimport Dialog from '@jbrowse/core/ui/Dialog'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nimport AboutContents from './AboutDialogContents'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nexport function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <AboutComponent config={config} />\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","field","display","flexWrap","fieldSubvalue","wordBreak","maxHeight","padding","spacing","border","palette","action","selected","boxSizing","overflow","ArrayValue","name","value","description","prefix","classes","length","isObject","React","Attributes","attributes","className","FieldName","BasicValue","every","val","map","i","key","JSON","stringify","margin","marginBottom","cell","whiteSpace","textOverflow","DataGridDetails","checked","setChecked","useState","keys","Object","sort","unionKeys","Set","rows","entries","k","id","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","style","flexDirection","DataGrid","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","hideFooter","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","columns","index","renderCell","params","SanitizedHTML","html","getStr","width","UriField","uri","baseUri","href","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","formatter","hideUris","omits","__jbrowsefmt","formattedAttributes","maxLabelWidth","generateMaxWidth","filter","v","undefined","accessNested","Array","isArray","isUriLocation","UriAttribute","_extends","SimpleField","Math","min","expansionPanelDetails","icon","color","tertiary","contrastText","BaseCard","children","title","defaultExpanded","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","fieldValue","fontSize","isLink","exec","Link","String","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","join","Tooltip","placement","isEmpty","obj","generateTitle","type","ellipses","f","array","ceil","max","measureText","arr","obj2","forEach","elt","Description","FileInfoPanel","config","error","setError","info","setInfo","session","getSession","rpcManager","useEffect","adapterConfig","readConfObject","result","call","trackId","console","details","header","replaceAll","ErrorMessage","LoadingEllipses","message","container","refNames","flexGrow","default","observer","onClose","setRefNames","copied","setCopied","Promise","all","getConfAssemblyNames","async","assemblyName","regions","fromEntries","names","flatMap","slice","Dialog","open","maxWidth","DialogContent","Button","onClick","copy","setTimeout","content","button","float","removeAttr","attr","prop","conf","showRefNames","setShowRefNames","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","ExtraPanel","snap","structuredClone","Component","RefNameInfoDialog","AboutDialog","handleClose","trackName","getTrackName","AboutComponent","AboutContents"],"sourceRoot":""}