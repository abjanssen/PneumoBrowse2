{"version":3,"file":"static/js/9436.4548c068.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/BreakendPanel.tsx","../../../plugins/variants/src/VariantFeatureWidget/AnnotGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantAnnotationTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/variantFieldDescriptions.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport {\n  FormControlLabel,\n  Checkbox,\n  TextField,\n  Typography,\n} from '@mui/material'\n\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { measureGridWidth, SimpleFeatureSerialized } from '@jbrowse/core/util'\n\ninterface Entry {\n  sample: string\n  id: string\n  [key: string]: string\n}\n\ntype InfoFields = Record<string, unknown>\ntype Filters = Record<string, string>\n\nfunction SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event => {\n            setFilter({ ...filter, [field]: event.target.value })\n          }}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default function VariantSamples(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: { FORMAT?: Record<string, { Description?: string }> } | null\n}) {\n  const { feature, descriptions = {} } = props\n  const [filter, setFilter] = useState<Filters>({})\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const preFilteredRows = Object.entries(samples)\n\n  let error: unknown\n  let rows = [] as Entry[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(row => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(row[1]).map(e => [e[0], `${e[1]}`]),\n          ),\n          sample: row[0],\n          id: row[0],\n        } as Entry\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? new RegExp(currFilter, 'i').exec(row[key]!)\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    error = e\n  }\n\n  const keys = ['sample', ...Object.keys(preFilteredRows[0]?.[1] || {})]\n  const [checked, setChecked] = useState(false)\n  const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])))\n  const columns = keys.map((field, index) => ({\n    field,\n    description: descriptions?.FORMAT?.[field]?.Description,\n    width: widths[index],\n  }))\n\n  // disableRowSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return !preFilteredRows.length ? null : (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => {\n              setChecked(event.target.checked)\n            }}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n      {checked ? (\n        <SampleFilters\n          setFilter={setFilter}\n          columns={columns}\n          filter={filter}\n        />\n      ) : null}\n\n      <DataGrid\n        autoHeight\n        rows={rows}\n        hideFooter={rows.length < 100}\n        columns={columns}\n        disableRowSelectionOnClick\n        rowHeight={25}\n        columnHeaderHeight={35}\n        disableColumnMenu\n        slots={{ toolbar: checked ? GridToolbar : null }}\n        slotProps={{\n          toolbar: {\n            printOptions: {\n              disableToolbarButton: true,\n            },\n          },\n        }}\n      />\n    </BaseCard>\n  )\n}\n","import React, { lazy } from 'react'\nimport { Link, Typography } from '@mui/material'\nimport {\n  getEnv,\n  getSession,\n  SimpleFeature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { ViewType } from '@jbrowse/core/pluggableElementTypes'\n\nimport { VariantFeatureWidgetModel } from './stateModelFactory'\n\n// lazies\nconst BreakendOptionDialog = lazy(() => import('./BreakendOptionDialog'))\n\nfunction LocStringList({\n  locStrings,\n  model,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n}) {\n  const session = getSession(model)\n  return (\n    <div>\n      <Typography>Link to linear view of breakend endpoints</Typography>\n      <ul>\n        {locStrings.map((locString, index) => (\n          /* biome-ignore lint/suspicious/noArrayIndexKey: */\n          <li key={`${locString}-${index}`}>\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              {`LGV - ${locString}`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nfunction LaunchBreakpointSplitViewPanel({\n  locStrings,\n  model,\n  feature,\n  viewType,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n  viewType: ViewType\n}) {\n  const session = getSession(model)\n  const simpleFeature = new SimpleFeature(feature)\n  return (\n    <div>\n      <Typography>\n        Launch split views with breakend source and target\n      </Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={JSON.stringify(locString)}>\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                session.queueDialog(handleClose => [\n                  BreakendOptionDialog,\n                  { handleClose, model, feature: simpleFeature, viewType },\n                ])\n              }}\n            >\n              {`${feature.refName}:${feature.start} // ${locString} (split view)`}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default function BreakendPanel(props: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  let viewType: ViewType | undefined\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <LocStringList model={model} locStrings={locStrings} />\n      {viewType ? (\n        <LaunchBreakpointSplitViewPanel\n          viewType={viewType}\n          model={model}\n          locStrings={locStrings}\n          feature={feature}\n        />\n      ) : null}\n    </BaseCard>\n  )\n}\n","import React, { useState } from 'react'\nimport {\n  DataGrid,\n  GridColDef,\n  GridToolbar,\n  GridValidRowModel,\n} from '@mui/x-data-grid'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { measureGridWidth } from '@jbrowse/core/util'\n\nexport default function VariantAnnotPanel({\n  rows,\n  columns,\n}: {\n  rows: GridValidRowModel[]\n  columns: GridColDef[]\n}) {\n  const [checked, setChecked] = useState(false)\n  const widths = columns.map(e => measureGridWidth(rows.map(r => r[e.field])))\n\n  return rows.length ? (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => {\n              setChecked(event.target.checked)\n            }}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n\n      <DataGrid\n        rowHeight={25}\n        rows={rows}\n        columns={columns.map((c, i) => ({ ...c, width: widths[i] }))}\n        slots={{ toolbar: checked ? GridToolbar : null }}\n      />\n    </div>\n  ) : null\n}\n","import React from 'react'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport AnnotGrid from './AnnotGrid'\n\nexport default function VariantAnnotationTable({\n  data,\n  fields,\n  title,\n}: {\n  data: string[]\n  fields: string[]\n  title: string\n}) {\n  return data.length ? (\n    <BaseCard title={title}>\n      <AnnotGrid\n        rows={data.map((elt, id) => ({\n          id,\n          ...Object.fromEntries(elt.split('|').map((e, i) => [fields[i], e])),\n        }))}\n        columns={fields.map(c => ({ field: c }))}\n      />\n    </BaseCard>\n  ) : null\n}\n","export const variantFieldDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Paper } from '@mui/material'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { parseBreakend } from '@gmod/vcf'\n\n// locals\nimport VariantSampleGrid from './VariantSampleGrid'\nimport BreakendPanel from './BreakendPanel'\nimport VariantAnnotationTable from './VariantAnnotationTable'\nimport { VariantFeatureWidgetModel } from './stateModelFactory'\nimport { variantFieldDescriptions } from './variantFieldDescriptions'\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: { INFO?: { ANN?: { Description?: string } } }\n  feature: { INFO?: { ANN?: string[] } }\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1]?.split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantAnnotationTable\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: { INFO?: { CSQ?: { Description?: string } } }\n  feature: { INFO?: { CSQ?: string[] } }\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1]?.split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantAnnotationTable\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ...rest } = feat\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...variantFieldDescriptions, ...descriptions }}\n        {...props}\n      />\n      <CsqPanel feature={rest} descriptions={descriptions} />\n      <AnnPanel feature={rest} descriptions={descriptions} />\n      {feat.type === 'breakend' ? (\n        <BreakendPanel\n          feature={feat}\n          locStrings={feat.ALT.map(\n            (alt: string) => parseBreakend(alt)?.MatePosition || '',\n          )}\n          model={model}\n        />\n      ) : null}\n      {feat.type === 'translocation' ? (\n        <BreakendPanel\n          feature={feat}\n          model={model}\n          locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n        />\n      ) : null}\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nexport default VariantFeatureWidget\n"],"names":["SampleFilters","columns","filter","setFilter","React","Typography","map","field","TextField","key","placeholder","value","onChange","event","target","VariantSamples","props","feature","descriptions","useState","samples","preFilteredRows","Object","entries","error","rows","filters","keys","row","fromEntries","e","sample","id","length","every","currFilter","RegExp","exec","checked","setChecked","widths","measureGridWidth","r","index","description","FORMAT","Description","width","BaseCard","_extends","title","color","FormControlLabel","control","Checkbox","label","variant","DataGrid","autoHeight","hideFooter","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","disableColumnMenu","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","BreakendOptionDialog","lazy","LocStringList","locStrings","model","session","getSession","locString","Link","href","onClick","preventDefault","view","Error","navToLocString","console","notify","LaunchBreakpointSplitViewPanel","viewType","simpleFeature","SimpleFeature","JSON","stringify","queueDialog","handleClose","refName","start","BreakendPanel","pluginManager","getEnv","getViewType","VariantAnnotPanel","c","i","VariantAnnotationTable","data","fields","AnnotGrid","elt","split","variantFieldDescriptions","CHROM","POS","ID","REF","ALT","QUAL","FILTER","AnnPanel","annDesc","INFO","ANN","annFields","match","ann","CsqPanel","csqDescription","CSQ","csqFields","csq","observer","featureData","feat","parse","rest","Paper","FeatureDetails","type","alt","parseBreakend","MatePosition","CHR2","END","VariantSampleGrid"],"sourceRoot":""}