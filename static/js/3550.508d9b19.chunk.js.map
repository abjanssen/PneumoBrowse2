{"version":3,"file":"static/js/3550.508d9b19.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/Radio/radioClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../../../node_modules/@mui/material/esm/RadioGroup/radioGroupClasses.js","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/dialogs/SettingsDialog.tsx","../../../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/esm/Radio/Radio.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroup.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiRadioGroup', slot);\n}\nconst radioGroupClasses = generateUtilityClasses('MuiRadioGroup', ['root', 'row', 'error']);\nexport default radioGroupClasses;","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Radio,\n  RadioGroup,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { SequenceFeatureDetailsModel } from '../model'\nimport type { TextFieldProps } from '@mui/material'\n\nconst useStyles = makeStyles()(theme => ({\n  formElt: {\n    margin: theme.spacing(3),\n    width: 400,\n  },\n  dialogContent: {\n    width: '80em',\n  },\n  root: {\n    padding: 4,\n  },\n}))\n\nfunction TextField2(props: TextFieldProps) {\n  return (\n    <div>\n      <TextField {...props} />\n    </div>\n  )\n}\n\nfunction FormControl2({ children }: { children: React.ReactNode }) {\n  return (\n    <div>\n      <FormControl>{children}</FormControl>\n    </div>\n  )\n}\n\nconst SequenceFeatureSettingsDialog = observer(function ({\n  handleClose,\n  model,\n}: {\n  handleClose: () => void\n  model: SequenceFeatureDetailsModel\n}) {\n  const { classes } = useStyles()\n  const { upperCaseCDS } = model\n  const [intronBp, setIntronBp] = useState(`${model.intronBp}`)\n  const [upDownBp, setUpDownBp] = useState(`${model.upDownBp}`)\n  const intronBpValid = !Number.isNaN(+intronBp)\n  const upDownBpValid = !Number.isNaN(+upDownBp)\n  return (\n    <Dialog\n      maxWidth=\"xl\"\n      open\n      onClose={() => {\n        handleClose()\n      }}\n      title=\"Feature sequence settings\"\n    >\n      <DialogContent className={classes.dialogContent}>\n        <TextField2\n          label=\"Number of intronic bases around splice site to display\"\n          className={classes.formElt}\n          value={intronBp}\n          helperText={!intronBpValid ? 'Not a number' : ''}\n          error={!intronBpValid}\n          onChange={event => {\n            setIntronBp(event.target.value)\n          }}\n        />\n        <TextField2\n          label=\"Number of bases up/down stream of feature to display\"\n          className={classes.formElt}\n          value={upDownBp}\n          helperText={!upDownBpValid ? 'Not a number' : ''}\n          error={!upDownBpValid}\n          onChange={event => {\n            setUpDownBp(event.target.value)\n          }}\n        />\n        <FormControl2>\n          <FormLabel>Sequence capitalization</FormLabel>\n          <RadioGroup\n            value={upperCaseCDS ? 'cds' : 'unchanged'}\n            onChange={e => {\n              model.setUpperCaseCDS(e.target.value === 'cds')\n            }}\n          >\n            <FormControlLabel\n              value=\"cds\"\n              control={<Radio className={classes.root} size=\"small\" />}\n              label=\"Capitalize CDS and lower case everything else\"\n            />\n            <FormControlLabel\n              value=\"unchanged\"\n              control={<Radio className={classes.root} size=\"small\" />}\n              label=\"Capitalization from reference genome sequence\"\n            />\n          </RadioGroup>\n        </FormControl2>\n      </DialogContent>\n\n      <DialogActions>\n        <Button\n          onClick={() => {\n            model.setIntronBp(+intronBp)\n            model.setUpDownBp(+upDownBp)\n            handleClose()\n          }}\n          disabled={!intronBpValid || !upDownBpValid}\n          color=\"primary\"\n          variant=\"contained\"\n        >\n          Submit\n        </Button>\n        <Button\n          onClick={() => {\n            handleClose()\n          }}\n          color=\"secondary\"\n          autoFocus\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default SequenceFeatureSettingsDialog\n","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  name: 'MuiRadioButtonIcon',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport FormGroup from \"../FormGroup/index.js\";\nimport { getRadioGroupUtilityClass } from \"./radioGroupClasses.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport useControlled from \"../utils/useControlled.js\";\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nimport useId from \"../utils/useId.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = props => {\n  const {\n    classes,\n    row,\n    error\n  } = props;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getRadioGroupUtilityClass, classes);\n};\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    className,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp,\n    ...other\n  } = props;\n  const rootRef = React.useRef(null);\n  const classes = useUtilityClasses(props);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, {\n      role: \"radiogroup\",\n      ref: handleRef,\n      className: clsx(classes.root, className),\n      ...other,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"],"names":["getRadioUtilityClass","slot","undefined","getRadioGroupUtilityClass","useStyles","makeStyles","theme","formElt","margin","spacing","width","dialogContent","root","padding","TextField2","props","$","_c","t0","_jsx","children","TextField","FormControl2","t1","FormControl","observer","handleClose","model","classes","upperCaseCDS","intronBp","setIntronBp","useState","upDownBp","setUpDownBp","intronBpValid","Number","isNaN","upDownBpValid","_jsxs","Dialog","maxWidth","open","onClose","title","DialogContent","className","label","value","helperText","error","onChange","event","target","FormLabel","RadioGroup","e","setUpperCaseCDS","FormControlLabel","control","Radio","size","DialogActions","Button","onClick","disabled","color","variant","autoFocus","useRadioGroup","createSvgIcon","d","RadioButtonIconRoot","styled","name","shouldForwardProp","rootShouldForwardProp","position","display","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","checked","style","easeOut","fontSize","ownerState","background","dot","RadioRoot","SwitchBase","prop","overridesResolver","styles","capitalize","vars","palette","text","secondary","radioClasses","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","Object","entries","filter","createSimplePaletteValueFilter","map","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChangeProp","disabledProp","slots","slotProps","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","createChainedFunction","a","b","String","externalInputProps","input","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","args","additionalProps","type","actions","defaultValue","valueProp","rootRef","row","setValueState","controlled","default","focus","current","querySelector","handleRef","contextValue","Provider","role"],"sourceRoot":""}