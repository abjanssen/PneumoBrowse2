{"version":3,"file":"static/js/7348.feb8cb50.chunk.js","mappings":"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","sources":["../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitViewOverlay.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitView.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/util.ts","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/AlignmentConnections.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Breakends.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Translocations.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/Overlay.tsx"],"sourcesContent":["import React, { useRef } from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport Overlay from './Overlay'\nimport { BreakpointViewModel } from '../model'\nimport { observer } from 'mobx-react'\n\nconst useStyles = makeStyles()({\n  overlay: {\n    display: 'flex',\n    width: '100%',\n    gridArea: '1/1',\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n})\n\nconst BreakpointSplitViewOverlay = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { matchedTracks, interactToggled } = model\n  const ref = useRef(null)\n  return (\n    <div className={classes.overlay}>\n      <svg\n        ref={ref}\n        style={{\n          width: '100%',\n          zIndex: 10,\n          pointerEvents: interactToggled ? undefined : 'none',\n        }}\n      >\n        {matchedTracks.map(track => (\n          // note: we must pass ref down, because the child component needs to\n          // getBoundingClientRect on the this components SVG, and we cannot\n          // rely on using getBoundingClientRect in this component to make\n          // sure this works because if it gets shifted around by another\n          // element, this will not re-render necessarily\n          <Overlay\n            parentRef={ref}\n            key={track.configuration.trackId}\n            model={model}\n            trackId={track.configuration.trackId}\n          />\n        ))}\n      </svg>\n    </div>\n  )\n})\n\nexport default BreakpointSplitViewOverlay\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport { BreakpointViewModel } from '../model'\nimport BreakpointSplitViewOverlay from './BreakpointSplitViewOverlay'\n\nconst useStyles = makeStyles()(theme => ({\n  viewDivider: {\n    background: theme.palette.secondary.main,\n    height: 3,\n  },\n  container: {\n    display: 'grid',\n  },\n\n  content: {\n    gridArea: '1/1',\n  },\n}))\n\nconst BreakpointSplitViewLevels = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n  return (\n    <div className={classes.content}>\n      <div style={{ position: 'relative' }}>\n        {views.map((view, idx) => {\n          const { ReactComponent } = pluginManager.getViewType(view.type)\n          const viewComponent = <ReactComponent key={view.id} model={view} />\n          if (idx === views.length - 1) {\n            return viewComponent\n          }\n          return [\n            viewComponent,\n            <div key={`${view.id}-divider`} className={classes.viewDivider} />,\n          ]\n        })}\n      </div>\n    </div>\n  )\n})\n\nconst BreakpointSplitView = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <div>\n      <div className={classes.container}>\n        <BreakpointSplitViewLevels model={model} />\n        <BreakpointSplitViewOverlay model={model} />\n      </div>\n    </div>\n  )\n})\n\nexport default BreakpointSplitView\n","import { Feature, notEmpty } from '@jbrowse/core/util'\n\nimport { parseBreakend } from '@gmod/vcf'\n\n// this finds candidate alignment features, aimed at plotting split reads from\n// BAM/CRAM files\nexport function getBadlyPairedAlignments(features: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  // this finds candidate features that share the same name\n  for (const feature of features.values()) {\n    const flags = feature.get('flags')\n    const id = feature.id()\n    const unmapped = flags & 4\n    const correctlyPaired = flags & 2\n\n    if (!alreadySeen.has(id) && !correctlyPaired && !unmapped) {\n      const n = feature.get('name')\n      let val = candidates.get(n)\n      if (!val) {\n        val = []\n        candidates.set(n, val)\n      }\n      val.push(feature)\n    }\n    alreadySeen.add(feature.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\nfunction getTag(f: Feature, tag: string) {\n  const tags = f.get('tags')\n  return tags ? tags[tag] : f.get(tag)\n}\n\n// this finds candidate alignment features, aimed at plotting split reads from\n// BAM/CRAM files\nexport function getMatchedAlignmentFeatures(features: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  // this finds candidate features that share the same name\n  for (const feature of features.values()) {\n    const id = feature.id()\n    const unmapped = feature.get('flags') & 4\n    const hasSA = !!getTag(feature, 'SA')\n    if (!alreadySeen.has(id) && !unmapped && hasSA) {\n      const n = feature.get('name')\n      let val = candidates.get(n)\n      if (!val) {\n        val = []\n        candidates.set(n, val)\n      }\n      val.push(feature)\n    }\n    alreadySeen.add(feature.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\nexport function hasPairedReads(features: Map<string, Feature>) {\n  for (const f of features.values()) {\n    if (f.get('flags') & 1) {\n      return true\n    }\n  }\n  return false\n}\n\nexport function findMatchingAlt(feat1: Feature, feat2: Feature) {\n  const alts = feat1.get('ALT') as string[] | undefined\n  if (alts) {\n    return new Map(\n      alts\n        .map(alt => parseBreakend(alt))\n        .filter(notEmpty)\n        .map(bnd => [bnd.MatePosition, bnd]),\n    ).get(`${feat2.get('refName')}:${feat2.get('start') + 1}`)\n  }\n  return undefined\n}\n\n// Returns paired BND features across multiple views by inspecting the ALT\n// field to get exact coordinate matches\nexport function getMatchedBreakendFeatures(feats: Map<string, Feature>) {\n  const candidates = new Map<string, Feature[]>()\n  const alreadySeen = new Set<string>()\n\n  for (const f of feats.values()) {\n    if (!alreadySeen.has(f.id()) && f.get('type') === 'breakend') {\n      const alts = f.get('ALT') as string[] | undefined\n      alts?.forEach(a => {\n        const cur = `${f.get('refName')}:${f.get('start') + 1}`\n        const bnd = parseBreakend(a)\n        if (bnd) {\n          const val = candidates.get(cur)\n          if (!val) {\n            candidates.set(bnd.MatePosition || 'none', [f])\n          } else {\n            val.push(f)\n          }\n        }\n      })\n    }\n    alreadySeen.add(f.id())\n  }\n\n  return [...candidates.values()].filter(v => v.length > 1)\n}\n\n// Getting \"matched\" TRA means just return all TRA\nexport function getMatchedTranslocationFeatures(feats: Map<string, Feature>) {\n  const ret: Feature[][] = []\n  const alreadySeen = new Set<string>()\n\n  for (const f of feats.values()) {\n    if (!alreadySeen.has(f.id()) && f.get('ALT')[0] === '<TRA>') {\n      ret.push([f])\n    }\n    alreadySeen.add(f.id())\n  }\n\n  return ret\n}\n","import React, { useMemo, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { useTheme } from '@mui/material'\nimport { getSession, getStrokeProps } from '@jbrowse/core/util'\n\n// locals\nimport {\n  getBadlyPairedAlignments,\n  getMatchedAlignmentFeatures,\n  hasPairedReads,\n} from './util'\nimport { yPos, useNextFrame, getPxFromCoordinate } from '../util'\nimport { BreakpointViewModel } from '../model'\n\nconst [LEFT, , RIGHT] = [0, 1, 2, 3] as const\n\nconst AlignmentConnections = observer(function ({\n  model,\n  trackId,\n  parentRef,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views, showIntraviewLinks } = model\n  const theme = useTheme()\n  const session = getSession(model)\n  const snap = getSnapshot(model)\n  const { assemblyManager } = session\n  const assembly = assemblyManager.get(views[0]!.assemblyNames[0]!)\n  useNextFrame(snap)\n  const allFeatures = model.getTrackFeatures(trackId)\n  const hasPaired = useMemo(() => hasPairedReads(allFeatures), [allFeatures])\n  const layoutMatches = useMemo(() => {\n    const layoutMatches = model.getMatchedFeaturesInLayout(\n      trackId,\n      hasPaired\n        ? getBadlyPairedAlignments(allFeatures)\n        : getMatchedAlignmentFeatures(allFeatures),\n    )\n    if (!hasPaired) {\n      layoutMatches.forEach(m => {\n        m.sort((a, b) => a.feature.get('clipPos') - b.feature.get('clipPos'))\n      })\n    }\n    return layoutMatches\n  }, [allFeatures, trackId, hasPaired, model])\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n\n  let yOffset = 0\n  if (parentRef.current) {\n    const rect = parentRef.current.getBoundingClientRect()\n    yOffset = rect.top\n  }\n\n  return assembly ? (\n    <g\n      fill=\"none\"\n      {...getStrokeProps(theme.palette.text.disabled)}\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        const ret = []\n        // we follow a path in the list of chunks, not from top to bottom, just in series\n        // following x1,y1 -> x2,y2\n        for (let i = 0; i < chunk.length - 1; i++) {\n          const { layout: c1, feature: f1, level: level1 } = chunk[i]!\n          const { layout: c2, feature: f2, level: level2 } = chunk[i + 1]!\n\n          if (!c1 || !c2) {\n            console.warn('received null layout for a overlay feature')\n            return null\n          }\n\n          // disable rendering connections in a single level\n          if (!showIntraviewLinks && level1 === level2) {\n            return null\n          }\n          const f1ref = assembly.getCanonicalRefName(f1.get('refName'))\n          const f2ref = assembly.getCanonicalRefName(f2.get('refName'))\n\n          if (!f1ref || !f2ref) {\n            throw new Error(`unable to find ref for ${f1ref || f2ref}`)\n          }\n\n          const s1 = f1.get('strand')\n          const s2 = f2.get('strand')\n          const p1 = c1[s1 === -1 ? LEFT : RIGHT]\n          const sn1 = s2 === -1\n          const p2 = hasPaired ? c2[sn1 ? LEFT : RIGHT] : c2[sn1 ? RIGHT : LEFT]\n          const x1 = getPxFromCoordinate(views[level1]!, f1ref, p1)\n          const x2 = getPxFromCoordinate(views[level2]!, f2ref, p2)\n          const reversed1 = views[level1]!.pxToBp(x1).reversed\n          const reversed2 = views[level2]!.pxToBp(x2).reversed\n          const tracks = views.map(v => v.getTrack(trackId))\n          const y1 =\n            yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n            yOffset\n          const y2 =\n            yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n            yOffset\n\n          // possible todo: use totalCurveHeight to possibly make alternative\n          // squiggle if the S is too small\n          const path = [\n            'M',\n            x1,\n            y1,\n            'C',\n            x1 + 200 * f1.get('strand') * (reversed1 ? -1 : 1),\n            y1,\n            x2 -\n              200 *\n                f2.get('strand') *\n                (reversed2 ? -1 : 1) *\n                (hasPaired ? -1 : 1),\n            y2,\n            x2,\n            y2,\n          ].join(' ')\n          const id = `${f1.id()}-${f2.id()}`\n          ret.push(\n            <path\n              d={path}\n              key={id}\n              data-testid=\"r1\"\n              strokeWidth={mouseoverElt === id ? 5 : 1}\n              onClick={() => {\n                const featureWidget = session.addWidget?.(\n                  'BreakpointAlignmentsWidget',\n                  'breakpointAlignments',\n                  {\n                    featureData: {\n                      feature1: (\n                        allFeatures.get(f1.id()) || { toJSON: () => {} }\n                      ).toJSON(),\n                      feature2: (\n                        allFeatures.get(f2.id()) || { toJSON: () => {} }\n                      ).toJSON(),\n                    },\n                  },\n                )\n                session.showWidget?.(featureWidget)\n              }}\n              onMouseOver={() => {\n                setMouseoverElt(id)\n              }}\n              onMouseOut={() => {\n                setMouseoverElt(undefined)\n              }}\n            />,\n          )\n        }\n        return ret\n      })}\n    </g>\n  ) : null\n})\n\nexport default AlignmentConnections\n","import React, { useState, useMemo } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\n// locals\nimport { findMatchingAlt, getMatchedBreakendFeatures } from './util'\nimport { yPos, getPxFromCoordinate, useNextFrame } from '../util'\nimport { BreakpointViewModel } from '../model'\n\nconst [LEFT] = [0, 1, 2, 3] as const\n\nconst Breakends = observer(function ({\n  model,\n  trackId,\n  parentRef: ref,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views } = model\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const totalFeatures = model.getTrackFeatures(trackId)\n  const layoutMatches = useMemo(\n    () =>\n      model.getMatchedFeaturesInLayout(\n        trackId,\n        getMatchedBreakendFeatures(totalFeatures),\n      ),\n    [totalFeatures, trackId, model],\n  )\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n  const snap = getSnapshot(model)\n  useNextFrame(snap)\n  const assembly = assemblyManager.get(views[0]!.assemblyNames[0]!)\n\n  if (!assembly) {\n    return null\n  }\n\n  let yoff = 0\n  if (ref.current) {\n    const rect = ref.current.getBoundingClientRect()\n    yoff = rect.top\n  }\n\n  return (\n    <g\n      stroke=\"green\"\n      strokeWidth={5}\n      fill=\"none\"\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        const ret = []\n        // we follow a path in the list of chunks, not from top to bottom, just\n        // in series following x1,y1 -> x2,y2\n        for (let i = 0; i < chunk.length - 1; i += 1) {\n          const { layout: c1, feature: f1, level: level1 } = chunk[i]!\n          const { layout: c2, feature: f2, level: level2 } = chunk[i + 1]!\n          const id = f1.id()\n\n          const relevantAlt = findMatchingAlt(f1, f2)\n          if (!c1 || !c2) {\n            return null\n          }\n          const f1origref = f1.get('refName')\n          const f2origref = f2.get('refName')\n          const f1ref = assembly.getCanonicalRefName(f1origref)\n          const f2ref = assembly.getCanonicalRefName(f2origref)\n          if (!f1ref || !f2ref) {\n            throw new Error(`unable to find ref for ${f1ref || f2ref}`)\n          }\n          const x1 = getPxFromCoordinate(views[level1]!, f1ref, c1[LEFT])\n          const x2 = getPxFromCoordinate(views[level2]!, f2ref, c2[LEFT])\n          const reversed1 = views[level1]!.pxToBp(x1).reversed\n          const reversed2 = views[level2]!.pxToBp(x2).reversed\n\n          const tracks = views.map(v => v.getTrack(trackId))\n          const y1 =\n            yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n            yoff\n          const y2 =\n            yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n            yoff\n          if (!relevantAlt) {\n            console.warn('the relevant ALT allele was not found, cannot render')\n          } else {\n            const path = [\n              'M', // move to\n              x1 -\n                20 *\n                  (relevantAlt.Join === 'left' ? -1 : 1) *\n                  (reversed1 ? -1 : 1),\n              y1,\n              'L', // line to\n              x1,\n              y1,\n              'L', // line to\n              x2,\n              y2,\n              'L', // line to\n              x2 -\n                20 *\n                  (relevantAlt.MateDirection === 'left' ? 1 : -1) *\n                  (reversed2 ? -1 : 1),\n              y2,\n            ].join(' ')\n            ret.push(\n              <path\n                d={path}\n                data-testid=\"r2\"\n                key={JSON.stringify(path)}\n                strokeWidth={id === mouseoverElt ? 10 : 5}\n                onClick={() => {\n                  const featureWidget = session.addWidget?.(\n                    'VariantFeatureWidget',\n                    'variantFeature',\n                    {\n                      featureData: totalFeatures.get(id)?.toJSON(),\n                    },\n                  )\n                  session.showWidget?.(featureWidget)\n                }}\n                onMouseOver={() => {\n                  setMouseoverElt(id)\n                }}\n                onMouseOut={() => {\n                  setMouseoverElt(undefined)\n                }}\n              />,\n            )\n          }\n        }\n        return ret\n      })}\n    </g>\n  )\n})\n\nexport default Breakends\n","import React, { useState, useMemo } from 'react'\nimport { getSession } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\n\n// locals\nimport { getMatchedTranslocationFeatures } from './util'\nimport { yPos, getPxFromCoordinate, useNextFrame } from '../util'\nimport { BreakpointViewModel, LayoutRecord } from '../model'\n\nconst [LEFT] = [0, 1, 2, 3] as const\n\nfunction str(s: string) {\n  if (s === '+') {\n    return 1\n  } else if (s === '-') {\n    return -1\n  } else {\n    return 0\n  }\n}\n\nconst Translocations = observer(function ({\n  model,\n  trackId,\n  parentRef: ref,\n  getTrackYPosOverride,\n}: {\n  model: BreakpointViewModel\n  trackId: string\n  parentRef: React.RefObject<SVGSVGElement>\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { views } = model\n  const session = getSession(model)\n  const { assemblyManager } = session\n  const totalFeatures = model.getTrackFeatures(trackId)\n  const layoutMatches = useMemo(\n    () =>\n      model.getMatchedFeaturesInLayout(\n        trackId,\n        getMatchedTranslocationFeatures(totalFeatures),\n      ),\n\n    [totalFeatures, trackId, model],\n  )\n\n  const [mouseoverElt, setMouseoverElt] = useState<string>()\n  const snap = getSnapshot(model)\n  useNextFrame(snap)\n\n  const assembly = assemblyManager.get(views[0]!.assemblyNames[0]!)\n  if (!assembly) {\n    return null\n  }\n\n  let yOffset = 0\n  if (ref.current) {\n    const rect = ref.current.getBoundingClientRect()\n    yOffset = rect.top\n  }\n\n  // we hardcode the TRA to go to the \"other view\" and if there is none, we\n  // just return null here note: would need to do processing of the INFO\n  // CHR2/END and see which view could contain those coordinates to really do\n  // it properly\n  if (views.length < 2) {\n    return null\n  }\n  return (\n    <g\n      fill=\"none\"\n      stroke=\"green\"\n      strokeWidth={5}\n      data-testid={layoutMatches.length ? `${trackId}-loaded` : trackId}\n    >\n      {layoutMatches.map(chunk => {\n        // we follow a path in the list of chunks, not from top to bottom,\n        // just in series following x1,y1 -> x2,y2\n        const ret = []\n        for (const { layout: c1, feature: f1, level: level1 } of chunk) {\n          const level2 = level1 === 0 ? 1 : 0\n          const id = f1.id()\n          if (!c1) {\n            return null\n          }\n\n          const info = f1.get('INFO')\n          const chr2 = info.CHR2[0]\n          const end2 = info.END[0]\n          const res = info.STRANDS?.[0]?.split('') // not all files have STRANDS\n          const [myDirection, mateDirection] = res ?? ['.', '.']\n\n          const r = getPxFromCoordinate(views[level2]!, chr2, end2)\n          if (r) {\n            const c2: LayoutRecord = [r, 0, r + 1, 0]\n            const x1 = getPxFromCoordinate(\n              views[level1]!,\n              f1.get('refName'),\n              c1[LEFT],\n            )\n            const x2 = r\n            const reversed1 = views[level1]!.pxToBp(x1).reversed\n            const reversed2 = views[level2]!.pxToBp(x2).reversed\n\n            const tracks = views.map(v => v.getTrack(trackId))\n            const y1 =\n              yPos(trackId, level1, views, tracks, c1, getTrackYPosOverride) -\n              yOffset\n            const y2 =\n              yPos(trackId, level2, views, tracks, c2, getTrackYPosOverride) -\n              yOffset\n\n            const path = [\n              'M', // move to\n              x1 - 20 * str(myDirection) * (reversed1 ? -1 : 1),\n              y1,\n              'L', // line to\n              x1,\n              y1,\n              'L', // line to as const\n              x2,\n              y2,\n              'L', // line to\n              x2 - 20 * str(mateDirection) * (reversed2 ? -1 : 1),\n              y2,\n            ].join(' ')\n            ret.push(\n              <path\n                d={path}\n                key={JSON.stringify(path)}\n                strokeWidth={id === mouseoverElt ? 10 : 5}\n                onClick={() => {\n                  const featureWidget = session.addWidget?.(\n                    'VariantFeatureWidget',\n                    'variantFeature',\n                    {\n                      featureData: (\n                        totalFeatures.get(id) || { toJSON: () => {} }\n                      ).toJSON(),\n                    },\n                  )\n                  session.showWidget?.(featureWidget)\n                }}\n                onMouseOver={() => {\n                  setMouseoverElt(id)\n                }}\n                onMouseOut={() => {\n                  setMouseoverElt(undefined)\n                }}\n              />,\n            )\n          }\n        }\n        return ret\n      })}\n    </g>\n  )\n})\n\nexport default Translocations\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\n// locals\nimport { BreakpointViewModel } from '../model'\nimport AlignmentConnections from './AlignmentConnections'\nimport Breakends from './Breakends'\nimport Translocations from './Translocations'\n\nconst Overlay = observer(function (props: {\n  parentRef: React.RefObject<SVGSVGElement>\n  model: BreakpointViewModel\n  trackId: string\n  getTrackYPosOverride?: (trackId: string, level: number) => number\n}) {\n  const { model, trackId } = props\n  const tracks = model.getMatchedTracks(trackId)\n  if (tracks[0]?.type === 'AlignmentsTrack') {\n    return <AlignmentConnections {...props} />\n  }\n  if (tracks[0]?.type === 'VariantTrack') {\n    return model.hasTranslocations(trackId) ? (\n      <Translocations {...props} />\n    ) : (\n      <Breakends {...props} />\n    )\n  }\n  return null\n})\n\nexport default Overlay\n"],"names":["useStyles","makeStyles","overlay","display","width","gridArea","cursor","fill","observer","model","classes","matchedTracks","interactToggled","ref","useRef","React","className","style","zIndex","pointerEvents","undefined","map","track","Overlay","parentRef","key","configuration","trackId","theme","viewDivider","background","palette","secondary","main","height","container","content","BreakpointSplitViewLevels","views","pluginManager","getEnv","position","view","idx","ReactComponent","getViewType","type","viewComponent","id","length","BreakpointSplitViewOverlay","getTag","f","tag","tags","get","findMatchingAlt","feat1","feat2","alts","Map","alt","parseBreakend","filter","notEmpty","bnd","MatePosition","LEFT","RIGHT","getTrackYPosOverride","showIntraviewLinks","useTheme","session","getSession","snap","getSnapshot","assemblyManager","assembly","assemblyNames","useNextFrame","allFeatures","getTrackFeatures","hasPaired","useMemo","features","values","hasPairedReads","layoutMatches","getMatchedFeaturesInLayout","candidates","alreadySeen","Set","feature","flags","unmapped","correctlyPaired","has","n","val","set","push","add","v","getBadlyPairedAlignments","hasSA","getMatchedAlignmentFeatures","forEach","m","sort","a","b","mouseoverElt","setMouseoverElt","useState","yOffset","current","rect","getBoundingClientRect","top","_extends","getStrokeProps","text","disabled","chunk","ret","i","layout","c1","f1","level","level1","c2","f2","level2","console","warn","f1ref","getCanonicalRefName","f2ref","Error","s1","s2","p1","sn1","p2","x1","getPxFromCoordinate","x2","reversed1","pxToBp","reversed","reversed2","tracks","getTrack","y1","yPos","y2","path","join","d","strokeWidth","onClick","featureWidget","addWidget","featureData","feature1","toJSON","feature2","showWidget","onMouseOver","onMouseOut","totalFeatures","feats","cur","getMatchedBreakendFeatures","yoff","stroke","relevantAlt","f1origref","f2origref","Join","MateDirection","JSON","stringify","str","s","getMatchedTranslocationFeatures","info","chr2","CHR2","end2","END","res","STRANDS","split","myDirection","mateDirection","r","props","getMatchedTracks","AlignmentConnections","hasTranslocations","Translocations","Breakends"],"sourceRoot":""}