{"version":3,"file":"static/js/4006.9700c883.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Position.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/CoreDetails.tsx","../../../plugins/variants/src/VariantFeatureWidget/AltFormatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Formatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Checkbox2.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantGenotypeFrequencyTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleFilters.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/getSampleGridRows.ts","../../../plugins/variants/src/VariantFeatureWidget/variantFieldDescriptions.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeaturePanel.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { assembleLocString } from '../../util'\n\nimport type { BaseProps } from '../types'\n\nexport default function Position(props: BaseProps) {\n  const { feature } = props\n  const strand = feature.strand as number\n  const strandMap: Record<string, string> = {\n    '-1': '-',\n    '0': '',\n    '1': '+',\n  }\n  const str = strandMap[strand] ? `(${strandMap[strand]})` : ''\n  const loc = assembleLocString(feature)\n  return <>{`${loc} ${str}`}</>\n}\n","import Position from './Position'\nimport SimpleField from './SimpleField'\nimport { toLocale } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseProps } from '../types'\n\nexport default function CoreDetails(props: BaseProps) {\n  const { feature } = props\n  const obj = feature as SimpleFeatureSerialized & {\n    start: number\n    end: number\n    assemblyName?: string\n    strand: number\n    refName: string\n    __jbrowsefmt: {\n      start?: number\n      assemblyName?: string\n      end?: number\n      refName?: string\n      name?: string\n    }\n  }\n\n  const formattedFeat = { ...obj, ...obj.__jbrowsefmt }\n  const { start, end } = formattedFeat\n\n  const displayedDetails: Record<string, any> = {\n    ...formattedFeat,\n    length: toLocale(end - start),\n  }\n\n  const coreRenderedDetails = {\n    description: 'Description',\n    name: 'Name',\n    length: 'Length',\n    type: 'Type',\n  }\n  return (\n    <>\n      <SimpleField\n        name=\"Position\"\n        value={<Position {...props} feature={formattedFeat} />}\n      />\n      {Object.entries(coreRenderedDetails)\n        .map(([key, name]) => [name, displayedDetails[key]])\n        .filter(([, value]) => value != null)\n        .map(([name, value]) => (\n          <SimpleField key={name} name={name} value={value} />\n        ))}\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport { getMinimalDesc } from '../VcfFeature/util'\n\nexport default function AltFormatter({\n  value,\n  ref,\n}: {\n  value: string\n  ref: string\n}) {\n  const [show, setShow] = useState(false)\n  const alt = getMinimalDesc(ref, value)\n  return alt !== value ? (\n    <div>\n      <button\n        onClick={() => {\n          setShow(!show)\n        }}\n      >\n        {show ? 'Show simplified ALT' : 'Show raw ALT'}\n      </button>{' '}\n      {show ? value : getMinimalDesc(ref, value)}\n    </div>\n  ) : (\n    value\n  )\n}\n","import { useState } from 'react'\n\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' for long strings\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import { Checkbox, FormControlLabel, Typography } from '@mui/material'\n\nexport default function Checkbox2({\n  checked,\n  disabled,\n  label,\n  onChange,\n}: {\n  checked: boolean\n  disabled?: boolean\n  label: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  return (\n    <FormControlLabel\n      disabled={disabled}\n      control={<Checkbox checked={checked} onChange={onChange} />}\n      label={<Typography variant=\"body2\">{label}</Typography>}\n    />\n  )\n}\n","import { useState } from 'react'\n\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport type { FrequencyTable, VariantSampleGridRow } from './types'\n\nfunction toP(n: number) {\n  return n.toPrecision(3)\n}\n\nexport default function VariantGenotypeFrequencyTable({\n  rows,\n}: {\n  rows: VariantSampleGridRow[]\n}) {\n  const [useCounts, setUseCounts] = useState(false)\n\n  const summary = {} as FrequencyTable\n  if (!useCounts) {\n    for (const row of rows) {\n      const gt = row.GT\n      if (!summary[gt]) {\n        summary[gt] = {\n          count: 0,\n          GT: row.GT,\n          genotype: row.genotype,\n        }\n      }\n      summary[gt].count++\n    }\n  } else {\n    for (const row of rows) {\n      const alleleCounts = {} as Record<string, number>\n      const alleles = row.GT.split(/[/|]/)\n      for (const allele of alleles) {\n        alleleCounts[allele] = (alleleCounts[allele] || 0) + 1\n      }\n      const key = Object.entries(alleleCounts)\n        .map(([key, val]) => `${key}:${val}`)\n        .join(';')\n\n      if (!summary[key]) {\n        summary[key] = {\n          count: 0,\n          GT: key,\n          genotype: row.genotype,\n        }\n      }\n      summary[key].count++\n    }\n  }\n  const gridRows = Object.entries(summary).map(([key, val]) => ({\n    id: key,\n    ...val,\n    count: `${val.count} / ${rows.length}`,\n    frequency: `${toP((val.count / rows.length) * 100)}%`,\n  }))\n\n  const keys = gridRows[0] ? Object.keys(gridRows[0]) : []\n  const widths = keys.map(e =>\n    measureGridWidth(gridRows.map(r => `${r[e as keyof typeof r]}`)),\n  )\n\n  return (\n    <div>\n      <FormControlLabel\n        control={<Checkbox checked={useCounts} />}\n        label={\n          <Typography variant=\"body2\">\n            Use allele counts instead of exact GT\n          </Typography>\n        }\n        onChange={(_, checked) => {\n          setUseCounts(checked)\n        }}\n      />\n      <DataGridFlexContainer>\n        <DataGrid\n          rows={gridRows}\n          hideFooter\n          rowHeight={25}\n          columnHeaderHeight={35}\n          columns={[\n            {\n              field: 'GT',\n              width: widths[0],\n            },\n            {\n              field: 'count',\n              width: widths[1],\n            },\n            {\n              field: 'frequency',\n              width: widths[2],\n            },\n            {\n              field: 'genotype',\n              width: widths[3],\n            },\n          ]}\n        />\n      </DataGridFlexContainer>\n    </div>\n  )\n}\n","import { TextField, Typography } from '@mui/material'\n\ntype Filters = Record<string, string>\n\nexport default function SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event => {\n            setFilter({ ...filter, [field]: event.target.value })\n          }}\n        />\n      ))}\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { ToggleButton, ToggleButtonGroup, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport Checkbox2 from '../Checkbox2'\nimport VariantGenotypeFrequencyTable from './VariantGenotypeFrequencyTable'\nimport SampleFilters from './VariantSampleFilters'\nimport { getSampleGridRows } from './getSampleGridRows'\n\nimport type { Filters, InfoFields, VariantFieldDescriptions } from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { GridColDef } from '@mui/x-data-grid'\n\n// Define a type for the column display mode\ntype ColumnDisplayMode = 'all' | 'gtOnly' | 'genotypeOnly'\n\nexport default function VariantSampleGrid(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: VariantFieldDescriptions | null\n}) {\n  const { feature, descriptions = {} } = props\n  const [filter, setFilter] = useState<Filters>({})\n  const [columnDisplayMode, setColumnDisplayMode] =\n    useState<ColumnDisplayMode>('all')\n  const [showFilters, setShowFilters] = useState(false)\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const ALT = feature.ALT as string[]\n  const REF = feature.REF as string\n\n  // Use the getSampleGridRows function to process the data\n  const { rows, error } = getSampleGridRows(samples, REF, ALT, filter)\n\n  const colKeySet = new Set(['sample', ...Object.keys(rows[0] || {})])\n  colKeySet.delete('id')\n  const keys = [...colKeySet]\n  const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])))\n  const columns = keys.map(\n    (field, index) =>\n      ({\n        field,\n        description: descriptions?.FORMAT?.[field]?.Description,\n        width: widths[index],\n      }) satisfies GridColDef<(typeof rows)[0]>,\n  )\n\n  const s1 = new Set(['sample', 'GT'])\n  const s2 = new Set(['sample', 'GT', 'genotype'])\n\n  return !rows.length ? null : (\n    <>\n      <BaseCard {...props} title=\"Genotype frequencies\">\n        <ErrorBoundary FallbackComponent={ErrorMessage}>\n          <VariantGenotypeFrequencyTable rows={rows} />\n        </ErrorBoundary>\n      </BaseCard>\n      <BaseCard {...props} title=\"Samples\">\n        {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n        <div>\n          <Checkbox2\n            label=\"Show filters\"\n            checked={showFilters}\n            onChange={event => {\n              setShowFilters(event.target.checked)\n            }}\n          />\n          <ToggleButtonGroup\n            value={columnDisplayMode}\n            exclusive\n            size=\"small\"\n            onChange={(_, newValue) => {\n              if (newValue !== null) {\n                setColumnDisplayMode(newValue as ColumnDisplayMode)\n              }\n            }}\n          >\n            <ToggleButton value=\"all\">All</ToggleButton>\n            <ToggleButton value=\"gtOnly\">GT only</ToggleButton>\n            <ToggleButton value=\"genotypeOnly\">\n              GT+resolved genotype\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n\n        {showFilters ? (\n          <SampleFilters\n            setFilter={setFilter}\n            columns={columns}\n            filter={filter}\n          />\n        ) : null}\n\n        <DataGridFlexContainer>\n          <DataGrid\n            rows={rows}\n            hideFooter={rows.length < 100}\n            columns={\n              columnDisplayMode === 'gtOnly'\n                ? columns.filter(f => s1.has(f.field))\n                : columnDisplayMode === 'genotypeOnly'\n                  ? columns.filter(f => s2.has(f.field))\n                  : columns\n            }\n            rowHeight={25}\n            columnHeaderHeight={35}\n            showToolbar\n          />\n        </DataGridFlexContainer>\n      </BaseCard>\n    </>\n  )\n}\n","import { makeSimpleAltString } from '../../VcfFeature/util'\n\nimport type { Filters, InfoFields, VariantSampleGridRow } from './types'\n\nexport function getSampleGridRows(\n  samples: Record<string, InfoFields>,\n  REF: string,\n  ALT: string[],\n  filter: Filters,\n): {\n  rows: VariantSampleGridRow[]\n  error: unknown\n} {\n  const preFilteredRows = Object.entries(samples).map(([key, val]) => {\n    const gt = val.GT?.[0]\n    return [\n      key,\n      {\n        ...val,\n        ...(gt\n          ? {\n              GT: `${gt}`,\n              genotype: makeSimpleAltString(`${gt}`, REF, ALT),\n            }\n          : {}),\n      },\n    ] as const\n  })\n\n  let error: unknown\n  let rows = [] as VariantSampleGridRow[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(([key, val]) => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(val).map(([formatField, formatValue]) => [\n              formatField,\n              formatValue,\n            ]),\n          ),\n          sample: key,\n          id: key,\n        } as VariantSampleGridRow\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? new RegExp(currFilter, 'i').exec(row[key]!)\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    console.error(e)\n    error = e\n  }\n\n  return { rows, error }\n}\n","export const variantFieldDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n","import { Suspense, lazy } from 'react'\n\nimport { parseBreakend } from '@gmod/vcf'\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport AltFormatter from './AltFormatter'\nimport Formatter from './Formatter'\nimport VariantSampleGrid from './VariantSampleGrid/VariantSampleGrid'\nimport { variantFieldDescriptions } from './variantFieldDescriptions'\n\nimport type { VariantFeatureWidgetModel } from './stateModelFactory'\nimport type { Descriptions, ReducedFeature } from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst LaunchBreakendPanel = lazy(\n  () => import('./LaunchBreakendPanel/LaunchBreakendPanel'),\n)\nconst VariantConsequenceDataGrid = lazy(\n  () => import('./VariantConsequence/VariantConsequenceDataGrid'),\n)\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1]?.split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1]?.split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nfunction LaunchBreakendWidgetArea({\n  model,\n}: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { featureData } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { type = '' } = feat\n\n  return type === 'breakend' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      locStrings={feat.ALT.map(\n        (alt: string) => parseBreakend(alt)?.MatePosition || '',\n      )}\n      model={model}\n    />\n  ) : type === 'translocation' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n    />\n  ) : type === 'paired_feature' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.mate.refName}:${feat.mate.start}`]}\n    />\n  ) : type.includes('inversion') ||\n    type.includes('deletion') ||\n    type.includes('duplication') ||\n    type.includes('cnv') ||\n    type.includes('sv') ? (\n    <LaunchBreakendPanel\n      feature={{\n        uniqueId: 'random',\n        refName: feat.refName,\n        start: feat.start,\n        end: feat.start + 1,\n        mate: {\n          refName: feat.refName,\n          start: feat.end,\n          end: feat.end + 1,\n        },\n      }}\n      model={model}\n      locStrings={[`${feat.refName}:${feat.end}`]}\n    />\n  ) : null\n}\n\nconst FeatDefined = observer(function (props: {\n  feat: SimpleFeatureSerialized\n  model: VariantFeatureWidgetModel\n}) {\n  const { feat, model } = props\n  const { descriptions } = model\n  const { samples, ...rest } = feat\n  const { REF } = rest\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{\n          ...variantFieldDescriptions,\n          ...descriptions,\n        }}\n        formatter={(value, key) => {\n          return key === 'ALT' ? (\n            <AltFormatter value={`${value}`} ref={REF as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }}\n        {...props}\n      />\n      <Suspense fallback={null}>\n        <CsqPanel feature={rest} descriptions={descriptions} />\n        <AnnPanel feature={rest} descriptions={descriptions} />\n        <LaunchBreakendWidgetArea model={model} />\n      </Suspense>\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = structuredClone(featureData)\n\n  return feat ? (\n    <FeatDefined feat={feat} {...props} />\n  ) : (\n    <div>\n      No feature loaded, may not be available after page refresh because it was\n      too large for localStorage\n    </div>\n  )\n})\n\nexport default VariantFeatureWidget\n","import { Suspense, lazy, useState } from 'react'\n\nimport Help from '@mui/icons-material/Help'\nimport { Button, FormControl, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { LoadingEllipses } from '../../ui'\nimport { getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseFeatureWidgetModel } from '../stateModelFactory'\n\n// lazies\nconst SequenceFeatureDetails = lazy(() => import('./SequenceFeatureDetails'))\nconst HelpDialog = lazy(() => import('./dialogs/HelpDialog'))\n\nconst useStyles = makeStyles()(theme => ({\n  formControl: {\n    margin: 0,\n  },\n\n  container: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n}))\n\n// display the stitched-together sequence of a gene's CDS, cDNA, or protein\n// sequence. this is a best effort and weird genomic phenomena could lead these\n// to not be 100% accurate\nconst SequenceFeaturePanel = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { classes } = useStyles()\n  const [shown, setShown] = useState(false)\n\n  return (\n    <div className={classes.container}>\n      <FormControl className={classes.formControl}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setShown(!shown)\n          }}\n        >\n          {shown ? 'Hide feature sequence' : 'Show feature sequence'}\n        </Button>\n      </FormControl>\n\n      <IconButton\n        onClick={() => {\n          getSession(model).queueDialog(handleClose => [\n            HelpDialog,\n            {\n              handleClose,\n            },\n          ])\n        }}\n      >\n        <Help />\n      </IconButton>\n      {shown ? (\n        <Suspense fallback={<LoadingEllipses />}>\n          <SequenceFeatureDetails\n            key={feature.uniqueId}\n            model={model}\n            feature={feature}\n          />\n        </Suspense>\n      ) : null}\n    </div>\n  )\n})\n\nexport default SequenceFeaturePanel\n","import { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { Divider, Typography } from '@mui/material'\n\nimport { generateTitle } from './util'\nimport SequenceFeatureDetails from '../SequenceFeatureDetails'\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\nimport { ErrorMessage } from '../../ui'\nimport { getEnv, getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { Descriptors } from '../types'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// coreDetails are omitted in some circumstances\nconst coreDetails = [\n  'name',\n  'start',\n  'end',\n  'strand',\n  'refName',\n  'description',\n  'type',\n]\n\ninterface PanelDescriptor {\n  name: string\n  Component: React.FC<any>\n}\n\nexport default function FeatureDetails(props: {\n  model: IAnyStateTreeNode\n  feature: SimpleFeatureSerialized\n  depth?: number\n  omit?: string[]\n  descriptions?: Descriptors\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}) {\n  const { omit = [], model, feature, depth = 0 } = props\n  const { maxDepth } = model\n  const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature\n  const pm = getEnv(model).pluginManager\n  const session = getSession(model)\n\n  const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {\n    session,\n    feature,\n    model,\n  }) as PanelDescriptor | undefined\n  const m = mate as { start: number; end: number; refName: string } | undefined\n  return (\n    <BaseCard title={generateTitle(name, id, type)}>\n      <Typography>Core details</Typography>\n      <CoreDetails {...props} />\n      {m ? (\n        <>\n          <Divider />\n          <Typography>Mate details</Typography>\n          <CoreDetails\n            {...props}\n            feature={{\n              ...m,\n              start: m.start,\n              end: m.end,\n              refName: m.refName,\n              uniqueId: `${uniqueId}-mate`,\n            }}\n          />\n        </>\n      ) : null}\n\n      <Divider />\n      <Typography>Attributes</Typography>\n      <Attributes\n        attributes={feature}\n        {...props}\n        omit={omit}\n        omitSingleLevel={coreDetails}\n      />\n\n      <ErrorBoundary FallbackComponent={e => <ErrorMessage error={e.error} />}>\n        <SequenceFeatureDetails {...props} />\n      </ErrorBoundary>\n\n      {ExtraPanel ? (\n        <>\n          <Divider />\n          <BaseCard title={ExtraPanel.name}>\n            <ExtraPanel.Component {...props} />\n          </BaseCard>\n        </>\n      ) : null}\n\n      {depth < maxDepth && subfeatures?.length ? (\n        <BaseCard title=\"Subfeatures\" defaultExpanded={depth < 1}>\n          {subfeatures.map((sub, idx) => (\n            <FeatureDetails\n              key={JSON.stringify(sub)}\n              feature={{\n                ...sub,\n                uniqueId: `${uniqueId}_${idx}`,\n              }}\n              model={model}\n              depth={depth + 1}\n            />\n          ))}\n        </BaseCard>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["Position","props","$","_c","feature","strand","strandMap","str","t0","assembleLocString","t1","_jsx","_Fragment","children","CoreDetails","obj","formattedFeat","__jbrowsefmt","start","end","displayedDetails","length","toLocale","coreRenderedDetails","description","name","type","_jsxs","SimpleField","value","Object","entries","map","key","filter","_temp","_temp2","name_0","value_0","AltFormatter","ref","show","setShow","useState","getMinimalDesc","onClick","Formatter","copied","setCopied","display","String","copy","setTimeout","slice","val","Checkbox2","checked","disabled","label","onChange","t2","t3","Checkbox","Typography","variant","FormControlLabel","control","VariantGenotypeFrequencyTable","rows","useCounts","setUseCounts","gridRows","summary","row_0","alleleCounts","alleles","row","GT","split","allele","key_0","join","count","genotype","gt","key_1","val_0","id","frequency","n","toPrecision","keys","e","measureGridWidth","r","widths","t4","t5","t6","t7","t8","t9","t10","t11","t12","Symbol","for","_","field","width","DataGridFlexContainer","DataGrid","hideFooter","rowHeight","columnHeaderHeight","columns","SampleFilters","setFilter","TextField","placeholder","event","target","VariantSampleGrid","descriptions","undefined","columnDisplayMode","setColumnDisplayMode","showFilters","setShowFilters","samples","ALT","REF","error","FORMAT","preFilteredRows","makeSimpleAltString","filters","fromEntries","formatField","formatValue","sample","every","currFilter","RegExp","exec","console","getSampleGridRows","colKeySet","Set","delete","index","Description","s1","s2","BaseCard","title","ErrorBoundary","ErrorMessage","color","ToggleButtonGroup","exclusive","size","newValue","ToggleButton","f","has","f_0","showToolbar","variantFieldDescriptions","CHROM","POS","ID","QUAL","FILTER","LaunchBreakendPanel","lazy","VariantConsequenceDataGrid","AnnPanel","annDesc","INFO","ANN","match","annFields","ann","CsqPanel","csqDescription","CSQ","csqFields","csq","LaunchBreakendWidgetArea","model","featureData","feat","JSON","parse","stringify","locStrings","CHR2","END","mate","refName","includes","uniqueId","alt","parseBreakend","MatePosition","FeatDefined","observer","rest","Paper","FeatureDetails","formatter","Suspense","fallback","structuredClone","SequenceFeatureDetails","HelpDialog","useStyles","makeStyles","theme","formControl","margin","container","marginTop","spacing","marginBottom","classes","shown","setShown","className","FormControl","Button","IconButton","getSession","queueDialog","handleClose","Help","LoadingEllipses","coreDetails","omit","depth","maxDepth","subfeatures","pm","getEnv","pluginManager","session","evaluateExtensionPoint","ExtraPanel","m","t13","t14","t15","t16","t17","generateTitle","Divider","Attributes","FallbackComponent","Component","defaultExpanded","sub","idx","expansionPanelDetails","padding","icon","palette","tertiary","contrastText","ExpandMore","AccordionSummary","expandIcon","AccordionDetails","Accordion"],"sourceRoot":""}