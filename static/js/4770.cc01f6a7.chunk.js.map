{"version":3,"file":"static/js/4770.cc01f6a7.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/BamAdapter/BamSlightlyLazyFeature.ts","../../../plugins/alignments/src/BamAdapter/BamAdapter.ts"],"sourcesContent":["import { getMismatches } from '../MismatchParser'\nimport { cacheGetter } from '../shared/util'\n\nimport type BamAdapter from './BamAdapter'\nimport type { BamRecord } from '@gmod/bam'\nimport type {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\n\nexport default class BamSlightlyLazyFeature implements Feature {\n  // uses parameter properties to automatically create fields on the class\n  // https://www.typescriptlang.org/docs/handbook/classes.html#parameter-properties\n  constructor(\n    private record: BamRecord,\n    private adapter: BamAdapter,\n    private ref?: string,\n  ) {}\n\n  id() {\n    return `${this.adapter.id}-${this.record.id}`\n  }\n  get mismatches() {\n    return getMismatches(\n      this.record.CIGAR,\n      this.record.tags.MD as string | undefined,\n      this.record.seq,\n      this.ref,\n      this.record.qual,\n    )\n  }\n\n  get qual() {\n    return this.record.qual?.join(' ')\n  }\n\n  get(field: string): any {\n    return field === 'mismatches'\n      ? this.mismatches\n      : field === 'qual'\n        ? this.qual\n        : this.fields[field]\n  }\n\n  parent() {\n    return undefined\n  }\n\n  children() {\n    return undefined\n  }\n\n  get fields(): SimpleFeatureSerialized {\n    const r = this.record\n    const a = this.adapter\n    const p = r.isPaired()\n    return {\n      start: r.start,\n      name: r.name,\n      end: r.end,\n      score: r.score,\n      strand: r.strand,\n      template_length: r.template_length,\n      flags: r.flags,\n      tags: r.tags,\n      refName: a.refIdToName(r.ref_id)!,\n      CIGAR: r.CIGAR,\n      seq: r.seq,\n      type: 'match',\n      pair_orientation: r.pair_orientation,\n      next_ref: p ? a.refIdToName(r.next_refid) : undefined,\n      next_pos: p ? r.next_pos : undefined,\n      next_segment_position: p\n        ? `${a.refIdToName(r.next_refid)}:${r.next_pos + 1}`\n        : undefined,\n      uniqueId: this.id(),\n    }\n  }\n\n  toJSON(): SimpleFeatureSerialized {\n    return {\n      ...this.fields,\n      qual: this.qual,\n    }\n  }\n}\n\ncacheGetter(BamSlightlyLazyFeature, 'fields')\ncacheGetter(BamSlightlyLazyFeature, 'mismatches')\n","import { BamFile } from '@gmod/bam'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { bytesForRegions, updateStatus } from '@jbrowse/core/util'\nimport QuickLRU from '@jbrowse/core/util/QuickLRU'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\nimport { firstValueFrom } from 'rxjs'\nimport { toArray } from 'rxjs/operators'\n\nimport BamSlightlyLazyFeature from './BamSlightlyLazyFeature'\nimport { filterReadFlag, filterTagValue } from '../shared/util'\n\nimport type { FilterBy } from '../shared/types'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\n\ninterface Header {\n  idToName: string[]\n  nameToId: Record<string, number>\n}\n\nexport default class BamAdapter extends BaseFeatureDataAdapter {\n  private samHeader?: Header\n\n  private setupP?: Promise<Header>\n\n  // used for avoiding re-creation new BamSlightlyLazyFeatures, keeping\n  // mismatches in cache. at an average of 100kb-300kb, keeping even just 500\n  // of these in memory is memory intensive but can reduce recomputation on\n  // these objects\n  private ultraLongFeatureCache = new QuickLRU<string, Feature>({\n    maxSize: 500,\n  })\n\n  private configureP?: Promise<{\n    bam: BamFile\n    sequenceAdapter?: BaseFeatureDataAdapter\n  }>\n\n  // derived classes may not use the same configuration so a custom configure\n  // method allows derived classes to override this behavior\n  protected async configurePre() {\n    const bamLocation = this.getConf('bamLocation')\n    const location = this.getConf(['index', 'location'])\n    const indexType = this.getConf(['index', 'indexType'])\n    const pm = this.pluginManager\n    const csi = indexType === 'CSI'\n    const bam = new BamFile({\n      bamFilehandle: openLocation(bamLocation, pm),\n      csiFilehandle: csi ? openLocation(location, pm) : undefined,\n      baiFilehandle: !csi ? openLocation(location, pm) : undefined,\n      yieldThreadTime: Number.POSITIVE_INFINITY,\n    })\n\n    const adapterConfig = this.getConf('sequenceAdapter')\n    if (adapterConfig && this.getSubAdapter) {\n      const { dataAdapter } = await this.getSubAdapter(adapterConfig)\n      return {\n        bam,\n        sequenceAdapter: dataAdapter as BaseFeatureDataAdapter,\n      }\n    }\n    return { bam }\n  }\n\n  protected async configure() {\n    if (!this.configureP) {\n      this.configureP = this.configurePre().catch((e: unknown) => {\n        this.configureP = undefined\n        throw e\n      })\n    }\n    return this.configureP\n  }\n\n  async getHeader(_opts?: BaseOptions) {\n    const { bam } = await this.configure()\n    return bam.getHeaderText()\n  }\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const { bam } = await this.configure()\n    this.samHeader = await updateStatus(\n      'Downloading index',\n      statusCallback,\n      async () => {\n        const samHeader = await bam.getHeader()\n\n        // use the @SQ lines in the header to figure out the\n        // mapping between ref ref ID numbers and names\n        const idToName: string[] = []\n        const nameToId: Record<string, number> = {}\n        samHeader\n          ?.filter(l => l.tag === 'SQ')\n          .forEach((sqLine, refId) => {\n            const SN = sqLine.data.find(item => item.tag === 'SN')\n            if (SN) {\n              // this is the ref name\n              const refName = SN.value\n              nameToId[refName] = refId\n              idToName[refId] = refName\n            }\n          })\n\n        return { idToName, nameToId }\n      },\n    )\n    return this.samHeader\n  }\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const { idToName } = await this.setup(opts)\n    return idToName\n  }\n\n  private async seqFetch(refName: string, start: number, end: number) {\n    const { sequenceAdapter } = await this.configure()\n    const refSeqStore = sequenceAdapter\n    if (!refSeqStore) {\n      return undefined\n    }\n    if (!refName) {\n      return undefined\n    }\n\n    const features = refSeqStore.getFeatures({\n      refName,\n      start,\n      end,\n      assemblyName: '',\n    })\n\n    const seqChunks = await firstValueFrom(features.pipe(toArray()))\n\n    let sequence = ''\n    seqChunks\n      .sort((a, b) => a.get('start') - b.get('start'))\n      .forEach(chunk => {\n        const chunkStart = chunk.get('start')\n        const chunkEnd = chunk.get('end')\n        const trimStart = Math.max(start - chunkStart, 0)\n        const trimEnd = Math.min(end - chunkStart, chunkEnd - chunkStart)\n        const trimLength = trimEnd - trimStart\n        const chunkSeq = chunk.get('seq') || chunk.get('residues')\n        sequence += chunkSeq.slice(trimStart, trimStart + trimLength)\n      })\n\n    if (sequence.length !== end - start) {\n      throw new Error(\n        `sequence fetch failed: fetching ${refName}:${(\n          start - 1\n        ).toLocaleString()}-${end.toLocaleString()} returned ${sequence.length.toLocaleString()} bases, but should have returned ${(\n          end - start\n        ).toLocaleString()}`,\n      )\n    }\n    return sequence\n  }\n\n  getFeatures(\n    region: Region & { originalRefName?: string },\n    opts?: BaseOptions & {\n      filterBy: FilterBy\n    },\n  ) {\n    const { refName, start, end, originalRefName } = region\n    const { stopToken, filterBy, statusCallback = () => {} } = opts || {}\n    return ObservableCreate<Feature>(async observer => {\n      const { bam } = await this.configure()\n      await this.setup(opts)\n      checkStopToken(stopToken)\n      const records = await updateStatus(\n        'Downloading alignments',\n        statusCallback,\n        () => bam.getRecordsForRange(refName, start, end),\n      )\n      checkStopToken(stopToken)\n\n      await updateStatus('Processing alignments', statusCallback, async () => {\n        const {\n          flagInclude = 0,\n          flagExclude = 0,\n          tagFilter,\n          readName,\n        } = filterBy || {}\n\n        for (const record of records) {\n          let ref: string | undefined\n          if (!record.tags.MD) {\n            ref = await this.seqFetch(\n              originalRefName || refName,\n              record.start,\n              record.end,\n            )\n          }\n\n          if (filterReadFlag(record.flags, flagInclude, flagExclude)) {\n            continue\n          }\n\n          if (\n            tagFilter &&\n            filterTagValue(record.tags[tagFilter.tag], tagFilter.value)\n          ) {\n            continue\n          }\n\n          if (readName && record.name !== readName) {\n            continue\n          }\n\n          const ret = this.ultraLongFeatureCache.get(`${record.id}`)\n          if (!ret) {\n            const elt = new BamSlightlyLazyFeature(record, this, ref)\n            this.ultraLongFeatureCache.set(`${record.id}`, elt)\n            observer.next(elt)\n          } else {\n            observer.next(ret)\n          }\n        }\n        observer.complete()\n      })\n    })\n  }\n\n  async getMultiRegionFeatureDensityStats(\n    regions: Region[],\n    opts?: BaseOptions,\n  ) {\n    const { bam } = await this.configure()\n    // this is a method to avoid calling on htsget adapters\n    if (bam.index) {\n      const bytes = await bytesForRegions(regions, bam)\n      const fetchSizeLimit = this.getConf('fetchSizeLimit')\n      return { bytes, fetchSizeLimit }\n    }\n    return super.getMultiRegionFeatureDensityStats(regions, opts)\n  }\n\n  freeResources(/* { region } */): void {}\n\n  // depends on setup being called before the BAM constructor\n  refIdToName(refId: number) {\n    return this.samHeader?.idToName[refId]\n  }\n}\n"],"names":["BamSlightlyLazyFeature","constructor","record","adapter","ref","id","this","mismatches","getMismatches","CIGAR","tags","MD","seq","qual","join","get","field","fields","parent","children","r","a","p","isPaired","start","name","end","score","strand","template_length","flags","refName","refIdToName","ref_id","type","pair_orientation","next_ref","next_refid","undefined","next_pos","next_segment_position","uniqueId","toJSON","cacheGetter","BamAdapter","BaseFeatureDataAdapter","ultraLongFeatureCache","QuickLRU","maxSize","configurePre","bamLocation","getConf","location","indexType","pm","pluginManager","csi","bam","BamFile","bamFilehandle","openLocation","csiFilehandle","baiFilehandle","yieldThreadTime","Number","POSITIVE_INFINITY","adapterConfig","getSubAdapter","dataAdapter","sequenceAdapter","configure","configureP","catch","e","getHeader","_opts","getHeaderText","setupPre","opts","statusCallback","samHeader","updateStatus","async","idToName","nameToId","filter","l","tag","forEach","sqLine","refId","SN","data","find","item","value","setup","setupP","getRefNames","seqFetch","features","getFeatures","assemblyName","seqChunks","firstValueFrom","pipe","toArray","sequence","sort","b","chunk","chunkStart","chunkEnd","trimStart","Math","max","trimLength","min","chunkSeq","slice","length","Error","toLocaleString","region","originalRefName","stopToken","filterBy","ObservableCreate","checkStopToken","records","getRecordsForRange","flagInclude","flagExclude","tagFilter","readName","filterReadFlag","filterTagValue","ret","observer","next","elt","set","complete","getMultiRegionFeatureDensityStats","regions","index","bytes","bytesForRegions","fetchSizeLimit","super","freeResources"],"sourceRoot":""}