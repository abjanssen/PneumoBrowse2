{"version":3,"file":"static/js/7011.be496099.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/AlignmentsFeatureDetail/util.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/tagInfo.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/SuppAlignmentsLocStrings.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/LaunchBreakpointSplitViewPanel.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/getSAFeatures.ts","../../../plugins/alignments/src/AlignmentsFeatureDetail/SuppAlignments.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/Flags.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/PairLink.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/Formatter.tsx","../../../plugins/alignments/src/AlignmentsFeatureDetail/AlignmentsFeatureDetail.tsx"],"sourcesContent":["import { getSession } from '@jbrowse/core/util'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\nexport function getTag(\n  tag: string,\n  feat: {\n    tags?: Record<string, unknown>\n    [key: string]: unknown\n  },\n) {\n  return feat.tags?.[tag] || feat[tag]\n}\n\nexport async function navToLoc(locString: string, model: IAnyStateTreeNode) {\n  const session = getSession(model)\n  const { view } = model\n  try {\n    if (view) {\n      await view.navToLocString(locString)\n    } else {\n      throw new Error('No view associated with this view anymore')\n    }\n  } catch (e) {\n    console.error(e)\n    session.notify(`${e}`)\n  }\n}\n","export const tags = {\n  AM: 'The smallest template-independent mapping quality in the template',\n  AS: 'Alignment score generated by aligner',\n  BC: 'Barcode sequence identifying the sample',\n  BQ: 'Offset to base alignment quality (BAQ)',\n  BZ: 'Phred quality of the unique molecular barcode bases in the {OX} tag',\n  CB: 'Cell identifier',\n  CC: 'Reference name of the next hit',\n  CM: 'Edit distance between the color sequence and the color reference (see also {NM})',\n  CO: 'Free-text comments',\n  CP: 'Leftmost coordinate of the next hit',\n  CQ: 'Color read base qualities',\n  CR: 'Cellular barcode sequence bases (uncorrected)',\n  CS: 'Color read sequence',\n  CT: 'Complete read annotation tag, used for consensus annotation dummy features',\n  CY: 'Phred quality of the cellular barcode sequence in the {CR} tag',\n  E2: 'The 2nd most likely base calls',\n  FI: 'The index of segment in the template',\n  FS: 'Segment suffix',\n  FZ: 'Flow signal intensities',\n  GC: 'Reserved for backwards compatibility reasons',\n  GQ: 'Reserved for backwards compatibility reasons',\n  GS: 'Reserved for backwards compatibility reasons',\n  H0: 'Number of perfect hits',\n  H1: 'Number of 1-difference hits (see also {NM})',\n  H2: 'Number of 2-difference hits',\n  HI: 'Query hit index',\n  IH: 'Query hit total count',\n  LB: 'Library',\n  MC: 'CIGAR string for mate/next segment',\n  MD: 'String encoding mismatched and deleted reference bases',\n  MF: 'Reserved for backwards compatibility reasons',\n  MI: 'Molecular identifier; a string that uniquely identifies the molecule from which the record was derived',\n  ML: 'Base modification probabilities',\n  MM: 'Base modifications / methylation ',\n  MQ: 'Mapping quality of the mate/next segment',\n  NH: 'Number of reported alignments that contain the query in the current record',\n  NM: 'Edit distance to the reference',\n  OA: 'Original alignment',\n  OC: 'Original CIGAR (deprecated; use {OA} instead)',\n  OP: 'Original mapping position (deprecated; use {OA} instead)',\n  OQ: 'Original base quality',\n  OX: 'Original unique molecular barcode bases',\n  PG: 'Program',\n  PQ: 'Phred likelihood of the template',\n  PT: 'Read annotations for parts of the padded read sequence',\n  PU: 'Platform unit',\n  Q2: 'Phred quality of the mate/next segment sequence in the {R2} tag',\n  QT: 'Phred quality of the sample barcode sequence in the {BC} tag',\n  QX: 'Quality score of the unique molecular identifier in the {RX} tag',\n  R2: 'Sequence of the mate/next segment in the template',\n  RG: 'Read group',\n  RT: 'Reserved for backwards compatibility reasons',\n  RX: 'Sequence bases of the (possibly corrected) unique molecular identifier',\n  S2: 'Reserved for backwards compatibility reasons',\n  SA: 'Other canonical alignments in a chimeric alignment',\n  SM: 'Template-independent mapping quality',\n  SQ: 'Reserved for backwards compatibility reasons',\n  TC: 'The number of segments in the template',\n  TS: 'Transcript strand',\n  U2: 'Phred probability of the 2nd call being wrong conditional on the best being wrong',\n  UQ: 'Phred likelihood of the segment, conditional on the mapping being correct',\n}\n","import React from 'react'\nimport { Typography, Link } from '@mui/material'\n// locals\nimport { getLengthOnRef } from '../MismatchParser'\nimport { navToLoc } from './util'\nimport { AlignmentFeatureWidgetModel } from './stateModelFactory'\n\nexport default function SuppAlignmentsLocStrings({\n  tag,\n  model,\n}: {\n  tag: string\n  model: AlignmentFeatureWidgetModel\n}) {\n  return (\n    <div>\n      <Typography>List of supplementary alignment locations</Typography>\n      <ul>\n        {tag\n          .split(';')\n          .filter(SA => !!SA)\n          .map((SA, idx) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',')\n            const saLength = getLengthOnRef(saCigar!)\n            const extra = Math.floor(saLength / 5)\n            const start = +saStart!\n            const end = +saStart! + saLength\n            const sp = start - extra\n            const ep = end + extra\n            const locString = `${saRef}:${Math.max(1, sp)}-${ep}`\n            const displayStart = start.toLocaleString('en-US')\n            const displayEnd = end.toLocaleString('en-US')\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`\n            return (\n              /* biome-ignore lint/suspicious/noArrayIndexKey: */\n              <li key={`${locString}-${idx}`}>\n                <Link\n                  href=\"#\"\n                  onClick={async event => {\n                    event.preventDefault()\n\n                    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n                    navToLoc(locString, model)\n                  }}\n                >\n                  {displayString}\n                </Link>\n              </li>\n            )\n          })}\n      </ul>\n    </div>\n  )\n}\n","import React, { lazy, useEffect, useState } from 'react'\nimport { Typography, Link, Tooltip } from '@mui/material'\nimport {\n  SimpleFeature,\n  SimpleFeatureSerialized,\n  getSession,\n  toLocale,\n} from '@jbrowse/core/util'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { ViewType } from '@jbrowse/core/pluggableElementTypes'\n\n// locals\nimport { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport { ReducedFeature, getSAFeatures } from './getSAFeatures'\n\n// lazies\nconst BreakendOptionDialog = lazy(() => import('./BreakendOptionDialog'))\n\nexport default function LaunchBreakpointSplitViewPanel({\n  model,\n  feature,\n  viewType,\n}: {\n  model: AlignmentFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n  viewType: ViewType\n}) {\n  const session = getSession(model)\n  const { view } = model\n  const [res, setRes] = useState<ReducedFeature[]>()\n  const [error, setError] = useState<unknown>()\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const feats = await getSAFeatures({\n          view,\n          feature: new SimpleFeature(feature),\n        })\n        setRes(feats)\n      } catch (e) {\n        setError(e)\n        console.error(e)\n      }\n    })()\n  }, [feature, view])\n\n  const ret = [] as [ReducedFeature, ReducedFeature][]\n  if (res) {\n    for (let i = 0; i < res.length - 1; i++) {\n      ret.push([res[i]!, res[i + 1]!] as const)\n    }\n  }\n  return ret.length ? (\n    <div>\n      <Typography>\n        Launch split views with breakend source and target\n      </Typography>\n      {error ? <ErrorMessage error={error} /> : null}\n      <ul>\n        {ret.map((arg, index) => {\n          const [f1, f2] = arg\n          return (\n            <li key={`${JSON.stringify(arg)}-${index}`}>\n              <Tooltip title=\"Top panel->Bottom panel\">\n                <Link\n                  href=\"#\"\n                  onClick={event => {\n                    event.preventDefault()\n                    session.queueDialog(handleClose => [\n                      BreakendOptionDialog,\n                      { handleClose, f1, f2, model, viewType },\n                    ])\n                  }}\n                >\n                  {f1.refName}:{toLocale(f1.strand === 1 ? f1.end : f1.start)}{' '}\n                  -&gt; {f2.refName}:\n                  {toLocale(f2.strand === 1 ? f2.start : f2.end)}\n                </Link>\n              </Tooltip>\n            </li>\n          )\n        })}\n      </ul>\n    </div>\n  ) : null\n}\n","import { Feature, getSession } from '@jbrowse/core/util'\n\n// locals\nimport { featurizeSA, getClip, getLengthSansClipping } from '../MismatchParser'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport { getTag } from '../util'\n\nexport interface ReducedFeature {\n  refName: string\n  start: number\n  clipPos: number\n  end: number\n  strand: number\n  seqLength: number\n  syntenyId?: number\n  uniqueId: string\n  mate: {\n    refName: string\n    start: number\n    end: number\n    syntenyId?: number\n    uniqueId?: string\n  }\n}\n\nexport async function getSAFeatures({\n  view,\n  feature,\n}: {\n  view: LinearGenomeViewModel\n  feature: Feature\n}) {\n  const { assemblyManager } = getSession(view)\n  const cigar = feature.get('CIGAR') as string\n  const origStrand = feature.get('strand') as number\n  const SA = (getTag(feature, 'SA') as string) || ''\n  const readName = feature.get('name') as string\n  const clipPos = getClip(cigar, 1)\n\n  // get the canonical refname for the read because if the read.get('refName')\n  // is chr1 and the actual fasta refName is 1 then no tracks can be opened on\n  // the top panel of the linear read vs ref\n  const assembly = await assemblyManager.waitForAssembly(view.assemblyNames[0]!)\n  if (!assembly) {\n    throw new Error('assembly not found')\n  }\n\n  const suppAlns = featurizeSA(SA, feature.id(), origStrand, readName, true)\n\n  const feat = feature.toJSON()\n  feat.clipPos = clipPos\n  feat.strand = 1\n\n  feat.mate = {\n    refName: readName,\n    start: clipPos,\n    end: clipPos + getLengthSansClipping(cigar),\n  }\n  const features = [feat, ...suppAlns] as ReducedFeature[]\n\n  features.forEach((f, idx) => {\n    f.refName = assembly.getCanonicalRefName(f.refName) || f.refName\n    f.syntenyId = idx\n    f.mate.syntenyId = idx\n    f.mate.uniqueId = `${f.uniqueId}_mate`\n  })\n  features.sort((a, b) => a.clipPos - b.clipPos)\n  return features\n}\n","import React from 'react'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { SimpleFeatureSerialized, getEnv, getSession } from '@jbrowse/core/util'\nimport { ViewType } from '@jbrowse/core/pluggableElementTypes'\n\n// locals\nimport { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport SuppAlignmentsLocStrings from './SuppAlignmentsLocStrings'\nimport LaunchBreakpointSplitViewPanel from './LaunchBreakpointSplitViewPanel'\n\nexport default function SuppAlignments(props: {\n  tag: string\n  model: AlignmentFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, tag, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  let viewType: ViewType | undefined\n\n  try {\n    viewType = pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  return (\n    <BaseCard {...props} title=\"Supplementary alignments\">\n      <SuppAlignmentsLocStrings model={model} tag={tag} />\n      {viewType ? (\n        <LaunchBreakpointSplitViewPanel\n          viewType={viewType}\n          model={model}\n          feature={feature}\n        />\n      ) : null}\n    </BaseCard>\n  )\n}\n","import React from 'react'\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { BaseCard } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport SimpleField from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField'\n\nconst useStyles = makeStyles()({\n  compact: {\n    paddingRight: 0,\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n})\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nexport default function AlignmentFlags(props: { feature: { flags: number } }) {\n  const { classes } = useStyles()\n  const { feature } = props\n  const { flags } = feature\n\n  return (\n    <BaseCard {...props} title=\"Flags\">\n      <SimpleField name=\"Flag\" value={flags} />\n      <FormGroup>\n        {flagNames.map((name, idx) => {\n          const val = flags & (1 << idx)\n          const key = `${name}_${val}`\n          return (\n            <FormControlLabel\n              key={key}\n              control={\n                <Checkbox\n                  className={classes.compact}\n                  checked={Boolean(val)}\n                  name={name}\n                  readOnly\n                />\n              }\n              label={name}\n            />\n          )\n        })}\n      </FormGroup>\n    </BaseCard>\n  )\n}\n","import React from 'react'\nimport { Link } from '@mui/material'\n\n// locals\nimport { AlignmentFeatureWidgetModel } from './stateModelFactory'\nimport { navToLoc } from './util'\n\nexport default function PairLink({\n  locString,\n  model,\n}: {\n  locString: string\n  model: AlignmentFeatureWidgetModel\n}) {\n  return (\n    <Link\n      onClick={event => {\n        event.preventDefault()\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        navToLoc(locString, model)\n      }}\n      href=\"#\"\n    >\n      {locString}\n    </Link>\n  )\n}\n","import React, { useState } from 'react'\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' used specifically as a formatter on alignments feature\n// details because long SEQ or CRAM files, even a single div full of a ton of\n// data from a long read, can slow down the rest of the app\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import React from 'react'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport clone from 'clone'\nimport { FeatureDetails } from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\n\n// locals\nimport { getTag } from './util'\nimport { tags } from './tagInfo'\nimport { AlignmentFeatureWidgetModel } from './stateModelFactory'\n\n// local components\nimport SuppAlignments from './SuppAlignments'\nimport Flags from './Flags'\nimport PairLink from './PairLink'\nimport Formatter from './Formatter'\n\nconst omit = ['clipPos', 'flags']\n\nconst AlignmentsFeatureDetails = observer(function (props: {\n  model: AlignmentFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = clone(featureData)\n  const SA = getTag('SA', feat) as string | undefined\n  const { flags } = feat\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <FeatureDetails\n        {...props}\n        omit={omit}\n        // @ts-expect-error\n        descriptions={{ ...tags, tags: tags }}\n        feature={feat}\n        formatter={(value, key) =>\n          key === 'next_segment_position' ? (\n            <PairLink model={model} locString={value as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }\n      />\n      {SA !== undefined ? (\n        <SuppAlignments model={model} tag={SA} feature={feat} />\n      ) : null}\n\n      {flags !== undefined ? <Flags feature={feat} {...props} /> : null}\n    </Paper>\n  )\n})\n\nexport default AlignmentsFeatureDetails\n"],"names":["async","navToLoc","locString","model","session","getSession","view","Error","navToLocString","e","console","error","notify","tags","AM","AS","BC","BQ","BZ","CB","CC","CM","CO","CP","CQ","CR","CS","CT","CY","E2","FI","FS","FZ","GC","GQ","GS","H0","H1","H2","HI","IH","LB","MC","MD","MF","MI","ML","MM","MQ","NH","NM","OA","OC","OP","OQ","OX","PG","PQ","PT","PU","Q2","QT","QX","R2","RG","RT","RX","S2","SA","SM","SQ","TC","TS","U2","UQ","SuppAlignmentsLocStrings","tag","React","Typography","split","filter","map","idx","saRef","saStart","saStrand","saCigar","saLength","getLengthOnRef","extra","Math","floor","start","end","sp","ep","max","displayString","toLocaleString","key","Link","href","onClick","event","preventDefault","BreakendOptionDialog","lazy","LaunchBreakpointSplitViewPanel","feature","viewType","res","setRes","useState","setError","useEffect","feats","assemblyManager","cigar","get","origStrand","getTag","readName","clipPos","getClip","assembly","waitForAssembly","assemblyNames","suppAlns","featurizeSA","id","feat","toJSON","strand","mate","refName","getLengthSansClipping","features","forEach","f","getCanonicalRefName","syntenyId","uniqueId","sort","a","b","getSAFeatures","SimpleFeature","ret","i","length","push","ErrorMessage","arg","index","f1","f2","JSON","stringify","Tooltip","title","queueDialog","handleClose","toLocale","SuppAlignments","props","pluginManager","getEnv","getViewType","BaseCard","_extends","useStyles","makeStyles","compact","paddingRight","paddingTop","paddingBottom","flagNames","AlignmentFlags","classes","flags","SimpleField","name","value","FormGroup","val","FormControlLabel","control","Checkbox","className","checked","Boolean","readOnly","label","PairLink","Formatter","show","setShow","copied","setCopied","display","String","type","copy","setTimeout","slice","omit","observer","featureData","clone","Paper","FeatureDetails","descriptions","formatter","undefined","Flags"],"sourceRoot":""}