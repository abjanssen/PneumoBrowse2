{"version":3,"file":"static/js/3304.71fb5c41.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/shared/color.ts","../../../plugins/alignments/src/LinearReadArcsDisplay/drawFeats.ts"],"sourcesContent":["import { orientationTypes, pairMap } from '../util'\n\nimport type { ChainStats } from './fetchChains'\n\nexport const fillColor = {\n  color_fwd_strand_not_proper: '#ECC8C8',\n  color_rev_strand_not_proper: '#BEBED8',\n  color_fwd_strand: '#EC8B8B',\n  color_rev_strand: '#8F8FD8',\n  color_fwd_missing_mate: '#D11919',\n  color_rev_missing_mate: '#1919D1',\n  color_fwd_diff_chr: '#000',\n  color_rev_diff_chr: '#969696',\n  color_pair_lr: '#c8c8c8',\n  color_pair_rr: 'navy',\n  color_pair_rl: 'teal',\n  color_pair_ll: 'green',\n  color_nostrand: '#c8c8c8',\n  color_interchrom: 'purple',\n  color_longinsert: 'red',\n  color_shortinsert: 'pink',\n  color_unknown: 'grey',\n}\n\n// manually calculated by running\n// const color = require('color')\n// Object.fromEntries(Object.entries(fillColor).map(([key,val])=>{\n//   return [key, color(val).darken('0.3').hex()]\n// }))\n// this avoids (expensive) use of Color module at runtime\nexport const strokeColor = {\n  color_fwd_strand_not_proper: '#CA6767',\n  color_rev_strand_not_proper: '#7272AA',\n  color_fwd_strand: '#DC2A2A',\n  color_rev_strand: '#4141BA',\n  color_fwd_missing_mate: '#921111',\n  color_rev_missing_mate: '#111192',\n  color_fwd_diff_chr: '#000000',\n  color_rev_diff_chr: '#696969',\n  color_pair_lr: '#8C8C8C',\n  color_pair_rr: '#00005A',\n  color_pair_rl: '#005A5A',\n  color_pair_ll: '#005A00',\n  color_nostrand: '#8C8C8C',\n  color_interchrom: '#5A005A',\n  color_longinsert: '#B30000',\n  color_shortinsert: '#FF3A5C',\n  color_unknown: 'grey',\n}\n\nexport function getPairedInsertSizeColor(\n  f1: { refName: string; tlen?: number },\n  f2: { refName: string },\n  stats?: ChainStats,\n) {\n  const sameRef = f1.refName === f2.refName\n  const tlen = Math.abs(f1.tlen || 0)\n  if (sameRef && tlen > (stats?.upper || 0)) {\n    return [fillColor.color_longinsert, strokeColor.color_longinsert] as const\n  } else if (sameRef && tlen < (stats?.lower || 0)) {\n    return [fillColor.color_shortinsert, strokeColor.color_shortinsert] as const\n  } else if (!sameRef) {\n    return [fillColor.color_interchrom, strokeColor.color_interchrom] as const\n  } else {\n    return undefined\n  }\n}\n\nconst defaultColor = [fillColor.color_unknown, fillColor.color_unknown] as const\n\n// return color scheme with both insert size and orientation coloring,\n// prioritzing orientation coloring\nexport function getPairedInsertSizeAndOrientationColor(\n  f1: { refName: string; pair_orientation?: string; tlen?: number },\n  f2: { refName: string },\n  stats?: ChainStats,\n) {\n  return (\n    getPairedOrientationColorOrDefault(f1) ||\n    getPairedInsertSizeColor(f1, f2, stats) ||\n    defaultColor\n  )\n}\n\nexport function getPairedOrientationColorOrDefault(f: {\n  pair_orientation?: string\n}) {\n  const type = orientationTypes.fr\n  const r = type[f.pair_orientation || ''] as keyof typeof pairMap\n  const type2 = pairMap[r] as keyof typeof fillColor\n  return r === 'LR'\n    ? undefined\n    : ([fillColor[type2], strokeColor[type2]] as const)\n}\n\nexport function getPairedOrientationColor(f: { pair_orientation?: string }) {\n  return getPairedOrientationColorOrDefault(f) || defaultColor\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util'\n\nimport { featurizeSA } from '../MismatchParser'\nimport {\n  getPairedInsertSizeAndOrientationColor,\n  getPairedInsertSizeColor,\n  getPairedOrientationColor,\n} from '../shared/color'\nimport { hasPairedReads } from '../shared/util'\n\nimport type { LinearReadArcsDisplayModel } from './model'\nimport type { Assembly } from '@jbrowse/core/assemblyManager/assembly'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nfunction jitter(n: number) {\n  return Math.random() * 2 * n - n\n}\n\ninterface CoreFeat {\n  strand: number\n  refName: string\n  start: number\n  end: number\n}\n\nfunction drawLineAtOffset(\n  ctx: CanvasRenderingContext2D,\n  offset: number,\n  height: number,\n  color: string,\n) {\n  // draws a vertical line off to middle of nowhere if the second end not found\n  ctx.strokeStyle = color\n  ctx.beginPath()\n  ctx.moveTo(offset, 0)\n  ctx.lineTo(offset, height)\n  ctx.stroke()\n}\n\nexport function drawFeats(\n  self: LinearReadArcsDisplayModel,\n  ctx: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n) {\n  const {\n    chainData,\n    colorBy,\n    drawInter,\n    drawLongRange,\n    lineWidthSetting,\n    jitterVal,\n  } = self\n  if (!chainData) {\n    return\n  }\n  const view = getContainingView(self) as LGV\n  const { assemblyManager } = getSession(self)\n  const { chains, stats } = chainData\n  const hasPaired = hasPairedReads(chainData)\n  const asm = assemblyManager.get(view.assemblyNames[0]!)\n  const type = colorBy?.type || 'insertSizeAndOrientation'\n  if (!asm) {\n    return\n  }\n  ctx.lineWidth = lineWidthSetting\n\n  function draw(\n    k1: CoreFeat & { tlen?: number; pair_orientation?: string },\n    k2: CoreFeat,\n    assembly: Assembly,\n    longRange?: boolean,\n  ) {\n    const s1 = k1.strand\n    const s2 = k2.strand\n    const f1 = s1 === -1\n    const f2 = s2 === -1\n\n    const p1 = f1 ? k1.start : k1.end\n    const p2 = hasPaired ? (f2 ? k2.start : k2.end) : f2 ? k2.end : k2.start\n    const ra1 = assembly.getCanonicalRefName(k1.refName) || k1.refName\n    const ra2 = assembly.getCanonicalRefName(k2.refName) || k2.refName\n    const r1 = view.bpToPx({ refName: ra1, coord: p1 })?.offsetPx\n    const r2 = view.bpToPx({ refName: ra2, coord: p2 })?.offsetPx\n\n    if (r1 !== undefined && r2 !== undefined) {\n      const radius = (r2 - r1) / 2\n      const absrad = Math.abs(radius)\n      const p = r1 - view.offsetPx\n      const p2 = r2 - view.offsetPx\n      const drawArcInsteadOfBezier = absrad > 10_000\n\n      // bezier (used for non-long-range arcs) requires moveTo before beginPath\n      // arc (used for long-range) requires moveTo after beginPath (or else a\n      // unwanted line at y=0 is rendered along with the arc)\n      if (longRange && drawArcInsteadOfBezier) {\n        ctx.moveTo(p, 0)\n        ctx.beginPath()\n      } else {\n        ctx.beginPath()\n        ctx.moveTo(p, 0)\n      }\n\n      if (longRange && drawArcInsteadOfBezier) {\n        ctx.strokeStyle = 'red'\n      } else {\n        if (hasPaired) {\n          if (type === 'insertSizeAndOrientation') {\n            ctx.strokeStyle = getPairedInsertSizeAndOrientationColor(\n              k1,\n              k2,\n              stats,\n            )[0]\n          } else if (type === 'orientation') {\n            ctx.strokeStyle = getPairedOrientationColor(k1)[0]\n          } else if (type === 'insertSize') {\n            ctx.strokeStyle =\n              getPairedInsertSizeColor(k1, k2, stats)?.[0] || 'grey'\n          } else if (type === 'gradient') {\n            ctx.strokeStyle = `hsl(${Math.log10(absrad) * 10},50%,50%)`\n          }\n        } else {\n          if (type === 'orientation' || type === 'insertSizeAndOrientation') {\n            if (s1 === -1 && s2 === 1) {\n              ctx.strokeStyle = 'navy'\n            } else if (s1 === 1 && s2 === -1) {\n              ctx.strokeStyle = 'green'\n            } else {\n              ctx.strokeStyle = 'grey'\n            }\n          } else if (type === 'gradient') {\n            ctx.strokeStyle = `hsl(${Math.log10(absrad) * 10},50%,50%)`\n          }\n        }\n      }\n\n      const destX = p + radius * 2\n      const destY = Math.min(height + jitter(jitterVal), absrad)\n      if (longRange) {\n        // avoid drawing gigantic circles that glitch out the rendering,\n        // instead draw vertical lines\n        if (absrad > 100_000) {\n          drawLineAtOffset(ctx, p + jitter(jitterVal), height, 'red')\n          drawLineAtOffset(ctx, p2 + jitter(jitterVal), height, 'red')\n        } else if (drawArcInsteadOfBezier) {\n          ctx.arc(p + radius + jitter(jitterVal), 0, absrad, 0, Math.PI)\n          ctx.stroke()\n        } else {\n          ctx.bezierCurveTo(\n            p + jitter(jitterVal),\n            destY,\n            destX,\n            destY,\n            destX + jitter(jitterVal),\n            0,\n          )\n          ctx.stroke()\n        }\n      } else {\n        ctx.bezierCurveTo(\n          p + jitter(jitterVal),\n          destY,\n          destX,\n          destY,\n          destX + jitter(jitterVal),\n          0,\n        )\n        ctx.stroke()\n      }\n    } else if (r1 && drawInter) {\n      drawLineAtOffset(ctx, r1 - view.offsetPx, height, 'purple')\n    }\n  }\n\n  for (const chain of chains) {\n    // chain.length === 1, singleton (other pairs/mates not in view)\n    if (chain.length === 1 && drawLongRange) {\n      const f = chain[0]!\n      if (hasPaired && !(f.flags & 8)) {\n        const mate = {\n          refName: f.next_ref || '',\n          start: f.next_pos || 0,\n          end: f.next_pos || 0,\n          strand: f.strand,\n        }\n        draw(f, mate, asm, true)\n      } else {\n        const features = [f, ...featurizeSA(f.SA, f.id, f.strand, f.name)].sort(\n          (a, b) => a.clipPos - b.clipPos,\n        )\n        for (let i = 0; i < features.length - 1; i++) {\n          const f = features[i]!\n          const v1 = features[i + 1]!\n          draw(f, v1, asm, true)\n        }\n      }\n    } else {\n      const res = hasPaired\n        ? chain.filter(f => !(f.flags & 2048) && !(f.flags & 8))\n        : chain\n            .sort((a, b) => a.clipPos - b.clipPos)\n            .filter(f => !(f.flags & 256))\n      for (let i = 0; i < res.length - 1; i++) {\n        draw(res[i]!, res[i + 1]!, asm, false)\n      }\n    }\n  }\n}\n"],"names":["fillColor","color_fwd_strand_not_proper","color_rev_strand_not_proper","color_fwd_strand","color_rev_strand","color_fwd_missing_mate","color_rev_missing_mate","color_fwd_diff_chr","color_rev_diff_chr","color_pair_lr","color_pair_rr","color_pair_rl","color_pair_ll","color_nostrand","color_interchrom","color_longinsert","color_shortinsert","color_unknown","strokeColor","getPairedInsertSizeColor","f1","f2","stats","sameRef","refName","tlen","Math","abs","upper","lower","defaultColor","getPairedInsertSizeAndOrientationColor","getPairedOrientationColorOrDefault","f","r","orientationTypes","fr","pair_orientation","type2","pairMap","undefined","getPairedOrientationColor","jitter","n","random","drawLineAtOffset","ctx","offset","height","color","strokeStyle","beginPath","moveTo","lineTo","stroke","drawFeats","self","width","chainData","colorBy","drawInter","drawLongRange","lineWidthSetting","jitterVal","view","getContainingView","assemblyManager","getSession","chains","hasPaired","hasPairedReads","asm","get","assemblyNames","type","lineWidth","chain","length","flags","features","featurizeSA","SA","id","strand","name","sort","a","b","clipPos","i","draw","next_ref","start","next_pos","end","res","filter","k1","k2","assembly","longRange","s1","s2","p1","p2","ra1","getCanonicalRefName","ra2","r1","bpToPx","coord","offsetPx","r2","radius","absrad","p","drawArcInsteadOfBezier","log10","destX","destY","min","arc","PI","bezierCurveTo"],"sourceRoot":""}