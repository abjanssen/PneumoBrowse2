{"version":3,"file":"static/js/4864.094a2924.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/generateRepeatMaskerFeature.ts","../../../plugins/bed/src/util.ts","../../../plugins/bed/src/generateBedMethylFeature.ts","../../../plugins/bed/src/generateUcscTranscript.ts","../../../plugins/bed/src/BedAdapter/BedAdapter.ts"],"sourcesContent":["export function isRepeatMaskerDescriptionField(desc?: string): desc is string {\n  const ret = desc?.trim().split(' ')\n  return [0, 1, 2, 3, 5, 6].every(s =>\n    ret?.[s] !== undefined ? !Number.isNaN(+ret[s]) : false,\n  )\n}\n\nfunction makeRepeatTrackDescription(description?: string) {\n  if (isRepeatMaskerDescriptionField(description)) {\n    const [\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    ] = description.trim().split(' ')\n    return {\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    }\n  }\n  return { description }\n}\n\nexport function generateRepeatMaskerFeature({\n  uniqueId,\n  refName,\n  start,\n  end,\n  description,\n  ...rest\n}: {\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n  description: string\n  [key: string]: unknown\n}) {\n  const { subfeatures, ...rest2 } = rest\n  return {\n    ...rest2,\n    ...makeRepeatTrackDescription(description),\n    uniqueId,\n    refName,\n    start,\n    end,\n  }\n}\n","import {\n  generateBedMethylFeature,\n  isBedMethylFeature,\n} from './generateBedMethylFeature'\nimport {\n  generateRepeatMaskerFeature,\n  isRepeatMaskerDescriptionField,\n} from './generateRepeatMaskerFeature'\nimport {\n  generateUcscTranscript,\n  isUcscTranscript,\n} from './generateUcscTranscript'\n\nimport type BED from '@gmod/bed'\n\nfunction defaultParser(fields: string[], splitLine: string[]) {\n  let hasBlockCount = false\n  const r = [] as [string, string][]\n  for (let i = 0; i < splitLine.length; i++) {\n    if (fields[i] === 'blockCount') {\n      hasBlockCount = true\n    }\n    r.push([fields[i]!, splitLine[i]!] as const)\n  }\n  // heuristically try to determine whether to follow 'slow path' as there can\n  // be many features in e.g. GWAS type data\n  const obj = Object.fromEntries(r)\n  // slow path\n  if (hasBlockCount) {\n    const {\n      blockStarts,\n      blockCount,\n      chromStarts,\n      thickEnd,\n      thickStart,\n      blockSizes,\n      ...rest\n    } = obj\n\n    return {\n      ...rest,\n      blockStarts: arrayify(blockStarts),\n      chromStarts: arrayify(chromStarts),\n      blockSizes: arrayify(blockSizes),\n      thickStart: thickStart ? +thickStart : undefined,\n      thickEnd: thickEnd ? +thickEnd : undefined,\n      blockCount: blockCount ? +blockCount : undefined,\n    } as Record<string, unknown>\n  }\n\n  // fast path\n  else {\n    return obj\n  }\n}\n\nexport function makeBlocks({\n  start,\n  uniqueId,\n  refName,\n  chromStarts,\n  blockCount,\n  blockSizes,\n  blockStarts,\n}: {\n  blockCount: number\n  start: number\n  uniqueId: string\n  refName: string\n  chromStarts?: number[]\n  blockSizes?: number[]\n  blockStarts?: number[]\n}) {\n  const subfeatures = []\n  const starts = chromStarts || blockStarts || []\n  for (let b = 0; b < blockCount; b++) {\n    const bmin = (starts[b] || 0) + start\n    const bsize = blockSizes?.[b]\n    if (bsize && bsize > 0) {\n      const bmax = bmin + bsize\n      subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        refName,\n        type: 'block',\n      })\n    }\n  }\n  return subfeatures\n}\n\nexport function featureData({\n  line,\n  colRef,\n  colStart,\n  colEnd,\n  scoreColumn,\n  parser,\n  uniqueId,\n  names,\n}: {\n  line: string\n  colRef: number\n  colStart: number\n  colEnd: number\n  scoreColumn: string\n  parser: BED\n  uniqueId: string\n  names?: string[]\n}) {\n  const splitLine = line.split('\\t')\n  const refName = splitLine[colRef]!\n  const start = Number.parseInt(splitLine[colStart]!, 10)\n  const end =\n    Number.parseInt(splitLine[colEnd]!, 10) + (colStart === colEnd ? 1 : 0)\n\n  return featureData2({\n    splitLine,\n    refName,\n    start,\n    end,\n    parser,\n    uniqueId,\n    scoreColumn,\n    names,\n  })\n}\n\nexport function featureData2({\n  splitLine,\n  refName,\n  start,\n  end,\n  parser,\n  uniqueId,\n  scoreColumn,\n  names,\n}: {\n  splitLine: string[]\n  refName: string\n  start: number\n  end: number\n  parser: BED\n  uniqueId: string\n  scoreColumn: string\n  names?: string[]\n}) {\n  const data = names\n    ? defaultParser(names, splitLine)\n    : parser.parseLine(splitLine, { uniqueId })\n  const {\n    strand: strand2,\n    score: score2,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    ...rest\n  } = data\n\n  const score = scoreColumn ? +data[scoreColumn] : score2 ? +score2 : undefined\n  const strand =\n    typeof strand2 === 'string' ? (strand2 === '-' ? -1 : 1) : strand2\n\n  const subfeatures = rest.blockCount\n    ? makeBlocks({\n        start,\n        uniqueId,\n        refName,\n        chromStarts: rest.chromStarts,\n        blockCount: rest.blockCount,\n        blockSizes: rest.blockSizes,\n        blockStarts: rest.blockStarts,\n      })\n    : undefined\n\n  if (isBedMethylFeature({ splitLine, start, end })) {\n    return generateBedMethylFeature({\n      splitLine,\n      uniqueId,\n      refName,\n      start,\n      end,\n    })\n  } else if (isRepeatMaskerDescriptionField(rest.description)) {\n    const {\n      chromStarts,\n      blockSizes,\n      blockStarts,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n      ...rest2\n    } = rest\n    return generateRepeatMaskerFeature({\n      ...rest2,\n      uniqueId,\n      description,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    })\n  } else if (\n    subfeatures &&\n    isUcscTranscript({\n      strand,\n      blockCount: rest.blockCount,\n      thickStart: rest.thickStart,\n    })\n  ) {\n    const {\n      chromStarts,\n      blockSizes,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n    } = rest\n    return generateUcscTranscript({\n      ...rest,\n      description,\n      chromStarts,\n      thickStart,\n      thickEnd,\n      blockSizes,\n      blockCount,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      uniqueId,\n      subfeatures,\n    })\n  } else {\n    return {\n      ...rest,\n      uniqueId,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    }\n  }\n}\n\nexport function arrayify(f?: string | number[]) {\n  return f !== undefined\n    ? typeof f === 'string'\n      ? f.split(',').map(f => +f)\n      : f\n    : undefined\n}\n","// this uses modkit bedMethyl. unclear how to reliably detect minimal 9+2 bedMethyl\nexport function isBedMethylFeature({\n  splitLine,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  start: number\n  end: number\n}) {\n  return (\n    +(splitLine[6] || 0) === start &&\n    +(splitLine[7] || 0) === end &&\n    [9, 10, 11, 12, 13, 14, 15, 16, 17].every(\n      r => splitLine[r] && !Number.isNaN(+splitLine[r]),\n    )\n  )\n}\n\nexport function generateBedMethylFeature({\n  splitLine,\n  uniqueId,\n  refName,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n}) {\n  // see\n  // https://github.com/nanoporetech/modkit?tab=readme-ov-file#description-of-bedmethyl-output\n  const [\n    ,\n    ,\n    ,\n    code,\n    ,\n    strand,\n    ,\n    ,\n    color,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  ] = splitLine\n\n  return {\n    uniqueId,\n    refName,\n    start,\n    end,\n    code,\n    score: +fraction_modified! || 0,\n    strand,\n    color,\n    source: code,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  }\n}\n","import type { MinimalFeature, TranscriptFeat } from './types'\n\nexport function isUcscTranscript({\n  thickStart,\n  blockCount,\n  strand,\n}: {\n  thickStart?: number\n  blockCount?: number\n  strand?: number\n}) {\n  return thickStart && blockCount && strand !== 0\n}\n\nexport function generateUcscTranscript(data: TranscriptFeat) {\n  const {\n    strand = 0,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    chromStarts,\n    blockStarts,\n    blockSizes,\n    uniqueId,\n    ...rest\n  } = data\n  const {\n    subfeatures: oldSubfeatures,\n    thickStart,\n    thickEnd,\n    blockCount,\n    refName,\n    ...rest2\n  } = rest\n\n  const subfeatures: MinimalFeature[] = []\n  const feats = oldSubfeatures\n    .filter(child => child.type === 'block')\n    .sort((a, b) => a.start - b.start)\n\n  for (const block of feats) {\n    const start = block.start\n    const end = block.end\n    if (thickStart >= end) {\n      // left-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          phase: 0,\n          start: thickStart,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      subfeatures.push({\n        type: 'CDS',\n        phase: 0,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          phase: 0,\n          start: thickStart,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      subfeatures.push(\n        {\n          type: 'CDS',\n          phase: 0,\n          start,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    }\n  }\n\n  return {\n    ...rest2,\n    uniqueId,\n    strand,\n    type: 'mRNA',\n    refName,\n    subfeatures,\n  }\n}\n","import IntervalTree from '@flatten-js/interval-tree'\nimport BED from '@gmod/bed'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature, fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\n\nimport { featureData } from '../util'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class BedAdapter extends BaseFeatureDataAdapter {\n  protected bedFeatures?: Promise<{\n    header: string\n    features: Record<string, string[]>\n    parser: BED\n    columnNames: string[]\n    scoreColumn: string\n    colRef: number\n    colStart: number\n    colEnd: number\n  }>\n\n  protected intervalTrees: Record<\n    string,\n    Promise<IntervalTree | undefined> | undefined\n  > = {}\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  private async loadDataP(opts: BaseOptions = {}) {\n    const pm = this.pluginManager\n    const bedLoc = this.getConf('bedLocation')\n    const buffer = await fetchAndMaybeUnzip(openLocation(bedLoc, pm), opts)\n    // 512MB  max chrome string length is 512MB\n    if (buffer.length > 536_870_888) {\n      throw new Error('Data exceeds maximum string length (512MB)')\n    }\n    const data = new TextDecoder('utf8', { fatal: true }).decode(buffer)\n    const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const headerLines = []\n    let i = 0\n    for (; i < lines.length && lines[i]!.startsWith('#'); i++) {\n      headerLines.push(lines[i])\n    }\n    const header = headerLines.join('\\n')\n    const features = {} as Record<string, string[]>\n    for (; i < lines.length; i++) {\n      const line = lines[i]!\n      const tab = line.indexOf('\\t')\n      const refName = line.slice(0, tab)\n      if (!features[refName]) {\n        features[refName] = []\n      }\n      features[refName].push(line)\n    }\n\n    const autoSql = this.getConf('autoSql') as string\n    const parser = new BED({ autoSql })\n    const columnNames = this.getConf('columnNames')\n    const scoreColumn = this.getConf('scoreColumn')\n    const colRef = this.getConf('colRef')\n    const colStart = this.getConf('colStart')\n    const colEnd = this.getConf('colEnd')\n\n    return {\n      header,\n      features,\n      parser,\n      columnNames,\n      scoreColumn,\n      colRef,\n      colStart,\n      colEnd,\n    }\n  }\n\n  async loadData(opts: BaseOptions = {}) {\n    if (!this.bedFeatures) {\n      this.bedFeatures = this.loadDataP(opts).catch((e: unknown) => {\n        this.bedFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.bedFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { features } = await this.loadData(opts)\n    return Object.keys(features)\n  }\n\n  async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  async getNames() {\n    const { header, columnNames } = await this.loadData()\n    if (columnNames.length) {\n      return columnNames\n    }\n    const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f)\n    const defline = defs.at(-1)\n    return defline?.includes('\\t')\n      ? defline\n          .slice(1)\n          .split('\\t')\n          .map(field => field.trim())\n      : undefined\n  }\n\n  private async loadFeatureIntervalTreeHelper(refName: string) {\n    const { colRef, colStart, colEnd, features, parser, scoreColumn } =\n      await this.loadData()\n    const lines = features[refName]\n    if (!lines) {\n      return undefined\n    }\n    const names = await this.getNames()\n\n    const intervalTree = new IntervalTree()\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i]!\n      const uniqueId = `${this.id}-${refName}-${i}`\n      const feat = new SimpleFeature(\n        featureData({\n          line,\n          colRef,\n          colStart,\n          colEnd,\n          scoreColumn,\n          parser,\n          uniqueId,\n          names,\n        }),\n      )\n      intervalTree.insert([feat.get('start'), feat.get('end')], feat)\n    }\n\n    return intervalTree\n  }\n\n  async loadFeatureIntervalTree(refName: string) {\n    if (!this.intervalTrees[refName]) {\n      this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(\n        refName,\n      ).catch((e: unknown) => {\n        this.intervalTrees[refName] = undefined\n        throw e\n      })\n    }\n    return this.intervalTrees[refName]\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { start, end, refName } = query\n      const intervalTree = await this.loadFeatureIntervalTree(refName)\n      const features = intervalTree?.search([start, end])\n      if (features) {\n        for (const f of features) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    }, opts.stopToken)\n  }\n\n  public freeResources(): void {}\n}\n"],"names":["isRepeatMaskerDescriptionField","desc","ret","trim","split","every","s","undefined","Number","isNaN","makeRepeatTrackDescription","description","bitsw_score","percent_div","percent_del","percent_ins","query_chr","query_begin","query_end","query_remaining","orientation","matching_repeat_name","matching_repeat_class","matching_repeat_begin","matching_repeat_end","matching_repeat_remaining","repeat_id","featureData","line","colRef","colStart","colEnd","scoreColumn","parser","uniqueId","names","splitLine","featureData2","refName","start","parseInt","end","data","fields","hasBlockCount","r","i","length","push","obj","Object","fromEntries","blockStarts","blockCount","chromStarts","thickEnd","thickStart","blockSizes","rest","arrayify","defaultParser","parseLine","strand","strand2","score","score2","chrom","_1","chromStart","_2","chromEnd","_3","subfeatures","starts","b","bmin","bsize","bmax","type","makeBlocks","isBedMethylFeature","code","color","n_valid_cov","fraction_modified","n_mod","n_canonical","n_other_mod","n_delete","n_fail","n_diff","n_nocall","source","generateBedMethylFeature","rest2","generateRepeatMaskerFeature","isUcscTranscript","oldSubfeatures","feats","filter","child","sort","a","block","phase","generateUcscTranscript","f","map","BedAdapter","BaseFeatureDataAdapter","intervalTrees","loadDataP","opts","pm","this","pluginManager","bedLoc","getConf","buffer","fetchAndMaybeUnzip","openLocation","Error","lines","TextDecoder","fatal","decode","headerLines","startsWith","header","join","features","tab","indexOf","slice","autoSql","BED","columnNames","loadData","bedFeatures","catch","e","getRefNames","keys","getHeader","getNames","defline","at","includes","field","loadFeatureIntervalTreeHelper","intervalTree","IntervalTree","id","feat","SimpleFeature","insert","get","loadFeatureIntervalTree","getFeatures","query","ObservableCreate","async","search","observer","next","complete","stopToken","freeResources"],"sourceRoot":""}