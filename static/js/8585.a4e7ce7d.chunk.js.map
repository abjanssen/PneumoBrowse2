{"version":3,"file":"static/js/8585.a4e7ce7d.chunk.js","mappings":"4hBAmBA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,YAAa,CACXC,SAAU,WACVC,MAAOH,EAAMI,QAAQ,GACrBC,IAAKL,EAAMI,QAAQ,GACnBE,MAAON,EAAMO,QAAQC,KAAK,UAI9B,SAASC,EAAeC,GACtB,MAAMC,GAAMC,EAAAA,EAAAA,QAAuB,MACnC,OACEC,EAAAA,cAACC,IAAS,CACRC,QAASJ,EACTK,OAAQ,mCAERC,QAASC,GAAOA,EAAIC,QAAQC,WAAWC,SAAS,mBAEhDR,EAAAA,cAACS,EAAAA,EAAKC,EAAA,CAACZ,IAAKA,GAASD,IAG3B,CAEA,MA8BA,GA9BwBc,EAAAA,EAAAA,WAAS,SAC/Bd,GAEA,MAAM,QAAEe,GAAY3B,KACd,MAAE4B,EAAK,SAAEC,EAAQ,QAAEC,GAAYlB,EAErC,OACEG,EAAAA,cAACgB,EAAAA,EAAMN,EAAA,GAAKb,EAAK,CAAED,eAAgBA,IACjCI,EAAAA,cAACiB,EAAAA,EAAiB,KAChBjB,EAAAA,cAACkB,EAAAA,EAAW,CAACC,MAAO,CAAEC,OAAQ,SAC3BP,EACAE,EACCf,EAAAA,cAACqB,EAAAA,EAAU,CACTd,UAAWK,EAAQxB,YACnBkC,QAASA,KAEPP,GAAS,GAGXf,EAAAA,cAACuB,EAAAA,EAAS,OAEV,MAENvB,EAAAA,cAACwB,EAAAA,EAAO,MACPV,GAIT,I,iFCtEO,SAASW,EAAOC,EAAyBC,EAAeC,EAAK,GAClE,MAAMC,EAAOF,EACVG,KAAIC,GAAKL,EAAIM,WAAUC,GAAKA,EAAEC,OAASH,MACvCI,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACtB,IAAIC,EAAU,EACd,IAAK,MAAMC,KAAOV,EAAM,CACtB,MAAMW,EAAMC,KAAKC,IAAIJ,EAASC,EAAMX,GAChCY,GAAOF,GACTZ,EAAIiB,OAAOH,EAAK,EAAGd,EAAIiB,OAAOJ,EAAK,GAAG,IAExCD,GAAoB,CACtB,CAEA,OAAOZ,CACT,CAEO,SAASkB,EAASlB,EAAyBC,EAAeC,EAAK,GACpE,MAAMC,EAAOF,EACVG,KAAIC,GAAKL,EAAIM,WAAUC,GAAKA,EAAEC,OAASH,MACvCI,MAAK,CAACC,EAAGC,IAAMA,EAAID,IACtB,IAAIE,EAAUZ,EAAImB,OAAS,EAC3B,IAAK,MAAMN,KAAOV,EAAM,CACtB,MAAMW,EAAMC,KAAKK,IAAIR,EAASC,EAAMX,GAChCY,GAAOF,GACTZ,EAAIiB,OAAOH,EAAK,EAAGd,EAAIiB,OAAOJ,EAAK,GAAG,IAExCD,GAAoB,CACtB,CAEA,OAAOZ,CACT,CCTA,MAAMzC,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7B6D,KAAM,CACJC,WAAY,SACZC,SAAU,SACVC,aAAc,cAsHlB,SAASC,GAAW,SAClBC,EAAQ,SACRC,EAAQ,KACRC,EAAI,SACJC,IAOA,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,UAA6B,OACtDC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,QAC/C,OACE1D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6D,EAAAA,EAAM,CACLC,UAAWV,EAASP,OACpBvB,QAASyC,IACPN,EAAYM,EAAMC,cAAc,GAEnC,kCAGDhE,EAAAA,cAAC6D,EAAAA,EAAM,CACLvC,QAASA,KACP+B,EAAS5B,EAAO,IAAI6B,GAAOF,GAAU,EAEvCU,UAAWV,EAASP,QAEpB7C,EAAAA,cAACiE,EAAAA,EAAmB,MACnBV,EAAW,yBAA2B,MAEzCvD,EAAAA,cAAC6D,EAAAA,EAAM,CACLvC,QAASA,KACP+B,EAAST,EAAS,IAAIU,GAAOF,GAAU,EAEzCU,UAAWV,EAASP,QAEpB7C,EAAAA,cAACkE,EAAAA,EAAqB,MACrBX,EAAW,2BAA6B,MAE3CvD,EAAAA,cAAC6D,EAAAA,EAAM,CACLvC,QAASA,KACP+B,EAAS5B,EAAO,IAAI6B,GAAOF,EAAUE,EAAKT,QAAQ,EAEpDiB,UAAWV,EAASP,QAEpB7C,EAAAA,cAACmE,EAAAA,EAAyB,MACzBZ,EAAW,6BAA+B,MAE7CvD,EAAAA,cAAC6D,EAAAA,EAAM,CACLvC,QAASA,KACP+B,EAAST,EAAS,IAAIU,GAAOF,EAAUE,EAAKT,QAAQ,EAEtDiB,UAAWV,EAASP,QAEpB7C,EAAAA,cAACoE,EAAAA,EAA2B,MAC3Bb,EAAW,gCAAkC,MAEhDvD,EAAAA,cAACqE,EAAAA,GAAY,CACXb,SAAUA,EACV/D,MAAOkE,EACPN,SAAUiB,IACRV,EAAeU,GACflB,EAASmB,SAAQC,IACf,MAAMC,EAAMnB,EAAKoB,MAAKC,GAAKA,EAAEzC,OAASsC,IAClCC,IACFA,EAAIhF,MAAQ6E,EACd,IAGFjB,EAAS,IAAIC,GAAM,EAErBvC,QAASA,KACP0C,EAAY,KAAK,IAK3B,CAEA,QA9LA,UAAqB,KACnBH,EAAI,SACJD,EAAQ,SACRE,IAMA,MAAM,QAAE3C,GAAY3B,KACbmE,EAAUwB,IAAelB,EAAAA,EAAAA,UAAS,KACjCxB,KAAM2C,EAAOpF,MAAOqF,EAAQC,QAASC,KAAaC,GAAS3B,EAAK,IACjE4B,EAAUC,IAAezB,EAAAA,EAAAA,UAAoB,CAClDlB,IAAK,EACL4C,MAAO,OAGT,OACEpF,EAAAA,cAAA,WACEA,EAAAA,cAACmD,EAAU,CACTC,SAAUA,EACVE,KAAMA,EACNC,SAAUA,EACVF,SAAUA,IAEZrD,EAAAA,cAAA,OAAKmB,MAAO,CAAEkE,OAAQ,IAAKC,MAAO,SAChCtF,EAAAA,cAACuF,EAAAA,EAAQ,CACPC,SAAUC,GAAOA,EAAIvD,KACrBwD,mBAAiB,EACjBC,4BAA0B,EAC1BC,0BAA2BvF,IACzBuE,EAAYvE,EAAgB,EAE9BiD,KAAMA,EACNuC,UAAW,GACXC,mBAAoB,GACpBC,QAAS,CACP,CACEX,MAAO,QACPY,WAAY,QACZC,WAAYC,IACV,MAAM,MAAEC,EAAK,GAAE3B,GAAO0B,EACtB,OACElG,EAAAA,cAACoG,EAAAA,GAAW,CACV3G,MAAO0G,GAAS,OAChB9C,SAAUiB,IACR,MAAMG,EAAMnB,EAAKoB,MAAKC,GAAKA,EAAEzC,OAASsC,IAClCC,IACFA,EAAIhF,MAAQ6E,GAEdjB,EAAS,IAAIC,GAAM,GAErB,GAIR,CACE8B,MAAO,OACPY,WAAY,OACZV,OAAOe,EAAAA,EAAAA,kBAAiB/C,EAAKxB,KAAIwE,GAAKA,EAAEpE,YAEvCqE,OAAOC,KAAKvB,GAAMnD,KACnB2E,IAAG,CAECrB,MAAOqB,EACPR,WAAYA,EAAGE,WACbnG,EAAAA,cAAA,OAAKO,UAAWK,EAAQmC,MACtB/C,EAAAA,cAAC0G,EAAAA,cAAa,CAACC,MAAMC,EAAAA,EAAAA,QAAOT,MAGhCb,OAAOe,EAAAA,EAAAA,kBACL/C,EAAKxB,KAAIwE,GAAK,GAAGA,EAAEG,aAK7BI,UACE,GAKFC,kBAAmBC,IACjB,MAAM5E,EAAO4E,EAAK,GAKZvE,GAAO0C,EAAS1C,IAAM,GAAK,EAC3B4C,EAAQjD,EAAMiD,OAASF,EAASE,MACtCD,EAAY,CAAE3C,MAAK4C,UACnB/B,EACE+B,EACI,IAAI9B,GAAMnB,MAAK,CAACC,EAAGC,KACjB,MAAM2E,GAAKJ,EAAAA,EAAAA,QAAOxE,EAAEgD,IACd6B,GAAKL,EAAAA,EAAAA,QAAOvE,EAAE+C,IACpB,OAAe,IAAR5C,EACHwE,EAAGE,cAAcD,GACjBA,EAAGC,cAAcF,EAAG,IAE1B1D,EACL,KAMb,E,yBCrIA,MAAMrE,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BiI,aAAc,CACZC,WAAY,iBAID,SAASC,GAAc,cACpCC,EAAa,WACbC,IAKA,MAAM,QAAE3G,GAAY3B,KACbwH,EAAKe,IAAU9D,EAAAA,EAAAA,UAAS,KACxB+D,EAAOC,IAAYhE,EAAAA,EAAAA,YAC1B,OACE1D,EAAAA,cAAA,WACEA,EAAAA,cAAC2H,EAAAA,EAAU,KAAC,sMAKZ3H,EAAAA,cAAC4H,EAAAA,EAAS,CACRC,QAAQ,WACRC,WAAS,EACTC,QAAS,EACTC,YACE,8DAEFC,QAAS,GACTC,WAAS,EACT/B,MAAOM,EACPpD,SAAUU,IACRyD,EAAOzD,EAAMzD,OAAO6F,MAAM,EAE5BgC,UAAW,CACTC,MAAO,CACLxH,QAAS,CACPwH,MAAOxH,EAAQuG,kBAKvBnH,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRvG,QAASA,KACP,MAAM+G,EAAQ5B,EACX6B,MAAM,MACNxG,KAAI6C,GAAKA,EAAE4D,SACXC,QAAO7D,KAAOA,IACX8D,EAASJ,EAAM,GAAIC,MAAM,WAC/B,GAAIG,EAAOjI,SAAS,QAAS,CAC3BkH,EAAS,IACT,MAAMgB,EAAYnB,EAAWzF,KAAI6G,GAAU,CAACA,EAAOzG,KAAMyG,KACnDC,EAAUrC,OAAOsC,YACrBR,EAAMS,MAAM,GAAGhH,KAAIiH,IACjB,MAAMC,EAAOD,EAAKT,MAAM,WAClBW,EAAY1C,OAAOsC,YACvBG,EAAKlH,KAAI,CAACoH,EAAK1G,IAAQ,CAACiG,EAAOjG,GAAM0G,MAEvC,MAAO,CACLD,EAAU/G,KACV,IAAK+G,KAAcP,EAAUO,EAAU/G,OACxC,KAILoF,EACEC,EAAWzF,KAAI6G,IAAU,IACpBA,KACAC,EAAQD,EAAOzG,UAGxB,MACEwF,EAAS,IAAIyB,MAAM,oCACrB,GAEH,eAGDnJ,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRvG,QAASA,KACP,MAAM+G,EAAQ5B,EACX6B,MAAM,MACNxG,KAAI6C,GAAKA,EAAE4D,SACXC,QAAO7D,KAAOA,IACX8D,EAASJ,EAAM,GAAIC,MAAM,WAC/B,GAAIG,EAAOjI,SAAS,QAAS,CAC3BkH,EAAS,IACT,MAAMgB,EAAYnB,EAAWzF,KAAI6G,GAAU,CAACA,EAAOzG,KAAMyG,KACnDC,EAAUrC,OAAOsC,YACrBR,EAAMS,MAAM,GAAGhH,KAAIiH,IACjB,MAAMC,EAAOD,EAAKT,MAAM,WAClBW,EAAY1C,OAAOsC,YACvBG,EAAKlH,KAAI,CAACoH,EAAK1G,IAAQ,CAACiG,EAAOjG,GAAM0G,MAEvC,MAAO,CACLD,EAAU/G,KACV,IAAK+G,KAAcP,EAAUO,EAAU/G,OACxC,KAILoF,EACEC,EAAWzF,KAAI6G,IAAU,IACpBC,EAAQD,EAAOzG,UAGxB,MACEwF,EAAS,IAAIyB,MAAM,oCACrB,GAEH,gBAGA1B,EAAQzH,EAAAA,cAACoJ,EAAAA,aAAY,CAAC3B,MAAOA,IAAY,KAGhD,C,yBCzHe,SAAS4B,GAAc,cACpC/B,EAAa,WACbC,IAKA,OACEvH,EAAAA,cAAA,WACGuG,OAAOC,KAAKe,EAAW,IAAM,IAC3BiB,QAAO7D,GAAW,SAANA,GAAsB,UAANA,IAC5B7C,KAAIwE,GAEDtG,EAAAA,cAAC6D,EAAAA,EAAM,CACLyF,IAAKhD,EACLhF,QAASA,KACP,MAAMQ,EAAM,IAAIyH,IAChB,IAAK,MAAM9D,KAAO8B,EAAY,CAC5B,MAAMd,EAAM3E,EAAI0H,IAAI/D,EAAIa,IACnBG,EAGH3E,EAAI2H,IAAIhE,EAAIa,GAAcG,EAAM,GAFhC3E,EAAI2H,IAAIhE,EAAIa,GAAc,EAI9B,CACA,MAAMoD,EAAMnD,OAAOsC,YACjB,IAAI/G,EAAI6H,WACLxH,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAKC,EAAE,KACxBP,KAAI,CAACwE,EAAG9D,IAAQ,CAAC8D,EAAE,GAAIsD,EAAAA,KAAKpH,KAAQqH,EAAAA,EAAAA,IAAYvD,EAAE,QAGvDgB,EACEC,EAAWzF,KAAI2D,IAAO,IACjBA,EACHhG,MAAOiK,EAAIjE,EAAIa,QAElB,GAEJ,aACYA,KAMzB,CCxCA,MAAMrH,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7B4K,QAAS,CACPC,SAAU,KAEZC,GAAI,CACFC,MAAO,SAET9C,aAAc,CACZC,WAAY,iBAUD,SAAS8C,GAAe,MACrCC,EAAK,YACLC,IAKA,MAAM,QAAExJ,GAAY3B,KACd,QAAEoL,GAAYF,GACbG,EAAgBC,IAAqB7G,EAAAA,EAAAA,WAAS,IAC9C6D,EAAYD,IAAiB5D,EAAAA,EAAAA,UAAS2G,GAAW,KACjD9G,EAAUiH,IAAeC,EAAAA,EAAAA,iBAC9B,yBACA,GAEF,OACEzK,EAAAA,cAAC0K,EAAe,CACdC,MAAI,EACJ5J,QAASqJ,EACTQ,SAAS,KACT/J,MAAM,0CAENb,EAAAA,cAAC6K,EAAAA,EAAa,CAACtK,UAAWK,EAAQkJ,SAChC9J,EAAAA,cAAA,OAAKO,UAAWK,EAAQoJ,IACtBhK,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRvG,QAASA,KACPkJ,GAAajH,EAAS,GAGvBA,EAAW,YAAc,aAE5BvD,EAAAA,cAAC6D,EAAAA,EAAM,CACLpE,MAAM,YACNoI,QAAQ,YACRvG,QAASA,KACPiJ,GAAmBD,EAAe,GAGnCA,EAAiB,uBAAyB,yBAG/CtK,EAAAA,cAAA,WACCuD,EAAWvD,EAAAA,cAAC8K,EAAW,MAAM,KAE7BR,EACCtK,EAAAA,cAACqH,EAAa,CACZE,WAAYA,EACZD,cAAeA,IAEf,KACJtH,EAAAA,cAACqJ,EAAa,CAAC9B,WAAYA,EAAYD,cAAeA,IAEtDtH,EAAAA,cAAC+K,EAAW,CACVzH,KAAMiE,EACNlE,SAAUiE,EACV/D,SAAUA,KAGdvD,EAAAA,cAACgL,EAAAA,EAAa,KACZhL,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRoD,KAAK,SACLxL,MAAM,UACN6B,QAASA,KACP6I,EAAMe,cACN5D,EAAc6C,EAAME,SAAW,GAAG,GAErC,yBAGDrK,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRpI,MAAM,YACN6B,QAASA,KACP8I,IACA9C,EAAc,IAAK6C,EAAME,SAAW,IAAK,GAE5C,UAGDrK,EAAAA,cAAC6D,EAAAA,EAAM,CACLgE,QAAQ,YACRpI,MAAM,UACNwL,KAAK,SACL3J,QAASA,KACP6I,EAAMgB,UAAU5D,GAChB6C,GAAa,GAEhB,WAMT,CAEA,SAASU,IACP,OACE9K,EAAAA,cAAAA,EAAAA,SAAA,KAAE,eAEAA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,wDACJA,EAAAA,cAAA,UAAI,8DACJA,EAAAA,cAAA,UAAI,8DACJA,EAAAA,cAAA,UAAI,8DACJA,EAAAA,cAAA,UAAI,2CACJA,EAAAA,cAAA,UAAI,kEACJA,EAAAA,cAAA,UAAI,oGAOZ,C","sources":["../../../plugins/variants/src/shared/DraggableDialog.tsx","../../../plugins/variants/src/shared/util.ts","../../../plugins/variants/src/shared/SourcesGrid.tsx","../../../plugins/variants/src/shared/BulkEditPanel.tsx","../../../plugins/variants/src/shared/RowPalettizer.tsx","../../../plugins/variants/src/shared/SetColorDialog.tsx"],"sourcesContent":["import React, { useRef } from 'react'\n\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport Draggable from 'react-draggable'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DialogProps, PaperProps } from '@mui/material'\n\n// icons\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction PaperComponent(props: PaperProps) {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <Draggable\n      nodeRef={ref}\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n      // @ts-expect-error\n      onStart={arg => arg.target?.className?.includes('MuiDialogTitle')}\n    >\n      <Paper ref={ref} {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog {...props} PaperComponent={PaperComponent}>\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }}>\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","export function moveUp(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: string[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n","import React, { useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport { Button } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport { moveDown, moveUp } from './util'\n\nimport type { Source } from '../util'\nimport type { GridColDef } from '@mui/x-data-grid'\n\n// icons\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\n\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const { classes } = useStyles()\n  const [selected, setSelected] = useState([] as string[])\n  const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0]!\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div>\n      <GridHeader\n        selected={selected}\n        rows={rows}\n        showTips={showTips}\n        onChange={onChange}\n      />\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          getRowId={row => row.name}\n          checkboxSelection\n          disableRowSelectionOnClick\n          onRowSelectionModelChange={arg => {\n            setSelected(arg as string[])\n          }}\n          rows={rows}\n          rowHeight={25}\n          columnHeaderHeight={33}\n          columns={[\n            {\n              field: 'color',\n              headerName: 'Color',\n              renderCell: params => {\n                const { value, id } = params\n                return (\n                  <ColorPicker\n                    color={value || 'blue'}\n                    onChange={c => {\n                      const elt = rows.find(f => f.name === id)\n                      if (elt) {\n                        elt.color = c\n                      }\n                      onChange([...rows])\n                    }}\n                  />\n                )\n              },\n            },\n            {\n              field: 'name',\n              headerName: 'Name',\n              width: measureGridWidth(rows.map(r => r.name)),\n            },\n            ...Object.keys(rest).map(\n              val =>\n                ({\n                  field: val,\n                  renderCell: ({ value }) => (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value)} />\n                    </div>\n                  ),\n                  width: measureGridWidth(\n                    rows.map(r => `${r[val as keyof Source]}`),\n                  ),\n                }) satisfies GridColDef<(typeof rows)[0]>,\n            ),\n          ]}\n          sortModel={\n            [\n              /* we control the sort as a controlled component using\n               * onSortModelChange */\n            ]\n          }\n          onSortModelChange={args => {\n            const sort = args[0]\n            // this idx%2 flip flops the sorting order, we could inspect args\n            // for sort direction asc or desc but this is just a simplified\n            // thing since we are controlling sort instead of the default data\n            // grid sort anyways\n            const idx = (currSort.idx + 1) % 2\n            const field = sort!.field || currSort.field\n            setCurrSort({ idx, field })\n            onChange(\n              field\n                ? [...rows].sort((a, b) => {\n                    const aa = getStr(a[field as keyof Source])\n                    const bb = getStr(b[field as keyof Source])\n                    return idx === 1\n                      ? aa.localeCompare(bb)\n                      : bb.localeCompare(aa)\n                  })\n                : rows,\n            )\n          }}\n        />\n      </div>\n    </div>\n  )\n}\n\nfunction GridHeader({\n  selected,\n  onChange,\n  rows,\n  showTips,\n}: {\n  onChange: (arg: Source[]) => void\n  rows: Source[]\n  selected: string[]\n  showTips: boolean\n}) {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [widgetColor, setWidgetColor] = useState('blue')\n  return (\n    <>\n      <Button\n        disabled={!selected.length}\n        onClick={event => {\n          setAnchorEl(event.currentTarget)\n        }}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          selected.forEach(id => {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          })\n\n          onChange([...rows])\n        }}\n        onClose={() => {\n          setAnchorEl(null)\n        }}\n      />\n    </>\n  )\n}\n\nexport default SourcesGrid\n","import React, { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { Button, TextField, Typography } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { type Source } from '../util'\n\nconst useStyles = makeStyles()({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\nexport default function BulkEditPanel({\n  setCurrLayout,\n  currLayout,\n}: {\n  currLayout: Source[]\n  setCurrLayout: (arg: Source[]) => void\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [error, setError] = useState<unknown>()\n  return (\n    <div>\n      <Typography>\n        Paste CSV or TSV. If a header column is present. First line is a header.\n        If a column called \"name\" is present, it uses that to connect to IDs in\n        the table, otherwise it uses the first column no.\n      </Typography>\n      <TextField\n        variant=\"outlined\"\n        multiline\n        minRows={5}\n        placeholder={\n          'name,population\\nHG00098,GBR\\nHG00101,GBR\\nHG00459,CHS\\n...'\n        }\n        maxRows={10}\n        fullWidth\n        value={val}\n        onChange={event => {\n          setVal(event.target.value)\n        }}\n        slotProps={{\n          input: {\n            classes: {\n              input: classes.textAreaFont,\n            },\n          },\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          const lines = val\n            .split('\\n')\n            .map(f => f.trim())\n            .filter(f => !!f)\n          const fields = lines[0]!.split(/[,\\t]/gm)\n          if (fields.includes('name')) {\n            setError('')\n            const oldLayout = currLayout.map(record => [record.name, record])\n            const newData = Object.fromEntries(\n              lines.slice(1).map(line => {\n                const cols = line.split(/[,\\t]/gm)\n                const newRecord = Object.fromEntries(\n                  cols.map((col, idx) => [fields[idx], col]),\n                )\n                return [\n                  newRecord.name,\n                  { ...newRecord, ...oldLayout[newRecord.name] },\n                ]\n              }),\n            )\n\n            setCurrLayout(\n              currLayout.map(record => ({\n                ...record,\n                ...newData[record.name],\n              })),\n            )\n          } else {\n            setError(new Error('No \"name\" column found on line 1'))\n          }\n        }}\n      >\n        Update rows\n      </Button>\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          const lines = val\n            .split('\\n')\n            .map(f => f.trim())\n            .filter(f => !!f)\n          const fields = lines[0]!.split(/[,\\t]/gm)\n          if (fields.includes('name')) {\n            setError('')\n            const oldLayout = currLayout.map(record => [record.name, record])\n            const newData = Object.fromEntries(\n              lines.slice(1).map(line => {\n                const cols = line.split(/[,\\t]/gm)\n                const newRecord = Object.fromEntries(\n                  cols.map((col, idx) => [fields[idx], col]),\n                )\n                return [\n                  newRecord.name,\n                  { ...newRecord, ...oldLayout[newRecord.name] },\n                ]\n              }),\n            )\n\n            setCurrLayout(\n              currLayout.map(record => ({\n                ...newData[record.name],\n              })),\n            )\n          } else {\n            setError(new Error('No \"name\" column found on line 1'))\n          }\n        }}\n      >\n        Replace rows\n      </Button>\n      {error ? <ErrorMessage error={error} /> : null}\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { set1 } from '@jbrowse/core/ui/colors'\nimport { Button } from '@mui/material'\n\nimport { type Source, randomColor } from '../util'\n\nexport default function RowPalettizer({\n  setCurrLayout,\n  currLayout,\n}: {\n  currLayout: Source[]\n  setCurrLayout: (arg: Source[]) => void\n}) {\n  return (\n    <div>\n      {Object.keys(currLayout[0] ?? [])\n        .filter(f => f !== 'name' && f !== 'color')\n        .map(r => {\n          return (\n            <Button\n              key={r}\n              onClick={() => {\n                const map = new Map<string, number>()\n                for (const row of currLayout) {\n                  const val = map.get(row[r] as string)\n                  if (!val) {\n                    map.set(row[r] as string, 1)\n                  } else {\n                    map.set(row[r] as string, val + 1)\n                  }\n                }\n                const ret = Object.fromEntries(\n                  [...map.entries()]\n                    .sort((a, b) => a[1] - b[1])\n                    .map((r, idx) => [r[0], set1[idx] || randomColor(r[0])]),\n                )\n\n                setCurrLayout(\n                  currLayout.map(row => ({\n                    ...row,\n                    color: ret[row[r] as string],\n                  })),\n                )\n              }}\n            >\n              Palettize {r}\n            </Button>\n          )\n        })}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport DraggableDialog from './DraggableDialog'\nimport SourcesGrid from './SourcesGrid'\nimport { type Source } from '../util'\nimport BulkEditPanel from './BulkEditPanel'\nimport RowPalettizer from './RowPalettizer'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  fr: {\n    float: 'right',\n  },\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\ninterface ReducedModel {\n  sources?: Source[]\n  setLayout: (s: Source[]) => void\n  clearLayout: () => void\n}\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [showBulkEditor, setShowBulkEditor] = useState(false)\n  const [currLayout, setCurrLayout] = useState(sources || [])\n  const [showTips, setShowTips] = useLocalStorage(\n    'multivariant-showTips',\n    false,\n  )\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title=\"Multi-variant color/arrangement editor\"\n    >\n      <DialogContent className={classes.content}>\n        <div className={classes.fr}>\n          <Button\n            variant=\"contained\"\n            onClick={() => {\n              setShowTips(!showTips)\n            }}\n          >\n            {showTips ? 'Hide tips' : 'Show tips'}\n          </Button>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={() => {\n              setShowBulkEditor(!showBulkEditor)\n            }}\n          >\n            {showBulkEditor ? 'Hide bulk row editor' : 'Show Bulk row editor'}\n          </Button>\n        </div>\n        <br />\n        {showTips ? <HelpfulTips /> : null}\n\n        {showBulkEditor ? (\n          <BulkEditPanel\n            currLayout={currLayout}\n            setCurrLayout={setCurrLayout}\n          />\n        ) : null}\n        <RowPalettizer currLayout={currLayout} setCurrLayout={setCurrLayout} />\n\n        <SourcesGrid\n          rows={currLayout}\n          onChange={setCurrLayout}\n          showTips={showTips}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          type=\"submit\"\n          color=\"inherit\"\n          onClick={() => {\n            model.clearLayout()\n            setCurrLayout(model.sources || [])\n          }}\n        >\n          Clear custom settings\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            setCurrLayout([...(model.sources || [])])\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            model.setLayout(currLayout)\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </DraggableDialog>\n  )\n}\n\nfunction HelpfulTips() {\n  return (\n    <>\n      Helpful tips\n      <ul>\n        <li>You can select rows in the table with the checkboxes</li>\n        <li>Multi-select is enabled with shift-click and control-click</li>\n        <li>The \"Move selected items up/down\" can re-arrange subtracks</li>\n        <li>Sorting the data grid itself can also re-arrange subtracks</li>\n        <li>Changes are applied when you hit Submit</li>\n        <li>You can click and drag the dialog box to move it on the screen</li>\n        <li>\n          Columns in the table can be hidden using a vertical '...' menu on the\n          right side of each column\n        </li>\n      </ul>\n    </>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","ref","useRef","React","Draggable","nodeRef","cancel","onStart","arg","target","className","includes","Paper","_extends","observer","classes","title","children","onClose","Dialog","ScopedCssBaseline","DialogTitle","style","cursor","IconButton","onClick","CloseIcon","Divider","moveUp","arr","sel","by","idxs","map","l","findIndex","v","name","sort","a","b","lastIdx","old","idx","Math","max","splice","moveDown","length","min","cell","whiteSpace","overflow","textOverflow","GridHeader","selected","onChange","rows","showTips","anchorEl","setAnchorEl","useState","widgetColor","setWidgetColor","Button","disabled","event","currentTarget","KeyboardArrowUpIcon","KeyboardArrowDownIcon","KeyboardDoubleArrowUpIcon","KeyboardDoubleArrowDownIcon","ColorPopover","c","forEach","id","elt","find","f","setSelected","_name","_color","baseUri","_baseUri","rest","currSort","setCurrSort","field","height","width","DataGrid","getRowId","row","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","rowHeight","columnHeaderHeight","columns","headerName","renderCell","params","value","ColorPicker","measureGridWidth","r","Object","keys","val","SanitizedHTML","html","getStr","sortModel","onSortModelChange","args","aa","bb","localeCompare","textAreaFont","fontFamily","BulkEditPanel","setCurrLayout","currLayout","setVal","error","setError","Typography","TextField","variant","multiline","minRows","placeholder","maxRows","fullWidth","slotProps","input","lines","split","trim","filter","fields","oldLayout","record","newData","fromEntries","slice","line","cols","newRecord","col","Error","ErrorMessage","RowPalettizer","key","Map","get","set","ret","entries","set1","randomColor","content","minWidth","fr","float","SetColorDialog","model","handleClose","sources","showBulkEditor","setShowBulkEditor","setShowTips","useLocalStorage","DraggableDialog","open","maxWidth","DialogContent","HelpfulTips","SourcesGrid","DialogActions","type","clearLayout","setLayout"],"sourceRoot":""}