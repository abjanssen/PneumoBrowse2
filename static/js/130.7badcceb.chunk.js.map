{"version":3,"file":"static/js/130.7badcceb.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/shared/components/FilterByTagDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Link,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { FilterBy } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(2),\n  },\n  field: {\n    margin: theme.spacing(2),\n  },\n}))\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nfunction Bitmask(props: { flag?: number; setFlag: (arg: number) => void }) {\n  const { flag = 0, setFlag } = props\n  return (\n    <>\n      <TextField\n        type=\"number\"\n        value={flag}\n        onChange={event => {\n          setFlag(+event.target.value)\n        }}\n      />\n      {flagNames.map((name, index) => {\n        const val = flag & (1 << index)\n        const key = `${name}_${val}`\n        return (\n          <div key={key}>\n            <input\n              type=\"checkbox\"\n              checked={Boolean(val)}\n              onChange={event => {\n                if (event.target.checked) {\n                  setFlag(flag | (1 << index))\n                } else {\n                  setFlag(flag & ~(1 << index))\n                }\n              }}\n            />\n            <label htmlFor={key}>{name}</label>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\nconst FilterByTagDialog = observer(function (props: {\n  model: {\n    filterBy: FilterBy\n    setFilterBy: (arg: FilterBy) => void\n  }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const { classes } = useStyles()\n  const { filterBy } = model\n  const [flagInclude, setFlagInclude] = useState(filterBy.flagInclude)\n  const [flagExclude, setFlagExclude] = useState(filterBy.flagExclude)\n  const [tag, setTag] = useState(filterBy.tagFilter?.tag || '')\n  const [tagValue, setTagValue] = useState(filterBy.tagFilter?.value || '')\n  const [readName, setReadName] = useState(filterBy.readName || '')\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n\n  const site = 'https://broadinstitute.github.io/picard/explain-flags.html'\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Filter options\">\n      <DialogContent>\n        <Typography>\n          Set filter bitmask options. Refer to <Link href={site}>{site}</Link>{' '}\n          for details\n        </Typography>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <div style={{ display: 'flex' }}>\n            <div>\n              <Typography>Read must have ALL these flags</Typography>\n              <Bitmask flag={flagInclude} setFlag={setFlagInclude} />\n            </div>\n            <div>\n              <Typography>Read must have NONE of these flags</Typography>\n              <Bitmask flag={flagExclude} setFlag={setFlagExclude} />\n            </div>\n          </div>\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>\n            Filter by tag name and value. Use * in the value field to get all\n            reads containing any value for that tag. Example: filter tag name SA\n            with value * to get all split/supplementary reads. Other examples\n            include HP for haplotype, or RG for read group\n          </Typography>\n          <TextField\n            className={classes.field}\n            value={tag}\n            onChange={event => {\n              setTag(event.target.value)\n            }}\n            placeholder=\"Enter tag name\"\n            error={tag.length === 2 && !validTag}\n            helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n            slotProps={{\n              htmlInput: {\n                maxLength: 2,\n              },\n            }}\n          />\n          <TextField\n            className={classes.field}\n            value={tagValue}\n            onChange={event => {\n              setTagValue(event.target.value)\n            }}\n            placeholder=\"Enter tag value\"\n          />\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>Filter by read name</Typography>\n          <TextField\n            className={classes.field}\n            value={readName}\n            onChange={event => {\n              setReadName(event.target.value)\n            }}\n            placeholder=\"Enter read name\"\n          />\n        </Paper>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            autoFocus\n            type=\"submit\"\n            onClick={() => {\n              model.setFilterBy({\n                flagInclude,\n                flagExclude,\n                readName,\n                tagFilter:\n                  tag !== ''\n                    ? {\n                        tag,\n                        value: tagValue,\n                      }\n                    : undefined,\n              })\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleClose()\n            }}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default FilterByTagDialog\n"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","margin","field","flagNames","Bitmask","props","flag","setFlag","React","TextField","type","value","onChange","event","target","map","name","index","val","key","checked","Boolean","htmlFor","observer","model","handleClose","classes","filterBy","flagInclude","setFlagInclude","useState","flagExclude","setFlagExclude","tag","setTag","tagFilter","tagValue","setTagValue","readName","setReadName","validTag","exec","site","Dialog","open","onClose","title","DialogContent","Typography","Link","href","Paper","className","variant","style","display","placeholder","error","length","helperText","slotProps","htmlInput","maxLength","DialogActions","Button","color","autoFocus","onClick","setFilterBy","undefined"],"sourceRoot":""}