{"version":3,"file":"static/js/3958.35c58cba.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ClusterDialog.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n} from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { isAlive } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../types'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  mgap: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n  },\n}))\n\nexport default function ClusterDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    sources?: Source[]\n    minorAlleleFrequencyFilter?: number\n    adapterConfig: AnyConfigurationModel\n    setLayout: (arg: Source[]) => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [results, setResults] = useState<string>()\n  const [error, setError] = useState<unknown>()\n  const [paste, setPaste] = useState('')\n  const [useCompleteMethod, setUseCompleteMethod] = useState(false)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        const view = getContainingView(model) as LinearGenomeViewModel\n        if (!view.initialized) {\n          return\n        }\n        const { rpcManager } = getSession(model)\n        const { sources, minorAlleleFrequencyFilter, adapterConfig } = model\n        const sessionId = getRpcSessionId(model)\n        const { bpPerPx } = view\n        const ret = (await rpcManager.call(\n          sessionId,\n          'MultiWiggleGetScoreMatrix',\n          {\n            regions: view.dynamicBlocks.contentBlocks,\n            sources,\n            minorAlleleFrequencyFilter,\n            sessionId,\n            adapterConfig,\n            bpPerPx,\n          },\n        )) as Record<string, { scores: number[] }>\n\n        const entries = Object.values(ret)\n        const keys = Object.keys(ret)\n        const clusterMethod = useCompleteMethod ? 'complete' : 'single'\n        const text = `try(library(fastcluster), silent=TRUE)\ninputMatrix<-matrix(c(${entries.map(val => val.scores.join(',')).join(',\\n')}\n),nrow=${entries.length},byrow=TRUE)\nrownames(inputMatrix)<-c(${keys.map(key => `'${key}'`).join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n        setResults(text)\n      } catch (e) {\n        if (!isAbortException(e) && isAlive(model)) {\n          console.error(e)\n          setError(e)\n        }\n      }\n    })()\n  }, [model, useCompleteMethod])\n\n  return (\n    <Dialog open title=\"Cluster by score\" onClose={handleClose}>\n      <DialogContent>\n        <div className={classes.mgap}>\n          <Typography>\n            This page will produce an R script that will perform hierarchical\n            clustering on the visible score data using `hclust`.\n          </Typography>\n          <Typography>\n            You can then paste the results in this form to specify the row\n            ordering.\n          </Typography>\n          {results ? (\n            <div>\n              <div>\n                Step 1:{' '}\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    saveAs(\n                      new Blob([results || ''], {\n                        type: 'text/plain;charset=utf-8',\n                      }),\n                      'cluster.R',\n                    )\n                  }}\n                >\n                  Download Rscript\n                </Button>{' '}\n                or{' '}\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    copy(results || '')\n                  }}\n                >\n                  Copy Rscript to clipboard\n                </Button>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={useCompleteMethod}\n                      onChange={e => {\n                        setUseCompleteMethod(e.target.checked)\n                      }}\n                    />\n                  }\n                  label=\"Use 'complete' linkage method instead of 'single'\"\n                />\n                <div>\n                  <TextField\n                    multiline\n                    fullWidth\n                    variant=\"outlined\"\n                    placeholder=\"Step 2. Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\"\n                    rows={10}\n                    value={paste}\n                    onChange={event => {\n                      setPaste(event.target.value)\n                    }}\n                    slotProps={{\n                      input: {\n                        classes: {\n                          input: classes.textAreaFont,\n                        },\n                      },\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : (\n            <LoadingEllipses variant=\"h6\" title=\"Generating score matrix\" />\n          )}\n          {error ? <ErrorMessage error={error} /> : null}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          disabled={!results}\n          variant=\"contained\"\n          onClick={() => {\n            const { sources } = model\n            if (sources) {\n              try {\n                model.setLayout(\n                  paste\n                    .split('\\n')\n                    .map(t => t.trim())\n                    .filter(f => !!f)\n                    .map(r => +r)\n                    .map(idx => {\n                      const ret = sources[idx - 1]\n                      if (!ret) {\n                        throw new Error(`out of bounds at ${idx}`)\n                      }\n                      return ret\n                    }),\n                )\n              } catch (e) {\n                console.error(e)\n                setError(e)\n              }\n            }\n            handleClose()\n          }}\n        >\n          Apply clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","textAreaFont","fontFamily","mgap","display","flexDirection","gap","spacing","ClusterDialog","model","handleClose","classes","results","setResults","useState","error","setError","paste","setPaste","useCompleteMethod","setUseCompleteMethod","useEffect","undefined","view","getContainingView","initialized","rpcManager","getSession","sources","minorAlleleFrequencyFilter","adapterConfig","sessionId","getRpcSessionId","bpPerPx","ret","call","regions","dynamicBlocks","contentBlocks","entries","Object","values","keys","clusterMethod","text","map","val","scores","join","length","key","e","isAbortException","isAlive","console","_jsxs","Dialog","open","title","onClose","children","_jsx","DialogContent","className","Typography","Button","variant","onClick","saveAs","Blob","type","copy","FormControlLabel","control","Checkbox","checked","onChange","target","label","TextField","multiline","fullWidth","placeholder","rows","value","event","slotProps","input","LoadingEllipses","ErrorMessage","DialogActions","disabled","setLayout","split","t","trim","filter","f","r","idx","Error","color"],"sourceRoot":""}