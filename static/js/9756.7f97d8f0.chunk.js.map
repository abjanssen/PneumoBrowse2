{"version":3,"file":"static/js/9756.7f97d8f0.chunk.js","mappings":"6NAUe,MAAMA,UAAyBC,EAAAA,uBACpCC,OAAS,UAEjB,oBAA6B,CAAC,iBAE9B,eAAaC,GACX,MAAMC,QAAgBC,KAAKC,gBAAgBD,KAAKE,QAAQ,qBACxD,IAAKH,EACH,MAAM,IAAII,MAAM,4BAElB,OAAOJ,EAAQK,WACjB,CAEA,iBAAaC,CAAYC,GAEvB,aADsBN,KAAKF,aACZO,YAAYC,EAC7B,CAEOC,WAAAA,CAAYC,EAAeF,GAChC,MAAM,eAAEG,EAAiBA,OAAQ,UAAEC,GAAcJ,GAAQ,CAAC,EAC1D,OAAOK,EAAAA,EAAAA,kBAA0BC,UAC/B,MAAMC,QAAwBb,KAAKF,YAC7BgB,EAAad,KAAKE,QAAQ,cAC1Ba,EAAcf,KAAKE,QAAQ,eAC3Bc,EAAgC,IAAfF,EAAmB,EAAIG,KAAKC,KAAKJ,EAAa,GAC/DK,EAAmC,IAAfL,EAEpBM,EAAKH,KAAKI,IACd,EACAJ,KAAKK,OAAOd,EAAMe,MAAQP,GAAkBF,GAAcA,GAEtDU,EACJP,KAAKC,MAAMV,EAAMiB,IAAMT,GAAkBF,GAAcA,EAEzD,GAAIU,EAAK,GAAKJ,EAAKI,EAEjB,YADAE,EAASC,WAIX,MAAMC,QAAcC,EAAAA,EAAAA,GAClBhB,EACGN,YACC,IACKC,EACHe,MAAOH,EACPK,IAAKD,GAEPlB,GAEDwB,MAAKC,EAAAA,EAAAA,OAEJC,EAAWJ,EAAM,IAAIK,IAAI,QAAU,GAEzC,IAAIV,EAAQW,YAAYC,YAClBC,EAAAA,EAAAA,cAAa,iBAAkB3B,EAAgB,KACnD,IACE,IAAI4B,EAAIrB,EACRqB,EAAIL,EAASM,OAAStB,EACtBqB,GAAKtB,EACL,CACImB,YAAYC,MAAQZ,EAAQ,OAC9BgB,EAAAA,EAAAA,IAAe7B,GACfa,EAAQW,YAAYC,OAEtB,MAAMK,EAAIrB,EACNa,EAASK,GACTL,EAASS,MAAMJ,EAAIrB,EAAgBqB,EAAIrB,GAC3C,IAAI0B,EAAK,EACLC,EAAK,EACLC,EAAM,EACV,IAAK,MAAMC,KAAUL,EACJ,MAAXK,GAA6B,MAAXA,EACpBH,IACoB,MAAXG,GAA6B,MAAXA,GAC3BF,IAEa,MAAXE,GACFD,IAGJ,MAAME,EAAM1B,EACN2B,EACY,YAAhB/C,KAAKH,QACA8C,EAAKD,IAAOE,GAAO,GACJ,SAAhB5C,KAAKH,QACF8C,EAAKD,IAAOC,EAAKD,GAAM,GACxB,EAERhB,EAASsB,KACP,IAAIC,EAAAA,cAAc,CAChBC,SAAU,GAAGlD,KAAKmD,MAAML,EAAMT,IAC9Be,QAAS5C,EAAM4C,QACf7B,MAAOuB,EAAMT,EACbZ,IAAKqB,EAAMT,EAAItB,EACfgC,UAGN,IAGFrB,EAASC,YAEb,E","sources":["../../../plugins/gccontent/src/GCContentAdapter/GCContentAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { SimpleFeature, updateStatus } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\nimport { firstValueFrom } from 'rxjs'\nimport { toArray } from 'rxjs/operators'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, Region } from '@jbrowse/core/util'\n\nexport default class GCContentAdapter extends BaseFeatureDataAdapter {\n  private gcMode = 'content'\n\n  public static capabilities = ['hasLocalStats']\n\n  public async configure() {\n    const adapter = await this.getSubAdapter?.(this.getConf('sequenceAdapter'))\n    if (!adapter) {\n      throw new Error('Error getting subadapter')\n    }\n    return adapter.dataAdapter as BaseFeatureDataAdapter\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const adapter = await this.configure()\n    return adapter.getRefNames(opts)\n  }\n\n  public getFeatures(query: Region, opts?: BaseOptions) {\n    const { statusCallback = () => {}, stopToken } = opts || {}\n    return ObservableCreate<Feature>(async observer => {\n      const sequenceAdapter = await this.configure()\n      const windowSize = this.getConf('windowSize')\n      const windowDelta = this.getConf('windowDelta')\n      const halfWindowSize = windowSize === 1 ? 1 : Math.ceil(windowSize / 2) // Half the window size\n      const isWindowSizeOneBp = windowSize === 1\n\n      const qs = Math.max(\n        0,\n        Math.floor((query.start - halfWindowSize) / windowSize) * windowSize,\n      )\n      const qe =\n        Math.ceil((query.end + halfWindowSize) / windowSize) * windowSize\n\n      if (qe < 0 || qs > qe) {\n        observer.complete()\n        return\n      }\n\n      const feats = await firstValueFrom(\n        sequenceAdapter\n          .getFeatures(\n            {\n              ...query,\n              start: qs,\n              end: qe,\n            },\n            opts,\n          )\n          .pipe(toArray()),\n      )\n      const residues = feats[0]?.get('seq') || ''\n\n      let start = performance.now()\n      await updateStatus('Calculating GC', statusCallback, () => {\n        for (\n          let i = halfWindowSize;\n          i < residues.length - halfWindowSize;\n          i += windowDelta\n        ) {\n          if (performance.now() - start > 400) {\n            checkStopToken(stopToken)\n            start = performance.now()\n          }\n          const r = isWindowSizeOneBp\n            ? residues[i]\n            : residues.slice(i - halfWindowSize, i + halfWindowSize)\n          let nc = 0\n          let ng = 0\n          let len = 0\n          for (const letter of r) {\n            if (letter === 'c' || letter === 'C') {\n              nc++\n            } else if (letter === 'g' || letter === 'G') {\n              ng++\n            }\n            if (letter !== 'N') {\n              len++\n            }\n          }\n          const pos = qs\n          const score =\n            this.gcMode === 'content'\n              ? (ng + nc) / (len || 1)\n              : this.gcMode === 'skew'\n                ? (ng - nc) / (ng + nc || 1)\n                : 0\n\n          observer.next(\n            new SimpleFeature({\n              uniqueId: `${this.id}_${pos + i}`,\n              refName: query.refName,\n              start: pos + i,\n              end: pos + i + windowDelta,\n              score,\n            }),\n          )\n        }\n      })\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n}\n"],"names":["GCContentAdapter","BaseFeatureDataAdapter","gcMode","configure","adapter","this","getSubAdapter","getConf","Error","dataAdapter","getRefNames","opts","getFeatures","query","statusCallback","stopToken","ObservableCreate","async","sequenceAdapter","windowSize","windowDelta","halfWindowSize","Math","ceil","isWindowSizeOneBp","qs","max","floor","start","qe","end","observer","complete","feats","firstValueFrom","pipe","toArray","residues","get","performance","now","updateStatus","i","length","checkStopToken","r","slice","nc","ng","len","letter","pos","score","next","SimpleFeature","uniqueId","id","refName"],"sourceRoot":""}