{"version":3,"file":"static/js/9070.25627503.chunk.js","mappings":"0LAUO,SAASA,EACdC,EACAC,GAeA,SAASC,EAAKC,GACZ,MAAMC,EAASJ,EAAKK,IACpB,IAAKD,EACH,OAGF,MAAME,EAAMF,EAAOG,WAAW,MACzBD,GAIAN,EAAKQ,YAIVF,EAAIG,UAAU,EAAG,EAAGL,EAAOM,MAAqB,EAAdV,EAAKW,QACvCL,EAAIM,iBACJN,EAAIO,MAAM,EAAG,GACbZ,EAAGD,EAAMM,EAAKF,EAAOM,MAAOV,EAAKW,QACjCX,EAAKc,qBAAqBX,EAAKY,UAC/Bf,EAAKgB,oBAAoBb,EAAKc,SAChC,EA7BAC,EAAAA,EAAAA,IACElB,EACAmB,gBCgBGA,eACLnB,GAEA,MAAMoB,GAAYC,EAAAA,EAAAA,iBAAgBrB,IAC5B,WAAEsB,IAAeC,EAAAA,EAAAA,YAAWvB,GAC5BG,GAAOqB,EAAAA,EAAAA,mBAAkBxB,GAE/B,IAAKG,EAAKsB,aAAezB,EAAK0B,QAAU1B,EAAK2B,+BAC3C,OAGF3B,EAAK4B,YAAW,GAChB,MAAMC,QAAaP,EAAWQ,KAAKV,EAAW,2BAA4B,CACxEA,YACAW,QAAS5B,EAAK6B,aAAaC,cAC3BC,SAAUlC,EAAKkC,SACfC,cAAenC,EAAKmC,gBAGtBnC,EAAKoC,aAAaP,GAClB7B,EAAK4B,YAAW,EAClB,CDpCYS,CAAYrC,IAEpB,CAAEsC,MAAO,OA2BXpB,EAAAA,EAAAA,IAAclB,EAAMmB,UAClB,MAAMhB,GAAOqB,EAAAA,EAAAA,mBAAkBxB,GAC3BG,EAAKc,UAAYjB,EAAKuC,kBACxBrC,EAAKC,MAKTe,EAAAA,EAAAA,IACElB,EACAmB,UAEEjB,GADasB,EAAAA,EAAAA,mBAAkBxB,KAGjC,CAAEsC,MAAO,KAEb,C","sources":["../../../plugins/alignments/src/shared/afterAttach.tsx","../../../plugins/alignments/src/shared/fetchChains.ts"],"sourcesContent":["import { getContainingView } from '@jbrowse/core/util'\n\nimport { createAutorun } from '../util'\nimport { fetchChains } from './fetchChains'\n\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\ntype LGV = LinearGenomeViewModel\n\nexport function doAfterAttach<T extends IAnyStateTreeNode>(\n  self: T,\n  cb: (\n    self: T,\n    ctx: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n  ) => void,\n) {\n  createAutorun(\n    self,\n    async () => {\n      await fetchChains(self)\n    },\n    { delay: 1000 },\n  )\n\n  function draw(view: LGV) {\n    const canvas = self.ref\n    if (!canvas) {\n      return\n    }\n\n    const ctx = canvas.getContext('2d')\n    if (!ctx) {\n      return\n    }\n\n    if (!self.chainData) {\n      return\n    }\n\n    ctx.clearRect(0, 0, canvas.width, self.height * 2)\n    ctx.resetTransform()\n    ctx.scale(2, 2)\n    cb(self, ctx, canvas.width, self.height)\n    self.setLastDrawnOffsetPx(view.offsetPx)\n    self.setLastDrawnBpPerPx(view.bpPerPx)\n  }\n\n  // first autorun instantly draws if bpPerPx changes\n  createAutorun(self, async () => {\n    const view = getContainingView(self) as LGV\n    if (view.bpPerPx !== self.lastDrawnBpPerPx) {\n      draw(view)\n    }\n  })\n\n  // second autorun draws after delay 1000 e.g. if offsetPx changes\n  createAutorun(\n    self,\n    async () => {\n      const view = getContainingView(self) as LGV\n      draw(view)\n    },\n    { delay: 1000 },\n  )\n}\n","import { getContainingView, getSession } from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\n\nimport type { LinearReadArcsDisplayModel } from '../LinearReadArcsDisplay/model'\nimport type { LinearReadCloudDisplayModel } from '../LinearReadCloudDisplay/model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nexport interface ReducedFeature {\n  name: string\n  strand: number\n  refName: string\n  start: number\n  end: number\n  id: string\n  flags: number\n  tlen: number\n  pair_orientation: string\n  next_ref?: string\n  next_pos?: number\n  clipPos: number\n  SA?: string\n}\n\nexport interface ChainStats {\n  max: number\n  min: number\n  upper: number\n  lower: number\n}\n\nexport interface ChainData {\n  chains: ReducedFeature[][]\n  stats?: ChainStats\n}\n\nexport async function fetchChains(\n  self: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel,\n) {\n  const sessionId = getRpcSessionId(self)\n  const { rpcManager } = getSession(self)\n  const view = getContainingView(self) as LGV\n\n  if (!view.initialized || self.error || !self.statsReadyAndRegionNotTooLarge) {\n    return\n  }\n\n  self.setLoading(true)\n  const ret = (await rpcManager.call(sessionId, 'PileupGetReducedFeatures', {\n    sessionId,\n    regions: view.staticBlocks.contentBlocks,\n    filterBy: self.filterBy,\n    adapterConfig: self.adapterConfig,\n  })) as ChainData\n\n  self.setChainData(ret)\n  self.setLoading(false)\n}\n"],"names":["doAfterAttach","self","cb","draw","view","canvas","ref","ctx","getContext","chainData","clearRect","width","height","resetTransform","scale","setLastDrawnOffsetPx","offsetPx","setLastDrawnBpPerPx","bpPerPx","createAutorun","async","sessionId","getRpcSessionId","rpcManager","getSession","getContainingView","initialized","error","statsReadyAndRegionNotTooLarge","setLoading","ret","call","regions","staticBlocks","contentBlocks","filterBy","adapterConfig","setChainData","fetchChains","delay","lastDrawnBpPerPx"],"sourceRoot":""}