{"version":3,"file":"static/js/5668.98a744a3.chunk.js","mappings":"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","sources":["../../../plugins/breakpoint-split-view/src/BreakpointSplitView/svgcomponents/SVGBackground.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/svgcomponents/SVGBreakpointSplitView.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/svgcomponents/util.ts"],"sourcesContent":["import { stripAlpha } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\n\nexport default function SVGBackground({\n  width,\n  height,\n  shift,\n}: {\n  width: number\n  height: number\n  shift: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      width={width + shift * 2}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import { createJBrowseTheme } from '@jbrowse/core/ui'\nimport { getSession, renderToStaticMarkup, sum } from '@jbrowse/core/util'\nimport {\n  SVGRuler,\n  SVGTracks,\n  totalHeight,\n} from '@jbrowse/plugin-linear-genome-view'\nimport { ThemeProvider } from '@mui/material'\nimport { when } from 'mobx'\n\nimport SVGBackground from './SVGBackground'\nimport { getTrackNameMaxLen, getTrackOffsets } from './util'\nimport Overlay from '../components/Overlay'\n\nimport type { BreakpointViewModel } from '../model'\nimport type { ExportSvgOptions } from '../types'\n\ntype BSV = BreakpointViewModel\n\n// render LGV to SVG\nexport async function renderToSvg(model: BSV, opts: ExportSvgOptions) {\n  const {\n    textHeight = 18,\n    headerHeight = 30,\n    rulerHeight = 30,\n    fontSize = 13,\n    trackLabels = 'offset',\n    Wrapper = ({ children }) => children,\n    themeName = 'default',\n  } = opts\n\n  const session = getSession(model)\n  const theme = session.allThemes?.()[themeName]\n  const { width, views } = model\n  const shift = 50\n  const offset = headerHeight + rulerHeight\n  const heights = views.map(\n    v => totalHeight(v.tracks, textHeight, trackLabels) + offset,\n  )\n  const totalHeightSvg = sum(heights) + 100\n  const displayResults = await Promise.all(\n    views.map(\n      async view =>\n        ({\n          view,\n          data: await Promise.all(\n            view.tracks.map(async track => {\n              const d = track.displays[0]\n              await when(() => (d.ready !== undefined ? d.ready : true))\n              return { track, result: await d.renderSvg({ ...opts, theme }) }\n            }),\n          ),\n        }) as const,\n    ),\n  )\n\n  const trackLabelMaxLen = getTrackNameMaxLen(views, fontSize, session) + 40\n  const trackLabelOffset = trackLabels === 'left' ? trackLabelMaxLen : 0\n  const textOffset = trackLabels === 'offset' ? textHeight : 0\n  const trackOffsets = views.map((view, idx) =>\n    getTrackOffsets(\n      view,\n      textOffset,\n      fontSize + (idx > 0 ? heights[idx - 1]! : 0) + offset,\n    ),\n  )\n  const w = width + trackLabelOffset\n  const t = createJBrowseTheme(theme)\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={t}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={totalHeightSvg}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w + shift * 2, totalHeightSvg].toString()}\n        >\n          <SVGBackground width={w} height={totalHeightSvg} shift={shift} />\n          {views[0] ? (\n            <g transform={`translate(${shift} ${fontSize})`}>\n              <g transform={`translate(${trackLabelOffset})`}>\n                <text x={0} fontSize={fontSize} fill={t.palette.text.primary}>\n                  {views[0].assemblyNames.join(', ')}\n                </text>\n\n                <SVGRuler model={displayResults[0]!.view} fontSize={fontSize} />\n              </g>\n              <g transform={`translate(0 ${offset})`}>\n                <SVGTracks\n                  textHeight={textHeight}\n                  trackLabels={trackLabels}\n                  fontSize={fontSize}\n                  model={displayResults[0]!.view}\n                  displayResults={displayResults[0]!.data}\n                  trackLabelOffset={trackLabelOffset}\n                />\n              </g>\n            </g>\n          ) : null}\n\n          {views[1] ? (\n            <g transform={`translate(${shift} ${fontSize + heights[0]!})`}>\n              <g transform={`translate(${trackLabelOffset})`}>\n                <text x={0} fontSize={fontSize} fill={t.palette.text.primary}>\n                  {views[1].assemblyNames.join(', ')}\n                </text>\n                <SVGRuler model={displayResults[1]!.view} fontSize={fontSize} />\n              </g>\n              <g transform={`translate(0 ${offset})`}>\n                <SVGTracks\n                  textHeight={textHeight}\n                  trackLabels={trackLabels}\n                  fontSize={fontSize}\n                  model={displayResults[1]!.view}\n                  displayResults={displayResults[1]!.data}\n                  trackLabelOffset={trackLabelOffset}\n                />\n              </g>\n            </g>\n          ) : null}\n\n          <defs>\n            <clipPath id=\"clip-bsv\">\n              <rect x={0} y={0} width={width} height={totalHeightSvg} />\n            </clipPath>\n          </defs>\n          <g\n            transform={`translate(${trackLabelOffset + shift})`}\n            clipPath=\"url(#clip-bsv)\"\n          >\n            {model.matchedTracks.map(track => (\n              <Overlay\n                parentRef={{ current: null }}\n                key={track.configuration.trackId}\n                model={model}\n                trackId={track.configuration.trackId}\n                getTrackYPosOverride={(id, level) => trackOffsets[level]![id]!}\n              />\n            ))}\n          </g>\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n","import { max, measureText } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport function getTrackNameMaxLen(\n  views: LinearGenomeViewModel[],\n  fontSize: number,\n  session: AbstractSessionModel,\n) {\n  return max(\n    views.flatMap(view =>\n      view.tracks.map(t =>\n        measureText(getTrackName(t.configuration, session), fontSize),\n      ),\n    ),\n    0,\n  )\n}\nexport function getTrackOffsets(\n  view: LinearGenomeViewModel,\n  textOffset: number,\n  extra = 0,\n) {\n  const offsets = {} as Record<string, number>\n  let curr = textOffset\n  for (const track of view.tracks) {\n    offsets[track.configuration.trackId] = curr + extra\n    curr += track.displays[0].height + textOffset\n  }\n  return offsets\n}\n"],"names":["SVGBackground","width","height","shift","theme","useTheme","_jsx","fill","stripAlpha","palette","background","default","async","renderToSvg","model","opts","textHeight","headerHeight","rulerHeight","fontSize","trackLabels","Wrapper","children","themeName","session","getSession","allThemes","views","offset","heights","map","v","totalHeight","tracks","totalHeightSvg","sum","displayResults","Promise","all","view","data","d","track","displays","when","undefined","ready","result","renderSvg","trackLabelMaxLen","max","flatMap","t","measureText","getTrackName","configuration","getTrackNameMaxLen","trackLabelOffset","textOffset","trackOffsets","idx","extra","offsets","curr","trackId","getTrackOffsets","w","createJBrowseTheme","renderToStaticMarkup","ThemeProvider","_jsxs","xmlns","xmlnsXlink","viewBox","toString","transform","x","text","primary","assemblyNames","join","SVGRuler","SVGTracks","id","y","clipPath","matchedTracks","Overlay","parentRef","current","getTrackYPosOverride","level"],"sourceRoot":""}