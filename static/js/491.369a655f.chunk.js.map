{"version":3,"file":"static/js/491.369a655f.chunk.js","mappings":"gMAmBe,MAAMA,UACXC,EAAAA,YAKRC,WAAAA,CACEC,EACAC,EACAC,GAEAC,MAAMH,EAAQC,EAAeC,GAC7B,MAAME,GAAIC,EAAAA,EAAAA,gBAAeL,EAAQ,YACjCM,KAAKC,UAAWC,EAAAA,EAAAA,cAAaJ,EAC/B,CAKA,gBAAMK,GACJ,MAAMC,EAAU,GAGhB,IAAK,MAAOC,EAASJ,KAAaD,KAAKC,SAAU,CAC/C,IAAIK,EAGJ,IAAK,MAAMC,KAAWN,EAElBK,GACAA,EAAcE,KAAOD,EAAQE,IAAI,UACjCH,EAAcI,OAASH,EAAQE,IAAI,OAEnCH,EAAcE,IAAMD,EAAQE,IAAI,QAE5BH,GACFF,EAAQO,KAAKL,GAEfA,EAAgB,CACdD,UACAK,MAAOH,EAAQE,IAAI,SACnBD,IAAKD,EAAQE,IAAI,SAInBH,GACFF,EAAQO,KAAKL,EAEjB,CAKA,OAFAF,EAAQQ,KAAK,CAACC,EAAGC,IAAMD,EAAER,QAAQU,cAAcD,EAAET,UAE1CD,CACT,E,kHC3DK,SAASF,EAAac,GAC3B,MAAMf,EAAW,IAAIgB,IACrB,IAAK,MAAMC,KAASF,EAAO,CACzB,MAAMlB,EAAI,IAAIqB,EAAAA,EAAcD,GACtBb,EAAUP,EAAEW,IAAI,WACtB,IAAIW,EAASnB,EAASQ,IAAIJ,GACrBe,IACHA,EAAS,GACTnB,EAASoB,IAAIhB,EAASe,IAGxBA,EAAOT,KAAKb,EACd,CAGA,IAAK,MAAMwB,KAAerB,EAASsB,SACjCD,EAAYV,KAAK,CAACC,EAAGC,IAAMD,EAAEJ,IAAI,SAAWK,EAAEL,IAAI,UAGpD,OAAOR,CACT,CAEe,MAAMuB,UAA0BC,EAAAA,uBAG7ChC,WAAAA,CACEiC,EACA/B,EACAC,GAEAC,MAAM6B,EAAM/B,EAAeC,GAC3B,MAAM+B,GAAQ5B,EAAAA,EAAAA,gBAAe2B,EAAM,YACnC1B,KAAKC,SAAWC,EAAayB,EAC/B,CAEA,iBAAMC,GACJ,MAAO,IAAI5B,KAAKC,SAAS4B,OAC3B,CAEA,uBAAMC,GACJ,MAAO,IAAI9B,KAAKC,SAASsB,UAAUQ,IAAIC,IAAgB,CACrD3B,QAAS2B,EAAa,GAAIvB,IAAI,WAC9BwB,QAASD,EAAa,GAAIvB,IAAI,aAElC,CAEAyB,WAAAA,CAAYC,GACV,MAAM,QAAE9B,EAAO,MAAEK,EAAK,IAAEF,GAAQ2B,EAEhC,OAAOC,EAAAA,EAAAA,kBAA0BC,UAC/B,MAAMpC,EAAWD,KAAKC,SAASQ,IAAIJ,IAAY,GAC/C,IAAK,MAAMP,KAAKG,EACVH,EAAEW,IAAI,OAASC,GAASZ,EAAEW,IAAI,SAAWD,GAC3C8B,EAASC,KAAKzC,GAGlBwC,EAASE,YAEb,E","sources":["../../../plugins/config/src/FromConfigRegionsAdapter/FromConfigRegionsAdapter.ts","../../../plugins/config/src/FromConfigAdapter/FromConfigAdapter.ts"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\n\nimport { makeFeatures } from '../FromConfigAdapter/FromConfigAdapter'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { RegionsAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport type {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\n\n/**\n * Adapter that just returns the features defined in its `features` configuration\n * key, like:\n *   `\"features\": [ { \"refName\": \"ctgA\", \"start\":1, \"end\":20 }, ... ]`\n */\nexport default class FromConfigRegionsAdapter\n  extends BaseAdapter\n  implements RegionsAdapter\n{\n  private features: Map<string, Feature[]>\n\n  constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    const f = readConfObject(config, 'features') as SimpleFeatureSerialized[]\n    this.features = makeFeatures(f)\n  }\n\n  /**\n   * Get refName, start, and end for all features after collapsing any overlaps\n   */\n  async getRegions() {\n    const regions = []\n\n    // recall: features are stored in this object sorted by start coordinate\n    for (const [refName, features] of this.features) {\n      let currentRegion:\n        | { refName: string; start: number; end: number }\n        | undefined\n      for (const feature of features) {\n        if (\n          currentRegion &&\n          currentRegion.end >= feature.get('start') &&\n          currentRegion.start <= feature.get('end')\n        ) {\n          currentRegion.end = feature.get('end')\n        } else {\n          if (currentRegion) {\n            regions.push(currentRegion)\n          }\n          currentRegion = {\n            refName,\n            start: feature.get('start'),\n            end: feature.get('end'),\n          }\n        }\n      }\n      if (currentRegion) {\n        regions.push(currentRegion)\n      }\n    }\n\n    // sort the regions by refName\n    regions.sort((a, b) => a.refName.localeCompare(b.refName))\n\n    return regions\n  }\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport type {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport type { NoAssemblyRegion } from '@jbrowse/core/util/types'\n\nexport function makeFeatures(fdata: SimpleFeatureSerialized[]) {\n  const features = new Map<string, Feature[]>()\n  for (const entry of fdata) {\n    const f = new SimpleFeature(entry)\n    const refName = f.get('refName') as string\n    let bucket = features.get(refName)\n    if (!bucket) {\n      bucket = []\n      features.set(refName, bucket)\n    }\n\n    bucket.push(f)\n  }\n\n  // sort the features on each reference sequence by start coordinate\n  for (const refFeatures of features.values()) {\n    refFeatures.sort((a, b) => a.get('start') - b.get('start'))\n  }\n\n  return features\n}\n\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n  protected features: Map<string, Feature[]>\n\n  constructor(\n    conf: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(conf, getSubAdapter, pluginManager)\n    const feats = readConfObject(conf, 'features') as SimpleFeatureSerialized[]\n    this.features = makeFeatures(feats)\n  }\n\n  async getRefNames() {\n    return [...this.features.keys()]\n  }\n\n  async getRefNameAliases() {\n    return [...this.features.values()].map(featureArray => ({\n      refName: featureArray[0]!.get('refName'),\n      aliases: featureArray[0]!.get('aliases'),\n    }))\n  }\n\n  getFeatures(region: NoAssemblyRegion) {\n    const { refName, start, end } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const features = this.features.get(refName) || []\n      for (const f of features) {\n        if (f.get('end') > start && f.get('start') < end) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    })\n  }\n}\n"],"names":["FromConfigRegionsAdapter","BaseAdapter","constructor","config","getSubAdapter","pluginManager","super","f","readConfObject","this","features","makeFeatures","getRegions","regions","refName","currentRegion","feature","end","get","start","push","sort","a","b","localeCompare","fdata","Map","entry","SimpleFeature","bucket","set","refFeatures","values","FromConfigAdapter","BaseFeatureDataAdapter","conf","feats","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","ObservableCreate","async","observer","next","complete"],"sourceRoot":""}