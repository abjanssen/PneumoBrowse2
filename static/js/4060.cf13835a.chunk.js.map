{"version":3,"file":"static/js/4060.cf13835a.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/PileupRenderer/getAlignmentShapeColor.ts","../../../plugins/alignments/src/PileupRenderer/colorBy.ts","../../../plugins/alignments/src/PileupRenderer/util.ts","../../../plugins/alignments/src/PileupRenderer/makeImageData.ts","../../../plugins/alignments/src/PileupRenderer/renderAlignment.ts","../../../plugins/alignments/src/PileupRenderer/renderAlignmentShape.ts","../../../plugins/alignments/src/PileupRenderer/renderPerBaseQuality.ts","../../../plugins/alignments/src/PileupRenderer/renderPerBaseLettering.ts","../../../plugins/alignments/src/PileupRenderer/renderModifications.ts","../../../plugins/alignments/src/PileupRenderer/renderMethylation.ts","../../../plugins/alignments/src/PileupRenderer/renderMismatches.ts","../../../plugins/alignments/src/PileupRenderer/renderSoftClipping.ts","../../../plugins/alignments/src/shared/color.ts","../../../plugins/alignments/src/shared/getMaximumModificationAtEachPosition.ts"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\n\nimport {\n  colorByInsertSize,\n  colorByMappingQuality,\n  colorByOrientation,\n  colorByStrand,\n  colorByStrandedRnaSeq,\n} from './colorBy'\nimport { fillColor } from '../shared/color'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Feature } from '@jbrowse/core/util'\n\nexport function getAlignmentShapeColor({\n  colorType,\n  tag,\n  feature,\n  config,\n  defaultColor,\n  colorTagMap,\n}: {\n  colorType: string\n  tag: string\n  feature: Feature\n  defaultColor: boolean\n  config: AnyConfigurationModel\n  colorTagMap: Record<string, string>\n}) {\n  // first pass for simple color changes that change the color of the\n  // alignment\n  switch (colorType) {\n    case 'insertSize':\n      return colorByInsertSize(feature)\n    case 'strand':\n      return colorByStrand(feature)\n    case 'mappingQuality':\n      return colorByMappingQuality(feature)\n    case 'pairOrientation':\n      return colorByOrientation(feature, config)\n    case 'stranded':\n      return colorByStrandedRnaSeq(feature)\n    case 'xs':\n    case 'tag': {\n      const tags = feature.get('tags')\n      const val = tags ? tags[tag] : feature.get(tag)\n\n      if (tag === 'XS' || tag === 'TS') {\n        if (val === '-') {\n          return fillColor.color_rev_strand\n        } else if (val === '+') {\n          return fillColor.color_fwd_strand\n        } else {\n          return fillColor.color_nostrand\n        }\n      }\n      if (tag === 'ts') {\n        if (val === '-') {\n          return feature.get('strand') === -1\n            ? fillColor.color_fwd_strand\n            : fillColor.color_rev_strand\n        } else if (val === '+') {\n          return feature.get('strand') === -1\n            ? fillColor.color_rev_strand\n            : fillColor.color_fwd_strand\n        } else {\n          return fillColor.color_nostrand\n        }\n      }\n      return colorTagMap[val] || fillColor.color_nostrand\n    }\n    case 'insertSizeAndPairOrientation':\n      break\n\n    case 'modifications':\n    case 'methylation':\n      // this coloring is similar to igv.js, and is helpful to color negative\n      // strand reads differently because their c-g will be flipped (e.g. g-c\n      // read right to left)\n      return feature.get('flags') & 16 ? '#c8dcc8' : '#c8c8c8'\n\n    default:\n      return defaultColor\n        ? 'lightgrey'\n        : readConfObject(config, 'color', { feature })\n  }\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\n\nimport { fillColor } from '../shared/color'\nimport { orientationTypes } from '../util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Feature } from '@jbrowse/core/util'\n\nexport function colorByInsertSize(feature: Feature) {\n  return feature.get('is_paired') &&\n    feature.get('refName') !== feature.get('next_ref')\n    ? '#555'\n    : `hsl(${Math.abs(feature.get('template_length')) / 10},50%,50%)`\n}\n\nexport function colorByMappingQuality(feature: Feature) {\n  return `hsl(${feature.get('score')},50%,50%)`\n}\n\nfunction getOrientation(feature: Feature, config: AnyConfigurationModel) {\n  const orientationType = readConfObject(config, 'orientationType') as\n    | 'fr'\n    | 'ff'\n    | 'rf'\n  const type = orientationTypes[orientationType]\n  const orientation = type[feature.get('pair_orientation') as string]!\n  return {\n    LR: 'color_pair_lr' as const,\n    RR: 'color_pair_rr' as const,\n    RL: 'color_pair_rl' as const,\n    LL: 'color_pair_ll' as const,\n  }[orientation]\n}\n\nexport function colorByStrand(feature: Feature) {\n  return feature.get('strand') === -1 ? '#8F8FD8' : '#EC8B8B'\n}\n\nexport function colorByOrientation(\n  feature: Feature,\n  config: AnyConfigurationModel,\n) {\n  return fillColor[getOrientation(feature, config) || 'color_nostrand']\n}\nfunction getStranded(feature: Feature) {\n  const flags = feature.get('flags')\n  const strand = feature.get('strand')\n\n  // is paired\n  if (flags & 1) {\n    // first-of-pair?\n    const flipper = flags & 64 ? -1 : 1\n\n    // proper pairing\n    if (flags & 2) {\n      return strand * flipper === 1 ? 'color_rev_strand' : 'color_fwd_strand'\n    }\n    // mate missing, separate color\n    if (flags & 8) {\n      return strand * flipper === 1\n        ? 'color_rev_missing_mate'\n        : 'color_fwd_missing_mate'\n    }\n    // same chrom without proper pairing gets separate color\n    if (feature.get('refName') === feature.get('next_ref')) {\n      return strand * flipper === 1\n        ? 'color_rev_strand_not_proper'\n        : 'color_fwd_strand_not_proper'\n    }\n    // abberant chrom\n\n    return strand === 1 ? 'color_fwd_diff_chr' : 'color_rev_diff_chr'\n  }\n  return 'color_unknown'\n}\n\nexport function colorByStrandedRnaSeq(feature: Feature) {\n  return fillColor[getStranded(feature)]\n}\n","import { measureText } from '@jbrowse/core/util'\n\nimport type { Feature } from '@jbrowse/core/util'\nimport type { Theme } from '@mui/material'\n\nexport function fillRect(\n  ctx: CanvasRenderingContext2D,\n  l: number,\n  t: number,\n  w: number,\n  h: number,\n  cw: number,\n  color?: string,\n) {\n  if (l + w < 0 || l > cw) {\n    return\n  }\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(l, t, w, h)\n}\n\nexport function getColorBaseMap(theme: Theme) {\n  const { skip, deletion, insertion, hardclip, softclip, bases } = theme.palette\n  return {\n    A: bases.A.main,\n    C: bases.C.main,\n    G: bases.G.main,\n    T: bases.T.main,\n    deletion,\n    insertion,\n    hardclip,\n    softclip,\n    skip,\n  }\n}\n\nexport function getContrastBaseMap(theme: Theme) {\n  return Object.fromEntries(\n    Object.entries(getColorBaseMap(theme)).map(([key, value]) => [\n      key,\n      theme.palette.getContrastText(value),\n    ]),\n  )\n}\n\nexport function shouldDrawSNPsMuted(type?: string) {\n  return ['methylation', 'modifications'].includes(type || '')\n}\n\nexport function shouldDrawIndels() {\n  return true\n}\n\nexport interface LayoutFeature {\n  heightPx: number\n  topPx: number\n  feature: Feature\n}\n\n// get width and height of chars the height is an approximation: width letter M\n// is approximately the height\nexport function getCharWidthHeight() {\n  const charWidth = measureText('A')\n  const charHeight = measureText('M') - 2\n  return { charWidth, charHeight }\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { createJBrowseTheme } from '@jbrowse/core/ui'\nimport { forEachWithStopTokenCheck } from '@jbrowse/core/util'\n\nimport { renderAlignment } from './renderAlignment'\nimport { renderMismatches } from './renderMismatches'\nimport { renderSoftClipping } from './renderSoftClipping'\nimport {\n  getCharWidthHeight,\n  getColorBaseMap,\n  getContrastBaseMap,\n  shouldDrawIndels,\n  shouldDrawSNPsMuted,\n} from './util'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { Feature } from '@jbrowse/core/util'\n\ninterface LayoutFeature {\n  heightPx: number\n  topPx: number\n  feature: Feature\n}\n\nexport function makeImageData({\n  ctx,\n  layoutRecords,\n  canvasWidth,\n  renderArgs,\n}: {\n  ctx: CanvasRenderingContext2D\n  canvasWidth: number\n  layoutRecords: LayoutFeature[]\n  renderArgs: ProcessedRenderArgs\n}) {\n  const {\n    stopToken,\n    config,\n    showSoftClip,\n    colorBy,\n    theme: configTheme,\n  } = renderArgs\n  const mismatchAlpha = readConfObject(config, 'mismatchAlpha')\n  const minSubfeatureWidth = readConfObject(config, 'minSubfeatureWidth')\n  const largeInsertionIndicatorScale = readConfObject(\n    config,\n    'largeInsertionIndicatorScale',\n  )\n  const hideSmallIndels = readConfObject(config, 'hideSmallIndels') as boolean\n  const defaultColor = readConfObject(config, 'color') === '#f0f'\n  const theme = createJBrowseTheme(configTheme)\n  const colorMap = getColorBaseMap(theme)\n  const colorContrastMap = getContrastBaseMap(theme)\n  ctx.font = 'bold 10px Courier New,monospace'\n\n  const { charWidth, charHeight } = getCharWidthHeight()\n  const drawSNPsMuted = shouldDrawSNPsMuted(colorBy?.type)\n  const drawIndels = shouldDrawIndels()\n  forEachWithStopTokenCheck(layoutRecords, stopToken, feat => {\n    renderAlignment({\n      ctx,\n      feat,\n      renderArgs,\n      defaultColor,\n      colorMap,\n      colorContrastMap,\n      charWidth,\n      charHeight,\n      canvasWidth,\n    })\n    renderMismatches({\n      ctx,\n      feat,\n      renderArgs,\n      hideSmallIndels,\n      mismatchAlpha,\n      drawSNPsMuted,\n      drawIndels,\n      largeInsertionIndicatorScale,\n      minSubfeatureWidth,\n      charWidth,\n      charHeight,\n      colorMap,\n      colorContrastMap,\n      canvasWidth,\n    })\n    if (showSoftClip) {\n      renderSoftClipping({\n        ctx,\n        feat,\n        renderArgs,\n        colorMap,\n        config,\n        theme,\n        canvasWidth,\n      })\n    }\n  })\n  return undefined\n}\n","import { getAlignmentShapeColor } from './getAlignmentShapeColor'\nimport { renderAlignmentShape } from './renderAlignmentShape'\nimport { renderModifications } from './renderModifications'\nimport { renderPerBaseLettering } from './renderPerBaseLettering'\nimport { renderPerBaseQuality } from './renderPerBaseQuality'\nimport { parseCigar } from '../MismatchParser'\nimport { renderMethylation } from './renderMethylation'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\n\nexport function renderAlignment({\n  ctx,\n  feat,\n  renderArgs,\n  colorMap,\n  colorContrastMap,\n  charWidth,\n  charHeight,\n  defaultColor,\n  canvasWidth,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  renderArgs: ProcessedRenderArgs\n  colorMap: Record<string, string>\n  colorContrastMap: Record<string, string>\n  charWidth: number\n  charHeight: number\n  defaultColor: boolean\n  canvasWidth: number\n}) {\n  const { config, bpPerPx, regions, colorBy, colorTagMap = {} } = renderArgs\n  const { tag = '', type: colorType = '' } = colorBy || {}\n  const { feature } = feat\n  const region = regions[0]!\n\n  ctx.fillStyle = getAlignmentShapeColor({\n    feature,\n    config,\n    tag,\n    defaultColor,\n    colorType,\n    colorTagMap,\n  })\n\n  renderAlignmentShape({ ctx, feat, renderArgs })\n\n  // second pass for color types that render per-base things that go over the\n  // existing drawing\n  switch (colorType) {\n    case 'perBaseQuality': {\n      const cigarOps = parseCigar(feature.get('CIGAR'))\n      renderPerBaseQuality({\n        ctx,\n        feat,\n        region,\n        bpPerPx,\n        canvasWidth,\n        cigarOps,\n      })\n      break\n    }\n\n    case 'perBaseLettering': {\n      const cigarOps = parseCigar(feature.get('CIGAR'))\n      renderPerBaseLettering({\n        ctx,\n        feat,\n        region,\n        bpPerPx,\n        colorMap,\n        colorContrastMap,\n        charWidth,\n        charHeight,\n        canvasWidth,\n        cigarOps,\n      })\n      break\n    }\n\n    case 'modifications': {\n      const cigarOps = parseCigar(feature.get('CIGAR'))\n      renderModifications({\n        ctx,\n        feat,\n        region,\n        bpPerPx,\n        renderArgs,\n        canvasWidth,\n        cigarOps,\n      })\n      break\n    }\n\n    case 'methylation': {\n      const cigarOps = parseCigar(feature.get('CIGAR'))\n      renderMethylation({\n        ctx,\n        feat,\n        region,\n        bpPerPx,\n        renderArgs,\n        canvasWidth,\n        cigarOps,\n      })\n      break\n    }\n  }\n}\n","import { bpSpanPx } from '@jbrowse/core/util'\n\nimport { parseCigar } from '../MismatchParser'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\n\nexport function renderAlignmentShape({\n  ctx,\n  feat,\n  renderArgs,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  renderArgs: ProcessedRenderArgs\n}) {\n  const { regions, bpPerPx } = renderArgs\n  const { heightPx, topPx, feature } = feat\n  const region = regions[0]!\n  const s = feature.get('start')\n  const e = feature.get('end')\n  const CIGAR = feature.get('CIGAR') as string | undefined\n  const flip = region.reversed ? -1 : 1\n  const strand = feature.get('strand') * flip\n  const renderChevrons = bpPerPx < 10 && heightPx > 5\n  if (CIGAR?.includes('N')) {\n    const cigarOps = parseCigar(CIGAR)\n    if (strand === 1) {\n      let drawLen = 0\n      let drawStart = s\n      for (let i = 0; i < cigarOps.length; i += 2) {\n        const opLen = +cigarOps[i]!\n        const op = cigarOps[i + 1]!\n        if (op === 'M' || op === 'X' || op === '=' || op === 'D') {\n          drawLen += opLen\n        } else if (op === 'N') {\n          if (drawStart !== drawLen) {\n            const [leftPx, rightPx] = bpSpanPx(\n              drawStart,\n              drawStart + drawLen,\n              region,\n              bpPerPx,\n            )\n            const w = rightPx - leftPx\n            ctx.fillRect(leftPx, topPx, w, heightPx)\n          }\n          drawStart += drawLen + opLen\n          drawLen = 0\n        }\n      }\n\n      if (drawStart !== drawLen) {\n        const [leftPx, rightPx] = bpSpanPx(\n          drawStart,\n          drawStart + drawLen,\n          region,\n          bpPerPx,\n        )\n        const w = rightPx - leftPx\n\n        if (renderChevrons) {\n          ctx.beginPath()\n          ctx.moveTo(leftPx, topPx)\n          ctx.lineTo(leftPx, topPx + heightPx)\n          ctx.lineTo(rightPx, topPx + heightPx)\n          ctx.lineTo(rightPx + 5, topPx + heightPx / 2)\n          ctx.lineTo(rightPx, topPx)\n          ctx.closePath()\n          ctx.fill()\n        } else {\n          ctx.fillRect(leftPx, topPx, w, heightPx)\n        }\n      }\n    } else if (strand === -1) {\n      let drawLen = 0\n      let drawStart = e\n      for (let i = cigarOps.length - 2; i >= 0; i -= 2) {\n        const opLen = +cigarOps[i]!\n        const op = cigarOps[i + 1]!\n        if (op === 'M' || op === 'X' || op === '=' || op === 'D') {\n          drawLen += opLen\n        } else if (op === 'N') {\n          if (drawLen !== 0) {\n            const [leftPx, rightPx] = bpSpanPx(\n              drawStart - drawLen,\n              drawStart,\n              region,\n              bpPerPx,\n            )\n            ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx)\n          }\n          drawStart -= drawLen + opLen\n          drawLen = 0\n        }\n      }\n\n      if (drawLen !== 0) {\n        const [leftPx, rightPx] = bpSpanPx(\n          drawStart - drawLen,\n          drawStart,\n          region,\n          bpPerPx,\n        )\n        const w = rightPx - leftPx\n\n        if (renderChevrons) {\n          ctx.beginPath()\n          ctx.moveTo(leftPx - 5, topPx + heightPx / 2)\n          ctx.lineTo(leftPx, topPx + heightPx)\n          ctx.lineTo(rightPx, topPx + heightPx)\n          ctx.lineTo(rightPx, topPx)\n          ctx.lineTo(leftPx, topPx)\n          ctx.closePath()\n          ctx.fill()\n        } else {\n          ctx.fillRect(leftPx, topPx, w, heightPx)\n        }\n      }\n    }\n  } else {\n    const [leftPx, rightPx] = bpSpanPx(s, e, region, bpPerPx)\n    if (bpPerPx < 10 && heightPx > 5) {\n      if (strand === -1) {\n        ctx.beginPath()\n        ctx.moveTo(leftPx - 5, topPx + heightPx / 2)\n        ctx.lineTo(leftPx, topPx + heightPx)\n        ctx.lineTo(rightPx, topPx + heightPx)\n        ctx.lineTo(rightPx, topPx)\n        ctx.lineTo(leftPx, topPx)\n        ctx.closePath()\n        ctx.fill()\n      } else {\n        ctx.beginPath()\n        ctx.moveTo(leftPx, topPx)\n        ctx.lineTo(leftPx, topPx + heightPx)\n        ctx.lineTo(rightPx, topPx + heightPx)\n        ctx.lineTo(rightPx + 5, topPx + heightPx / 2)\n        ctx.lineTo(rightPx, topPx)\n        ctx.closePath()\n        ctx.fill()\n      }\n    } else {\n      ctx.fillRect(leftPx, topPx, rightPx - leftPx, heightPx)\n    }\n  }\n}\n","import { bpSpanPx } from '@jbrowse/core/util'\n\nimport { fillRect } from './util'\n\nimport type { LayoutFeature } from './util'\nimport type { Region } from '@jbrowse/core/util'\n\nexport function renderPerBaseQuality({\n  ctx,\n  feat,\n  region,\n  bpPerPx,\n  canvasWidth,\n  cigarOps,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  region: Region\n  bpPerPx: number\n  canvasWidth: number\n  cigarOps: string[]\n}) {\n  const { feature, topPx, heightPx } = feat\n  const qual: string = feature.get('qual') || ''\n  const scores = qual.split(' ').map(val => +val)\n  const w = 1 / bpPerPx\n  const start = feature.get('start')\n  let soffset = 0 // sequence offset\n  let roffset = 0 // reference offset\n\n  for (let i = 0; i < cigarOps.length; i += 2) {\n    const len = +cigarOps[i]!\n    const op = cigarOps[i + 1]!\n    if (op === 'S' || op === 'I') {\n      soffset += len\n    } else if (op === 'D' || op === 'N') {\n      roffset += len\n    } else if (op === 'M' || op === 'X' || op === '=') {\n      for (let m = 0; m < len; m++) {\n        const score = scores[soffset + m]!\n        const start0 = start + roffset + m\n        const leftPx = bpSpanPx(start0, start0 + 1, region, bpPerPx)[0]\n        const c = `hsl(${score === 255 ? 150 : score * 1.5},55%,50%)`\n        fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c)\n      }\n      soffset += len\n      roffset += len\n    }\n  }\n}\n","import { bpSpanPx } from '@jbrowse/core/util'\n\nimport { fillRect } from './util'\n\nimport type { LayoutFeature } from './util'\nimport type { Region } from '@jbrowse/core/util'\n\nexport function renderPerBaseLettering({\n  ctx,\n  feat,\n  region,\n  bpPerPx,\n  colorMap,\n  colorContrastMap,\n  charWidth,\n  charHeight,\n  canvasWidth,\n  cigarOps,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  region: Region\n  bpPerPx: number\n  colorMap: Record<string, string>\n  colorContrastMap: Record<string, string>\n  charWidth: number\n  charHeight: number\n  canvasWidth: number\n  cigarOps: string[]\n}) {\n  const heightLim = charHeight - 2\n  const { feature, topPx, heightPx } = feat\n  const seq = feature.get('seq') as string | undefined\n  const w = 1 / bpPerPx\n  const start = feature.get('start')\n  let soffset = 0\n  let roffset = 0\n\n  if (!seq) {\n    return\n  }\n  for (let i = 0; i < cigarOps.length; i += 2) {\n    const len = +cigarOps[i]!\n    const op = cigarOps[i + 1]!\n    if (op === 'S' || op === 'I') {\n      soffset += len\n    } else if (op === 'D' || op === 'N') {\n      roffset += len\n    } else if (op === 'M' || op === 'X' || op === '=') {\n      for (let m = 0; m < len; m++) {\n        const letter = seq[soffset + m]!\n        const r = start + roffset + m\n        const [leftPx] = bpSpanPx(r, r + 1, region, bpPerPx)\n        const c = colorMap[letter]\n        fillRect(ctx, leftPx, topPx, w + 0.5, heightPx, canvasWidth, c)\n\n        if (w >= charWidth && heightPx >= heightLim) {\n          // normal SNP coloring\n          ctx.fillStyle = colorContrastMap[letter]!\n          ctx.fillText(\n            letter,\n            leftPx + (w - charWidth) / 2 + 1,\n            topPx + heightPx,\n          )\n        }\n      }\n      soffset += len\n      roffset += len\n    }\n  }\n}\n","import { bpSpanPx, max, sum } from '@jbrowse/core/util'\n\nimport { fillRect } from './util'\nimport { getMaxProbModAtEachPosition } from '../shared/getMaximumModificationAtEachPosition'\nimport { alphaColor } from '../shared/util'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\nimport type { Region } from '@jbrowse/core/util'\n\n// render modifications stored in MM tag in BAM\nexport function renderModifications({\n  ctx,\n  feat,\n  region,\n  bpPerPx,\n  renderArgs,\n  canvasWidth,\n  cigarOps,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  region: Region\n  bpPerPx: number\n  renderArgs: ProcessedRenderArgs\n  canvasWidth: number\n  cigarOps: string[]\n}) {\n  const { feature, topPx, heightPx } = feat\n  const { colorBy, visibleModifications = {} } = renderArgs\n\n  const seq = feature.get('seq') as string | undefined\n\n  if (!seq) {\n    return\n  }\n  const start = feature.get('start')\n  const isolatedModification = colorBy?.modifications?.isolatedModification\n  const twoColor = colorBy?.modifications?.twoColor\n\n  // this is a hole-y array, does not work with normal for loop\n  // eslint-disable-next-line unicorn/no-array-for-each\n  getMaxProbModAtEachPosition(feature, cigarOps)?.forEach(\n    ({ allProbs, prob, type }, pos) => {\n      const r = start + pos\n      const [leftPx, rightPx] = bpSpanPx(r, r + 1, region, bpPerPx)\n      const mod = visibleModifications[type]\n      if (!mod) {\n        console.warn(`${type} not known yet`)\n        return\n      }\n      if (isolatedModification && mod.type !== isolatedModification) {\n        return\n      }\n      const col = mod.color || 'black'\n      const s = 1 - sum(allProbs)\n      if (twoColor && s > max(allProbs)) {\n        const c = alphaColor('blue', s)\n        const w = rightPx - leftPx + 0.5\n        fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c)\n      } else {\n        const c = alphaColor(col, prob)\n        const w = rightPx - leftPx + 0.5\n        fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c)\n      }\n      pos++\n    },\n  )\n}\n","import { bpSpanPx } from '@jbrowse/core/util'\nimport { colord } from '@jbrowse/core/util/colord'\n\nimport { fillRect } from './util'\nimport { getMethBins } from '../ModificationParser'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\nimport type { Region } from '@jbrowse/core/util'\n\n// Color by methylation is slightly modified version of color by modifications\n// at reference CpG sites, with non-methylated CpG colored (looking only at the\n// MM tag can not tell you where reference CpG sites are)\nexport function renderMethylation({\n  ctx,\n  feat,\n  region,\n  bpPerPx,\n  renderArgs,\n  canvasWidth,\n  cigarOps,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  region: Region\n  bpPerPx: number\n  renderArgs: ProcessedRenderArgs\n  canvasWidth: number\n  cigarOps: string[]\n}) {\n  const { regionSequence } = renderArgs\n  const { feature, topPx, heightPx } = feat\n  if (!regionSequence) {\n    throw new Error('region sequence required for methylation')\n  }\n\n  const seq = feature.get('seq') as string | undefined\n  if (!seq) {\n    return\n  }\n  const fstart = feature.get('start')\n  const fend = feature.get('end')\n  const { methBins, methProbs, hydroxyMethBins, hydroxyMethProbs } =\n    getMethBins(feature, cigarOps)\n\n  function getCol(k: number) {\n    if (methBins[k]) {\n      const p = methProbs[k] || 0\n      return (\n        p > 0.5\n          ? colord('red').alpha((p - 0.5) * 2)\n          : colord('blue').alpha(1 - p * 2)\n      ).toHslString()\n    }\n    if (hydroxyMethBins[k]) {\n      const p = hydroxyMethProbs[k] || 0\n      return (\n        p > 0.5\n          ? colord('pink').alpha((p - 0.5) * 2)\n          : colord('purple').alpha(1 - p * 2)\n      ).toHslString()\n    }\n    return undefined\n  }\n  const r = regionSequence.toLowerCase()\n  for (let i = 0; i < fend - fstart; i++) {\n    const j = i + fstart\n\n    const l1 = r[j - region.start + 1]\n    const l2 = r[j - region.start + 2]\n\n    if (l1 === 'c' && l2 === 'g') {\n      if (bpPerPx > 2) {\n        const [leftPx, rightPx] = bpSpanPx(j, j + 2, region, bpPerPx)\n        const w = rightPx - leftPx + 0.5\n        const c = getCol(i) || getCol(i + 1) || 'blue'\n        fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c)\n      } else {\n        const [leftPx, rightPx] = bpSpanPx(j, j + 1, region, bpPerPx)\n        const w = rightPx - leftPx + 0.5\n        const c = getCol(i) || 'blue'\n        fillRect(ctx, leftPx, topPx, w, heightPx, canvasWidth, c)\n        const [leftPx2, rightPx2] = bpSpanPx(j + 1, j + 2, region, bpPerPx)\n        const w2 = rightPx2 - leftPx2 + 0.5\n        const c2 = getCol(i + 1) || 'blue'\n        fillRect(ctx, leftPx2, topPx, w2, heightPx, canvasWidth, c2)\n      }\n    }\n  }\n}\n","import { bpSpanPx, measureText } from '@jbrowse/core/util'\nimport { colord } from '@jbrowse/core/util/colord'\n\nimport { fillRect } from './util'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\nimport type { Mismatch } from '../shared/types'\n\nexport function renderMismatches({\n  ctx,\n  feat,\n  renderArgs,\n  minSubfeatureWidth,\n  largeInsertionIndicatorScale,\n  mismatchAlpha,\n  charWidth,\n  charHeight,\n  colorMap,\n  colorContrastMap,\n  hideSmallIndels,\n  canvasWidth,\n  drawSNPsMuted,\n  drawIndels = true,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  renderArgs: ProcessedRenderArgs\n  colorMap: Record<string, string>\n  colorContrastMap: Record<string, string>\n  mismatchAlpha?: boolean\n  drawIndels?: boolean\n  drawSNPsMuted?: boolean\n  minSubfeatureWidth: number\n  largeInsertionIndicatorScale: number\n  hideSmallIndels: boolean\n  charWidth: number\n  charHeight: number\n  canvasWidth: number\n}) {\n  const { bpPerPx, regions } = renderArgs\n  const { heightPx, topPx, feature } = feat\n  const region = regions[0]!\n  const start = feature.get('start')\n\n  const pxPerBp = Math.min(1 / bpPerPx, 2)\n  const mismatches = feature.get('mismatches') as Mismatch[] | undefined\n  const heightLim = charHeight - 2\n\n  // extraHorizontallyFlippedOffset is used to draw interbase items, which are\n  // located to the left when forward and right when reversed\n  const extraHorizontallyFlippedOffset = region.reversed ? 1 / bpPerPx + 1 : -1\n\n  if (!mismatches) {\n    return\n  }\n\n  // two pass rendering: first pass, draw all the mismatches except wide\n  // insertion markers\n  for (const mismatch of mismatches) {\n    const mstart = start + mismatch.start\n    const mlen = mismatch.length\n    const mbase = mismatch.base\n    const [leftPx, rightPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx)\n    const widthPx = Math.max(minSubfeatureWidth, rightPx - leftPx)\n    if (mismatch.type === 'mismatch') {\n      if (!drawSNPsMuted) {\n        const baseColor = colorMap[mismatch.base] || '#888'\n        const c =\n          mismatchAlpha && mismatch.qual !== undefined\n            ? colord(baseColor)\n                .alpha(Math.min(1, mismatch.qual / 50))\n                .toHslString()\n            : baseColor\n\n        fillRect(\n          ctx,\n          Math.round(leftPx),\n          topPx,\n          widthPx,\n          heightPx,\n          canvasWidth,\n          c,\n        )\n      }\n\n      if (widthPx >= charWidth && heightPx >= heightLim) {\n        // normal SNP coloring\n        const contrastColor = drawSNPsMuted\n          ? 'black'\n          : colorContrastMap[mismatch.base] || 'black'\n        ctx.fillStyle =\n          mismatchAlpha && mismatch.qual !== undefined\n            ? colord(contrastColor)\n                .alpha(Math.min(1, mismatch.qual / 50))\n                .toHslString()\n            : contrastColor\n        ctx.fillText(\n          mbase,\n          leftPx + (widthPx - charWidth) / 2 + 1,\n          topPx + heightPx,\n        )\n      }\n    } else if (mismatch.type === 'deletion' && drawIndels) {\n      const len = mismatch.length\n      if (!hideSmallIndels || len >= 10) {\n        fillRect(\n          ctx,\n          leftPx,\n          topPx,\n          Math.abs(leftPx - rightPx),\n          heightPx,\n          canvasWidth,\n          colorMap.deletion,\n        )\n        const txt = `${mismatch.length}`\n        const rwidth = measureText(txt, 10)\n        if (widthPx >= rwidth && heightPx >= heightLim) {\n          ctx.fillStyle = colorContrastMap.deletion!\n          ctx.fillText(\n            txt,\n            (leftPx + rightPx) / 2 - rwidth / 2,\n            topPx + heightPx,\n          )\n        }\n      }\n    } else if (mismatch.type === 'insertion' && drawIndels) {\n      const pos = leftPx + extraHorizontallyFlippedOffset\n      const len = +mismatch.base || mismatch.length\n      const insW = Math.max(0, Math.min(1.2, 1 / bpPerPx))\n      if (len < 10) {\n        if (!hideSmallIndels) {\n          fillRect(\n            ctx,\n            pos,\n            topPx,\n            insW,\n            heightPx,\n            canvasWidth,\n            colorMap.insertion,\n          )\n          if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n            const l = Math.round(pos - insW)\n            fillRect(ctx, l, topPx, insW * 3, 1, canvasWidth)\n            fillRect(ctx, l, topPx + heightPx - 1, insW * 3, 1, canvasWidth)\n            ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx)\n          }\n        }\n      }\n    } else if (mismatch.type === 'hardclip' || mismatch.type === 'softclip') {\n      const pos = leftPx + extraHorizontallyFlippedOffset\n      const c = colorMap[mismatch.type]\n      const clipW = Math.max(minSubfeatureWidth, pxPerBp)\n      fillRect(ctx, pos, topPx, clipW, heightPx, canvasWidth, c)\n      if (1 / bpPerPx >= charWidth && heightPx >= heightLim) {\n        const l = pos - clipW\n        fillRect(ctx, l, topPx, clipW * 3, 1, canvasWidth)\n        fillRect(ctx, l, topPx + heightPx - 1, clipW * 3, 1, canvasWidth)\n        ctx.fillText(`(${mismatch.base})`, pos + 3, topPx + heightPx)\n      }\n    } else if (mismatch.type === 'skip') {\n      // fix to avoid bad rendering note that this was also related to chrome\n      // bug https://bugs.chromium.org/p/chromium/issues/detail?id=1131528\n      //\n      // also affected firefox ref #1236 #2750\n      if (leftPx + widthPx > 0) {\n        // make small exons more visible when zoomed far out\n        const adjustPx = widthPx - (bpPerPx > 10 ? 1.5 : 0)\n        const l = Math.max(0, leftPx)\n        const t = topPx + heightPx / 2 - 1\n        const w = adjustPx + Math.min(leftPx, 0)\n        const h = 1\n        fillRect(ctx, l, t, w, h, canvasWidth, colorMap.skip)\n      }\n    }\n  }\n\n  // second pass, draw wide insertion markers on top\n  if (drawIndels) {\n    for (const mismatch of mismatches) {\n      const mstart = start + mismatch.start\n      const mlen = mismatch.length\n      const len = +mismatch.base || mismatch.length\n      if (mismatch.type === 'insertion' && len >= 10) {\n        const [leftPx] = bpSpanPx(mstart, mstart + mlen, region, bpPerPx)\n        const txt = `${len}`\n        if (bpPerPx > largeInsertionIndicatorScale) {\n          fillRect(\n            ctx,\n            leftPx - 1,\n            topPx,\n            2,\n            heightPx,\n            canvasWidth,\n            colorMap.insertion,\n          )\n        } else if (heightPx > charHeight) {\n          const rwidth = measureText(txt)\n          const padding = 5\n          fillRect(\n            ctx,\n            leftPx - rwidth / 2 - padding,\n            topPx,\n            rwidth + 2 * padding,\n            heightPx,\n            canvasWidth,\n            'purple',\n          )\n          ctx.fillStyle = colorContrastMap.insertion!\n          ctx.fillText(txt, leftPx - rwidth / 2, topPx + heightPx)\n        } else {\n          const padding = 2\n          fillRect(\n            ctx,\n            leftPx - padding,\n            topPx,\n            2 * padding,\n            heightPx,\n            canvasWidth,\n            colorMap.insertion,\n          )\n        }\n      }\n    }\n  }\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { bpSpanPx } from '@jbrowse/core/util'\n\nimport { fillRect, getCharWidthHeight } from './util'\nimport { parseCigar } from '../MismatchParser'\n\nimport type { ProcessedRenderArgs } from './types'\nimport type { LayoutFeature } from './util'\nimport type { Mismatch } from '../shared/types'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { Theme } from '@mui/material'\n\nexport function renderSoftClipping({\n  ctx,\n  feat,\n  renderArgs,\n  config,\n  theme,\n  colorMap,\n  canvasWidth,\n}: {\n  ctx: CanvasRenderingContext2D\n  feat: LayoutFeature\n  renderArgs: ProcessedRenderArgs\n  config: AnyConfigurationModel\n  colorMap: Record<string, string>\n  theme: Theme\n  canvasWidth: number\n}) {\n  const { feature, topPx, heightPx } = feat\n  const { regions, bpPerPx } = renderArgs\n  const region = regions[0]!\n  const minFeatWidth = readConfObject(config, 'minSubfeatureWidth')\n  const mismatches = feature.get('mismatches') as Mismatch[] | undefined\n  const seq = feature.get('seq') as string | undefined\n  const { charWidth, charHeight } = getCharWidthHeight()\n\n  // Display all bases softclipped off in lightened colors\n  if (!(seq && mismatches)) {\n    return\n  }\n\n  const heightLim = charHeight - 2\n  let seqOffset = 0\n  let refOffset = 0\n  const CIGAR = feature.get('CIGAR')\n  const cigarOps = parseCigar(CIGAR)\n  for (let i = 0; i < cigarOps.length; i += 2) {\n    const op = cigarOps[i + 1]!\n    const len = +cigarOps[i]!\n    if (op === 'S') {\n      for (let k = 0; k < len; k++) {\n        const base = seq[seqOffset + k]!\n        const s0 = feature.get('start') - (i === 0 ? len : 0) + refOffset + k\n        const [leftPx, rightPx] = bpSpanPx(s0, s0 + 1, region, bpPerPx)\n        const widthPx = Math.max(minFeatWidth, rightPx - leftPx)\n\n        // Black accounts for IUPAC ambiguity code bases such as N that\n        // show in soft clipping\n        const baseColor = colorMap[base] || '#000000'\n        ctx.fillStyle = baseColor\n        fillRect(ctx, leftPx, topPx, widthPx, heightPx, canvasWidth)\n\n        if (widthPx >= charWidth && heightPx >= heightLim) {\n          ctx.fillStyle = theme.palette.getContrastText(baseColor)\n          ctx.fillText(\n            base,\n            leftPx + (widthPx - charWidth) / 2 + 1,\n            topPx + heightPx,\n          )\n        }\n      }\n      seqOffset += len\n    }\n    if (op === 'N') {\n      refOffset += len\n    }\n    if (op === 'M' || op === '=' || op === 'X') {\n      refOffset += len\n      seqOffset += len\n    }\n    if (op === 'H') {\n      // do nothing\n    }\n    if (op === 'D') {\n      refOffset += len\n    }\n    if (op === 'I') {\n      seqOffset += len\n    }\n  }\n}\n","import { orientationTypes, pairMap } from '../util'\n\nimport type { ChainStats } from './fetchChains'\n\nexport const fillColor = {\n  color_fwd_strand_not_proper: '#ECC8C8',\n  color_rev_strand_not_proper: '#BEBED8',\n  color_fwd_strand: '#EC8B8B',\n  color_rev_strand: '#8F8FD8',\n  color_fwd_missing_mate: '#D11919',\n  color_rev_missing_mate: '#1919D1',\n  color_fwd_diff_chr: '#000',\n  color_rev_diff_chr: '#969696',\n  color_pair_lr: '#c8c8c8',\n  color_pair_rr: 'navy',\n  color_pair_rl: 'teal',\n  color_pair_ll: 'green',\n  color_nostrand: '#c8c8c8',\n  color_interchrom: 'purple',\n  color_longinsert: 'red',\n  color_shortinsert: 'pink',\n  color_unknown: 'grey',\n}\n\n// manually calculated by running\n// const color = require('color')\n// Object.fromEntries(Object.entries(fillColor).map(([key,val])=>{\n//   return [key, color(val).darken('0.3').hex()]\n// }))\n// this avoids (expensive) use of Color module at runtime\nexport const strokeColor = {\n  color_fwd_strand_not_proper: '#CA6767',\n  color_rev_strand_not_proper: '#7272AA',\n  color_fwd_strand: '#DC2A2A',\n  color_rev_strand: '#4141BA',\n  color_fwd_missing_mate: '#921111',\n  color_rev_missing_mate: '#111192',\n  color_fwd_diff_chr: '#000000',\n  color_rev_diff_chr: '#696969',\n  color_pair_lr: '#8C8C8C',\n  color_pair_rr: '#00005A',\n  color_pair_rl: '#005A5A',\n  color_pair_ll: '#005A00',\n  color_nostrand: '#8C8C8C',\n  color_interchrom: '#5A005A',\n  color_longinsert: '#B30000',\n  color_shortinsert: '#FF3A5C',\n  color_unknown: 'grey',\n}\n\nexport function getPairedInsertSizeColor(\n  f1: { refName: string; tlen?: number },\n  f2: { refName: string },\n  stats?: ChainStats,\n) {\n  const sameRef = f1.refName === f2.refName\n  const tlen = Math.abs(f1.tlen || 0)\n  if (sameRef && tlen > (stats?.upper || 0)) {\n    return [fillColor.color_longinsert, strokeColor.color_longinsert] as const\n  } else if (sameRef && tlen < (stats?.lower || 0)) {\n    return [fillColor.color_shortinsert, strokeColor.color_shortinsert] as const\n  } else if (!sameRef) {\n    return [fillColor.color_interchrom, strokeColor.color_interchrom] as const\n  } else {\n    return undefined\n  }\n}\n\nconst defaultColor = [fillColor.color_unknown, fillColor.color_unknown] as const\n\n// return color scheme with both insert size and orientation coloring,\n// prioritzing orientation coloring\nexport function getPairedInsertSizeAndOrientationColor(\n  f1: { refName: string; pair_orientation?: string; tlen?: number },\n  f2: { refName: string },\n  stats?: ChainStats,\n) {\n  return (\n    getPairedOrientationColorOrDefault(f1) ||\n    getPairedInsertSizeColor(f1, f2, stats) ||\n    defaultColor\n  )\n}\n\nexport function getPairedOrientationColorOrDefault(f: {\n  pair_orientation?: string\n}) {\n  const type = orientationTypes.fr\n  const r = type[f.pair_orientation || ''] as keyof typeof pairMap\n  const type2 = pairMap[r] as keyof typeof fillColor\n  return r === 'LR'\n    ? undefined\n    : ([fillColor[type2], strokeColor[type2]] as const)\n}\n\nexport function getPairedOrientationColor(f: { pair_orientation?: string }) {\n  return getPairedOrientationColorOrDefault(f) || defaultColor\n}\n","import { getNextRefPos, parseCigar } from '../MismatchParser'\nimport { getModPositions, getModProbabilities } from '../ModificationParser'\nimport { getTagAlt } from '../util'\n\nimport type { Feature } from '@jbrowse/core/util'\n\ninterface MaximumProbabilityMod {\n  type: string\n  prob: number\n  allProbs: number[]\n}\n\nexport function getMaxProbModAtEachPosition(\n  feature: Feature,\n  cigarOps?: string[],\n) {\n  const fstrand = feature.get('strand') as -1 | 0 | 1\n  const seq = feature.get('seq') as string | undefined\n  const mm = (getTagAlt(feature, 'MM', 'Mm') as string) || ''\n  const ops = cigarOps || parseCigar(feature.get('CIGAR'))\n  if (seq) {\n    const modifications = getModPositions(mm, seq, fstrand)\n    const probabilities = getModProbabilities(feature)\n    const maxProbModForPosition = [] as MaximumProbabilityMod[]\n\n    let probIndex = 0\n    for (const { type, positions } of modifications) {\n      for (const { ref, idx } of getNextRefPos(ops, positions)) {\n        const prob =\n          probabilities?.[\n            probIndex + (fstrand === -1 ? positions.length - 1 - idx : idx)\n          ] || 0\n        if (!maxProbModForPosition[ref]) {\n          maxProbModForPosition[ref] = {\n            type,\n            prob,\n            allProbs: [prob],\n          }\n        } else {\n          const old = maxProbModForPosition[ref]\n          maxProbModForPosition[ref] = {\n            allProbs: [...old.allProbs, prob],\n            prob: Math.max(old.prob, prob),\n            type: old.prob > prob ? old.type : type,\n          }\n        }\n      }\n      probIndex += positions.length\n    }\n    return maxProbModForPosition\n  }\n  return undefined\n}\n"],"names":["getAlignmentShapeColor","colorType","tag","feature","config","defaultColor","colorTagMap","get","Math","abs","colorByInsertSize","colorByStrand","colorByMappingQuality","fillColor","orientationType","readConfObject","LR","RR","RL","LL","orientationTypes","getOrientation","colorByOrientation","flags","strand","flipper","getStranded","colorByStrandedRnaSeq","tags","val","color_rev_strand","color_fwd_strand","color_nostrand","fillRect","ctx","l","t","w","h","cw","color","fillStyle","getColorBaseMap","theme","skip","deletion","insertion","hardclip","softclip","bases","palette","A","main","C","G","T","getCharWidthHeight","charWidth","measureText","charHeight","makeImageData","layoutRecords","canvasWidth","renderArgs","stopToken","showSoftClip","colorBy","configTheme","mismatchAlpha","minSubfeatureWidth","largeInsertionIndicatorScale","hideSmallIndels","createJBrowseTheme","colorMap","colorContrastMap","Object","fromEntries","entries","map","key","value","getContrastText","getContrastBaseMap","font","drawSNPsMuted","type","includes","forEachWithStopTokenCheck","feat","bpPerPx","regions","region","heightPx","topPx","s","e","CIGAR","flip","reversed","renderChevrons","cigarOps","parseCigar","drawLen","drawStart","i","length","opLen","op","leftPx","rightPx","bpSpanPx","beginPath","moveTo","lineTo","closePath","fill","renderAlignmentShape","scores","split","start","soffset","roffset","len","m","score","start0","renderPerBaseQuality","heightLim","seq","letter","r","fillText","renderPerBaseLettering","visibleModifications","isolatedModification","modifications","twoColor","getMaxProbModAtEachPosition","forEach","allProbs","prob","pos","mod","console","warn","col","sum","max","c","alphaColor","renderModifications","regionSequence","Error","fstart","fend","methBins","methProbs","hydroxyMethBins","hydroxyMethProbs","getMethBins","getCol","k","p","colord","alpha","toHslString","toLowerCase","j","l1","l2","leftPx2","rightPx2","renderMethylation","renderAlignment","drawIndels","pxPerBp","min","mismatches","extraHorizontallyFlippedOffset","mismatch","mstart","mlen","mbase","base","widthPx","baseColor","undefined","qual","round","contrastColor","txt","rwidth","insW","clipW","adjustPx","padding","renderMismatches","minFeatWidth","seqOffset","refOffset","s0","renderSoftClipping","color_fwd_strand_not_proper","color_rev_strand_not_proper","color_fwd_missing_mate","color_rev_missing_mate","color_fwd_diff_chr","color_rev_diff_chr","color_pair_lr","color_pair_rr","color_pair_rl","color_pair_ll","color_interchrom","color_longinsert","color_shortinsert","color_unknown","strokeColor","getPairedInsertSizeColor","f1","f2","stats","sameRef","refName","tlen","upper","lower","getPairedInsertSizeAndOrientationColor","getPairedOrientationColorOrDefault","f","fr","pair_orientation","type2","pairMap","getPairedOrientationColor","fstrand","mm","getTagAlt","ops","getModPositions","probabilities","getModProbabilities","maxProbModForPosition","probIndex","positions","ref","idx","getNextRefPos","old"],"sourceRoot":""}