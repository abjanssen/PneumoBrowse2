{"version":3,"file":"static/js/8109.dcbe99d3.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VariantFeatureWidget/AnnotGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantAnnotationTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/variantFieldDescriptions.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["import React, { useState } from 'react'\n\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\n\nimport type { GridColDef, GridValidRowModel } from '@mui/x-data-grid'\n\nexport default function VariantAnnotPanel({\n  rows,\n  columns,\n}: {\n  rows: GridValidRowModel[]\n  columns: GridColDef[]\n}) {\n  const [checked, setChecked] = useState(false)\n  const widths = columns.map(e => measureGridWidth(rows.map(r => r[e.field])))\n\n  return rows.length ? (\n    <div>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => {\n              setChecked(event.target.checked)\n            }}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n\n      <DataGrid\n        rowHeight={25}\n        rows={rows}\n        columns={columns.map((c, i) => ({ ...c, width: widths[i] }))}\n        slots={{ toolbar: checked ? GridToolbar : null }}\n      />\n    </div>\n  ) : null\n}\n","import React from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\n\nimport AnnotGrid from './AnnotGrid'\n\nexport default function VariantAnnotationTable({\n  data,\n  fields,\n  title,\n}: {\n  data: string[]\n  fields: string[]\n  title: string\n}) {\n  return data.length ? (\n    <BaseCard title={title}>\n      <AnnotGrid\n        rows={data.map((elt, id) => ({\n          id,\n          ...Object.fromEntries(elt.split('|').map((e, i) => [fields[i], e])),\n        }))}\n        columns={fields.map(c => ({ field: c }))}\n      />\n    </BaseCard>\n  ) : null\n}\n","import React, { useState } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport {\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid'\n\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\ninterface Entry {\n  sample: string\n  id: string\n  [key: string]: string\n}\n\ntype InfoFields = Record<string, unknown>\ntype Filters = Record<string, string>\n\nfunction SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event => {\n            setFilter({ ...filter, [field]: event.target.value })\n          }}\n        />\n      ))}\n    </>\n  )\n}\n\nexport default function VariantSamples(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: { FORMAT?: Record<string, { Description?: string }> } | null\n}) {\n  const { feature, descriptions = {} } = props\n  const [filter, setFilter] = useState<Filters>({})\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const preFilteredRows = Object.entries(samples)\n\n  let error: unknown\n  let rows = [] as Entry[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(row => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(row[1]).map(e => [e[0], `${e[1]}`]),\n          ),\n          sample: row[0],\n          id: row[0],\n        } as Entry\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? new RegExp(currFilter, 'i').exec(row[key]!)\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    error = e\n  }\n\n  const [checked, setChecked] = useState(false)\n  const keys = ['sample', ...Object.keys(preFilteredRows[0]?.[1] || {})]\n  const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])))\n  const columns = keys.map((field, index) => ({\n    field,\n    description: descriptions?.FORMAT?.[field]?.Description,\n    width: widths[index],\n  }))\n\n  // disableRowSelectionOnClick helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return !preFilteredRows.length ? null : (\n    <BaseCard {...props} title=\"Samples\">\n      {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={event => {\n              setChecked(event.target.checked)\n            }}\n          />\n        }\n        label={<Typography variant=\"body2\">Show options</Typography>}\n      />\n      {checked ? (\n        <SampleFilters\n          setFilter={setFilter}\n          columns={columns}\n          filter={filter}\n        />\n      ) : null}\n\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\n        <DataGrid\n          rows={rows}\n          hideFooter={rows.length < 100}\n          columns={columns}\n          disableRowSelectionOnClick\n          rowHeight={25}\n          columnHeaderHeight={35}\n          disableColumnMenu\n          slots={{ toolbar: checked ? GridToolbar : null }}\n          slotProps={{\n            toolbar: {\n              printOptions: {\n                disableToolbarButton: true,\n              },\n            },\n          }}\n        />\n      </div>\n    </BaseCard>\n  )\n}\n","export const variantFieldDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n","import React, { Suspense, lazy } from 'react'\n\nimport { parseBreakend } from '@gmod/vcf'\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport VariantAnnotationTable from './VariantAnnotationTable'\nimport VariantSampleGrid from './VariantSampleGrid'\nimport { variantFieldDescriptions } from './variantFieldDescriptions'\n\nimport type { VariantFeatureWidgetModel } from './stateModelFactory'\n\n// lazies\nconst LaunchBreakendPanel = lazy(() => import('./LaunchBreakendPanel'))\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: {\n    INFO?: {\n      ANN?: {\n        Description?: string\n      }\n    }\n  }\n  feature: {\n    INFO?: {\n      ANN?: string[]\n    }\n  }\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1]?.split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantAnnotationTable\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: { INFO?: { CSQ?: { Description?: string } } }\n  feature: { INFO?: { CSQ?: string[] } }\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1]?.split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantAnnotationTable\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData, descriptions } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { samples, ALT, type = '', ...rest } = feat\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{ ...variantFieldDescriptions, ...descriptions }}\n        {...props}\n      />\n      <CsqPanel feature={rest} descriptions={descriptions} />\n      <AnnPanel feature={rest} descriptions={descriptions} />\n      <Suspense fallback={null}>\n        {type === 'breakend' ? (\n          <LaunchBreakendPanel\n            feature={feat}\n            locStrings={feat.ALT.map(\n              (alt: string) => parseBreakend(alt)?.MatePosition || '',\n            )}\n            model={model}\n          />\n        ) : null}\n        {type === 'translocation' ? (\n          <LaunchBreakendPanel\n            feature={feat}\n            model={model}\n            locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n          />\n        ) : null}\n        {type === 'paired_feature' ? (\n          <LaunchBreakendPanel\n            feature={feat}\n            model={model}\n            locStrings={[`${feat.mate.refName}:${feat.mate.start}`]}\n          />\n        ) : null}\n        {type.includes('inversion') ||\n        type.includes('deletion') ||\n        type.includes('duplication') ||\n        type.includes('cnv') ||\n        type.includes('sv') ? (\n          <LaunchBreakendPanel\n            feature={{\n              uniqueId: 'random',\n              refName: feat.refName,\n              start: feat.start,\n              end: feat.start + 1,\n              mate: {\n                refName: feat.refName,\n                start: feat.end,\n                end: feat.end + 1,\n              },\n            }}\n            model={model}\n            locStrings={[`${feat.refName}:${feat.end}`]}\n          />\n        ) : null}\n      </Suspense>\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nexport default VariantFeatureWidget\n"],"names":["VariantAnnotPanel","rows","columns","checked","setChecked","useState","widths","map","e","measureGridWidth","r","field","length","React","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","DataGrid","rowHeight","c","i","width","slots","toolbar","GridToolbar","VariantAnnotationTable","data","fields","title","BaseCard","AnnotGrid","elt","id","Object","fromEntries","split","SampleFilters","filter","setFilter","TextField","key","placeholder","value","VariantSamples","props","feature","descriptions","samples","preFilteredRows","entries","error","filters","keys","row","sample","every","currFilter","RegExp","exec","index","description","FORMAT","Description","_extends","color","style","display","flexDirection","hideFooter","disableRowSelectionOnClick","columnHeaderHeight","disableColumnMenu","slotProps","printOptions","disableToolbarButton","variantFieldDescriptions","CHROM","POS","ID","REF","ALT","QUAL","FILTER","LaunchBreakendPanel","lazy","AnnPanel","annDesc","INFO","ANN","annFields","match","ann","CsqPanel","csqDescription","CSQ","csqFields","csq","observer","model","featureData","feat","JSON","parse","stringify","type","rest","Paper","FeatureDetails","Suspense","fallback","locStrings","alt","parseBreakend","MatePosition","CHR2","END","mate","refName","start","includes","uniqueId","end","VariantSampleGrid"],"sourceRoot":""}