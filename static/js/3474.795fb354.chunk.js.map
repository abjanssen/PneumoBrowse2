{"version":3,"file":"static/js/3474.795fb354.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/Axes.tsx","../../../plugins/dotplot-view/src/DotplotView/components/CursorIcon.tsx","../../../plugins/dotplot-view/src/DotplotView/components/DotplotControls.tsx","../../../plugins/dotplot-view/src/DotplotView/components/DotplotWarnings.tsx","../../../plugins/dotplot-view/src/DotplotView/components/PanButtons.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Header.tsx","../../../plugins/dotplot-view/src/DotplotView/components/ImportForm/ImportCustomTrack.tsx","../../../plugins/dotplot-view/src/DotplotView/components/ImportForm/util.ts","../../../plugins/dotplot-view/src/DotplotView/components/ImportForm/ImportSyntenyTrackSelector.tsx","../../../plugins/dotplot-view/src/DotplotView/components/ImportForm/index.tsx","../../../plugins/dotplot-view/src/DotplotView/components/DotplotView.tsx","../../../plugins/dotplot-view/src/DotplotView/components/Grid.tsx"],"sourcesContent":["import React from 'react'\n\nimport {\n  getFillProps,\n  getStrokeProps,\n  getTickDisplayStr,\n} from '@jbrowse/core/util'\nimport { bpToPx } from '@jbrowse/core/util/Base1DUtils'\nimport { useTheme } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { getBlockLabelKeysToHide } from './util'\n\nimport type { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()(() => ({\n  vtext: {\n    gridColumn: '1/2',\n    gridRow: '1/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n  htext: {\n    gridColumn: '2/2',\n    gridRow: '2/2',\n    pointerEvents: 'none',\n    userSelect: 'none',\n  },\n}))\nexport const HorizontalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderY } = model\n  const { classes } = useStyles()\n  return (\n    <svg width={viewWidth} height={borderY} className={classes.htext}>\n      <HorizontalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const HorizontalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewWidth, borderX, borderY, hview, htextRotation, hticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = hview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewWidth, offsetPx)\n  const theme = useTheme()\n  const hviewSnap = {\n    ...getSnapshot(hview),\n    width,\n    staticBlocks: hview.staticBlocks,\n  }\n\n  const ticks = hticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: hviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const x = region.offsetPx\n          const y = 0\n          const xoff = Math.floor(x - hview.offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${htextRotation},${xoff},${y})`}\n              key={JSON.stringify(region)}\n              x={xoff}\n              y={y + 1}\n              fontSize={11}\n              dominantBaseline=\"hanging\"\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, x]) =>\n        x > 0 && x < width ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            x1={x}\n            x2={x}\n            y1={0}\n            y2={tick.type === 'major' ? 6 : 4}\n            strokeWidth={1}\n            {...getFillProps(theme.palette.text.primary)}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, x]) =>\n          x > 10 && x < width ? (\n            <text\n              x={x - 7}\n              y={0}\n              transform={`rotate(${htextRotation},${x},0)`}\n              key={`text-${JSON.stringify(tick)}`}\n              fontSize={11}\n              dominantBaseline=\"middle\"\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={borderY - 12}\n        x={(viewWidth - borderX) / 2}\n        textAnchor=\"middle\"\n        fontSize={11}\n        dominantBaseline=\"hanging\"\n        {...getFillProps(theme.palette.text.primary)}\n      >\n        {hview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\nexport const VerticalAxis = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { borderX, viewHeight } = model\n  const { classes } = useStyles()\n  return (\n    <svg className={classes.vtext} width={borderX} height={viewHeight}>\n      <VerticalAxisRaw model={model} />\n    </svg>\n  )\n})\n\nexport const VerticalAxisRaw = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { viewHeight, borderX, borderY, vview, vtextRotation, vticks } = model\n  const { offsetPx, width, dynamicBlocks, bpPerPx } = vview\n  const dblocks = dynamicBlocks.contentBlocks\n  const hide = getBlockLabelKeysToHide(dblocks, viewHeight, offsetPx)\n  const theme = useTheme()\n  const vviewSnap = {\n    ...getSnapshot(vview),\n    width,\n    staticBlocks: vview.staticBlocks,\n  }\n  const ticks = vticks\n    .map(\n      tick =>\n        [\n          tick,\n          bpToPx({\n            refName: tick.refName,\n            coord: tick.base,\n            self: vviewSnap,\n          })?.offsetPx,\n        ] as const,\n    )\n    .filter(f => f[1] !== undefined)\n    .map(f => [f[0], f[1]! - offsetPx] as const)\n\n  return (\n    <>\n      {dblocks\n        .filter(region => !hide.has(region.key))\n        .map(region => {\n          const y = region.offsetPx\n          const x = borderX\n          const yoff = Math.floor(viewHeight - y + offsetPx)\n\n          return (\n            <text\n              transform={`rotate(${vtextRotation},${x},${y})`}\n              key={JSON.stringify(region)}\n              x={x}\n              y={yoff}\n              fontSize={11}\n              textAnchor=\"end\"\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {region.refName}\n            </text>\n          )\n        })}\n      {ticks.map(([tick, y]) =>\n        y > 0 ? (\n          <line\n            key={`line-${JSON.stringify(tick)}`}\n            y1={viewHeight - y}\n            y2={viewHeight - y}\n            x1={borderX}\n            x2={borderX - (tick.type === 'major' ? 6 : 4)}\n            strokeWidth={1}\n            {...getStrokeProps(theme.palette.grey[400])}\n          />\n        ) : null,\n      )}\n      {ticks\n        .filter(t => t[0].type === 'major')\n        .map(([tick, y]) =>\n          y > 10 && y < viewHeight ? (\n            <text\n              y={viewHeight - y - 3}\n              x={borderX - 7}\n              key={`text-${JSON.stringify(tick)}`}\n              textAnchor=\"end\"\n              dominantBaseline=\"hanging\"\n              fontSize={11}\n              {...getFillProps(theme.palette.text.primary)}\n            >\n              {getTickDisplayStr(tick.base + 1, bpPerPx)}\n            </text>\n          ) : null,\n        )}\n      <text\n        y={(viewHeight - borderY) / 2}\n        x={12}\n        transform={`rotate(-90,12,${(viewHeight - borderY) / 2})`}\n        textAnchor=\"middle\"\n        fontSize={11}\n        {...getFillProps(theme.palette.text.primary)}\n      >\n        {vview.assemblyNames.join(',')}\n      </text>\n    </>\n  )\n})\n","import React from 'react'\n\nimport SvgIcon from '@mui/material/SvgIcon'\n\nimport type { SvgIconProps } from '@mui/material/SvgIcon'\n\nexport function CursorMove(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M13,6V11H18V7.75L22.25,12L18,16.25V13H13V18H16.25L12,22.25L7.75,18H11V13H6V16.25L1.75,12L6,7.75V11H11V6H7.75L12,1.75L16.25,6H13Z\"\n      />\n    </SvgIcon>\n  )\n}\n\nexport function CursorMouse(props: SvgIconProps) {\n  return (\n    <SvgIcon {...props}>\n      <path\n        fill=\"currentColor\"\n        d=\"M10.07,14.27C10.57,14.03 11.16,14.25 11.4,14.75L13.7,19.74L15.5,18.89L13.19,13.91C12.95,13.41 13.17,12.81 13.67,12.58L13.95,12.5L16.25,12.05L8,5.12V15.9L9.82,14.43L10.07,14.27M13.64,21.97C13.14,22.21 12.54,22 12.31,21.5L10.13,16.76L7.62,18.78C7.45,18.92 7.24,19 7,19A1,1 0 0,1 6,18V3A1,1 0 0,1 7,2C7.24,2 7.47,2.09 7.64,2.23L7.65,2.22L19.14,11.86C19.57,12.22 19.62,12.85 19.27,13.27C19.12,13.45 18.91,13.57 18.7,13.61L15.54,14.23L17.74,18.96C18,19.46 17.76,20.05 17.26,20.28L13.64,21.97Z\"\n      />\n    </SvgIcon>\n  )\n}\n","import React from 'react'\n\nimport CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton'\nimport { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons'\nimport MoreVert from '@mui/icons-material/MoreVert'\nimport ZoomIn from '@mui/icons-material/ZoomIn'\nimport ZoomOut from '@mui/icons-material/ZoomOut'\nimport { IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { CursorMouse, CursorMove } from './CursorIcon'\n\nimport type { DotplotViewModel } from '../model'\n\nconst DotplotControls = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  return (\n    <div>\n      <IconButton\n        onClick={() => {\n          model.zoomOut()\n        }}\n      >\n        <ZoomOut />\n      </IconButton>\n\n      <IconButton\n        onClick={() => {\n          model.zoomIn()\n        }}\n      >\n        <ZoomIn />\n      </IconButton>\n\n      <IconButton\n        onClick={() => model.activateTrackSelector()}\n        title=\"Open track selector\"\n      >\n        <TrackSelectorIcon />\n      </IconButton>\n\n      <CascadingMenuButton\n        menuItems={[\n          {\n            onClick: () => {\n              model.squareView()\n            },\n            label: 'Square view - same base pairs per pixel',\n          },\n          {\n            onClick: () => {\n              model.squareViewProportional()\n            },\n            label: 'Rectanglularize view - same total bp',\n          },\n          {\n            onClick: () => {\n              model.showAllRegions()\n            },\n            label: 'Show all regions',\n          },\n          {\n            onClick: () => {\n              model.setDrawCigar(!model.drawCigar)\n            },\n            type: 'checkbox',\n            label: 'Draw CIGAR',\n            checked: model.drawCigar,\n          },\n          {\n            onClick: () => {\n              model.setShowPanButtons(!model.showPanButtons)\n            },\n            label: 'Show pan buttons',\n            type: 'checkbox',\n            checked: model.showPanButtons,\n          },\n          {\n            label: 'Click and drag mode',\n            subMenu: [\n              {\n                onClick: () => {\n                  model.setCursorMode('move')\n                },\n                label:\n                  'Pan by default, select region when ctrl/cmd key is held',\n                icon: CursorMove,\n                type: 'radio',\n                checked: model.cursorMode === 'move',\n              },\n              {\n                onClick: () => {\n                  model.setCursorMode('crosshair')\n                },\n                label:\n                  'Select region by default, pan when ctrl/cmd key is held',\n                icon: CursorMouse,\n                type: 'radio',\n                checked: model.cursorMode === 'crosshair',\n              },\n            ],\n          },\n          {\n            label: 'Wheel scroll mode',\n            subMenu: [\n              {\n                onClick: () => {\n                  model.setWheelMode('pan')\n                },\n                label: 'Pans view',\n                type: 'radio',\n                checked: model.wheelMode === 'pan',\n              },\n              {\n                onClick: () => {\n                  model.setWheelMode('zoom')\n                },\n                label: 'Zooms view',\n                type: 'radio',\n                checked: model.wheelMode === 'zoom',\n              },\n              {\n                onClick: () => {\n                  model.setWheelMode('none')\n                },\n                label: 'Disable',\n                type: 'radio',\n                checked: model.wheelMode === 'none',\n              },\n            ],\n          },\n        ]}\n      >\n        <MoreVert />\n      </CascadingMenuButton>\n    </div>\n  )\n})\n\nexport default DotplotControls\n","import React, { lazy, useState } from 'react'\n\nimport { Alert, Button } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { DotplotViewModel } from '../model'\n// lazy components\nconst WarningDialog = lazy(() => import('./WarningDialog'))\n\nconst DotplotWarnings = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const trackWarnings = model.tracks.filter(t => t.displays[0].warnings?.length)\n  const [shown, setShown] = useState(false)\n  const [hide, setHide] = useState(false)\n  return trackWarnings.length && !hide ? (\n    <Alert severity=\"warning\">\n      Warnings during render{' '}\n      <Button\n        onClick={() => {\n          setShown(true)\n        }}\n      >\n        More info\n      </Button>\n      {shown ? (\n        <WarningDialog\n          trackWarnings={trackWarnings}\n          handleClose={() => {\n            setShown(false)\n          }}\n        />\n      ) : null}\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          setHide(true)\n        }}\n      >\n        Dismiss\n      </Button>\n    </Alert>\n  ) : null\n})\n\nexport default DotplotWarnings\n","import React from 'react'\n\nimport ArrowDropDown from '@mui/icons-material/ArrowDropDown'\nimport ArrowDropUp from '@mui/icons-material/ArrowDropUp'\nimport ArrowLeft from '@mui/icons-material/ArrowLeft'\nimport ArrowRight from '@mui/icons-material/ArrowRight'\nimport ZoomIn from '@mui/icons-material/ZoomIn'\nimport ZoomOut from '@mui/icons-material/ZoomOut'\nimport { IconButton, Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()({\n  dpad: {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(3, 1fr)',\n    margin: 0,\n    position: 'absolute',\n    right: 50,\n    zIndex: 1000,\n    top: 50,\n  },\n  icon: {\n    padding: 0,\n    margin: 0,\n  },\n})\n\nconst PanButtons = observer(function PanButtons({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <Paper className={classes.dpad} elevation={6}>\n      <div />\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.vview.scroll(100)\n        }}\n      >\n        <ArrowDropUp />\n      </IconButton>\n      <div />\n\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.hview.scroll(-100)\n        }}\n      >\n        <ArrowLeft />\n      </IconButton>\n      <div />\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.hview.scroll(100)\n        }}\n      >\n        <ArrowRight />\n      </IconButton>\n\n      <div />\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.vview.scroll(-100)\n        }}\n      >\n        <ArrowDropDown />\n      </IconButton>\n      <div />\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.zoomIn()\n        }}\n      >\n        <ZoomIn />\n      </IconButton>\n      <div />\n      <IconButton\n        className={classes.icon}\n        onClick={() => {\n          model.zoomOut()\n        }}\n      >\n        <ZoomOut />\n      </IconButton>\n    </Paper>\n  )\n})\n\nexport default PanButtons\n","import React from 'react'\n\nimport { getBpDisplayStr } from '@jbrowse/core/util'\nimport { Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport DotplotControls from './DotplotControls'\nimport DotplotWarnings from './DotplotWarnings'\nimport PanButtons from './PanButtons'\n\nimport type { DotplotViewModel } from '../model'\n\nconst useStyles = makeStyles()({\n  bp: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 10,\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  headerBar: {\n    display: 'flex',\n    position: 'relative',\n  },\n})\n\nconst DotplotHeader = observer(function ({\n  model,\n  selection,\n}: {\n  model: DotplotViewModel\n  selection?: { width: number; height: number }\n}) {\n  const { classes } = useStyles()\n  const { hview, vview, showPanButtons } = model\n  return (\n    <div className={classes.headerBar}>\n      <DotplotControls model={model} />\n      <Typography className={classes.bp} variant=\"body2\" color=\"textSecondary\">\n        x: {hview.assemblyNames.join(',')} {getBpDisplayStr(hview.currBp)}\n        <br />\n        y: {vview.assemblyNames.join(',')} {getBpDisplayStr(vview.currBp)}\n      </Typography>\n      {selection ? (\n        <Typography\n          className={classes.bp}\n          variant=\"body2\"\n          color=\"textSecondary\"\n        >\n          {`width:${getBpDisplayStr(hview.bpPerPx * selection.width)}`} <br />\n          {`height:${getBpDisplayStr(vview.bpPerPx * selection.height)}`}\n        </Typography>\n      ) : null}\n      <div className={classes.spacer} />\n      <DotplotWarnings model={model} />\n      {showPanButtons ? <PanButtons model={model} /> : null}\n    </div>\n  )\n})\n\nexport default DotplotHeader\n","import React, { useEffect, useState } from 'react'\n\nimport { ErrorMessage, FileSelector } from '@jbrowse/core/ui'\nimport {\n  FormControlLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { basename, extName, getName, stripGz } from './util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { FileLocation } from '@jbrowse/core/util/types'\nimport type { SnapshotIn } from 'mobx-state-tree'\n\nfunction getAdapter({\n  radioOption,\n  assembly1,\n  assembly2,\n  fileLocation,\n  indexFileLocation,\n  bed1Location,\n  bed2Location,\n}: {\n  radioOption: string\n  assembly1: string\n  assembly2: string\n  fileLocation?: FileLocation\n  indexFileLocation?: FileLocation\n  bed1Location?: FileLocation\n  bed2Location?: FileLocation\n}) {\n  if (radioOption === '.paf') {\n    return {\n      type: 'PAFAdapter',\n      pafLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.out') {\n    return {\n      type: 'MashMapAdapter',\n      outLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.delta') {\n    return {\n      type: 'DeltaAdapter',\n      deltaLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.chain') {\n    return {\n      type: 'ChainAdapter',\n      chainLocation: fileLocation,\n      queryAssembly: assembly1,\n      targetAssembly: assembly2,\n    }\n  } else if (radioOption === '.anchors') {\n    return {\n      type: 'MCScanAnchorsAdapter',\n      mcscanAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.anchors.simple') {\n    return {\n      type: 'MCScanSimpleAnchorsAdapter',\n      mcscanSimpleAnchorsLocation: fileLocation,\n      bed1Location,\n      bed2Location,\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else if (radioOption === '.pif.gz') {\n    return {\n      type: 'PairwiseIndexedPAFAdapter',\n      pifGzLocation: fileLocation,\n      index: { location: indexFileLocation },\n      assemblyNames: [assembly1, assembly2],\n    }\n  } else {\n    throw new Error(\n      `Unknown to detect type ${radioOption} from filename (select radio button to clarify)`,\n    )\n  }\n}\n\ntype Conf = SnapshotIn<AnyConfigurationModel>\n\nconst ImportCustomTrack = observer(function ({\n  assembly1,\n  assembly2,\n  setSessionTrackData,\n}: {\n  sessionTrackData: Conf\n  assembly1: string\n  assembly2: string\n  setSessionTrackData: (arg: Conf) => void\n}) {\n  const [bed2Location, setBed2Location] = useState<FileLocation>()\n  const [bed1Location, setBed1Location] = useState<FileLocation>()\n  const [fileLocation, setFileLocation] = useState<FileLocation>()\n  const [indexFileLocation, setIndexFileLocation] = useState<FileLocation>()\n  const [value, setValue] = useState('')\n  const [error, setError] = useState<unknown>()\n  const fileName = getName(fileLocation)\n\n  const radioOption = value || (fileName ? extName(stripGz(fileName)) : '')\n\n  useEffect(() => {\n    try {\n      if (fileLocation) {\n        const fn = fileName ? basename(fileName) : 'MyTrack'\n        const trackId = `${fn}-${Date.now()}`\n        setError(undefined)\n\n        setSessionTrackData({\n          trackId,\n          name: fn,\n          assemblyNames: [assembly2, assembly1],\n          type: 'SyntenyTrack',\n          adapter: getAdapter({\n            radioOption,\n            assembly1,\n            assembly2,\n            fileLocation,\n            indexFileLocation,\n            bed1Location,\n            bed2Location,\n          }),\n        })\n      }\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }, [\n    fileName,\n    assembly1,\n    assembly2,\n    bed1Location,\n    bed2Location,\n    fileLocation,\n    indexFileLocation,\n    radioOption,\n    setSessionTrackData,\n  ])\n  return (\n    <Paper style={{ padding: 12 }}>\n      {error ? <ErrorMessage error={error} /> : null}\n      <Typography style={{ textAlign: 'center' }}>\n        Add a .paf, .out (MashMap), .delta (Mummer), .chain, .anchors or\n        .anchors.simple (MCScan) file to view. These file types can also be\n        gzipped. The first assembly should be the query sequence (e.g. left\n        column of the PAF) and the second assembly should be the target sequence\n        (e.g. right column of the PAF)\n      </Typography>\n      <RadioGroup\n        value={radioOption}\n        onChange={event => {\n          setValue(event.target.value)\n        }}\n      >\n        <Grid container justifyContent=\"center\">\n          <Grid item>\n            <FormControlLabel value=\".paf\" control={<Radio />} label=\".paf\" />\n          </Grid>\n          <Grid item>\n            <FormControlLabel value=\".out\" control={<Radio />} label=\".out\" />\n          </Grid>\n\n          <Grid item>\n            <FormControlLabel\n              value=\".delta\"\n              control={<Radio />}\n              label=\".delta\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              value=\".chain\"\n              control={<Radio />}\n              label=\".chain\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              value=\".anchors\"\n              control={<Radio />}\n              label=\".anchors\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              value=\".anchors.simple\"\n              control={<Radio />}\n              label=\".anchors.simple\"\n            />\n          </Grid>\n          <Grid item>\n            <FormControlLabel\n              value=\".pif.gz\"\n              control={<Radio />}\n              label=\".pif.gz\"\n            />\n          </Grid>\n        </Grid>\n      </RadioGroup>\n      <Grid container justifyContent=\"center\">\n        <Grid item>\n          {value === '.anchors' || value === '.anchors.simple' ? (\n            <div>\n              <div style={{ margin: 20 }}>\n                Open the {value} and .bed files for both genome assemblies from\n                the MCScan (Python version) pipeline{' '}\n                <a href=\"https://github.com/tanghaibao/jcvi/wiki/MCscan-(Python-version)\">\n                  (more info)\n                </a>\n              </div>\n              <div style={{ display: 'flex' }}>\n                <div>\n                  <FileSelector\n                    name=\".anchors file\"\n                    description=\"\"\n                    location={fileLocation}\n                    setLocation={loc => {\n                      setFileLocation(loc)\n                    }}\n                  />\n                </div>\n                <div>\n                  <FileSelector\n                    name=\"genome 1 .bed (left column of anchors file)\"\n                    description=\"\"\n                    location={bed1Location}\n                    setLocation={loc => {\n                      setBed1Location(loc)\n                    }}\n                  />\n                </div>\n                <div>\n                  <FileSelector\n                    name=\"genome 2 .bed (right column of anchors file)\"\n                    description=\"\"\n                    location={bed2Location}\n                    setLocation={loc => {\n                      setBed2Location(loc)\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          ) : value === '.pif.gz' ? (\n            <div style={{ display: 'flex' }}>\n              <div>\n                <FileSelector\n                  name={`${value} location`}\n                  description=\"\"\n                  location={fileLocation}\n                  setLocation={loc => {\n                    setFileLocation(loc)\n                  }}\n                />\n              </div>\n              <div>\n                <FileSelector\n                  name={`${value} index location`}\n                  description=\"\"\n                  location={indexFileLocation}\n                  setLocation={loc => {\n                    setIndexFileLocation(loc)\n                  }}\n                />\n              </div>\n            </div>\n          ) : (\n            <FileSelector\n              name={value ? `${value} location` : ''}\n              description=\"\"\n              location={fileLocation}\n              setLocation={loc => {\n                setFileLocation(loc)\n              }}\n            />\n          )}\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n})\n\nexport default ImportCustomTrack\n","export function getName(\n  sessionTrackData?: { uri: string } | { localPath: string } | { name: string },\n) {\n  return sessionTrackData\n    ? // @ts-expect-error\n      sessionTrackData.uri ||\n        // @ts-expect-error\n        sessionTrackData.localPath ||\n        // @ts-expect-error\n        sessionTrackData.name\n    : undefined\n}\n\nexport function stripGz(fileName: string) {\n  return fileName.endsWith('.gz') ? fileName.slice(0, -3) : fileName\n}\n\nexport function basename(str: string) {\n  return str.split('#')[0]!.split('?')[0]!.split('/').pop()\n}\nexport function extName(str: string) {\n  const r = str.split('.').pop()\n  return r ? `.${r}` : ''\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { TrackSelector as TrackSelectorIcon } from '@jbrowse/core/ui/Icons'\nimport { getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport { MenuItem, Paper, Select, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { DotplotViewModel } from '../../model'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nfunction f(track: AnyConfigurationModel, assembly1: string, assembly2: string) {\n  const assemblyNames = readConfObject(track, 'assemblyNames')\n  return (\n    assemblyNames.includes(assembly1) &&\n    assemblyNames.includes(assembly2) &&\n    track.type.includes('Synteny')\n  )\n}\n\nconst Selector = observer(\n  ({\n    model,\n    assembly1,\n    assembly2,\n    setShowTrackId,\n  }: {\n    model: DotplotViewModel\n    assembly1: string\n    assembly2: string\n    setShowTrackId: (arg: string) => void\n  }) => {\n    const session = getSession(model)\n    const { tracks, sessionTracks } = session\n    const allTracks = [\n      ...tracks,\n      ...(sessionTracks || []),\n    ] as AnyConfigurationModel[]\n    const filteredTracks = allTracks.filter(t => f(t, assembly2, assembly1))\n    const resetTrack = filteredTracks[0]?.trackId || ''\n    const [value, setValue] = useState(resetTrack)\n    useEffect(() => {\n      // if assembly1/assembly2 changes, then we will want to use this effect to change\n      // the state of the useState because it otherwise gets locked to a stale value\n      setValue(resetTrack)\n    }, [resetTrack])\n\n    useEffect(() => {\n      // sets track data in a useEffect because the initial load is needed as well as\n      // onChange's to the select box\n      setShowTrackId(value)\n    }, [value, setShowTrackId])\n\n    return (\n      <Paper style={{ padding: 12 }}>\n        <Typography paragraph>\n          Select a track from the select box below, the track will be shown when\n          you hit \"Launch\".\n        </Typography>\n\n        <Typography paragraph>\n          Note: there is a track selector <i>inside</i> the DotplotView, which\n          can turn on one or more SyntenyTracks (more than one can be displayed\n          at once). Look for the track selector icon <TrackSelectorIcon />\n        </Typography>\n        {filteredTracks.length ? (\n          <Select\n            value={value}\n            onChange={event => {\n              setValue(event.target.value)\n            }}\n          >\n            {filteredTracks.map(track => (\n              <MenuItem key={track.trackId} value={track.trackId}>\n                {getTrackName(track, session)}\n              </MenuItem>\n            ))}\n          </Select>\n        ) : (\n          <ErrorMessage\n            error={`No synteny tracks found for ${assembly1},${assembly2}`}\n          />\n        )}\n      </Paper>\n    )\n  },\n)\n\nexport default Selector\n","import React, { useEffect, useState } from 'react'\n\nimport { AssemblySelector, ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util'\nimport {\n  Button,\n  Container,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  Grid,\n  Paper,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\nimport { transaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ImportCustomTrack from './ImportCustomTrack'\nimport ImportSyntenyTrackSelector from './ImportSyntenyTrackSelector'\n\nimport type { DotplotViewModel } from '../../model'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { SnapshotIn } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(4),\n    margin: '0 auto',\n  },\n  assemblySelector: {\n    width: '75%',\n    margin: '0 auto',\n  },\n}))\n\ntype Conf = SnapshotIn<AnyConfigurationModel>\n\nfunction TrackSelector({\n  setSessionTrackData,\n  setShowTrackId,\n  sessionTrackData,\n  assembly1,\n  assembly2,\n  model,\n}: {\n  sessionTrackData: Conf\n  setSessionTrackData: (arg: Conf) => void\n  setShowTrackId: (arg?: string) => void\n  model: DotplotViewModel\n  assembly1: string\n  assembly2: string\n}) {\n  const [choice, setChoice] = useState('tracklist')\n\n  useEffect(() => {\n    if (choice === 'none') {\n      setSessionTrackData(undefined)\n      setShowTrackId(undefined)\n    }\n  }, [choice, setSessionTrackData, setShowTrackId])\n  return (\n    <>\n      <FormControl>\n        <FormLabel id=\"group-label\">\n          (Optional) Select or add a synteny track\n        </FormLabel>\n        <RadioGroup\n          row\n          value={choice}\n          onChange={event => {\n            setChoice(event.target.value)\n          }}\n          aria-labelledby=\"group-label\"\n        >\n          <FormControlLabel value=\"none\" control={<Radio />} label=\"None\" />\n          <FormControlLabel\n            value=\"tracklist\"\n            control={<Radio />}\n            label=\"Existing track\"\n          />\n          <FormControlLabel\n            value=\"custom\"\n            control={<Radio />}\n            label=\"New track\"\n          />\n        </RadioGroup>\n      </FormControl>\n      {choice === 'custom' ? (\n        <ImportCustomTrack\n          setSessionTrackData={setSessionTrackData}\n          sessionTrackData={sessionTrackData}\n          assembly2={assembly2}\n          assembly1={assembly1}\n        />\n      ) : null}\n      {choice === 'tracklist' ? (\n        <ImportSyntenyTrackSelector\n          model={model}\n          assembly1={assembly1}\n          assembly2={assembly2}\n          setShowTrackId={setShowTrackId}\n        />\n      ) : null}\n    </>\n  )\n}\n\nconst DotplotImportForm = observer(({ model }: { model: DotplotViewModel }) => {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames } = session\n  const [assembly2, setAssembly2] = useState(assemblyNames[0] || '')\n  const [assembly1, setAssembly1] = useState(assemblyNames[0] || '')\n  const [error, setError] = useState<unknown>()\n  const [sessionTrackData, setSessionTrackData] = useState<Conf>()\n  const [showTrackId, setShowTrackId] = useState<string>()\n\n  function onOpenClick() {\n    try {\n      if (!isSessionWithAddTracks(session)) {\n        return\n      }\n      setError(undefined)\n      model.setError(undefined)\n      transaction(() => {\n        if (sessionTrackData) {\n          session.addTrackConf(sessionTrackData)\n          model.toggleTrack(sessionTrackData.trackId)\n        } else if (showTrackId) {\n          model.showTrack(showTrackId)\n        }\n\n        model.setViews([\n          { bpPerPx: 0.1, offsetPx: 0 },\n          { bpPerPx: 0.1, offsetPx: 0 },\n        ])\n        model.setAssemblyNames(assembly2, assembly1)\n      })\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }\n\n  // this is a combination of any displayed error message we have\n  const displayError = error || model.error\n  return (\n    <Container className={classes.importFormContainer}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Grid\n        container\n        spacing={1}\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={classes.assemblySelector}\n      >\n        <Grid item>\n          <Paper style={{ padding: 12 }}>\n            <Typography style={{ textAlign: 'center' }}>\n              Select assemblies for dotplot view\n            </Typography>\n            <Grid\n              container\n              spacing={1}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <AssemblySelector\n                  selected={assembly1}\n                  onChange={val => {\n                    setAssembly1(val)\n                  }}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <AssemblySelector\n                  selected={assembly2}\n                  onChange={val => {\n                    setAssembly2(val)\n                  }}\n                  session={session}\n                />\n              </Grid>\n              <Grid item>\n                <FormControl>\n                  <Button\n                    onClick={onOpenClick}\n                    variant=\"contained\"\n                    color=\"primary\"\n                  >\n                    Launch\n                  </Button>\n                </FormControl>\n              </Grid>\n            </Grid>\n          </Paper>\n          <TrackSelector\n            setShowTrackId={setShowTrackId}\n            assembly2={assembly2}\n            assembly1={assembly1}\n            setSessionTrackData={setSessionTrackData}\n            sessionTrackData={sessionTrackData}\n            model={model}\n          />\n        </Grid>\n      </Grid>\n    </Container>\n  )\n})\n\nexport default DotplotImportForm\n","import React, { Suspense, lazy, useEffect, useRef, useState } from 'react'\n\nimport { LoadingEllipses, Menu, ResizeHandle } from '@jbrowse/core/ui'\nimport { transaction } from 'mobx'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { HorizontalAxis, VerticalAxis } from './Axes'\nimport Grid from './Grid'\nimport Header from './Header'\nimport ImportForm from './ImportForm'\n\nimport type { DotplotViewModel } from '../model'\n\nconst TooltipWhereClicked = lazy(() => import('./DotplotTooltipClick'))\nconst TooltipWhereMouseovered = lazy(() => import('./DotplotTooltipMouseover'))\n\nconst blank = { left: 0, top: 0, width: 0, height: 0 }\n\nconst useStyles = makeStyles()(theme => ({\n  spacer: {\n    gridColumn: '1/2',\n    gridRow: '2/2',\n  },\n  root: {\n    position: 'relative',\n    marginBottom: theme.spacing(1),\n    overflow: 'hidden',\n  },\n\n  container: {\n    display: 'grid',\n    padding: 5,\n    position: 'relative',\n  },\n  overlay: {\n    pointerEvents: 'none',\n    overflow: 'hidden',\n    display: 'flex',\n    width: '100%',\n    gridRow: '1/2',\n    gridColumn: '2/2',\n    zIndex: 100, // needs to be below controls\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n\n  content: {\n    position: 'relative',\n    gridColumn: '2/2',\n    gridRow: '1/2',\n  },\n\n  resizeHandle: {\n    height: 4,\n    background: '#ccc',\n    boxSizing: 'border-box',\n    borderTop: '1px solid #fafafa',\n  },\n}))\n\ntype Coord = [number, number] | undefined\ninterface Rect {\n  left: number\n  top: number\n}\n\n// produces offsetX/offsetY coordinates from a clientX and an element's\n// getBoundingClientRect\nfunction getOffset(coord: Coord, rect: Rect) {\n  return coord && ([coord[0] - rect.left, coord[1] - rect.top] as Coord)\n}\n\nconst RenderedComponent = observer(({ model }: { model: DotplotViewModel }) => {\n  const { classes } = useStyles()\n  return (\n    <div className={classes.overlay}>\n      {model.tracks.map(track => {\n        const [display] = track.displays\n        const { RenderingComponent } = display\n        return RenderingComponent ? (\n          <RenderingComponent\n            key={track.configuration.trackId}\n            model={display}\n          />\n        ) : null\n      })}\n    </div>\n  )\n})\n\nconst DotplotViewInternal = observer(function ({\n  model,\n}: {\n  model: DotplotViewModel\n}) {\n  const { classes } = useStyles()\n  const [mousecurrClient, setMouseCurrClient] = useState<Coord>()\n  const [mousedownClient, setMouseDownClient] = useState<Coord>()\n  const [mouseOvered, setMouseOvered] = useState(false)\n  const [mouseupClient, setMouseUpClient] = useState<Coord>()\n  const ref = useRef<HTMLDivElement>(null)\n  const root = useRef<HTMLDivElement>(null)\n  const distanceX = useRef(0)\n  const distanceY = useRef(0)\n  const scheduled = useRef(false)\n  const [ctrlKeyWasUsed, setCtrlKeyWasUsed] = useState(false)\n  const [ctrlKeyDown, setCtrlKeyDown] = useState(false)\n  const svg = ref.current?.getBoundingClientRect() || blank\n  const rootRect = ref.current?.getBoundingClientRect() || blank\n  const mousedown = getOffset(mousedownClient, svg)\n  const mousecurr = getOffset(mousecurrClient, svg)\n  const mouseup = getOffset(mouseupClient, svg)\n  const mouserect = mouseup || mousecurr\n  const mouserectClient = mouseupClient || mousecurrClient\n  const xdistance = mousedown && mouserect ? mouserect[0] - mousedown[0] : 0\n  const ydistance = mousedown && mouserect ? mouserect[1] - mousedown[1] : 0\n  const { hview, vview, wheelMode, cursorMode } = model\n\n  const validPan =\n    (cursorMode === 'move' && !ctrlKeyWasUsed) ||\n    (cursorMode === 'crosshair' && ctrlKeyWasUsed)\n\n  const validSelect =\n    (cursorMode === 'move' && ctrlKeyWasUsed) ||\n    (cursorMode === 'crosshair' && !ctrlKeyWasUsed)\n\n  // use non-React wheel handler to properly prevent body scrolling\n  useEffect(() => {\n    function onWheel(event: WheelEvent) {\n      event.preventDefault()\n\n      distanceX.current += event.deltaX\n      distanceY.current -= event.deltaY\n      if (!scheduled.current) {\n        scheduled.current = true\n\n        window.requestAnimationFrame(() => {\n          transaction(() => {\n            if (wheelMode === 'pan') {\n              hview.scroll(distanceX.current / 3)\n              vview.scroll(distanceY.current / 10)\n            } else if (wheelMode === 'zoom') {\n              if (\n                Math.abs(distanceY.current) > Math.abs(distanceX.current) * 2 &&\n                mousecurr\n              ) {\n                const val = distanceY.current < 0 ? 1.1 : 0.9\n                hview.zoomTo(hview.bpPerPx * val, mousecurr[0])\n                vview.zoomTo(\n                  vview.bpPerPx * val,\n                  rootRect.height - mousecurr[1],\n                )\n              }\n            }\n          })\n          scheduled.current = false\n          distanceX.current = 0\n          distanceY.current = 0\n        })\n      }\n    }\n    if (ref.current) {\n      const curr = ref.current\n      curr.addEventListener('wheel', onWheel)\n      return () => {\n        curr.removeEventListener('wheel', onWheel)\n      }\n    }\n    return () => {}\n  }, [hview, vview, wheelMode, mousecurr, rootRect.height])\n\n  useEffect(() => {\n    function globalMouseMove(event: MouseEvent) {\n      setMouseCurrClient([event.clientX, event.clientY])\n\n      if (mousecurrClient && mousedownClient && validPan && !mouseupClient) {\n        hview.scroll(-event.clientX + mousecurrClient[0])\n        vview.scroll(event.clientY - mousecurrClient[1])\n      }\n    }\n\n    window.addEventListener('mousemove', globalMouseMove)\n    return () => {\n      window.removeEventListener('mousemove', globalMouseMove)\n    }\n  }, [validPan, mousecurrClient, mousedownClient, mouseupClient, hview, vview])\n\n  useEffect(() => {\n    function globalCtrlKeyDown(event: KeyboardEvent) {\n      if (event.metaKey || event.ctrlKey) {\n        setCtrlKeyDown(true)\n      }\n    }\n    function globalCtrlKeyUp(event: KeyboardEvent) {\n      if (!event.metaKey && !event.ctrlKey) {\n        setCtrlKeyDown(false)\n      }\n    }\n    window.addEventListener('keydown', globalCtrlKeyDown)\n    window.addEventListener('keyup', globalCtrlKeyUp)\n    return () => {\n      window.removeEventListener('keydown', globalCtrlKeyDown)\n      window.addEventListener('keyup', globalCtrlKeyUp)\n    }\n  }, [])\n\n  // detect a mouseup after a mousedown was submitted, autoremoves mouseup once\n  // that single mouseup is set\n  useEffect(() => {\n    function globalMouseUp(event: MouseEvent) {\n      if (Math.abs(xdistance) > 3 && Math.abs(ydistance) > 3 && validSelect) {\n        setMouseUpClient([event.clientX, event.clientY])\n      } else {\n        setMouseDownClient(undefined)\n      }\n    }\n    if (mousedown && !mouseup) {\n      window.addEventListener('mouseup', globalMouseUp, true)\n      return () => {\n        window.removeEventListener('mouseup', globalMouseUp, true)\n      }\n    }\n    return () => {}\n  }, [validSelect, mousedown, mouseup, xdistance, ydistance])\n\n  return (\n    <div>\n      <Header\n        model={model}\n        selection={\n          !validSelect || !(mousedown && mouserect)\n            ? undefined\n            : {\n                width: Math.abs(xdistance),\n                height: Math.abs(ydistance),\n              }\n        }\n      />\n      <div\n        ref={root}\n        className={classes.root}\n        onMouseLeave={() => {\n          setMouseOvered(false)\n        }}\n        onMouseEnter={() => {\n          setMouseOvered(true)\n        }}\n      >\n        <div className={classes.container}>\n          <VerticalAxis model={model} />\n          <HorizontalAxis model={model} />\n          <div ref={ref} className={classes.content}>\n            {mouseOvered && validSelect ? (\n              <Suspense fallback={null}>\n                <TooltipWhereMouseovered\n                  model={model}\n                  mouserect={mouserect}\n                  mouserectClient={mouserectClient}\n                  xdistance={xdistance}\n                />\n              </Suspense>\n            ) : null}\n            {validSelect ? (\n              <Suspense fallback={null}>\n                <TooltipWhereClicked\n                  model={model}\n                  mousedown={mousedown}\n                  mousedownClient={mousedownClient}\n                  xdistance={xdistance}\n                  ydistance={ydistance}\n                />\n              </Suspense>\n            ) : null}\n            <div\n              style={{ cursor: ctrlKeyDown ? 'pointer' : cursorMode }}\n              onMouseDown={event => {\n                if (event.button === 0) {\n                  const { clientX, clientY } = event\n                  setMouseDownClient([clientX, clientY])\n                  setMouseCurrClient([clientX, clientY])\n                  setCtrlKeyWasUsed(ctrlKeyDown)\n                }\n              }}\n            >\n              <Grid model={model}>\n                {validSelect && mousedown && mouserect ? (\n                  <rect\n                    fill=\"rgba(255,0,0,0.3)\"\n                    x={Math.min(mouserect[0], mousedown[0])}\n                    y={Math.min(mouserect[1], mousedown[1])}\n                    width={Math.abs(xdistance)}\n                    height={Math.abs(ydistance)}\n                  />\n                ) : null}\n              </Grid>\n            </div>\n            <div className={classes.spacer} />\n          </div>\n          <RenderedComponent model={model} />\n          <Menu\n            open={Boolean(mouseup)}\n            onMenuItemClick={(_, callback) => {\n              callback()\n              setMouseUpClient(undefined)\n              setMouseDownClient(undefined)\n            }}\n            onClose={() => {\n              setMouseUpClient(undefined)\n              setMouseDownClient(undefined)\n            }}\n            anchorReference=\"anchorPosition\"\n            anchorPosition={\n              mouseupClient\n                ? {\n                    top: mouseupClient[1] + 50,\n                    left: mouseupClient[0] + 50,\n                  }\n                : undefined\n            }\n            style={{ zIndex: 10000 }}\n            menuItems={[\n              {\n                label: 'Zoom in',\n                onClick: () => {\n                  if (mousedown && mouseup) {\n                    model.zoomInToMouseCoords(mousedown, mouseup)\n                  }\n                  // below line is needed to prevent tooltip from sticking\n                  setMouseOvered(false)\n                },\n              },\n              {\n                label: 'Open linear synteny view',\n                onClick: () => {\n                  if (mousedown && mouseup) {\n                    model.onDotplotView(mousedown, mouseup)\n                  }\n                  // below line is needed to prevent tooltip from sticking\n                  setMouseOvered(false)\n                },\n              },\n            ]}\n          />\n        </div>\n        <ResizeHandle\n          onDrag={n => model.setHeight(model.height + n)}\n          className={classes.resizeHandle}\n        />\n      </div>\n    </div>\n  )\n})\nconst DotplotView = observer(function ({ model }: { model: DotplotViewModel }) {\n  const { initialized, loading, error } = model\n\n  if ((!initialized && !loading) || error) {\n    return <ImportForm model={model} />\n  }\n\n  if (loading) {\n    return <LoadingEllipses variant=\"h6\" />\n  }\n\n  return <DotplotViewInternal model={model} />\n})\n\nexport default DotplotView\n","import React from 'react'\n\nimport { getFillProps, getStrokeProps } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { DotplotViewModel } from '../model'\n\nexport const GridRaw = observer(function ({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight, hview, vview } = model\n  const hblocks = hview.dynamicBlocks.contentBlocks\n  const vblocks = vview.dynamicBlocks.contentBlocks\n  if (!hblocks.length || !vblocks.length) {\n    return null\n  }\n  const htop = hview.displayedRegionsTotalPx - hview.offsetPx\n  const vtop = vview.displayedRegionsTotalPx - vview.offsetPx\n  const hbottom = hblocks[0]!.offsetPx - hview.offsetPx\n  const vbottom = vblocks[0]!.offsetPx - vview.offsetPx\n  const theme = useTheme()\n  const stroke = theme.palette.divider\n\n  // Uses math.max/min avoid making very large SVG rect offscreen element,\n  // which can sometimes fail to draw\n  const rx = Math.max(hbottom, 0)\n  const ry = Math.max(viewHeight - vtop, 0)\n  const w = Math.min(htop - hbottom, viewWidth)\n  const h = Math.min(viewHeight - vbottom - ry, viewHeight)\n\n  let lastx = Number.POSITIVE_INFINITY\n  let lasty = Number.POSITIVE_INFINITY\n  return (\n    <>\n      <rect\n        x={rx}\n        y={ry}\n        width={w}\n        height={h}\n        {...getFillProps(theme.palette.background.default)}\n      />\n      <g>\n        {hblocks.map(region => {\n          const x = region.offsetPx - hview.offsetPx\n          const render = Math.floor(x) !== Math.floor(lastx)\n          if (render) {\n            lastx = x\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={x}\n              y1={0}\n              x2={x}\n              y2={viewHeight}\n              {...getStrokeProps(stroke)}\n            />\n          ) : null\n        })}\n        {vblocks.map(region => {\n          const y = viewHeight - (region.offsetPx - vview.offsetPx)\n          const render = Math.floor(y) !== Math.floor(lasty)\n          if (render) {\n            lasty = y\n          }\n          return render ? (\n            <line\n              key={JSON.stringify(region)}\n              x1={0}\n              y1={y}\n              x2={viewWidth}\n              y2={y}\n              {...getStrokeProps(stroke)}\n            />\n          ) : null\n        })}\n        <line\n          x1={htop}\n          y1={0}\n          x2={htop}\n          y2={viewHeight}\n          {...getStrokeProps(stroke)}\n        />\n        <line\n          x1={0}\n          y1={viewHeight - vtop}\n          x2={viewWidth}\n          y2={viewHeight - vtop}\n          {...getStrokeProps(stroke)}\n        />\n      </g>\n      {children}\n    </>\n  )\n})\n\nexport default function Grid({\n  model,\n  children,\n}: {\n  model: DotplotViewModel\n  children?: React.ReactNode\n}) {\n  const { viewWidth, viewHeight } = model\n  return (\n    <svg\n      width={viewWidth}\n      height={viewHeight}\n      style={{ background: 'rgba(0,0,0,0.12)' }}\n    >\n      <GridRaw model={model}>{children}</GridRaw>\n    </svg>\n  )\n}\n"],"names":["useStyles","makeStyles","vtext","gridColumn","gridRow","pointerEvents","userSelect","htext","HorizontalAxis","observer","model","viewWidth","borderY","classes","React","width","height","className","HorizontalAxisRaw","borderX","hview","htextRotation","hticks","offsetPx","dynamicBlocks","bpPerPx","dblocks","contentBlocks","hide","getBlockLabelKeysToHide","theme","useTheme","hviewSnap","getSnapshot","staticBlocks","ticks","map","tick","bpToPx","refName","coord","base","self","filter","f","undefined","region","has","key","x","xoff","Math","floor","_extends","transform","JSON","stringify","y","fontSize","dominantBaseline","textAnchor","getFillProps","palette","text","primary","x1","x2","y1","y2","type","strokeWidth","t","getTickDisplayStr","assemblyNames","join","VerticalAxis","viewHeight","VerticalAxisRaw","vview","vtextRotation","vticks","vviewSnap","yoff","getStrokeProps","grey","CursorMove","props","SvgIcon","fill","d","CursorMouse","IconButton","onClick","zoomOut","ZoomOut","zoomIn","ZoomIn","activateTrackSelector","title","TrackSelectorIcon","CascadingMenuButton","menuItems","squareView","label","squareViewProportional","showAllRegions","setDrawCigar","drawCigar","checked","setShowPanButtons","showPanButtons","subMenu","setCursorMode","icon","cursorMode","setWheelMode","wheelMode","MoreVert","WarningDialog","lazy","trackWarnings","tracks","displays","warnings","length","shown","setShown","useState","setHide","Alert","severity","Button","handleClose","variant","dpad","display","gridTemplateColumns","margin","position","right","zIndex","top","padding","Paper","elevation","scroll","ArrowDropUp","ArrowLeft","ArrowRight","ArrowDropDown","bp","alignItems","marginLeft","spacer","flexGrow","headerBar","selection","DotplotControls","Typography","color","getBpDisplayStr","currBp","DotplotWarnings","PanButtons","getAdapter","radioOption","assembly1","assembly2","fileLocation","indexFileLocation","bed1Location","bed2Location","pafLocation","queryAssembly","targetAssembly","outLocation","deltaLocation","chainLocation","mcscanAnchorsLocation","mcscanSimpleAnchorsLocation","pifGzLocation","index","location","Error","setSessionTrackData","setBed2Location","setBed1Location","setFileLocation","setIndexFileLocation","value","setValue","error","setError","fileName","sessionTrackData","uri","localPath","name","str","r","split","pop","extName","endsWith","slice","stripGz","useEffect","fn","trackId","Date","now","adapter","e","console","style","ErrorMessage","textAlign","RadioGroup","onChange","event","target","Grid","container","justifyContent","item","FormControlLabel","control","Radio","href","FileSelector","description","setLocation","loc","setShowTrackId","session","getSession","sessionTracks","filteredTracks","track","readConfObject","includes","resetTrack","paragraph","Select","MenuItem","getTrackName","importFormContainer","spacing","assemblySelector","TrackSelector","choice","setChoice","FormControl","FormLabel","id","row","ImportCustomTrack","ImportSyntenyTrackSelector","setAssembly2","setAssembly1","showTrackId","displayError","Container","AssemblySelector","selected","val","isSessionWithAddTracks","transaction","addTrackConf","toggleTrack","showTrack","setViews","setAssemblyNames","TooltipWhereClicked","TooltipWhereMouseovered","blank","left","root","marginBottom","overflow","overlay","cursor","content","resizeHandle","background","boxSizing","borderTop","getOffset","rect","RenderedComponent","RenderingComponent","configuration","DotplotViewInternal","mousecurrClient","setMouseCurrClient","mousedownClient","setMouseDownClient","mouseOvered","setMouseOvered","mouseupClient","setMouseUpClient","ref","useRef","distanceX","distanceY","scheduled","ctrlKeyWasUsed","setCtrlKeyWasUsed","ctrlKeyDown","setCtrlKeyDown","svg","current","getBoundingClientRect","rootRect","mousedown","mousecurr","mouseup","mouserect","mouserectClient","xdistance","ydistance","validPan","validSelect","onWheel","preventDefault","deltaX","deltaY","window","requestAnimationFrame","abs","zoomTo","curr","addEventListener","removeEventListener","globalMouseMove","clientX","clientY","globalCtrlKeyDown","metaKey","ctrlKey","globalCtrlKeyUp","globalMouseUp","Header","onMouseLeave","onMouseEnter","Suspense","fallback","onMouseDown","button","min","Menu","open","Boolean","onMenuItemClick","_","callback","onClose","anchorReference","anchorPosition","zoomInToMouseCoords","onDotplotView","ResizeHandle","onDrag","n","setHeight","initialized","loading","ImportForm","LoadingEllipses","GridRaw","children","hblocks","vblocks","htop","displayedRegionsTotalPx","vtop","hbottom","vbottom","stroke","divider","rx","max","ry","w","h","lastx","Number","POSITIVE_INFINITY","lasty","default","render"],"sourceRoot":""}