{"version":3,"file":"static/js/5064.04370db4.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/VariantFeatureWidget/AltFormatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Formatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Checkbox2.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantGenotypeFrequencyTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleFilters.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/util.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/variantFieldDescriptions.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { getMinimalDesc } from '../VcfFeature/util'\n\nexport default function AltFormatter({\n  value,\n  ref,\n}: {\n  value: string\n  ref: string\n}) {\n  const [show, setShow] = useState(false)\n  const alt = getMinimalDesc(ref, value)\n  return alt !== value ? (\n    <div>\n      <button\n        onClick={() => {\n          setShow(!show)\n        }}\n      >\n        {show ? 'Show simplified ALT' : 'Show raw ALT'}\n      </button>{' '}\n      {show ? value : getMinimalDesc(ref, value)}\n    </div>\n  ) : (\n    value\n  )\n}\n","import { useState } from 'react'\n\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' for long strings\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import { Checkbox, FormControlLabel, Typography } from '@mui/material'\n\nexport default function Checkbox2({\n  checked,\n  disabled,\n  label,\n  onChange,\n}: {\n  checked: boolean\n  disabled?: boolean\n  label: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  return (\n    <FormControlLabel\n      disabled={disabled}\n      control={<Checkbox checked={checked} onChange={onChange} />}\n      label={<Typography variant=\"body2\">{label}</Typography>}\n    />\n  )\n}\n","import { useState } from 'react'\n\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport type { FrequencyTable, VariantSampleGridRow } from './types'\n\nfunction toP(n: number) {\n  return n.toPrecision(3)\n}\n\nexport default function VariantGenotypeFrequencyTable({\n  rows,\n}: {\n  rows: VariantSampleGridRow[]\n}) {\n  const [useCounts, setUseCounts] = useState(false)\n\n  const summary = {} as FrequencyTable\n  if (!useCounts) {\n    for (const row of rows) {\n      const gt = row.GT\n      if (!summary[gt]) {\n        summary[gt] = {\n          count: 0,\n          GT: row.GT,\n          genotype: row.genotype,\n        }\n      }\n      summary[gt].count++\n    }\n  } else {\n    for (const row of rows) {\n      const alleleCounts = {} as Record<string, number>\n      const alleles = row.GT.split(/[/|]/)\n      for (const allele of alleles) {\n        alleleCounts[allele] = (alleleCounts[allele] || 0) + 1\n      }\n      const key = Object.entries(alleleCounts)\n        .map(([key, val]) => `${key}:${val}`)\n        .join(';')\n\n      if (!summary[key]) {\n        summary[key] = {\n          count: 0,\n          GT: key,\n          genotype: row.genotype,\n        }\n      }\n      summary[key].count++\n    }\n  }\n  const gridRows = Object.entries(summary).map(([key, val]) => ({\n    id: key,\n    ...val,\n    count: `${val.count} / ${rows.length}`,\n    frequency: `${toP((val.count / rows.length) * 100)}%`,\n  }))\n\n  const keys = gridRows[0] ? Object.keys(gridRows[0]) : []\n  const widths = keys.map(e =>\n    measureGridWidth(gridRows.map(r => `${r[e as keyof typeof r]}`)),\n  )\n\n  return (\n    <div>\n      <FormControlLabel\n        control={<Checkbox checked={useCounts} />}\n        label={\n          <Typography variant=\"body2\">\n            Use allele counts instead of exact GT\n          </Typography>\n        }\n        onChange={(_, checked) => {\n          setUseCounts(checked)\n        }}\n      />\n      <DataGridFlexContainer>\n        <DataGrid\n          rows={gridRows}\n          hideFooter\n          rowHeight={25}\n          columnHeaderHeight={35}\n          columns={[\n            {\n              field: 'GT',\n              width: widths[0],\n            },\n            {\n              field: 'count',\n              width: widths[1],\n            },\n            {\n              field: 'frequency',\n              width: widths[2],\n            },\n            {\n              field: 'genotype',\n              width: widths[3],\n            },\n          ]}\n        />\n      </DataGridFlexContainer>\n    </div>\n  )\n}\n","import { TextField, Typography } from '@mui/material'\n\ntype Filters = Record<string, string>\n\nexport default function SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event => {\n            setFilter({ ...filter, [field]: event.target.value })\n          }}\n        />\n      ))}\n    </>\n  )\n}\n","export function areSetsEqual<T>(set1: Set<T>, set2: Set<T>) {\n  if (set1.size !== set2.size) {\n    return false\n  }\n  for (const item of set1) {\n    if (!set2.has(item)) {\n      return false\n    }\n  }\n  return true\n}\n","import { useState } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport Checkbox2 from '../Checkbox2'\nimport VariantGenotypeFrequencyTable from './VariantGenotypeFrequencyTable'\nimport SampleFilters from './VariantSampleFilters'\nimport { areSetsEqual } from './util'\nimport { makeSimpleAltString } from '../../VcfFeature/util'\n\nimport type {\n  Filters,\n  InfoFields,\n  VariantFieldDescriptions,\n  VariantSampleGridRow,\n} from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { GridColDef } from '@mui/x-data-grid'\n\nexport default function VariantSampleGrid(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: VariantFieldDescriptions | null\n}) {\n  const { feature, descriptions = {} } = props\n  const [filter, setFilter] = useState<Filters>({})\n  const [showOnlyGenotypeColumns, setShowOnlyGenotypeColumns] = useState(true)\n  const [showFilters, setShowFilters] = useState(false)\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const ALT = feature.ALT as string[]\n  const REF = feature.REF as string\n  const preFilteredRows = Object.entries(samples).map(\n    ([key, val]) =>\n      [\n        key,\n        {\n          ...val,\n          GT: `${val.GT?.[0]}`,\n          genotype: makeSimpleAltString(`${val.GT?.[0]}`, REF, ALT),\n        },\n      ] as const,\n  )\n\n  let error: unknown\n  let rows = [] as VariantSampleGridRow[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(([key, val]) => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(val).map(([formatField, formatValue]) => [\n              formatField,\n              formatValue,\n            ]),\n          ),\n          sample: key,\n          id: key,\n        } as VariantSampleGridRow\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? new RegExp(currFilter, 'i').exec(row[key]!)\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    console.error(e)\n    error = e\n  }\n\n  const keys = ['sample', ...Object.keys(preFilteredRows[0]?.[1] || {})]\n  const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])))\n  const columns = keys.map(\n    (field, index) =>\n      ({\n        field,\n        description: descriptions?.FORMAT?.[field]?.Description,\n        width: widths[index],\n      }) satisfies GridColDef<(typeof rows)[0]>,\n  )\n\n  const s1 = new Set(['sample', 'GT', 'genotype'])\n  const s2 = new Set(keys)\n\n  //  helps avoid\n  // https://github.com/mui-org/material-ui-x/issues/1197\n  return !preFilteredRows.length ? null : (\n    <>\n      <BaseCard {...props} title=\"Genotype frequencies\">\n        <ErrorBoundary FallbackComponent={ErrorMessage}>\n          <VariantGenotypeFrequencyTable rows={rows} />\n        </ErrorBoundary>\n      </BaseCard>\n      <BaseCard {...props} title=\"Samples\">\n        {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n\n        <Checkbox2\n          label=\"Show filters\"\n          checked={showFilters}\n          onChange={event => {\n            setShowFilters(event.target.checked)\n          }}\n        />\n        {areSetsEqual(s1, s2) ? null : (\n          <Checkbox2\n            label=\"Show only genotype columns\"\n            checked={showOnlyGenotypeColumns}\n            onChange={event => {\n              setShowOnlyGenotypeColumns(event.target.checked)\n            }}\n          />\n        )}\n\n        {showFilters ? (\n          <SampleFilters\n            setFilter={setFilter}\n            columns={columns}\n            filter={filter}\n          />\n        ) : null}\n\n        <DataGridFlexContainer>\n          <DataGrid\n            rows={rows}\n            hideFooter={rows.length < 100}\n            columns={\n              showOnlyGenotypeColumns\n                ? columns.filter(f => s1.has(f.field))\n                : columns\n            }\n            rowHeight={25}\n            columnHeaderHeight={35}\n            showToolbar\n          />\n        </DataGridFlexContainer>\n      </BaseCard>\n    </>\n  )\n}\n","export const variantFieldDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n","import { Suspense, lazy } from 'react'\n\nimport { parseBreakend } from '@gmod/vcf'\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport AltFormatter from './AltFormatter'\nimport Formatter from './Formatter'\nimport VariantSampleGrid from './VariantSampleGrid/VariantSampleGrid'\nimport { variantFieldDescriptions } from './variantFieldDescriptions'\n\nimport type { VariantFeatureWidgetModel } from './stateModelFactory'\nimport type { Descriptions, ReducedFeature } from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst LaunchBreakendPanel = lazy(\n  () => import('./LaunchBreakendPanel/LaunchBreakendPanel'),\n)\nconst VariantConsequenceDataGrid = lazy(\n  () => import('./VariantConsequence/VariantConsequenceDataGrid'),\n)\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1]?.split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1]?.split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nfunction LaunchBreakendWidgetArea({\n  model,\n}: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { featureData } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { type = '' } = feat\n\n  return type === 'breakend' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      locStrings={feat.ALT.map(\n        (alt: string) => parseBreakend(alt)?.MatePosition || '',\n      )}\n      model={model}\n    />\n  ) : type === 'translocation' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n    />\n  ) : type === 'paired_feature' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.mate.refName}:${feat.mate.start}`]}\n    />\n  ) : type.includes('inversion') ||\n    type.includes('deletion') ||\n    type.includes('duplication') ||\n    type.includes('cnv') ||\n    type.includes('sv') ? (\n    <LaunchBreakendPanel\n      feature={{\n        uniqueId: 'random',\n        refName: feat.refName,\n        start: feat.start,\n        end: feat.start + 1,\n        mate: {\n          refName: feat.refName,\n          start: feat.end,\n          end: feat.end + 1,\n        },\n      }}\n      model={model}\n      locStrings={[`${feat.refName}:${feat.end}`]}\n    />\n  ) : null\n}\n\nconst FeatDefined = observer(function (props: {\n  feat: SimpleFeatureSerialized\n  model: VariantFeatureWidgetModel\n}) {\n  const { feat, model } = props\n  const { descriptions } = model\n  const { samples, ...rest } = feat\n  const { REF } = rest\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{\n          ...variantFieldDescriptions,\n          ...descriptions,\n        }}\n        formatter={(value, key) => {\n          return key === 'ALT' ? (\n            <AltFormatter value={`${value}`} ref={REF as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }}\n        {...props}\n      />\n      <Suspense fallback={null}>\n        <CsqPanel feature={rest} descriptions={descriptions} />\n        <AnnPanel feature={rest} descriptions={descriptions} />\n        <LaunchBreakendWidgetArea model={model} />\n      </Suspense>\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = structuredClone(featureData)\n\n  return feat ? (\n    <FeatDefined feat={feat} {...props} />\n  ) : (\n    <div>\n      No feature loaded, may not be available after page refresh because it was\n      too large for localStorage\n    </div>\n  )\n})\n\nexport default VariantFeatureWidget\n"],"names":["AltFormatter","value","ref","show","setShow","useState","getMinimalDesc","_jsxs","children","_jsx","onClick","Formatter","copied","setCopied","display","String","length","_Fragment","type","copy","setTimeout","val","slice","Checkbox2","checked","disabled","label","onChange","FormControlLabel","control","Checkbox","Typography","variant","VariantGenotypeFrequencyTable","rows","useCounts","setUseCounts","summary","row","alleleCounts","alleles","GT","split","allele","key","Object","entries","map","join","count","genotype","gt","gridRows","id","frequency","n","toPrecision","widths","keys","e","measureGridWidth","r","_","DataGridFlexContainer","DataGrid","hideFooter","rowHeight","columnHeaderHeight","columns","field","width","SampleFilters","filter","setFilter","TextField","placeholder","event","target","areSetsEqual","set1","set2","size","item","has","VariantSampleGrid","props","feature","descriptions","showOnlyGenotypeColumns","setShowOnlyGenotypeColumns","showFilters","setShowFilters","samples","ALT","REF","preFilteredRows","makeSimpleAltString","error","filters","fromEntries","formatField","formatValue","sample","every","currFilter","RegExp","exec","console","index","description","FORMAT","Description","s1","Set","s2","BaseCard","title","ErrorBoundary","FallbackComponent","ErrorMessage","color","f","showToolbar","variantFieldDescriptions","CHROM","POS","ID","QUAL","FILTER","LaunchBreakendPanel","lazy","VariantConsequenceDataGrid","AnnPanel","annDesc","INFO","ANN","annFields","match","ann","fields","data","CsqPanel","csqDescription","CSQ","csqFields","csq","LaunchBreakendWidgetArea","model","featureData","feat","JSON","parse","stringify","locStrings","alt","parseBreakend","MatePosition","CHR2","END","mate","refName","start","includes","uniqueId","end","FeatDefined","observer","rest","Paper","FeatureDetails","formatter","Suspense","fallback","structuredClone"],"sourceRoot":""}