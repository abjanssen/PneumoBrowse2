{"version":3,"file":"static/js/4456.341094e8.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.tsx","../../../packages/product-core/src/Session/Connections.ts"],"sourcesContent":["import { Suspense } from 'react'\n\nimport { LoadingEllipses } from '@jbrowse/core/ui'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { observer } from 'mobx-react'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst ConfigureConnection = observer(function ({\n  connectionType,\n  model,\n  session,\n}: {\n  connectionType: ConnectionType\n  model: AnyConfigurationModel\n  session: AbstractSessionModel\n}) {\n  const ConfigEditorComponent =\n    connectionType.configEditorComponent || ConfigurationEditor\n\n  return (\n    <Suspense fallback={<LoadingEllipses />}>\n      <ConfigEditorComponent model={{ target: model }} session={session} />\n    </Suspense>\n  )\n})\n\nexport default ConfigureConnection\n","import { useEffect } from 'react'\n\nimport { ExternalLink } from '@jbrowse/core/ui'\nimport { MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({\n  connectionTypeChoices,\n  connectionType,\n  setConnectionType,\n}: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType?: ConnectionType\n  setConnectionType: (c?: ConnectionType) => void\n}) {\n  const firstChoice = connectionTypeChoices[0]\n  useEffect(() => {\n    if (!connectionType) {\n      setConnectionType(firstChoice)\n    }\n  }, [connectionType, firstChoice, setConnectionType])\n\n  return (\n    <form autoComplete=\"off\">\n      {connectionType ? (\n        <TextField\n          value={connectionType.name}\n          label=\"connectionType\"\n          helperText={\n            connectionType.description ? (\n              <>\n                {connectionType.description}\n                {connectionType.url ? (\n                  <ExternalLink href={connectionType.url} />\n                ) : null}\n              </>\n            ) : null\n          }\n          select\n          fullWidth\n          onChange={event => {\n            setConnectionType(\n              connectionTypeChoices.find(c => c.name === event.target.value),\n            )\n          }}\n          variant=\"outlined\"\n        >\n          {connectionTypeChoices.map(c => (\n            <MenuItem key={c.name} value={c.name}>\n              {c.displayName || c.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : null}\n    </form>\n  )\n})\n\nexport default ConnectionTypeSelect\n","import { useMemo, useState } from 'react'\n\nimport {\n  getEnv,\n  getSession,\n  isSessionModelWithWidgets,\n} from '@jbrowse/core/util'\nimport { isSessionWithConnections } from '@jbrowse/product-core'\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\n\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nconst AddConnectionWidget = observer(function ({ model }: { model: unknown }) {\n  const [connectionType, setConnectionType] = useState<ConnectionType>()\n  const [connectionId, setConnectionId] = useState<string>()\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n\n  // useMemo is needed for react@18+mobx-react@9, previous code called configScema.create directly in a setConfigModel useState hook setter but this caused infinite loop\n  const configModel = useMemo(\n    () => connectionType?.configSchema.create({ connectionId }, getEnv(model)),\n    [connectionId, connectionType, model],\n  )\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {activeStep === 0 ? (\n                <ConnectionTypeSelect\n                  connectionTypeChoices={pluginManager.getConnectionElements()}\n                  connectionType={connectionType}\n                  setConnectionType={c => {\n                    setConnectionType(c)\n                    if (!c) {\n                      return\n                    }\n                    setConnectionId(`${c.name}-${Date.now()}`)\n                  }}\n                />\n              ) : connectionType && configModel ? (\n                <ConfigureConnection\n                  connectionType={connectionType}\n                  model={configModel}\n                  session={session}\n                />\n              ) : null}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={() => {\n                    setActiveStep(activeStep - 1)\n                  }}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={\n                    !(\n                      (activeStep === 0 && connectionType) ||\n                      (activeStep === 1 && configModel)\n                    )\n                  }\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (activeStep === steps.length - 1) {\n                      if (configModel && isSessionWithConnections(session)) {\n                        const conf = session.addConnectionConf(configModel)\n                        session.makeConnection(conf)\n                      } else {\n                        session.notify('No config model to add')\n                      }\n\n                      if (isSessionModelWithWidgets(session)) {\n                        session.hideWidget(model)\n                      }\n                    } else {\n                      setActiveStep(activeStep + 1)\n                    }\n                  }}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n})\n\nexport default AddConnectionWidget\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { types } from 'mobx-state-tree'\n\nimport { isBaseSession } from './BaseSession'\n\nimport type { SessionWithReferenceManagementType } from './ReferenceManagement'\nimport type { BaseRootModelType } from '../RootModel/BaseRootModel'\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseConnectionModel } from '@jbrowse/core/pluggableElementTypes/models/BaseConnectionModelFactory'\nimport type { BaseConnectionConfigModel } from '@jbrowse/core/pluggableElementTypes/models/baseConnectionConfig'\nimport type { IAnyStateTreeNode, Instance } from 'mobx-state-tree'\n\n/**\n * #stateModel ConnectionManagementSessionMixin\n */\nexport function ConnectionManagementSessionMixin(pluginManager: PluginManager) {\n  return types\n    .model({\n      /**\n       * #property\n       */\n      connectionInstances: types.array(\n        pluginManager.pluggableMstType(\n          'connection',\n          'stateModel',\n        ) as BaseConnectionModel,\n      ),\n    })\n    .views(self => ({\n      /**\n       * #getter\n       */\n      get connections(): BaseConnectionConfigModel[] {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.connections\n      },\n    }))\n    .actions(self => ({\n      /**\n       * #action\n       */\n      makeConnection(\n        configuration: AnyConfigurationModel,\n        initialSnapshot = {},\n      ) {\n        const type = configuration.type as string\n        if (!type) {\n          throw new Error('track configuration has no `type` listed')\n        }\n        const name = readConfObject(configuration, 'name')\n        const connectionType = pluginManager.getConnectionType(type)\n        if (!connectionType) {\n          throw new Error(`unknown connection type ${type}`)\n        }\n        const length = self.connectionInstances.push({\n          ...initialSnapshot,\n          name,\n          // @ts-expect-error unsure why ts doesn't like `type` here, but is\n          // needed\n          type,\n          configuration,\n        })\n        return self.connectionInstances[length - 1]\n      },\n\n      /**\n       * #action\n       */\n      prepareToBreakConnection(configuration: AnyConfigurationModel) {\n        const root = self as typeof self &\n          Instance<SessionWithReferenceManagementType>\n        const callbacksToDeref: (() => void)[] = []\n        const derefTypeCount: Record<string, number> = {}\n        const name = readConfObject(configuration, 'name')\n        const connection = self.connectionInstances.find(c => c.name === name)\n        if (!connection) {\n          return undefined\n        }\n        for (const track of connection.tracks) {\n          const ref = root.getReferring(track)\n          root.removeReferring(ref, track, callbacksToDeref, derefTypeCount)\n        }\n        return [\n          () => {\n            for (const cb of callbacksToDeref) {\n              cb()\n            }\n            this.breakConnection(configuration)\n          },\n          derefTypeCount,\n        ]\n      },\n\n      /**\n       * #action\n       */\n      breakConnection(configuration: AnyConfigurationModel) {\n        const name = readConfObject(configuration, 'name')\n        const connection = self.connectionInstances.find(c => c.name === name)\n        if (!connection) {\n          throw new Error(`no connection found with name ${name}`)\n        }\n        self.connectionInstances.remove(connection)\n      },\n\n      /**\n       * #action\n       */\n      deleteConnection(configuration: AnyConfigurationModel) {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.deleteConnectionConf(configuration)\n      },\n\n      /**\n       * #action\n       */\n      addConnectionConf(connectionConf: AnyConfigurationModel) {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.addConnectionConf(connectionConf)\n      },\n\n      /**\n       * #action\n       */\n      clearConnections() {\n        self.connectionInstances.clear()\n      },\n    }))\n}\n\n/** Session mixin MST type for a session that has connections */\nexport type SessionWithConnectionsType = ReturnType<\n  typeof ConnectionManagementSessionMixin\n>\n\n/** Instance of a session that has connections: `connectionInstances`,\n * `makeConnection()`, etc. */\nexport type SessionWithConnections = Instance<SessionWithConnectionsType>\n\n/** Type guard for SessionWithConnections */\nexport function isSessionWithConnections(\n  session: IAnyStateTreeNode,\n): session is SessionWithConnections {\n  return isBaseSession(session) && 'connectionInstances' in session\n}\n"],"names":["observer","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","_jsx","Suspense","fallback","LoadingEllipses","children","target","connectionTypeChoices","setConnectionType","firstChoice","useEffect","autoComplete","TextField","value","name","label","helperText","description","_jsxs","_Fragment","url","ExternalLink","href","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","connectionId","setConnectionId","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","configModel","useMemo","configSchema","create","className","Stepper","orientation","Step","StepLabel","StepContent","ConnectionTypeSelect","getConnectionElements","Date","now","ConfigureConnection","Button","disabled","onClick","color","length","isSessionWithConnections","conf","addConnectionConf","makeConnection","notify","isSessionModelWithWidgets","hideWidget","ConnectionManagementSessionMixin","types","connectionInstances","array","pluggableMstType","views","self","connections","jbrowse","actions","configuration","initialSnapshot","type","Error","readConfObject","getConnectionType","push","prepareToBreakConnection","callbacksToDeref","derefTypeCount","connection","track","tracks","ref","getReferring","removeReferring","cb","this","breakConnection","remove","deleteConnection","deleteConnectionConf","connectionConf","clearConnections","clear","isBaseSession"],"sourceRoot":""}