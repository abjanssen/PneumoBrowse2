{"version":3,"file":"static/js/5863.fa4abab7.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/Radio/radioClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../../../node_modules/@mui/material/esm/RadioGroup/radioGroupClasses.js","../../../plugins/spreadsheet-view/src/SpreadsheetView/components/TrackSelector.tsx","../../../plugins/spreadsheet-view/src/SpreadsheetView/components/ImportWizard.tsx","../../../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/esm/Radio/Radio.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroup.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiRadioGroup', slot);\n}\nconst radioGroupClasses = generateUtilityClasses('MuiRadioGroup', ['root', 'row', 'error']);\nexport default radioGroupClasses;","import { useEffect, useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport { coarseStripHTML } from '@jbrowse/core/util'\nimport { MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { ImportWizardModel } from '../ImportWizard'\n\nconst TrackSelector = observer(function ({\n  model,\n  selectedAssembly,\n}: {\n  model: ImportWizardModel\n  selectedAssembly: string\n}) {\n  const filteredTracks = selectedAssembly\n    ? model.tracksForAssembly(selectedAssembly)\n    : undefined\n  const resetTrack = filteredTracks?.[0]?.track.trackId || ''\n  const [selectedTrack, setSelectedTrack] = useState(resetTrack)\n  useEffect(() => {\n    const entry = filteredTracks?.find(f => selectedTrack === f.track.trackId)\n    if (entry) {\n      model.setFileSource(entry.loc)\n      model.setFileType(entry.type)\n    }\n  }, [model, selectedTrack, filteredTracks])\n\n  return (\n    <div>\n      {filteredTracks?.length ? (\n        <TextField\n          select\n          label=\"Tracks\"\n          variant=\"outlined\"\n          value={selectedTrack}\n          onChange={event => {\n            setSelectedTrack(event.target.value)\n          }}\n        >\n          {filteredTracks.map(({ track, label }) => (\n            <MenuItem key={track.trackId} value={track.trackId}>\n              {coarseStripHTML(label)}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : (\n        <ErrorMessage error={`No tracks found for ${selectedAssembly}`} />\n      )}\n    </div>\n  )\n})\n\nexport default TrackSelector\n","import { useState } from 'react'\n\nimport {\n  AssemblySelector,\n  ErrorMessage,\n  FileSelector,\n  LoadingEllipses,\n} from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Paper,\n  Radio,\n  RadioGroup,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getRoot } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport TrackSelector from './TrackSelector'\n\nimport type { ImportWizardModel } from '../ImportWizard'\nimport type { AbstractRootModel } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()({\n  container: {\n    margin: '0 auto',\n    maxWidth: '40em',\n    padding: 20,\n  },\n})\n\nconst ImportWizard = observer(function ({\n  model,\n}: {\n  model: ImportWizardModel\n}) {\n  const session = getSession(model)\n  const { classes } = useStyles()\n  const { assemblyNames, assemblyManager } = session\n  const { loading, fileType, fileSource, isReadyToOpen, fileTypes, error } =\n    model\n  const [selectedAssembly, setSelectedAssembly] = useState(assemblyNames[0])\n  const [selectorType, setSelectorType] = useState('custom')\n  const err = assemblyManager.get(selectedAssembly!)?.error || error\n  const rootModel = getRoot(model)\n\n  return (\n    <div>\n      {err ? <ErrorMessage error={err} /> : null}\n      <Paper className={classes.container}>\n        {loading ? <LoadingEllipses variant=\"h6\" /> : null}\n        <div>\n          <FormControl component=\"fieldset\">\n            <RadioGroup\n              row\n              aria-label=\"file type\"\n              name=\"type\"\n              value={fileType}\n              onChange={event => {\n                setSelectorType(event.target.value)\n              }}\n            >\n              {Object.entries({\n                custom: 'Open file from URL or local computer',\n                existing: 'Open from track',\n              }).map(([key, val]) => (\n                <FormControlLabel\n                  key={key}\n                  checked={selectorType === key}\n                  value={key}\n                  control={<Radio />}\n                  label={val}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n        </div>\n        {selectorType === 'custom' ? (\n          <div>\n            <FormControl component=\"fieldset\">\n              <FormGroup>\n                <FileSelector\n                  inline\n                  location={fileSource}\n                  rootModel={rootModel as AbstractRootModel}\n                  setLocation={arg => {\n                    model.setFileSource(arg)\n                  }}\n                />\n              </FormGroup>\n            </FormControl>\n          </div>\n        ) : selectedAssembly ? (\n          <TrackSelector model={model} selectedAssembly={selectedAssembly} />\n        ) : (\n          <div>Select assembly</div>\n        )}\n        <div>\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">File Type</FormLabel>\n            <RadioGroup\n              row\n              aria-label=\"file type\"\n              name=\"type\"\n              value={fileType}\n              onChange={event => {\n                model.setFileType(event.target.value)\n              }}\n            >\n              {fileTypes.map(fileTypeName => (\n                <FormControlLabel\n                  key={fileTypeName}\n                  checked={fileType === fileTypeName}\n                  value={fileTypeName}\n                  control={<Radio />}\n                  label={fileTypeName}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n        </div>\n\n        <div>\n          <AssemblySelector\n            session={session}\n            selected={selectedAssembly}\n            onChange={val => {\n              setSelectedAssembly(val)\n            }}\n          />\n        </div>\n        <div>\n          <Button\n            disabled={!isReadyToOpen || !!err}\n            variant=\"contained\"\n            data-testid=\"open_spreadsheet\"\n            color=\"primary\"\n            onClick={() => {\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              model.import(selectedAssembly!)\n            }}\n          >\n            Open\n          </Button>\n        </div>\n      </Paper>\n    </div>\n  )\n})\n\nexport default ImportWizard\n","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  name: 'MuiRadioButtonIcon',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport FormGroup from \"../FormGroup/index.js\";\nimport { getRadioGroupUtilityClass } from \"./radioGroupClasses.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport useControlled from \"../utils/useControlled.js\";\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nimport useId from \"../utils/useId.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = props => {\n  const {\n    classes,\n    row,\n    error\n  } = props;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getRadioGroupUtilityClass, classes);\n};\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    className,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp,\n    ...other\n  } = props;\n  const rootRef = React.useRef(null);\n  const classes = useUtilityClasses(props);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, {\n      role: \"radiogroup\",\n      ref: handleRef,\n      className: clsx(classes.root, className),\n      ...other,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"],"names":["getRadioUtilityClass","slot","undefined","getRadioGroupUtilityClass","observer","model","selectedAssembly","filteredTracks","tracksForAssembly","resetTrack","track","trackId","selectedTrack","setSelectedTrack","useState","useEffect","entry","find","f","setFileSource","loc","setFileType","type","_jsx","children","length","TextField","select","label","variant","value","onChange","event","target","map","MenuItem","coarseStripHTML","ErrorMessage","error","useStyles","makeStyles","container","margin","maxWidth","padding","session","getSession","classes","assemblyNames","assemblyManager","loading","fileType","fileSource","isReadyToOpen","fileTypes","setSelectedAssembly","selectorType","setSelectorType","err","get","rootModel","getRoot","_jsxs","Paper","className","LoadingEllipses","FormControl","component","RadioGroup","row","name","Object","entries","custom","existing","key","val","FormControlLabel","checked","control","Radio","FormGroup","FileSelector","inline","location","setLocation","arg","TrackSelector","FormLabel","fileTypeName","AssemblySelector","selected","Button","disabled","color","onClick","import","useRadioGroup","createSvgIcon","d","RadioButtonIconRoot","styled","shouldForwardProp","rootShouldForwardProp","position","display","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","theme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","props","style","easeOut","fontSize","ownerState","root","background","dot","RadioRoot","SwitchBase","prop","overridesResolver","styles","size","capitalize","vars","palette","text","secondary","radioClasses","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","filter","createSimplePaletteValueFilter","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChangeProp","disabledProp","slots","slotProps","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","createChainedFunction","a","b","String","externalInputProps","input","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","args","additionalProps","actions","defaultValue","valueProp","rootRef","setValueState","controlled","default","focus","current","querySelector","handleRef","contextValue","Provider","role"],"sourceRoot":""}