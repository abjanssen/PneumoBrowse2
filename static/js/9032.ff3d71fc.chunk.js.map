{"version":3,"file":"static/js/9032.ff3d71fc.chunk.js","mappings":"4NAWA,MAAMA,GAAYC,E,SAAAA,KAAAA,EAAaC,IAAS,CACtCC,KAAM,CACJC,OAAQF,EAAMG,QAAQ,GACtBC,WAAYJ,EAAMG,QAAQ,IAE5BE,SAAU,CACRH,OAAQF,EAAMG,QAAQ,IAExBG,WAAY,CACVJ,OAAQF,EAAMG,QAAQ,GACtBI,UAAWP,EAAMG,QAAQ,QA4E7B,GAxEoBK,EAAAA,EAAAA,WAAS,UAAU,MACrCC,IAIA,MAAM,QAAEC,GAAYZ,KACd,QAAEa,IAAYC,EAAAA,EAAAA,YAAWH,IACzB,cAAEI,IAAkBC,EAAAA,EAAAA,QAAOL,IAC3B,QAAEM,GAAYF,EACdG,EAAc,IAAIC,IACtBF,EACGG,QAAOC,GAAKN,EAAcO,eAAeD,EAAEE,OAAOC,SAClDC,KAAIJ,GAAKA,EAAEE,QAGhB,OACEG,EAAAA,cAAA,OAAKC,UAAWf,EAAQT,MACtBuB,EAAAA,cAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,UAAS,aAGxCJ,EAAAA,cAACE,EAAAA,EAAU,CAACC,QAAQ,KAAKC,MAAM,SAASH,UAAWf,EAAQL,UACxDM,GAEHa,EAAAA,cAACE,EAAAA,EAAU,CAACE,MAAM,UAAS,eACZ,IACbJ,EAAAA,cAACK,EAAAA,EAAI,CAACC,KAAK,mBAAmBC,OAAO,SAASC,IAAI,uBAAsB,QAEhE,IAAI,WAGdR,EAAAA,cAAA,WACAA,EAAAA,cAACE,EAAAA,EAAU,CAACE,MAAM,UAAS,oDAG3BJ,EAAAA,cAAA,OAAKC,UAAWf,EAAQJ,YACtBkB,EAAAA,cAACE,EAAAA,EAAU,KAAC,2BACZF,EAAAA,cAAA,UACGT,EACEG,QAAOe,IAAWjB,EAAYkB,IAAID,EAAOZ,QACzCE,KAAIU,IACH,MAAM,IAAEE,EAAG,KAAEd,EAAI,QAAEV,EAAU,IAAOsB,EAC9BG,EAAO,GAAGf,KAAQV,GAAW,KACnC,OACEa,EAAAA,cAAA,MAAIa,IAAKJ,EAAOZ,MACbY,EAAOE,IACNX,EAAAA,cAACK,EAAAA,EAAI,CAACE,OAAO,SAASC,IAAI,sBAAsBF,KAAMK,GACnDC,GAGHZ,EAAAA,cAACE,EAAAA,EAAU,KAAEU,GAEZ,KAIbZ,EAAAA,cAACE,EAAAA,EAAU,KAAC,uBACZF,EAAAA,cAAA,UACGT,EACEG,QAAOe,GAAUjB,EAAYkB,IAAID,EAAOZ,QACxCE,KAAIU,GACHT,EAAAA,cAAA,MAAIa,IAAKJ,EAAOZ,MACdG,EAAAA,cAACE,EAAAA,EAAU,KACRO,EAAOZ,KAAK,IAAEY,EAAOtB,SAAW,SAQnD,G","sources":["../../../plugins/menus/src/AboutWidget/components/AboutWidget.tsx"],"sourcesContent":["import React from 'react'\n\nimport { getSession } from '@jbrowse/core/util'\nimport { Link, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    margin: theme.spacing(2),\n    paddingTop: theme.spacing(2),\n  },\n  subtitle: {\n    margin: theme.spacing(1),\n  },\n  pluginList: {\n    margin: theme.spacing(1),\n    marginTop: theme.spacing(5),\n  },\n}))\n\nconst AboutWidget = observer(function ({\n  model,\n}: {\n  model: IAnyStateTreeNode\n}) {\n  const { classes } = useStyles()\n  const { version } = getSession(model)\n  const { pluginManager } = getEnv(model)\n  const { plugins } = pluginManager as PluginManager\n  const corePlugins = new Set(\n    plugins\n      .filter(p => pluginManager.pluginMetadata[p.name]?.isCore)\n      .map(p => p.name),\n  )\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h4\" align=\"center\">\n        JBrowse 2\n      </Typography>\n      <Typography variant=\"h6\" align=\"center\" className={classes.subtitle}>\n        {version}\n      </Typography>\n      <Typography align=\"center\">\n        JBrowse is a{' '}\n        <Link href=\"http://gmod.org/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          GMOD\n        </Link>{' '}\n        project\n      </Typography>\n      <br />\n      <Typography align=\"center\">\n        Â© 2019-2022 The Evolutionary Software Foundation\n      </Typography>\n      <div className={classes.pluginList}>\n        <Typography>External plugins loaded</Typography>\n        <ul>\n          {plugins\n            .filter(plugin => !corePlugins.has(plugin.name))\n            .map(plugin => {\n              const { url, name, version = '' } = plugin\n              const text = `${name} ${version || ''}`\n              return (\n                <li key={plugin.name}>\n                  {plugin.url ? (\n                    <Link target=\"_blank\" rel=\"noopener noreferrer\" href={url}>\n                      {text}\n                    </Link>\n                  ) : (\n                    <Typography>{text}</Typography>\n                  )}\n                </li>\n              )\n            })}\n        </ul>\n        <Typography>Core plugins loaded</Typography>\n        <ul>\n          {plugins\n            .filter(plugin => corePlugins.has(plugin.name))\n            .map(plugin => (\n              <li key={plugin.name}>\n                <Typography>\n                  {plugin.name} {plugin.version || ''}\n                </Typography>\n              </li>\n            ))}\n        </ul>\n      </div>\n    </div>\n  )\n})\n\nexport default AboutWidget\n"],"names":["useStyles","makeStyles","theme","root","margin","spacing","paddingTop","subtitle","pluginList","marginTop","observer","model","classes","version","getSession","pluginManager","getEnv","plugins","corePlugins","Set","filter","p","pluginMetadata","name","isCore","map","React","className","Typography","variant","align","Link","href","target","rel","plugin","has","url","text","key"],"sourceRoot":""}