"use strict";(globalThis.webpackChunk_jbrowse_web=globalThis.webpackChunk_jbrowse_web||[]).push([[5132],{55132:(e,t,n)=>{n.r(t),n.d(t,{default:()=>A});var a=n(7552),r=n(943),i=n(68446),o=n(33039),l=n.n(o),s=n(84144),c=n(51762);const d={AM:"The smallest template-independent mapping quality in the template",AS:"Alignment score generated by aligner",BC:"Barcode sequence identifying the sample",BQ:"Offset to base alignment quality (BAQ)",BZ:"Phred quality of the unique molecular barcode bases in the {OX} tag",CB:"Cell identifier",CC:"Reference name of the next hit",CM:"Edit distance between the color sequence and the color reference (see also {NM})",CO:"Free-text comments",CP:"Leftmost coordinate of the next hit",CQ:"Color read base qualities",CR:"Cellular barcode sequence bases (uncorrected)",CS:"Color read sequence",CT:"Complete read annotation tag, used for consensus annotation dummy features",CY:"Phred quality of the cellular barcode sequence in the {CR} tag",E2:"The 2nd most likely base calls",FI:"The index of segment in the template",FS:"Segment suffix",FZ:"Flow signal intensities",GC:"Reserved for backwards compatibility reasons",GQ:"Reserved for backwards compatibility reasons",GS:"Reserved for backwards compatibility reasons",H0:"Number of perfect hits",H1:"Number of 1-difference hits (see also {NM})",H2:"Number of 2-difference hits",HI:"Query hit index",IH:"Query hit total count",LB:"Library",MC:"CIGAR string for mate/next segment",MD:"String encoding mismatched and deleted reference bases",MF:"Reserved for backwards compatibility reasons",MI:"Molecular identifier; a string that uniquely identifies the molecule from which the record was derived",ML:"Base modification probabilities",MM:"Base modifications / methylation ",MQ:"Mapping quality of the mate/next segment",NH:"Number of reported alignments that contain the query in the current record",NM:"Edit distance to the reference",OA:"Original alignment",OC:"Original CIGAR (deprecated; use {OA} instead)",OP:"Original mapping position (deprecated; use {OA} instead)",OQ:"Original base quality",OX:"Original unique molecular barcode bases",PG:"Program",PQ:"Phred likelihood of the template",PT:"Read annotations for parts of the padded read sequence",PU:"Platform unit",Q2:"Phred quality of the mate/next segment sequence in the {R2} tag",QT:"Phred quality of the sample barcode sequence in the {BC} tag",QX:"Quality score of the unique molecular identifier in the {RX} tag",R2:"Sequence of the mate/next segment in the template",RG:"Read group",RT:"Reserved for backwards compatibility reasons",RX:"Sequence bases of the (possibly corrected) unique molecular identifier",S2:"Reserved for backwards compatibility reasons",SA:"Other canonical alignments in a chimeric alignment",SM:"Template-independent mapping quality",SQ:"Reserved for backwards compatibility reasons",TC:"The number of segments in the template",TS:"Transcript strand",U2:"Phred probability of the 2nd call being wrong conditional on the best being wrong",UQ:"Phred likelihood of the segment, conditional on the mapping being correct"};var u=n(83867),m=n(33371),f=n(32808),h=n(75785),p=n(87083),g=n(32106);function b(){return b=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)({}).hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},b.apply(null,arguments)}const y=(0,h.n9)()({compact:{paddingRight:0,paddingTop:0,paddingBottom:0}}),v=["read paired","read mapped in proper pair","read unmapped","mate unmapped","read reverse strand","mate reverse strand","first in pair","second in pair","not primary alignment","read fails platform/vendor quality checks","read is PCR or optical duplicate","supplementary alignment"];function C(e){const{classes:t}=y(),{feature:n}=e,{flags:r}=n;return a.createElement(p.default,b({},e,{title:"Flags"}),a.createElement(g.A,{name:"Flag",value:r}),a.createElement(u.A,null,v.map(((e,n)=>{const i=r&1<<n,o=`${e}_${i}`;return a.createElement(m.A,{key:o,control:a.createElement(f.A,{className:t.compact,checked:Boolean(i),name:e,readOnly:!0}),label:e})}))))}var w=n(87731);function q({locString:e,model:t}){return a.createElement(w.A,{onClick:n=>{n.preventDefault(),(0,c.h)(e,t)},href:"#"},e)}var O=n(31409),S=n.n(O);function E({value:e}){const[t,n]=(0,a.useState)(!1),[r,i]=(0,a.useState)(!1),o=String(e);return o.length>100?a.createElement(a.Fragment,null,a.createElement("button",{type:"button",onClick:()=>{S()(o),i(!0),setTimeout((()=>{i(!1)}),700)}},r?"Copied to clipboard":"Copy"),a.createElement("button",{type:"button",onClick:()=>{n((e=>!e))}},t?"Show less":"Show more"),a.createElement("div",null,t?o:`${o.slice(0,100)}...`)):a.createElement("div",null,o)}function R(){return R=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)({}).hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},R.apply(null,arguments)}const k=(0,a.lazy)((()=>n.e(5736).then(n.bind(n,15736)))),P=(0,a.lazy)((()=>n.e(9114).then(n.bind(n,9114)))),A=(0,i.observer)((function(e){const{model:t}=e,{featureData:n}=t,i=l()(n),o=(0,c.b)("SA",i),{flags:u}=i;return a.createElement(r.A,{"data-testid":"alignment-side-drawer"},a.createElement(s.default,R({},e,{descriptions:{...d,tags:d},feature:i,formatter:(e,n)=>"next_segment_position"===n?a.createElement(q,{model:t,locString:e}):a.createElement(E,{value:e})})),void 0!==o?a.createElement(k,{model:t,tag:o,feature:i}):null,1&u?a.createElement(P,{model:t,feature:i}):null,void 0!==u?a.createElement(C,R({feature:i},e)):null)}))},51762:(e,t,n)=>{n.d(t,{b:()=>r,h:()=>i});var a=n(99546);function r(e,t){return t.tags?.[e]||t[e]}async function i(e,t){const n=(0,a.getSession)(t),{view:r}=t;try{if(!r)throw new Error("No view associated with this view anymore");await r.navToLocString(e)}catch(e){console.error(e),n.notify(`${e}`)}}}}]);
//# sourceMappingURL=5132.b177d78f.chunk.js.map