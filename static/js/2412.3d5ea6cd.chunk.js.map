{"version":3,"file":"static/js/2412.3d5ea6cd.chunk.js","mappings":"wQAQA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,cAAe,CACbC,MAAO,QAETC,aAAc,CACZC,WAAY,eAGdC,MAAO,CACLC,MAAO,MACPC,SAAU,WAqHd,GA7GyBC,EAAAA,EAAAA,UAAS,UAAU,MAC1CC,EAAK,YACLC,IASA,MAAM,QAAEC,GAAYZ,KACd,cAAEa,GAAkBH,GACnBI,EAAMC,IAAWC,EAAAA,EAAAA,UAASH,EAAcI,KAAK,QAC7CX,EAAOY,IAAYF,EAAAA,EAAAA,YAkB1B,OAhBAG,EAAAA,EAAAA,WAAU,KACR,IACEL,EACGM,MAAM,MACNC,IAAIC,GAAQA,EAAKC,QACjBC,OAAOF,KAAUA,GACjBD,IAAIC,IA1Bb,IAAmBG,IA2BCH,EAAKC,QA1BvBG,EAAAA,EAAAA,GAAuBD,KA4BnBP,OAASS,EACX,CAAE,MAAOC,GACPC,QAAQvB,MAAMsB,GACdV,EAASU,EACX,GACC,CAACd,KAGFgB,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CAACC,SAAS,KAAKC,MAAI,EAACC,QAASvB,EAAawB,MAAM,oBAAmBC,SAAA,EACxEN,EAAAA,EAAAA,MAACO,EAAAA,EAAa,CAAAD,SAAA,EACZN,EAAAA,EAAAA,MAAA,OAAAM,SAAA,CAAK,uFAEc,KACjBN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,sCAAwC,6DAGhDN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,qCAAuC,iFAG/CN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,oCAAyC,+DAGjDN,EAAAA,EAAAA,MAAA,MAAAM,SAAA,EACEE,EAAAA,EAAAA,KAAA,QAAAF,SAAM,6DAEE,IAAI,2DAMjB9B,GAAQgC,EAAAA,EAAAA,KAAA,KAAGC,UAAW3B,EAAQN,MAAM8B,SAAE,GAAG9B,MAAe,MACzDgC,EAAAA,EAAAA,KAACE,EAAAA,EAAS,CACRC,QAAQ,WACRC,WAAS,EACTC,QAAS,EACTC,QAAS,GACTL,UAAW3B,EAAQV,cACnB2C,WAAS,EACTC,MAAOhC,EACPiC,SAAUC,IACRjC,EAAQiC,EAAMC,OAAOH,QAEvBI,UAAW,CACTC,MAAO,CACLvC,QAAS,CACPuC,MAAOvC,EAAQR,sBAMzB0B,EAAAA,EAAAA,MAACsB,EAAAA,EAAa,CAAAhB,SAAA,EACZE,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLZ,QAAQ,YACRlC,MAAM,UACN+C,KAAK,SACLC,WAAS,EACTC,WAAYlD,EACZmD,QAASA,KACP/C,EAAMgD,eAAe5C,EAAKM,MAAM,OAChCT,KACAyB,SACH,YAGDE,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CACLZ,QAAQ,YACRlC,MAAM,YACNkD,QAASA,KACP9C,KACAyB,SACH,gBAMT,E","sources":["../../../plugins/linear-genome-view/src/LinearBasicDisplay/components/AddFiltersDialog.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  dialogContent: {\n    width: '80em',\n  },\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n})\n\nfunction checkJexl(code: string) {\n  stringToJexlExpression(code)\n}\n\nconst AddFiltersDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: {\n    jexlFilters?: string[]\n    activeFilters: string[]\n    setJexlFilters: (arg?: string[]) => void\n  }\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { activeFilters } = model\n  const [data, setData] = useState(activeFilters.join('\\n'))\n  const [error, setError] = useState<unknown>()\n\n  useEffect(() => {\n    try {\n      data\n        .split('\\n')\n        .map(line => line.trim())\n        .filter(line => !!line)\n        .map(line => {\n          checkJexl(line.trim())\n        })\n      setError(undefined)\n    } catch (e) {\n      console.error(e)\n      setError(e)\n    }\n  }, [data])\n\n  return (\n    <Dialog maxWidth=\"xl\" open onClose={handleClose} title=\"Add track filters\">\n      <DialogContent>\n        <div>\n          Add filters, in jexl format, one per line, starting with the string\n          jexl:. Examples:{' '}\n          <ul>\n            <li>\n              <code>jexl:get(feature,'name')=='BRCA1'</code> - show only feature\n              where the name attribute is BRCA1\n            </li>\n            <li>\n              <code>jexl:get(feature,'type')=='gene'</code> - show only gene\n              type features in a GFF that has many other feature types\n            </li>\n            <li>\n              <code>jexl:get(feature,'score') &gt; 400</code> - show only\n              features that have a score greater than 400\n            </li>\n            <li>\n              <code>\n                jexl:get(feature,'end') - get(feature,'start') &lt; 1000000\n              </code>{' '}\n              - show only features with length less than 1Mbp\n            </li>\n          </ul>\n        </div>\n\n        {error ? <p className={classes.error}>{`${error}`}</p> : null}\n        <TextField\n          variant=\"outlined\"\n          multiline\n          minRows={5}\n          maxRows={10}\n          className={classes.dialogContent}\n          fullWidth\n          value={data}\n          onChange={event => {\n            setData(event.target.value)\n          }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          autoFocus\n          disabled={!!error}\n          onClick={() => {\n            model.setJexlFilters(data.split('\\n'))\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default AddFiltersDialog\n"],"names":["useStyles","makeStyles","dialogContent","width","textAreaFont","fontFamily","error","color","fontSize","observer","model","handleClose","classes","activeFilters","data","setData","useState","join","setError","useEffect","split","map","line","trim","filter","code","stringToJexlExpression","undefined","e","console","_jsxs","Dialog","maxWidth","open","onClose","title","children","DialogContent","_jsx","className","TextField","variant","multiline","minRows","maxRows","fullWidth","value","onChange","event","target","slotProps","input","DialogActions","Button","type","autoFocus","disabled","onClick","setJexlFilters"],"sourceRoot":""}