{"version":3,"file":"static/js/3301.83486ad4.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LGVSyntenyDisplay/components/util.ts","../../../plugins/linear-comparative-view/src/LGVSyntenyDisplay/components/LaunchSyntenyViewDialog.tsx"],"sourcesContent":["import { MismatchParser } from '@jbrowse/plugin-alignments'\n\nimport type { LinearSyntenyViewModel } from '../../LinearSyntenyView/model'\nimport type { AbstractSessionModel, Feature } from '@jbrowse/core/util'\n\ntype LSV = LinearSyntenyViewModel\n\nconst { parseCigar } = MismatchParser\n\nfunction findPosInCigar(cigar: string[], startX: number) {\n  let featX = 0\n  let mateX = 0\n  for (let i = 0; i < cigar.length; i++) {\n    const len = +cigar[i]!\n    const op = cigar[i + 1]!\n    const min = Math.min(len, startX - featX)\n\n    if (featX >= startX) {\n      break\n    }\n    if (op === 'I') {\n      mateX += len\n    } else if (op === 'D') {\n      featX += min\n    } else if (op === 'M' || op === '=' || op === 'X') {\n      mateX += min\n      featX += min\n    }\n  }\n  return [featX, mateX] as const\n}\n\nexport interface SimpleRegion {\n  refName: string\n  start: number\n  end: number\n}\n\nexport async function navToSynteny({\n  feature,\n  windowSize: ws,\n  session,\n  trackId,\n  region,\n  horizontallyFlip,\n}: {\n  windowSize: number\n  trackId: string\n  horizontallyFlip: boolean\n  feature: Feature\n  session: AbstractSessionModel\n  region?: SimpleRegion\n}) {\n  const cigar = feature.get('CIGAR')\n  const strand = feature.get('strand')\n\n  const featRef = feature.get('refName')\n  const featAsm = feature.get('assemblyName')\n  const featStart = feature.get('start')\n  const featEnd = feature.get('end')\n  const mate = feature.get('mate')\n  const mateStart = mate.start\n  const mateEnd = mate.end\n  const mateAsm = mate.assemblyName\n  const mateRef = mate.refName\n\n  let rMateStart: number\n  let rMateEnd: number\n  let rFeatStart: number\n  let rFeatEnd: number\n\n  if (region && cigar) {\n    const regStart = region.start\n    const regEnd = region.end\n    const p = parseCigar(cigar)\n    const [fStartX, mStartX] = findPosInCigar(p, regStart - featStart)\n    const [fEndX, mEndX] = findPosInCigar(p, regEnd - featStart)\n\n    // avoid multiply by 0 with strand undefined\n    const flipper = strand === -1 ? -1 : 1\n    rFeatStart = featStart + fStartX\n    rFeatEnd = featStart + fEndX\n    rMateStart = (strand === -1 ? mateEnd : mateStart) + mStartX * flipper\n    rMateEnd = (strand === -1 ? mateEnd : mateStart) + mEndX * flipper\n  } else {\n    rFeatStart = featStart\n    rFeatEnd = featEnd\n    rMateStart = mateStart\n    rMateEnd = mateEnd\n  }\n\n  const view2 = session.addView('LinearSyntenyView', {\n    type: 'LinearSyntenyView',\n    views: [\n      {\n        type: 'LinearGenomeView',\n        hideHeader: true,\n      },\n      {\n        type: 'LinearGenomeView',\n        hideHeader: true,\n      },\n    ],\n    tracks: [\n      {\n        configuration: trackId,\n        type: 'SyntenyTrack',\n        displays: [\n          {\n            type: 'LinearSyntenyDisplay',\n            configuration: `${trackId}-LinearSyntenyDisplay`,\n          },\n        ],\n      },\n    ],\n  }) as LSV\n  const l1 = `${featRef}:${Math.floor(rFeatStart - ws)}-${Math.floor(rFeatEnd + ws)}`\n  const m1 = Math.min(rMateStart, rMateEnd)\n  const m2 = Math.max(rMateStart, rMateEnd)\n  const l2 = `${mateRef}:${Math.floor(m1 - ws)}-${Math.floor(m2 + ws)}${\n    horizontallyFlip ? '[rev]' : ''\n  }`\n  await Promise.all([\n    view2.views[0]!.navToLocString(l1, featAsm),\n    view2.views[1]!.navToLocString(l2, mateAsm),\n  ])\n}\n","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { navToSynteny } from './util'\n\nimport type { AbstractSessionModel, Feature } from '@jbrowse/core/util'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()({\n  padding: {\n    margin: 10,\n    border: '1px solid #ccc',\n  },\n})\n\nexport default function LaunchSyntenyViewDialog({\n  session,\n  view,\n  feature,\n  trackId,\n  handleClose,\n}: {\n  session: AbstractSessionModel\n  view?: LinearGenomeViewModel\n  feature: Feature\n  trackId: string\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const inverted = feature.get('strand') === -1\n  const hasCIGAR = !!feature.get('CIGAR')\n  const [horizontallyFlip, setHorizontallyFlip] = useState(inverted)\n  const [windowSize, setWindowSize] = useState('1000')\n  const [useRegionOfInterest, setUseRegionOfInterest] = useState(true)\n  return (\n    <Dialog open title=\"Launch synteny view\" onClose={handleClose}>\n      <DialogContent>\n        {view && hasCIGAR ? (\n          <FormControlLabel\n            className={classes.padding}\n            control={\n              <Checkbox\n                checked={useRegionOfInterest}\n                onChange={event => {\n                  setUseRegionOfInterest(event.target.checked)\n                }}\n              />\n            }\n            label=\"Use CIGAR string to navigate the current visible to the target\"\n          />\n        ) : null}\n        {inverted ? (\n          <FormControlLabel\n            className={classes.padding}\n            control={\n              <Checkbox\n                checked={horizontallyFlip}\n                onChange={event => {\n                  setHorizontallyFlip(event.target.checked)\n                }}\n              />\n            }\n            label=\"Note: The feature is inverted in orientation on the target\n            sequence. This will result in the lower panel having genomic\n            coordinates decreasing left to right. Horizontally flip?\"\n          />\n        ) : null}\n        <TextField\n          label=\"Add window size in bp\"\n          value={windowSize}\n          onChange={event => {\n            setWindowSize(event.target.value)\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            ;(async () => {\n              try {\n                await navToSynteny({\n                  feature,\n                  windowSize: +windowSize,\n                  horizontallyFlip,\n                  trackId,\n                  session,\n                  region: useRegionOfInterest\n                    ? view?.dynamicBlocks.contentBlocks[0]\n                    : undefined,\n                })\n              } catch (e) {\n                console.error(e)\n                session.notifyError(`${e}`, e)\n              }\n            })()\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["parseCigar","MismatchParser","findPosInCigar","cigar","startX","featX","mateX","i","length","len","op","min","Math","useStyles","makeStyles","padding","margin","border","LaunchSyntenyViewDialog","session","view","feature","trackId","handleClose","classes","inverted","get","hasCIGAR","horizontallyFlip","setHorizontallyFlip","useState","windowSize","setWindowSize","useRegionOfInterest","setUseRegionOfInterest","_jsxs","Dialog","open","title","onClose","children","DialogContent","_jsx","FormControlLabel","className","control","Checkbox","checked","onChange","event","target","label","TextField","value","DialogActions","Button","variant","onClick","async","ws","region","strand","featRef","featAsm","featStart","featEnd","mate","mateStart","start","mateEnd","end","mateAsm","assemblyName","mateRef","refName","rMateStart","rMateEnd","rFeatStart","rFeatEnd","regStart","regEnd","p","fStartX","mStartX","fEndX","mEndX","flipper","view2","addView","type","views","hideHeader","tracks","configuration","displays","l1","floor","m1","m2","max","l2","Promise","all","navToLocString","navToSynteny","dynamicBlocks","contentBlocks","undefined","e","console","error","notifyError","color"],"sourceRoot":""}