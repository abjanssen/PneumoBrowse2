{"version":3,"file":"static/js/6587.12782a2b.chunk.js","mappings":"kRAiBA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,MAAO,CACLC,QAAS,WAUb,SAASC,EAASC,GAChB,OAAOA,EAAIC,KAAI,EAAGC,KAAIC,cAAaC,MAAW,IACzCA,EACHD,SAAUA,EAASF,KAAI,EAAGC,QAAOE,KAAWA,OAEhD,CAEA,SAASC,GAAU,QACjBC,EAAO,MACPC,EAAK,SACLC,IAMA,MAAM,QAAEC,GAAYd,IACpB,OACEe,EAAAA,cAACC,EAAAA,EAAgB,CACfC,UAAWH,EAAQZ,MACnBgB,QAASH,EAAAA,cAACI,EAAAA,EAAQ,CAACR,QAASA,EAASE,SAAUA,IAC/CD,MAAOA,GAGb,CAEA,MA0FA,GA1F6BQ,EAAAA,EAAAA,WAAS,UAAU,MAC9CC,EAAK,YACLC,EAAW,QACXC,EAAO,SACPC,IAOA,MAAOC,EAAYC,IAAiBC,EAAAA,EAAAA,WAAS,IACtCC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,GAErC,OACEZ,EAAAA,cAACe,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASV,EAAaW,MAAM,iCACvClB,EAAAA,cAACmB,EAAAA,EAAa,KACZnB,EAAAA,cAACL,EAAS,CACRC,QAASc,EACTZ,SAAUsB,IACRT,EAAcS,EAAMC,OAAOzB,QAAQ,EAErCC,MAAM,kCAERG,EAAAA,cAACL,EAAS,CACRC,QAASiB,EACTf,SAAUsB,IACRN,EAAUM,EAAMC,OAAOzB,QAAQ,EAEjCC,MAAM,yDAGVG,EAAAA,cAACsB,EAAAA,EAAa,KACZtB,EAAAA,cAACuB,EAAAA,EAAM,CACLC,QAASA,KACP,MAAM,KAAEC,GAASnB,EACXoB,GAAUC,EAAAA,EAAAA,YAAWrB,GAC3B,IAEE,MAAMsB,EAAenB,EAASoB,4BAC5BrB,EACAiB,IAEKK,EAAOC,GAASH,EAAaI,MAE9BC,GAAaC,EAAAA,EAAAA,aAAYT,EAAKU,QAEpCT,EAAQU,QAAQ,sBAAuB,IAClCR,EACHI,MAAO,CACL,IACKF,EACHK,OAAQ9C,EAAS4C,GACjBI,SAAUP,EAAMO,SAAWZ,EAAKa,MAAQ,EAAI,KAE9C,IACKP,EACHI,OAAQ9C,EACNwB,EAAS,IAAIoB,GAAYM,UAAYN,GAEvCI,SAAUN,EAAMM,SAAWZ,EAAKa,MAAQ,EAAI,OAIpD,CAAE,MAAOE,GACPC,QAAQC,MAAMF,GACdd,EAAQiB,OAAO,GAAGH,IACpB,CACAjC,GAAa,EAEfqC,QAAQ,YACRC,MAAM,UACNC,WAAS,GACV,MAGD9C,EAAAA,cAACuB,EAAAA,EAAM,CACLC,QAASA,KACPjB,GAAa,EAEfsC,MAAM,YACND,QAAQ,aACT,WAMT,G","sources":["../../../plugins/variants/src/VariantFeatureWidget/BreakendOptionDialog.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { getSession, Feature } from '@jbrowse/core/util'\nimport { ViewType } from '@jbrowse/core/pluggableElementTypes'\n// locals\nimport { VariantFeatureWidgetModel } from './stateModelFactory'\n\nconst useStyles = makeStyles()({\n  block: {\n    display: 'block',\n  },\n})\n\ninterface Track {\n  id: string\n  displays: { id: string; [key: string]: unknown }[]\n  [key: string]: unknown\n}\n\nfunction stripIds(arr: Track[]) {\n  return arr.map(({ id, displays, ...rest }) => ({\n    ...rest,\n    displays: displays.map(({ id, ...rest }) => rest),\n  }))\n}\n\nfunction Checkbox2({\n  checked,\n  label,\n  onChange,\n}: {\n  checked: boolean\n  label: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useStyles()\n  return (\n    <FormControlLabel\n      className={classes.block}\n      control={<Checkbox checked={checked} onChange={onChange} />}\n      label={label}\n    />\n  )\n}\n\nconst BreakendOptionDialog = observer(function ({\n  model,\n  handleClose,\n  feature,\n  viewType,\n}: {\n  model: VariantFeatureWidgetModel\n  handleClose: () => void\n  feature: Feature\n  viewType: ViewType\n}) {\n  const [copyTracks, setCopyTracks] = useState(true)\n  const [mirror, setMirror] = useState(true)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Breakpoint split view options\">\n      <DialogContent>\n        <Checkbox2\n          checked={copyTracks}\n          onChange={event => {\n            setCopyTracks(event.target.checked)\n          }}\n          label=\"Copy tracks into the new view\"\n        />\n        <Checkbox2\n          checked={mirror}\n          onChange={event => {\n            setMirror(event.target.checked)\n          }}\n          label=\"Mirror tracks vertically in vertically stacked view\"\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            const { view } = model\n            const session = getSession(model)\n            try {\n              // @ts-expect-error\n              const viewSnapshot = viewType.snapshotFromBreakendFeature(\n                feature,\n                view,\n              )\n              const [view1, view2] = viewSnapshot.views\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n              const viewTracks = getSnapshot(view.tracks) as Track[]\n\n              session.addView('BreakpointSplitView', {\n                ...viewSnapshot,\n                views: [\n                  {\n                    ...view1,\n                    tracks: stripIds(viewTracks),\n                    offsetPx: view1.offsetPx - view.width / 2 + 100,\n                  },\n                  {\n                    ...view2,\n                    tracks: stripIds(\n                      mirror ? [...viewTracks].reverse() : viewTracks,\n                    ),\n                    offsetPx: view2.offsetPx - view.width / 2 + 100,\n                  },\n                ],\n              })\n            } catch (e) {\n              console.error(e)\n              session.notify(`${e}`)\n            }\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n          autoFocus\n        >\n          OK\n        </Button>\n        <Button\n          onClick={() => {\n            handleClose()\n          }}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default BreakendOptionDialog\n"],"names":["useStyles","makeStyles","block","display","stripIds","arr","map","id","displays","rest","Checkbox2","checked","label","onChange","classes","React","FormControlLabel","className","control","Checkbox","observer","model","handleClose","feature","viewType","copyTracks","setCopyTracks","useState","mirror","setMirror","Dialog","open","onClose","title","DialogContent","event","target","DialogActions","Button","onClick","view","session","getSession","viewSnapshot","snapshotFromBreakendFeature","view1","view2","views","viewTracks","getSnapshot","tracks","addView","offsetPx","width","reverse","e","console","error","notify","variant","color","autoFocus"],"sourceRoot":""}