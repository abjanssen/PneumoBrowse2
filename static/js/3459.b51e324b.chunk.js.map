{"version":3,"file":"static/js/3459.b51e324b.chunk.js","mappings":"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","sources":["components/ConfigWarningDialog.tsx","components/SessionWarningDialog.tsx","components/SessionTriaged.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { pluginDescriptionString, pluginUrl } from '@jbrowse/core/PluginLoader'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { Alert, Button, DialogActions, DialogContent } from '@mui/material'\n\nimport type { PluginDefinition } from '@jbrowse/core/PluginLoader'\n\nexport default function ConfigWarningDialog({\n  onConfirm,\n  onCancel,\n  reason,\n}: {\n  onConfirm: () => void\n  onCancel: () => void\n  reason: PluginDefinition[]\n}) {\n  const [show, setShow] = useState(false)\n  return (\n    <Dialog open maxWidth=\"xl\" title=\"Warning\" onClose={onCancel}>\n      <DialogContent>\n        <Alert severity=\"warning\" style={{ width: 800 }}>\n          This link contains a cross origin config that has the following\n          unknown plugins:\n          <ul>\n            {reason.map(r => (\n              <li key={JSON.stringify(r)}>\n                {pluginDescriptionString(r)} - ({pluginUrl(r)})\n              </li>\n            ))}\n          </ul>\n          Please ensure you trust the source of this link.{' '}\n          <Button\n            onClick={() => {\n              setShow(!show)\n            }}\n          >\n            Why am I seeing this?\n          </Button>\n          {show ? (\n            <div>\n              Config files can load arbitrary javascript files via plugins. For\n              security purposes, we display this message when a cross-origin\n              config is detected to be loading plugins that are not in our\n              plugin store\n            </div>\n          ) : null}\n        </Alert>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => {\n            onConfirm()\n          }}\n        >\n          Yes, I trust it\n        </Button>\n        <Button\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={() => {\n            onCancel()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { useState } from 'react'\n\nimport { pluginDescriptionString, pluginUrl } from '@jbrowse/core/PluginLoader'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { Alert, Button, DialogActions, DialogContent } from '@mui/material'\n\nimport type { PluginDefinition } from '@jbrowse/core/PluginLoader'\n\nexport default function SessionWarningDialog({\n  onConfirm,\n  onCancel,\n  reason,\n}: {\n  onConfirm: () => void\n  onCancel: () => void\n  reason: PluginDefinition[]\n}) {\n  const [show, setShow] = useState(false)\n  return (\n    <Dialog open maxWidth=\"xl\" title=\"Warning\" onClose={onCancel}>\n      <DialogContent>\n        <Alert severity=\"warning\" style={{ width: 800 }}>\n          This link contains a session that has the following unknown plugins:\n          <ul>\n            {reason.map(r => (\n              <li key={JSON.stringify(r)}>\n                {pluginDescriptionString(r)} - ({pluginUrl(r)})\n              </li>\n            ))}\n          </ul>\n          Please ensure you trust the source of this session.\n          <Button\n            onClick={() => {\n              setShow(!show)\n            }}\n          >\n            Why am I seeing this?\n          </Button>\n          {show ? (\n            <div>\n              Sessions can load arbitrary javascript files via session plugins.\n              For security purposes, we display this message when sessions\n              contain plugins that are not from our plugin store\n            </div>\n          ) : null}\n        </Alert>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => {\n            onConfirm()\n          }}\n        >\n          Yes, I trust it\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            onCancel()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import { nanoid } from '@jbrowse/core/util/nanoid'\nimport { observer } from 'mobx-react'\n\nimport ConfigWarningDialog from './ConfigWarningDialog'\nimport SessionWarningDialog from './SessionWarningDialog'\nimport factoryReset from '../factoryReset'\n\nimport type { SessionLoaderModel } from '../SessionLoader'\nimport type { SessionTriagedInfo } from '../types'\n\nconst SessionTriaged = observer(function ({\n  sessionTriaged,\n  loader,\n}: {\n  loader: SessionLoaderModel\n  sessionTriaged: SessionTriagedInfo\n}) {\n  return sessionTriaged.origin === 'session' ? (\n    <SessionWarningDialog\n      onConfirm={async () => {\n        const session = JSON.parse(JSON.stringify(sessionTriaged.snap))\n\n        // second param true says we passed user confirmation\n        await loader.setSessionSnapshot({ ...session, id: nanoid() }, true)\n        loader.setSessionTriaged(undefined)\n      }}\n      onCancel={() => {\n        loader.setBlankSession(true)\n        loader.setSessionTriaged(undefined)\n      }}\n      reason={sessionTriaged.reason}\n    />\n  ) : (\n    <ConfigWarningDialog\n      onConfirm={async () => {\n        const session = JSON.parse(JSON.stringify(sessionTriaged.snap))\n        await loader.fetchPlugins(session)\n        loader.setConfigSnapshot({ ...session, id: nanoid() })\n        loader.setSessionTriaged(undefined)\n      }}\n      onCancel={async () => {\n        await factoryReset()\n        loader.setSessionTriaged(undefined)\n      }}\n      reason={sessionTriaged.reason}\n    />\n  )\n})\n\nexport default SessionTriaged\n"],"names":["ConfigWarningDialog","onConfirm","onCancel","reason","show","setShow","useState","_jsxs","Dialog","open","maxWidth","title","onClose","children","_jsx","DialogContent","Alert","severity","style","width","map","r","pluginDescriptionString","pluginUrl","JSON","stringify","Button","onClick","DialogActions","color","variant","SessionWarningDialog","observer","sessionTriaged","loader","origin","async","session","parse","snap","setSessionSnapshot","id","nanoid","setSessionTriaged","undefined","setBlankSession","fetchPlugins","setConfigSnapshot","factoryReset"],"sourceRoot":""}