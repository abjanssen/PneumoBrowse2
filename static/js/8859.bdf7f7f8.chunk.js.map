{"version":3,"file":"static/js/8859.bdf7f7f8.chunk.js","mappings":"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","sources":["../../../plugins/dotplot-view/src/DotplotView/components/ExportSvgDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\n\nimport type { ExportSvgOptions } from '../model'\nimport type { TextFieldProps } from '@mui/material'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction TextField2({ children, ...rest }: TextFieldProps) {\n  return (\n    <div>\n      <TextField {...rest}>{children}</TextField>\n    </div>\n  )\n}\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage(`svg-${key}`, val)\n}\n\nexport default function ExportSvgDialog({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField2\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => {\n            setFilename(event.target.value)\n          }}\n        />\n        {session.allThemes ? (\n          <TextField2\n            select\n            label=\"Theme\"\n            value={themeName}\n            onChange={event => {\n              setThemeName(event.target.value)\n            }}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField2>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => {\n                  setRasterizeLayers(val => !val)\n                }}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["LoadingMessage","$","_c","t0","Symbol","for","_jsxs","children","_jsx","CircularProgress","size","style","marginRight","Typography","display","TextField2","rest","t1","TextField","useSvgLocal","key","val","useLocalStorage","ExportSvgDialog","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","helperText","value","onChange","event","target","allThemes","select","label","Object","entries","map","MenuItem","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","variant","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}