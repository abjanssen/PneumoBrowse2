{"version":3,"file":"static/js/20.4b05036e.chunk.js","mappings":"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","sources":["../../../packages/product-core/src/ui/FileInfoPanel.tsx","../../../packages/product-core/src/ui/util.ts","../../../packages/product-core/src/ui/HeaderButtons.tsx","../../../packages/product-core/src/ui/RefNameInfoDialog.tsx","../../../packages/product-core/src/ui/AboutDialogContents.tsx","../../../packages/product-core/src/ui/AboutDialog.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\ntype FileInfo = Record<string, unknown> | string\n\nexport default function FileInfoPanel({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n        })\n        setInfo(result as FileInfo)\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replaceAll('<', '&lt;')\n            .replaceAll('>', '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <ErrorMessage error={error} />\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  )\n}\n","import { getConf, readConfObject } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nexport function removeAttr(obj: Record<string, unknown>, attr: string) {\n  for (const prop in obj) {\n    if (prop === attr) {\n      delete obj[prop]\n    } else if (typeof obj[prop] === 'object') {\n      removeAttr(obj[prop] as Record<string, unknown>, attr)\n    }\n  }\n  return obj\n}\n\nexport function generateDisplayableConfig({\n  config,\n  pluginManager,\n}: {\n  config: AnyConfigurationModel\n  pluginManager: PluginManager\n}) {\n  const session = getSession(config)\n  const conf = readConfObject(config)\n  return pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as {\n    config: { metadata?: Record<string, unknown>; [key: string]: unknown }\n  }\n}\n","import { useState } from 'react'\n\nimport { Button } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { removeAttr } from './util'\n\nconst useStyles = makeStyles()({\n  button: {\n    float: 'right',\n  },\n})\n\ninterface HeaderButtonsProps {\n  conf: Record<string, unknown>\n  setShowRefNames: (show: boolean) => void\n}\n\nfunction HeaderButtons({ conf, setShowRefNames }: HeaderButtonsProps) {\n  const [copied, setCopied] = useState(false)\n  const { classes } = useStyles()\n\n  return (\n    <span className={classes.button}>\n      <Button\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={() => {\n          setShowRefNames(true)\n        }}\n      >\n        Show ref names\n      </Button>\n      <Button\n        variant=\"contained\"\n        onClick={() => {\n          const snap = removeAttr(structuredClone(conf), 'baseUri')\n          copy(JSON.stringify(snap, null, 2))\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 1000)\n        }}\n      >\n        {copied ? 'Copied to clipboard!' : 'Copy config'}\n      </Button>\n    </span>\n  )\n}\n\nexport default HeaderButtons\n","import { useEffect, useState } from 'react'\n\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks'\nimport { Button, DialogContent } from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst MAX_REF_NAMES = 10_000\n\nconst useStyles = makeStyles()(theme => ({\n  container: {\n    minWidth: 800,\n  },\n  refNames: {\n    maxHeight: 300,\n    overflow: 'auto',\n    flexGrow: 1,\n    background: theme.palette.background.default,\n  },\n}))\n\nconst RefNameInfoDialog = observer(function ({\n  config,\n  onClose,\n}: {\n  config: AnyConfigurationModel\n  onClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [error, setError] = useState<unknown>()\n  const [refNames, setRefNames] = useState<Record<string, string[]>>()\n  const [copied, setCopied] = useState(false)\n  const { rpcManager } = getSession(config)\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const map = await Promise.all(\n          [...new Set(getConfAssemblyNames(config))].map(async assemblyName => {\n            const adapterConfig = readConfObject(config, 'adapter')\n            return [\n              assemblyName,\n              (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                adapterConfig,\n                // hack for synteny adapters\n                regions: [\n                  {\n                    assemblyName,\n                  },\n                ],\n              })) as string[],\n            ] as const\n          }),\n        )\n        setRefNames(Object.fromEntries(map))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const names = refNames ? Object.entries(refNames) : []\n  const result = names\n    .flatMap(([assemblyName, refNames]) => {\n      return [\n        `--- ${assemblyName} ---`,\n        ...refNames.slice(0, MAX_REF_NAMES),\n        refNames.length > MAX_REF_NAMES\n          ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n          : '',\n      ]\n    })\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog\n      open\n      title=\"Reference sequence names used in track\"\n      onClose={onClose}\n      maxWidth=\"xl\"\n    >\n      <DialogContent className={classes.container}>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : refNames === undefined ? (\n          <LoadingEllipses message=\"Loading refNames\" />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(\n                  names\n                    .flatMap(([assemblyName, refNames]) => [\n                      `--- ${assemblyName} ---`,\n                      ...refNames,\n                    ])\n                    .filter(f => !!f)\n                    .join('\\n'),\n                )\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy ref names'}\n            </Button>\n\n            <pre className={classes.refNames}>{result}</pre>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default RefNameInfoDialog\n","import { useState } from 'react'\n\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes'\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { getConf, readConfObject } from '@jbrowse/core/configuration'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport FileInfoPanel from './FileInfoPanel'\nimport HeaderButtons from './HeaderButtons'\nimport RefNameInfoDialog from './RefNameInfoDialog'\nimport { generateDisplayableConfig } from './util'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n})\n\nconst AboutDialogContents = observer(function ({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const conf = readConfObject(config)\n  const session = getSession(config)\n  const { classes } = useStyles()\n  const [showRefNames, setShowRefNames] = useState(false)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = generateDisplayableConfig({\n    config,\n    pluginManager,\n  })\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n  ) as { name: string; Component: React.FC<any> } | null\n  const hideFields = ['displays', 'baseUri', 'refNames', 'formatAbout']\n\n  return (\n    <div className={classes.content}>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <HeaderButtons conf={conf} setShowRefNames={setShowRefNames} />\n        ) : null}\n        <Attributes\n          attributes={confPostExt.config}\n          omit={[...hideFields, 'metadata']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {confPostExt.config.metadata ? (\n        <BaseCard title=\"Metadata\">\n          <Attributes\n            attributes={confPostExt.config.metadata}\n            omit={hideFields}\n            hideUris={hideUris}\n          />\n        </BaseCard>\n      ) : null}\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n      {showRefNames ? (\n        <RefNameInfoDialog\n          config={config}\n          onClose={() => {\n            setShowRefNames(false)\n          }}\n        />\n      ) : null}\n    </div>\n  )\n})\n\nexport default AboutDialogContents\n","import Dialog from '@jbrowse/core/ui/Dialog'\nimport { getEnv, getSession } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\n\nimport AboutContents from './AboutDialogContents'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nexport function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <AboutComponent config={config} />\n    </Dialog>\n  )\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["FileInfoPanel","t0","$","_c","config","error","setError","useState","info","setInfo","t1","getSession","session","rpcManager","t2","t3","t4","adapterConfig","readConfObject","result","call","trackId","e","console","useEffect","header","replaceAll","details","t5","_jsx","BaseCard","title","children","ErrorMessage","undefined","LoadingEllipses","message","Attributes","removeAttr","obj","attr","prop","useStyles","makeStyles","button","float","conf","setShowRefNames","copied","setCopied","classes","Button","variant","color","onClick","snap","structuredClone","copy","JSON","stringify","setTimeout","_jsxs","className","theme","container","minWidth","refNames","maxHeight","overflow","flexGrow","background","palette","default","observer","onClose","setRefNames","map","Promise","all","Set","getConfAssemblyNames","async","assemblyName","regions","Object","fromEntries","names","entries","flatMap","slice","length","filter","f","join","Dialog","open","maxWidth","DialogContent","_Fragment","content","showRefNames","hideUris","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","generateDisplayableConfig","ExtraPanel","hideFields","HeaderButtons","attributes","omit","metadata","name","Component","RefNameInfoDialog","AboutDialog","handleClose","trackName","getTrackName","AboutContents","AboutComponent","expansionPanelDetails","display","padding","spacing","icon","tertiary","contrastText","defaultExpanded","t6","ExpandMore","Typography","AccordionSummary","expandIcon","AccordionDetails","Accordion"],"sourceRoot":""}