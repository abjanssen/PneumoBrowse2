{"version":3,"file":"static/js/3199.4b1a0985.chunk.js","mappings":"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","sources":["../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/AssemblySelector.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/BookmarkGrid.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/components/GridBookmarkWidget.tsx","../../../packages/core/ui/DataGridFlexContainer.tsx","../../../plugins/grid-bookmark/src/GridBookmarkWidget/utils.ts"],"sourcesContent":["import {\n  Checkbox,\n  FormControl,\n  InputLabel,\n  ListItemText,\n  MenuItem,\n  OutlinedInput,\n  Select,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { GridBookmarkModel } from '../model'\n\nconst AssemblySelector = observer(function ({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { validAssemblies, selectedAssemblies } = model\n  const noAssemblies = validAssemblies.size === 0\n  const label = 'Select assemblies'\n  const id = 'select-assemblies-label'\n  const selectedSet = new Set(selectedAssemblies)\n  const isAllSelected = [...validAssemblies].every(e => selectedSet.has(e))\n\n  return (\n    <FormControl disabled={noAssemblies} fullWidth>\n      <InputLabel id={id}>{label}</InputLabel>\n      <Select\n        labelId={id}\n        multiple\n        value={selectedAssemblies}\n        onChange={event => {\n          model.setSelectedAssemblies(\n            typeof event.target.value === 'string'\n              ? [event.target.value]\n              : event.target.value,\n          )\n        }}\n        input={<OutlinedInput label={label} />}\n        renderValue={selected => selected.join(', ')}\n      >\n        <MenuItem\n          onClickCapture={event => {\n            // onClickCapture allows us to avoid the parent Select onChange\n            // from triggering\n            model.setSelectedAssemblies(isAllSelected ? [] : undefined)\n            event.preventDefault()\n          }}\n        >\n          <Checkbox\n            checked={isAllSelected}\n            indeterminate={!isAllSelected && selectedAssemblies.length > 0}\n          />\n          <ListItemText primary=\"Select all\" />\n        </MenuItem>\n        {[...validAssemblies].map(name => (\n          <MenuItem key={name} value={name}>\n            <Checkbox checked={selectedAssemblies.includes(name)} />\n            <ListItemText primary={name} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  )\n})\n\nexport default AssemblySelector\n","import ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport {\n  assembleLocString,\n  getSession,\n  measureGridWidth,\n  measureText,\n} from '@jbrowse/core/util'\nimport { Link } from '@mui/material'\nimport { DataGrid, GRID_CHECKBOX_SELECTION_COL_DEF } from '@mui/x-data-grid'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { navToBookmark } from '../utils'\n\nimport type { GridBookmarkModel } from '../model'\nimport type { GridColDef } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()(() => ({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\nconst BookmarkGrid = observer(function ({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { classes } = useStyles()\n  const {\n    bookmarks,\n    bookmarksWithValidAssemblies,\n    selectedAssemblies,\n    selectedBookmarks,\n  } = model\n\n  const session = getSession(model)\n  const selectedSet = new Set(selectedAssemblies)\n  const rows = bookmarks\n    .filter(r => selectedSet.has(r.assemblyName))\n    .map((region, index) => {\n      const { assemblyName, ...rest } = region\n      return {\n        ...region,\n        id: index,\n        assemblyName,\n        locString: assembleLocString(rest),\n        correspondingObj: region,\n      }\n    })\n\n  const widths = [\n    50,\n    Math.max(\n      measureText('Bookmark link', 12) + 30,\n      measureGridWidth(rows.map(row => row.locString)),\n    ),\n    Math.max(\n      measureText('Label', 12) + 30,\n      measureGridWidth(rows.map(row => row.label)),\n    ),\n    Math.max(\n      measureText('Assembly', 12) + 30,\n      measureGridWidth(rows.map(row => row.assemblyName)),\n    ),\n    100,\n  ]\n\n  return (\n    <DataGridFlexContainer>\n      <DataGrid\n        density=\"compact\"\n        rows={rows}\n        columns={[\n          {\n            ...GRID_CHECKBOX_SELECTION_COL_DEF,\n            width: widths[0],\n          } satisfies GridColDef<(typeof rows)[0]>,\n          {\n            field: 'locString',\n            headerName: 'Bookmark link',\n            width: widths[1],\n            renderCell: ({ value, row }) => (\n              <Link\n                className={classes.cell}\n                href=\"#\"\n                onClick={async event => {\n                  event.preventDefault()\n                  const { views } = session\n                  await navToBookmark(value, row.assemblyName, views, model)\n                }}\n              >\n                {value}\n              </Link>\n            ),\n          } satisfies GridColDef<(typeof rows)[0]>,\n          {\n            field: 'label',\n            headerName: 'Label',\n            width: widths[2],\n            editable: true,\n          } satisfies GridColDef<(typeof rows)[0]>,\n          {\n            field: 'assemblyName',\n            headerName: 'Assembly',\n            width: widths[3],\n          } satisfies GridColDef<(typeof rows)[0]>,\n          {\n            field: 'highlight',\n            headerName: 'Highlight',\n            width: widths[4],\n            renderCell: ({ value, row }) => (\n              <ColorPicker\n                color={value || 'black'}\n                onChange={event => {\n                  model.updateBookmarkHighlight(row, event)\n                }}\n              />\n            ),\n          } satisfies GridColDef<(typeof rows)[0]>,\n        ]}\n        processRowUpdate={row => {\n          const target = rows[row.id]!\n          model.updateBookmarkLabel(target, row.label)\n          return row\n        }}\n        onProcessRowUpdateError={e => {\n          session.notifyError(`${e}`, e)\n        }}\n        checkboxSelection\n        onRowSelectionModelChange={newRowSelectionModel => {\n          if (bookmarksWithValidAssemblies.length > 0) {\n            model.setSelectedBookmarks(\n              [...newRowSelectionModel.ids].map(value => ({\n                ...rows[value as number]!,\n              })),\n            )\n          }\n        }}\n        rowSelectionModel={{\n          type: 'include',\n          ids: new Set(selectedBookmarks.map(r => r.id)),\n        }}\n      />\n    </DataGridFlexContainer>\n  )\n})\n\nexport default BookmarkGrid\n","import { lazy } from 'react'\n\nimport CascadingMenuButton from '@jbrowse/core/ui/CascadingMenuButton'\nimport { getSession } from '@jbrowse/core/util'\nimport Delete from '@mui/icons-material/Delete'\nimport GetApp from '@mui/icons-material/GetApp'\nimport Menu from '@mui/icons-material/Menu'\nimport Palette from '@mui/icons-material/Palette'\nimport Publish from '@mui/icons-material/Publish'\nimport Settings from '@mui/icons-material/Settings'\nimport Share from '@mui/icons-material/Share'\nimport { Alert } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport AssemblySelector from './AssemblySelector'\nimport BookmarkGrid from './BookmarkGrid'\n\nimport type { GridBookmarkModel } from '../model'\n\n// lazies\nconst ExportBookmarksDialog = lazy(\n  () => import('./dialogs/ExportBookmarksDialog'),\n)\nconst ImportBookmarksDialog = lazy(\n  () => import('./dialogs/ImportBookmarksDialog'),\n)\nconst ShareBookmarksDialog = lazy(\n  () => import('./dialogs/ShareBookmarksDialog'),\n)\nconst HighlightSettingsDialog = lazy(\n  () => import('./dialogs/HighlightSettingsDialog'),\n)\nconst EditHighlightColorDialog = lazy(\n  () => import('./dialogs/EditHighlightColorDialog'),\n)\nconst DeleteBookmarksDialog = lazy(\n  () => import('./dialogs/DeleteBookmarksDialog'),\n)\n\nconst useStyles = makeStyles()({\n  flex: {\n    display: 'flex',\n  },\n})\n\nconst GridBookmarkWidget = observer(function GridBookmarkWidget({\n  model,\n}: {\n  model: GridBookmarkModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <div>\n      <Alert severity=\"info\">\n        Click and type within the <strong>label</strong> field to annotate your\n        bookmark. Double click the <strong>label</strong> field to do so within\n        a dialog.\n      </Alert>\n      <div className={classes.flex}>\n        <CascadingMenuButton\n          data-testid=\"grid_bookmark_menu\"\n          menuItems={[\n            {\n              label: 'Export',\n              icon: GetApp,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ExportBookmarksDialog,\n                  { onClose, model },\n                ])\n              },\n            },\n            {\n              label: 'Import',\n              icon: Publish,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ImportBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Delete',\n              icon: Delete,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  DeleteBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Share',\n              icon: Share,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  ShareBookmarksDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Edit colors',\n              icon: Palette,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  EditHighlightColorDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n            {\n              label: 'Settings',\n              icon: Settings,\n              onClick: () => {\n                getSession(model).queueDialog(onClose => [\n                  HighlightSettingsDialog,\n                  { model, onClose },\n                ])\n              },\n            },\n          ]}\n        >\n          <Menu />\n        </CascadingMenuButton>\n\n        <AssemblySelector model={model} />\n      </div>\n      <BookmarkGrid model={model} />\n    </div>\n  )\n})\n\nexport default GridBookmarkWidget\n","import { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()({\n  flexContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n})\n\n// https://mui.com/x/react-data-grid/layout/#flex-parent-container\nexport default function DataGridFlexContainer({\n  children,\n}: {\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n  return <div className={classes.flexContainer}>{children}</div>\n}\n","import { assembleLocString, getSession } from '@jbrowse/core/util'\nimport { saveAs } from 'file-saver'\n\nimport type { GridBookmarkModel } from './model'\nimport type { AbstractViewModel } from '@jbrowse/core/util/types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\ntype MaybeLGV = LGV | undefined\n\nexport async function navToBookmark(\n  locString: string,\n  assembly: string,\n  views: AbstractViewModel[],\n  model: GridBookmarkModel,\n) {\n  const session = getSession(model)\n  try {\n    // get the focused view\n    let view = views.find(view => view.id === session.focusedViewId) as MaybeLGV\n\n    // check if the focused view is the appropriate assembly, if not proceed\n    if (view?.assemblyNames[0] !== assembly) {\n      view = views.find(\n        elt =>\n          // @ts-expect-error\n          elt.type === 'LinearGenomeView' && elt.assemblyNames[0] === assembly,\n      ) as MaybeLGV\n    }\n\n    // if no view is opened of the selectedAssembly, open a new\n    // view with that assembly\n    if (!view) {\n      const newViewId = `${model.id}_${assembly}`\n      view = session.addView('LinearGenomeView', {\n        id: newViewId,\n      }) as LGV\n    }\n    await view.navToLocString(locString, assembly)\n  } catch (e) {\n    console.error(e)\n    session.notifyError(`${e}`, e)\n  }\n}\n\nexport function downloadBookmarkFile(\n  fileFormat: string,\n  model: GridBookmarkModel,\n) {\n  const { selectedBookmarks, bookmarksWithValidAssemblies } = model\n  const bookmarksToDownload =\n    selectedBookmarks.length === 0\n      ? bookmarksWithValidAssemblies\n      : selectedBookmarks\n\n  if (fileFormat === 'BED') {\n    const fileHeader = ''\n    const fileContents: Record<string, string[]> = {}\n    for (const bookmark of bookmarksToDownload) {\n      const { label } = bookmark\n      const labelVal = label === '' ? '.' : label\n      const line = `${bookmark.refName}\\t${bookmark.start}\\t${bookmark.end}\\t${labelVal}\\n`\n\n      if (fileContents[bookmark.assemblyName]) {\n        fileContents[bookmark.assemblyName]!.push(line)\n      } else {\n        fileContents[bookmark.assemblyName] = [line]\n      }\n    }\n\n    for (const assembly in fileContents) {\n      const fileContent = fileContents[assembly]!.reduce(\n        (a, b) => a + b,\n        fileHeader,\n      )\n      const blob = new Blob([fileContent || ''], {\n        type: 'text/x-bed;charset=utf-8',\n      })\n      const fileName = `jbrowse_bookmarks_${assembly}.bed`\n      saveAs(blob, fileName)\n    }\n  } else {\n    // TSV\n    const fileHeader = 'chrom\\tstart\\tend\\tlabel\\tassembly_name\\tcoord_range\\n'\n\n    const fileContents = bookmarksToDownload\n      .map(bookmark => {\n        const { label } = bookmark\n        const labelVal = label === '' ? '.' : label\n        const locString = assembleLocString(bookmark)\n        return `${bookmark.refName}\\t${bookmark.start + 1}\\t${\n          bookmark.end\n        }\\t${labelVal}\\t${bookmark.assemblyName}\\t${locString}\\n`\n      })\n      .reduce((a, b) => a + b, fileHeader)\n\n    const blob = new Blob([fileContents || ''], {\n      type: 'text/tab-separated-values;charset=utf-8',\n    })\n    const fileName = 'jbrowse_bookmarks.tsv'\n    saveAs(blob, fileName)\n  }\n}\n\n/**\n * Pad the end of a base64 string with \"=\" to make it valid\n * @param b64 - unpadded b64 string\n */\nexport function b64PadSuffix(b64: string): string {\n  let num = 0\n  const mo = b64.length % 4\n  switch (mo) {\n    case 3:\n      num = 1\n      break\n    case 2:\n      num = 2\n      break\n    case 0:\n      num = 0\n      break\n    default:\n      throw new Error('base64 not a valid length')\n  }\n  return b64 + '='.repeat(num)\n}\n\n/**\n * Decode and inflate a url-safe base64 to a string\n * See {@link https://en.wikipedia.org/wiki/Base64#URL_applications}\n * @param b64 - a base64 string to decode and inflate\n */\nexport async function fromUrlSafeB64(b64: string) {\n  const originalB64 = b64PadSuffix(\n    b64.replaceAll('-', '+').replaceAll('_', '/'),\n  )\n  const { toByteArray } = await import('base64-js')\n  const { inflate } = await import('pako')\n  const bytes = toByteArray(originalB64)\n  const inflated = inflate(bytes)\n  return new TextDecoder().decode(inflated)\n}\n\n/**\n * Compress and encode a string as url-safe base64\n * See {@link https://en.wikipedia.org/wiki/Base64#URL_applications}\n * @param str-  a string to compress and encode\n */\nexport async function toUrlSafeB64(str: string) {\n  const bytes = new TextEncoder().encode(str)\n  const { deflate } = await import('pako')\n  const { fromByteArray } = await import('base64-js')\n  const deflated = deflate(bytes)\n  const encoded = fromByteArray(deflated)\n  const pos = encoded.indexOf('=')\n  return pos > 0\n    ? encoded.slice(0, pos).replaceAll('+', '-').replaceAll('/', '_')\n    : encoded.replaceAll('+', '-').replaceAll('/', '_')\n}\n"],"names":["observer","model","validAssemblies","selectedAssemblies","noAssemblies","size","label","id","selectedSet","Set","isAllSelected","every","e","has","_jsxs","FormControl","disabled","fullWidth","children","_jsx","InputLabel","Select","labelId","multiple","value","onChange","event","setSelectedAssemblies","target","input","OutlinedInput","renderValue","selected","join","MenuItem","onClickCapture","undefined","preventDefault","Checkbox","checked","indeterminate","length","ListItemText","primary","map","name","includes","useStyles","makeStyles","cell","whiteSpace","overflow","textOverflow","classes","bookmarks","bookmarksWithValidAssemblies","selectedBookmarks","session","getSession","rows","filter","r","assemblyName","region","index","rest","locString","assembleLocString","correspondingObj","widths","Math","max","measureText","measureGridWidth","row","DataGridFlexContainer","DataGrid","density","columns","GRID_CHECKBOX_SELECTION_COL_DEF","width","field","headerName","renderCell","Link","className","href","onClick","async","views","navToBookmark","editable","ColorPicker","color","updateBookmarkHighlight","processRowUpdate","updateBookmarkLabel","onProcessRowUpdateError","notifyError","checkboxSelection","onRowSelectionModelChange","newRowSelectionModel","setSelectedBookmarks","ids","rowSelectionModel","type","ExportBookmarksDialog","lazy","ImportBookmarksDialog","ShareBookmarksDialog","HighlightSettingsDialog","EditHighlightColorDialog","DeleteBookmarksDialog","flex","display","Alert","severity","CascadingMenuButton","menuItems","icon","GetApp","queueDialog","onClose","Publish","Delete","Share","Palette","Settings","Menu","AssemblySelector","BookmarkGrid","flexContainer","flexDirection","assembly","view","find","focusedViewId","assemblyNames","elt","newViewId","addView","navToLocString","console","error","downloadBookmarkFile","fileFormat","bookmarksToDownload","fileHeader","fileContents","bookmark","labelVal","line","refName","start","end","push","fileContent","reduce","a","b","blob","Blob","fileName","saveAs","fromUrlSafeB64","b64","originalB64","num","Error","repeat","b64PadSuffix","replaceAll","toByteArray","inflate","inflated","TextDecoder","decode","toUrlSafeB64","str","bytes","TextEncoder","encode","deflate","fromByteArray","encoded","pos","indexOf","slice"],"sourceRoot":""}