{"version":3,"file":"static/js/8751.6315cc25.chunk.js","mappings":"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","sources":["../../../packages/core/ui/DraggableDialog.tsx","../../../plugins/variants/src/shared/components/BulkEditPanel.tsx","../../../plugins/variants/src/shared/components/HelpfulTips.tsx","../../../plugins/variants/src/shared/components/RowPalettizer.tsx","../../../plugins/variants/src/shared/components/SourcesDataGrid.tsx","../../../plugins/variants/src/shared/sourcesGridUtils.ts","../../../plugins/variants/src/shared/components/SourcesGridHeader.tsx","../../../plugins/variants/src/shared/components/SourcesGrid.tsx","../../../plugins/variants/src/shared/components/SetColorDialog.tsx","../../../plugins/variants/src/shared/util.ts"],"sourcesContent":["import { useRef } from 'react'\n\nimport CloseIcon from '@mui/icons-material/Close'\nimport {\n  Dialog,\n  DialogTitle,\n  Divider,\n  IconButton,\n  Paper,\n  ScopedCssBaseline,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport Draggable from 'react-draggable'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { DialogProps, PaperProps } from '@mui/material'\n\nconst useStyles = makeStyles()(theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n}))\n\nfunction PaperComponent(props: PaperProps) {\n  const ref = useRef<HTMLDivElement>(null)\n  return (\n    <Draggable\n      nodeRef={ref}\n      cancel={'[class*=\"MuiDialogContent-root\"]'}\n      // @ts-expect-error\n      onStart={arg => `${arg.target?.className}`.includes('MuiDialogTitle')}\n    >\n      <Paper ref={ref} {...props} />\n    </Draggable>\n  )\n}\n\nconst DraggableDialog = observer(function DraggableDialog(\n  props: DialogProps & { title: string },\n) {\n  const { classes } = useStyles()\n  const { title, children, onClose } = props\n\n  return (\n    <Dialog {...props} PaperComponent={PaperComponent}>\n      <ScopedCssBaseline>\n        <DialogTitle style={{ cursor: 'move' }}>\n          {title}\n          {onClose ? (\n            <IconButton\n              className={classes.closeButton}\n              onClick={() => {\n                // @ts-expect-error\n                onClose()\n              }}\n            >\n              <CloseIcon />\n            </IconButton>\n          ) : null}\n        </DialogTitle>\n        <Divider />\n        {children}\n      </ScopedCssBaseline>\n    </Dialog>\n  )\n})\n\nexport default DraggableDialog\n","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../types'\n\nconst useStyles = makeStyles()({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\nexport default function BulkEditPanel({\n  onClose,\n  currLayout,\n}: {\n  currLayout: Source[]\n  onClose: (arg?: Source[]) => void\n}) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [error, setError] = useState<unknown>()\n  return (\n    <>\n      <DialogContent>\n        <Typography>\n          Paste CSV or TSV. If a header column is present. First line is a\n          header. If a column called \"name\" is present, it uses that to connect\n          to IDs in the table, otherwise it uses the first column no.\n        </Typography>\n\n        {error ? <ErrorMessage error={error} /> : null}\n        <TextField\n          variant=\"outlined\"\n          multiline\n          minRows={5}\n          placeholder={\n            'name,population\\nHG00098,GBR\\nHG00101,GBR\\nHG00459,CHS\\n...'\n          }\n          maxRows={10}\n          fullWidth\n          value={val}\n          onChange={event => {\n            setVal(event.target.value)\n          }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            const lines = val\n              .split('\\n')\n              .map(f => f.trim())\n              .filter(f => !!f)\n            const fields = lines[0]!.split(/[,\\t]/gm)\n            if (fields.includes('name')) {\n              setError('')\n              const oldLayout = Object.fromEntries(\n                currLayout.map(record => [record.name, record]),\n              )\n              const newData = Object.fromEntries(\n                lines.slice(1).map(line => {\n                  const cols = line.split(/[,\\t]/gm)\n                  const newRecord = Object.fromEntries(\n                    cols.map((col, idx) => [fields[idx], col]),\n                  )\n                  return [\n                    newRecord.name,\n                    {\n                      ...newRecord,\n                      ...oldLayout[newRecord.name],\n                    },\n                  ]\n                }),\n              )\n\n              onClose(\n                currLayout.map(record => ({\n                  ...record,\n                  ...newData[record.name],\n                })),\n              )\n            } else {\n              setError(new Error('No \"name\" column found on line 1'))\n            }\n          }}\n        >\n          Update rows\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            const lines = val\n              .split('\\n')\n              .map(f => f.trim())\n              .filter(f => !!f)\n            const fields = lines[0]!.split(/[,\\t]/gm)\n            if (fields.includes('name')) {\n              setError('')\n              const oldLayout = Object.fromEntries(\n                currLayout.map(record => [record.name, record]),\n              )\n              const newData = Object.fromEntries(\n                lines.slice(1).map(line => {\n                  const cols = line.split(/[,\\t]/gm)\n                  const newRecord = Object.fromEntries(\n                    cols.map((col, idx) => [fields[idx], col]),\n                  )\n                  return [\n                    newRecord.name,\n                    {\n                      ...newRecord,\n                      ...oldLayout[newRecord.name],\n                    },\n                  ]\n                }),\n              )\n\n              onClose(\n                currLayout.map(record => ({\n                  ...newData[record.name],\n                })),\n              )\n            } else {\n              setError(new Error('No \"name\" column found on line 1'))\n            }\n          }}\n        >\n          Replace rows\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"inherit\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n}\n","export default function HelpfulTips() {\n  return (\n    <>\n      Helpful tips\n      <ul>\n        <li>You can select rows in the table with the checkboxes</li>\n        <li>Multi-select is enabled with shift-click and control-click</li>\n        <li>The \"Move selected items up/down\" can re-arrange subtracks</li>\n        <li>Sorting the data grid itself can also re-arrange subtracks</li>\n        <li>Changes are applied when you hit Submit</li>\n        <li>You can click and drag the dialog box to move it on the screen</li>\n        <li>\n          Columns in the table can be hidden using a vertical '...' menu on the\n          right side of each column\n        </li>\n      </ul>\n    </>\n  )\n}\n","import { set1 } from '@jbrowse/core/ui/colors'\nimport { Button } from '@mui/material'\n\nimport { randomColor } from '../util'\n\nimport type { Source } from '../types'\n\nexport default function RowPalettizer({\n  setCurrLayout,\n  currLayout,\n}: {\n  currLayout: Source[]\n  setCurrLayout: (arg: Source[]) => void\n}) {\n  return (\n    <div>\n      Create color palette based on...\n      {Object.keys(currLayout[0] ?? [])\n        .filter(\n          f =>\n            f !== 'name' &&\n            f !== 'color' &&\n            f !== 'label' &&\n            f !== 'id' &&\n            f !== 'HP',\n        )\n        .map(r => (\n          <Button\n            key={r}\n            variant=\"contained\"\n            color=\"inherit\"\n            onClick={() => {\n              const map = new Map<string, number>()\n              for (const row of currLayout) {\n                const val = map.get(row[r] as string)\n                if (!val) {\n                  map.set(row[r] as string, 1)\n                } else {\n                  map.set(row[r] as string, val + 1)\n                }\n              }\n              const ret = Object.fromEntries(\n                [...map.entries()]\n                  .sort((a, b) => a[1] - b[1])\n                  .map((r, idx) => [r[0], set1[idx] || randomColor(r[0])]),\n              )\n\n              setCurrLayout(\n                currLayout.map(row => ({\n                  ...row,\n                  color: ret[row[r] as string],\n                })),\n              )\n            }}\n          >\n            {r}\n          </Button>\n        ))}\n      <Button\n        onClick={() => {\n          setCurrLayout(\n            currLayout.map(row => ({\n              ...row,\n              color: undefined,\n            })),\n          )\n        }}\n      >\n        Clear colors\n      </Button>\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport { getStr, measureGridWidth } from '@jbrowse/core/util'\nimport { DataGrid } from '@mui/x-data-grid'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { Source } from '../types'\nimport type { GridColDef, GridRowId } from '@mui/x-data-grid'\n\nconst useStyles = makeStyles()({\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n})\n\ninterface SortField {\n  idx: number\n  field: string | null\n}\n\nexport default function SourcesDataGrid({\n  rows,\n  onChange,\n  setSelected,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  setSelected: (arg: GridRowId[]) => void\n}) {\n  const { classes } = useStyles()\n  const {\n    id: _id,\n    name: _name,\n    label: _label,\n    color: _color,\n    baseUri: _baseUri,\n    HP: _HP,\n    ...rest\n  } = rows[0]!\n  const [currSort, setCurrSort] = useState<SortField>({\n    idx: 0,\n    field: null,\n  })\n\n  return (\n    <div style={{ height: 400, width: '100%' }}>\n      <DataGrid\n        checkboxSelection\n        disableRowSelectionOnClick\n        onRowSelectionModelChange={arg => {\n          setSelected([...arg.ids])\n        }}\n        rows={rows}\n        rowHeight={25}\n        columnHeaderHeight={33}\n        columns={[\n          {\n            field: 'color',\n            headerName: 'Color',\n            renderCell: params => {\n              const { value, id } = params\n              return (\n                <ColorPicker\n                  color={value || 'blue'}\n                  onChange={c => {\n                    const elt = rows.find(f => f.name === id)\n                    if (elt) {\n                      elt.color = c\n                    }\n                    onChange([...rows])\n                  }}\n                />\n              )\n            },\n          },\n          {\n            field: 'label',\n            headerName: 'Name',\n            width: measureGridWidth(rows.map(r => r.label)),\n          },\n          ...Object.keys(rest).map(\n            val =>\n              ({\n                field: val,\n                renderCell: ({ value }) => (\n                  <div className={classes.cell}>\n                    <SanitizedHTML html={getStr(value)} />\n                  </div>\n                ),\n                width: measureGridWidth(\n                  rows.map(r => `${r[val as keyof Source]}`),\n                ),\n              }) satisfies GridColDef<(typeof rows)[0]>,\n          ),\n        ]}\n        sortModel={\n          [\n            /* we control the sort as a controlled component using\n             * onSortModelChange */\n          ]\n        }\n        onSortModelChange={args => {\n          const sort = args[0]\n          // this idx%2 flip flops the sorting order, we could inspect args\n          // for sort direction asc or desc but this is just a simplified\n          // thing since we are controlling sort instead of the default data\n          // grid sort anyways\n          const idx = (currSort.idx + 1) % 2\n          const field = sort!.field || currSort.field\n          setCurrSort({ idx, field })\n          onChange(\n            field\n              ? [...rows].sort((a, b) => {\n                  const aa = getStr(a[field as keyof Source])\n                  const bb = getStr(b[field as keyof Source])\n                  return idx === 1 ? aa.localeCompare(bb) : bb.localeCompare(aa)\n                })\n              : rows,\n          )\n        }}\n      />\n    </div>\n  )\n}\n","import type { GridRowId } from '@mui/x-data-grid'\n\nexport function moveUp(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n","import { useState } from 'react'\n\nimport { ColorPopover } from '@jbrowse/core/ui/ColorPicker'\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown'\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp'\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown'\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp'\nimport { Button } from '@mui/material'\n\nimport { moveDown, moveUp } from '../sourcesGridUtils'\n\nimport type { Source } from '../types'\nimport type { GridRowId } from '@mui/x-data-grid'\n\nexport default function SourcesGridHeader({\n  selected,\n  onChange,\n  rows,\n  showTips,\n}: {\n  onChange: (arg: Source[]) => void\n  rows: Source[]\n  selected: GridRowId[]\n  showTips: boolean\n}) {\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null)\n  const [widgetColor, setWidgetColor] = useState('blue')\n  return (\n    <>\n      <Button\n        disabled={!selected.length}\n        onClick={event => {\n          setAnchorEl(event.currentTarget)\n        }}\n      >\n        Change color of selected items\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowUpIcon />\n        {showTips ? 'Move selected items up' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardArrowDownIcon />\n        {showTips ? 'Move selected items down' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveUp([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowUpIcon />\n        {showTips ? 'Move selected items to top' : null}\n      </Button>\n      <Button\n        onClick={() => {\n          onChange(moveDown([...rows], selected, rows.length))\n        }}\n        disabled={!selected.length}\n      >\n        <KeyboardDoubleArrowDownIcon />\n        {showTips ? 'Move selected items to bottom' : null}\n      </Button>\n      <ColorPopover\n        anchorEl={anchorEl}\n        color={widgetColor}\n        onChange={c => {\n          setWidgetColor(c)\n          for (const id of selected) {\n            const elt = rows.find(f => f.name === id)\n            if (elt) {\n              elt.color = c\n            }\n          }\n\n          onChange([...rows])\n        }}\n        onClose={() => {\n          setAnchorEl(null)\n        }}\n      />\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport SourcesDataGrid from './SourcesDataGrid'\nimport SourcesGridHeader from './SourcesGridHeader'\n\nimport type { Source } from '../types'\nimport type { GridRowId } from '@mui/x-data-grid'\n\nfunction SourcesGrid({\n  rows,\n  onChange,\n  showTips,\n}: {\n  rows: Source[]\n  onChange: (arg: Source[]) => void\n  showTips: boolean\n}) {\n  const [selected, setSelected] = useState([] as GridRowId[])\n\n  return (\n    <div>\n      <SourcesGridHeader\n        selected={selected}\n        rows={rows}\n        showTips={showTips}\n        onChange={onChange}\n      />\n      {rows.length ? (\n        <SourcesDataGrid\n          rows={rows}\n          onChange={onChange}\n          setSelected={setSelected}\n        />\n      ) : (\n        <div>No rows</div>\n      )}\n    </div>\n  )\n}\n\nexport default SourcesGrid\n","import { useState } from 'react'\n\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog'\nimport { useLocalStorage } from '@jbrowse/core/util'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport BulkEditPanel from './BulkEditPanel'\nimport HelpfulTips from './HelpfulTips'\nimport RowPalettizer from './RowPalettizer'\nimport SourcesGrid from './SourcesGrid'\n\nimport type { Source } from '../types'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  fr: {\n    float: 'right',\n    display: 'flex',\n    gap: 8,\n  },\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n})\n\ninterface ReducedModel {\n  sources?: Source[]\n  setLayout: (s: Source[]) => void\n  clearLayout: () => void\n}\n\nexport default function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const { sources } = model\n  const [showBulkEditor, setShowBulkEditor] = useState(false)\n  const [currLayout, setCurrLayout] = useState(sources || [])\n  const [showTips, setShowTips] = useLocalStorage(\n    'multivariant-showTips',\n    false,\n  )\n  return (\n    <DraggableDialog\n      open\n      onClose={handleClose}\n      maxWidth=\"xl\"\n      title=\"Multi-sample variant display - Color/arrangement editor\"\n    >\n      {showBulkEditor ? (\n        <BulkEditPanel\n          currLayout={currLayout}\n          onClose={arg => {\n            if (arg) {\n              setCurrLayout(arg)\n            }\n\n            setShowBulkEditor(false)\n          }}\n        />\n      ) : (\n        <>\n          <DialogContent className={classes.content}>\n            <div className={classes.fr}>\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  setShowTips(!showTips)\n                }}\n              >\n                {showTips ? 'Hide tips' : 'Show tips'}\n              </Button>\n              <Button\n                color=\"secondary\"\n                variant=\"contained\"\n                onClick={() => {\n                  setShowBulkEditor(!showBulkEditor)\n                }}\n              >\n                Show Bulk row editor\n              </Button>\n            </div>\n\n            {showTips ? <HelpfulTips /> : null}\n            <br />\n            <RowPalettizer\n              currLayout={currLayout}\n              setCurrLayout={setCurrLayout}\n            />\n\n            <SourcesGrid\n              rows={currLayout}\n              onChange={setCurrLayout}\n              showTips={showTips}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              variant=\"contained\"\n              type=\"submit\"\n              color=\"inherit\"\n              onClick={() => {\n                model.clearLayout()\n                setCurrLayout(model.sources || [])\n              }}\n            >\n              Clear custom settings\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                handleClose()\n                setCurrLayout([...(model.sources || [])])\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              type=\"submit\"\n              onClick={() => {\n                model.setLayout(currLayout)\n                handleClose()\n              }}\n            >\n              Submit\n            </Button>\n          </DialogActions>\n        </>\n      )}\n    </DraggableDialog>\n  )\n}\n","// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  color?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function randomColor(str: string) {\n  let sum = 0\n\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i)\n  }\n  return colorify(sum * 10)\n}\n\nexport function colorify(n: number) {\n  return `hsl(${n % 255}, 50%, 50%)`\n}\n"],"names":["useStyles","makeStyles","theme","closeButton","position","right","spacing","top","color","palette","grey","PaperComponent","props","$","_c","ref","useRef","t0","_jsx","Draggable","cancel","onStart","_temp","children","Paper","arg","target","className","includes","observer","classes","title","onClose","Dialog","_jsxs","ScopedCssBaseline","DialogTitle","style","cursor","IconButton","onClick","CloseIcon","Divider","textAreaFont","fontFamily","BulkEditPanel","currLayout","val","setVal","useState","error","setError","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","Symbol","for","Typography","ErrorMessage","event","value","input","TextField","variant","multiline","minRows","placeholder","maxRows","fullWidth","onChange","slotProps","DialogContent","Button","lines","split","map","filter","_temp2","fields","oldLayout","Object","fromEntries","_temp3","newData","slice","line","cols","newRecord","col","idx","name","record_0","record","Error","lines_0","_temp4","_temp5","fields_0","oldLayout_0","_temp6","newData_0","line_0","cols_0","newRecord_0","col_0","idx_0","record_2","DialogActions","_Fragment","record_1","f_2","f","f_1","trim","f_0","HelpfulTips","RowPalettizer","setCurrLayout","keys","r","Map","row","get","set","ret","entries","sort","row_0","row_1","undefined","r_0","set1","randomColor","a","b","cell","whiteSpace","overflow","textOverflow","SourcesDataGrid","rows","setSelected","rest","id","_id","_name","label","_label","_color","baseUri","_baseUri","HP","_HP","field","currSort","setCurrSort","t12","height","width","ids","headerName","renderCell","params","ColorPicker","c","elt","find","measureGridWidth","value_0","SanitizedHTML","html","getStr","args","aa","bb","localeCompare","DataGrid","checkboxSelection","disableRowSelectionOnClick","onRowSelectionModelChange","rowHeight","columnHeaderHeight","columns","sortModel","onSortModelChange","moveUp","arr","sel","by","idxs","l","findIndex","v","lastIdx","old","Math","max","splice","moveDown","length","min","SourcesGridHeader","selected","showTips","anchorEl","setAnchorEl","widgetColor","setWidgetColor","currentTarget","disabled","KeyboardArrowUpIcon","KeyboardArrowDownIcon","t13","t14","t15","t16","KeyboardDoubleArrowUpIcon","t17","t18","t19","t20","t21","KeyboardDoubleArrowDownIcon","t22","t23","t24","t25","t26","t27","ColorPopover","content","minWidth","fr","float","display","gap","SetColorDialog","model","handleClose","sources","showBulkEditor","setShowBulkEditor","setShowTips","useLocalStorage","SourcesGrid","type","clearLayout","setLayout","DraggableDialog","open","maxWidth","str","sum","i","charCodeAt","colorify","n"],"sourceRoot":""}