{"version":3,"file":"static/js/1503.9aec1b74.chunk.js","mappings":"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","sources":["../../../packages/core/util/parseLineByLine.ts","../../../node_modules/gtf-nostream/src/util.ts","../../../node_modules/gtf-nostream/src/parse.ts","../../../plugins/gtf/src/util.ts","../../../plugins/gtf/src/GtfAdapter/GtfAdapter.ts","../../../node_modules/gtf-nostream/src/api.ts"],"sourcesContent":["import { getProgressDisplayStr } from './index'\n\nexport type StatusCallback = (arg: string) => void\nexport type LineCallback = (\n  line: string,\n  lineIndex: number,\n) => boolean | undefined\n\n/**\n * Parse buffer line by line, calling a callback for each line\n * @param buffer - The buffer to parse\n * @param lineCallback - Callback function called for each line. Return false to stop parsing.\n * @param statusCallback - Optional callback for progress updates\n */\nexport function parseLineByLine(\n  buffer: Uint8Array,\n  lineCallback: LineCallback,\n  statusCallback: StatusCallback = () => {},\n) {\n  const decoder = new TextDecoder('utf8')\n  let blockStart = 0\n  let i = 0\n\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf(10, blockStart)\n    // could be a non-newline ended file, so subarray to end of file if n===-1\n    const lineEnd = n === -1 ? buffer.length : n\n    const b = buffer.subarray(blockStart, lineEnd)\n    const line = decoder.decode(b).trim()\n\n    if (line) {\n      const shouldContinue = lineCallback(line, i)\n      if (shouldContinue === false) {\n        break\n      }\n    }\n\n    if (i++ % 10_000 === 0) {\n      statusCallback(\n        `Loading ${getProgressDisplayStr(blockStart, buffer.length)}`,\n      )\n    }\n\n    // If no newline found, we've reached the end\n    blockStart = lineEnd + 1\n  }\n}\n","//@ts-nocheck\n/** @module util */\n\n// Forks @gmod/gff-js and adapts it to parse and format GTF.\n\nconst fieldNames = [\n  'seq_name',\n  'source',\n  'featureType',\n  'start',\n  'end',\n  'score',\n  'strand',\n  'frame',\n  'attributes',\n]\n\n// TODO: check about enconding/escaping in gtf 9th column\n/**\n * Unescape a string/text value used in a GTF attribute.\n * Textual attributes should be surrounded by double quotes\n * source info:\n * https://mblab.wustl.edu/GTF22.html\n * https://en.wikipedia.org/wiki/Gene_transfer_format\n *\n * @param {String} s\n * @returns {String}\n */\nexport function unescape(s) {\n  if (s === null) {\n    return null\n  }\n  return String(s).replace(/%([0-9A-Fa-f]{2})/g, (_, seq) =>\n    String.fromCharCode(parseInt(seq, 16)),\n  )\n}\n\n/**\n * Escape a value for use in a GTF attribute value.\n *\n * @param {String} s\n * @returns {String}\n */\nfunction _escape(regex, s) {\n  return String(s).replace(regex, ch => {\n    let hex = ch.charCodeAt(0).toString(16).toUpperCase()\n\n    // lol, apparently there's no native function for fixed-width hex output\n    if (hex.length < 2) {\n      hex = `0${hex}`\n    }\n    return `%${hex}`\n  })\n}\n\nexport function escape(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n;\\r\\t=%&,\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Escape a value for use in a GTF column value.\n *\n * @param {String} s\n * @returns {String}\n */\nexport function escapeColumn(s) {\n  // eslint-disable-next-line no-control-regex\n  return _escape(/[\\n\\r\\t%\\x00-\\x1f\\x7f-\\xff]/g, s)\n}\n\n/**\n * Parse the 9th column (attributes) of a GTF feature line.\n *\n * @param {String} attrString\n * @returns {Object}\n */\nexport function parseAttributes(attrString) {\n  if (!(attrString && attrString.length) || attrString === '.') {\n    return {}\n  }\n\n  const attrs = {}\n\n  attrString\n    .replace(/\\r?\\n$/, '')\n    .slice(0, -1) // need to remove the last semicolon in the attributes\n    .split(';')\n    .forEach(attribute => {\n      if (!attribute) {\n        return\n      }\n      const attr = attribute.trim().split(' ')\n      if (!(attr[1] && attr[1].length)) {\n        return\n      }\n\n      attr[0] = attr[0].trim()\n      let arec = attrs[attr[0].trim()]\n      if (!arec) {\n        arec = []\n        attrs[attr[0]] = arec\n      }\n\n      // arec.push(unescape(attr[1].trim()))\n      arec.push(\n        ...attr[1]\n          .split(',')\n          .map(s => s.trim())\n          .map(unescape),\n      )\n    })\n  return attrs\n}\n\n/**\n * Parse a GTF feature line.\n *\n * @param {String} line\n * returns the parsed line in an object\n */\nexport function parseFeature(line) {\n  // assumed that there are no comments at the end of a line\n  // split the line into columns and replace '.' with null in each column\n  const f = line.split('\\t').map(a => (a === '.' ? null : a))\n\n  // unescape only the seq_name, source, and feature columns\n  f[0] = unescape(f[0])\n  f[1] = unescape(f[1])\n  f[2] = unescape(f[2])\n\n  f[8] = parseAttributes(f[8])\n  const parsed = {}\n  for (let i = 0; i < fieldNames.length; i += 1) {\n    parsed[fieldNames[i]] = f[i] === '.' ? null : f[i]\n  }\n  if (parsed.start !== null) {\n    parsed.start = parseInt(parsed.start, 10)\n  }\n  if (parsed.end !== null) {\n    parsed.end = parseInt(parsed.end, 10)\n  }\n  if (parsed.score !== null) {\n    parsed.score = parseFloat(parsed.score, 10)\n  }\n  if (parsed.strand != null) {\n    parsed.strand = parsed.strand\n  }\n  return parsed\n}\n\n/**\n * Parse a GTF directive/comment line.\n *\n * @param {String} line\n * @returns {Object} the information in the directive\n */\nexport function parseDirective(line) {\n  const match = /^\\s*##\\s*(\\S+)\\s*(.*)/.exec(line)\n  // const match = /^\\s*\\#\\#\\s*(\\S+)\\s*(.*)/.exec(line)\n  if (!match) {\n    return null\n  }\n\n  // let [, name, contents] = match\n  const name = match[1]\n  let contents = match[2]\n  const parsed = { directive: name }\n  if (contents.length) {\n    contents = contents.replace(/\\r?\\n$/, '')\n    parsed.value = contents\n  }\n\n  // do a little additional parsing for sequence-region and genome-build directives\n  if (name === 'sequence-region') {\n    const [seqId, contentStart, contentEnd] = contents.split(/\\s+/, 3)\n    parsed.seq_id = seqId\n    parsed.start = contentStart && contentStart.replace(/\\D/g, '')\n    parsed.end = contentEnd && contentEnd.replace(/\\D/g, '')\n  } else if (name === 'genome-build') {\n    const [source, buildname] = contents.split(/\\s+/, 2)\n    parsed.source = source\n    parsed.buildname = buildname\n  }\n\n  return parsed\n}\n\n/**\n * Format an attributes object into a string suitable for the 9th column of GTF.\n *\n * @param {Object} attrs\n */\nexport function formatAttributes(attrs) {\n  const attrOrder = []\n  Object.keys(attrs).forEach(tag => {\n    const val = attrs[tag]\n    let valstring\n    // eslint-disable-next-line no-prototype-builtins\n    if (val.hasOwnProperty('toString')) {\n      valstring = escape(val.toString())\n    } else if (Array.isArray(val.values)) {\n      valstring = val.values.map(escape).join(',')\n    } else if (Array.isArray(val)) {\n      valstring = val.map(escape).join(',')\n    } else {\n      valstring = escape(val)\n    }\n    attrOrder.push(`${escape(tag)} ${valstring}`)\n  })\n  return attrOrder.length ? attrOrder.join('; ').concat(';') : '.'\n}\n\nconst translateStrand = ['-', '.', '+']\n\nfunction _formatSingleFeature(f, seenFeature) {\n  const attrString =\n    f.attributes === null || f.attributes === undefined\n      ? '.'\n      : formatAttributes(f.attributes)\n\n  const fields = []\n  for (let i = 0; i < 8; i += 1) {\n    const val = f[fieldNames[i]]\n    // deserialize strand\n    if (i === 6) {\n      fields[i] =\n        val === null || val === undefined\n          ? '.'\n          : translateStrand[val + 1] || val\n    } else {\n      fields[i] =\n        val === null || val === undefined ? '.' : escapeColumn(String(val))\n    }\n  }\n  fields[8] = attrString\n\n  const formattedString = `${fields.join('\\t')}\\n`\n\n  // if we have already output this exact feature, skip it\n  if (seenFeature[formattedString]) {\n    return ''\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  seenFeature[formattedString] = true\n  return formattedString\n}\n\nfunction _formatFeature(feature, seenFeature) {\n  if (Array.isArray(feature)) {\n    return feature.map(f => _formatFeature(f, seenFeature)).join('')\n  }\n\n  const strings = [_formatSingleFeature(feature, seenFeature)]\n  ;['child_features', 'derived_features'].forEach(multiSlot => {\n    if (feature[multiSlot]) {\n      strings.push(\n        ...feature[multiSlot].map(f => _formatFeature(f, seenFeature)),\n      )\n    }\n  })\n  return strings.join('')\n}\n\n/**\n * Format a feature object or array of\n * feature objects into one or more lines of GTF.\n *\n * @param {Object|Array[Object]} featureOrFeatures\n */\nexport function formatFeature(featureOrFeatures) {\n  const seen = {}\n  return _formatFeature(featureOrFeatures, seen)\n}\n\n/**\n * Format a directive into a line of GTF.\n *\n * @param {Object} directive\n * @returns {String}\n */\nexport function formatDirective(directive) {\n  let str = `##${directive.directive}`\n  if (directive.value) {\n    str += ` ${directive.value}`\n  }\n  str += '\\n'\n  return str\n}\n\n/**\n * Format a comment into a GTF comment.\n * Yes I know this is just adding a # and a newline.\n *\n * @param {Object} comment\n * @returns {String}\n */\nexport function formatComment(comment) {\n  return `# ${comment.comment}\\n`\n}\n\n/**\n * Format a sequence object as FASTA\n *\n * @param {Object} seq\n * @returns {String} formatted single FASTA sequence\n */\nexport function formatSequence(seq) {\n  return `>${seq.id}${seq.description ? ` ${seq.description}` : ''}\\n${\n    seq.sequence\n  }\\n`\n}\n\n/**\n * Format a directive, comment, or feature,\n * or array of such items, into one or more lines of GTF.\n *\n * @param {Object|Array} itemOrItems\n */\nexport function formatItem(itemOrItems) {\n  function formatSingleItem(item) {\n    if (item[0] || item.attributes) {\n      return formatFeature(item)\n    }\n    if (item.directive) {\n      return formatDirective(item)\n    }\n    if (item.sequence) {\n      return formatSequence(item)\n    }\n    if (item.comment) {\n      return formatComment(item)\n    }\n    return '# (invalid item found during format)\\n'\n  }\n\n  if (Array.isArray(itemOrItems)) {\n    return itemOrItems.map(item => formatSingleItem(item))\n  }\n  return formatSingleItem(itemOrItems)\n}\n","//@ts-nocheck\nimport * as GTF from './util'\n\nconst containerAttributes = {\n  Parent: 'child_features',\n  Derives_from: 'derived_features',\n}\n\nexport default class Parser {\n  constructor(args) {\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    const nullFunc = () => {}\n\n    Object.assign(this, {\n      featureCallback: args.featureCallback || nullFunc,\n      endCallback: args.endCallback || nullFunc,\n      commentCallback: args.commentCallback || nullFunc,\n      errorCallback: args.errorCallback || nullFunc,\n      directiveCallback: args.directiveCallback || nullFunc,\n      sequenceCallback: args.sequenceCallback || nullFunc,\n\n      // number of lines to buffer\n      bufferSize: args.bufferSize === undefined ? 1000 : args.bufferSize,\n\n      // features that we have to keep on hand for now because they\n      // might be referenced by something else\n      _underConstructionTopLevel: [],\n      // index of the above by ID\n      _underConstructionById: {},\n\n      _completedReferences: {},\n\n      // features that reference something we have not seen yet\n      // structured as:\n      // {  'some_id' : {\n      //     'Parent' : [ orphans that have a Parent attr referencing it ],\n      //     'Derives_from' : [ orphans that have a Derives_from attr referencing it ],\n      //    }\n      // }\n      _underConstructionOrphans: {},\n\n      // if this is true, the parser ignores the\n      // rest of the lines in the file.\n      eof: false,\n\n      lineNumber: 0,\n    })\n  }\n\n  addLine(line) {\n    if (this.eof) {\n      // otherwise, if we are done, ignore this line\n      return\n    }\n\n    this.lineNumber += 1\n\n    if (/^\\s*[^#\\s>]/.test(line)) {\n      // feature line, most common case\n      this._bufferLine(line)\n      return\n    }\n\n    const match = /^\\s*(#+)(.*)/.exec(line)\n    if (match) {\n      // directive or comment\n      // eslint-disable-next-line prefer-const\n      let [, hashsigns, contents] = match\n\n      if (hashsigns.length === 3) {\n        // sync directive, all forward-references are resolved.\n        this._emitAllUnderConstructionFeatures()\n      } else if (hashsigns.length === 2) {\n        const directive = GTF.parseDirective(line)\n\n        this._emitItem(directive)\n      } else {\n        contents = contents.replace(/\\s*/, '')\n        this._emitItem({ comment: contents })\n      }\n    } else if (/^\\s*$/.test(line)) {\n      // blank line, do nothing\n    } else {\n      // it's a parse error\n      const errLine = line.replace(/\\r?\\n?$/g, '')\n      throw new Error(`GTF parse error.  Cannot parse '${errLine}'.`)\n    }\n  }\n\n  _emitItem(i) {\n    if (i[0]) {\n      this.featureCallback(i)\n    } else if (i.directive) {\n      this.directiveCallback(i)\n    } else if (i.comment) {\n      this.commentCallback(i)\n    }\n  }\n\n  finish() {\n    this._emitAllUnderConstructionFeatures()\n    this.endCallback()\n  }\n\n  _enforceBufferSizeLimit(additionalItemCount = 0) {\n    const _unbufferItem = item => {\n      if (\n        item?.[0]?.attributes?.ID?.[0]\n      ) {\n        const ids = item[0].attributes.ID\n        ids.forEach(id => {\n          delete this._underConstructionById[id]\n          delete this._completedReferences[id]\n        })\n        item.forEach(i => {\n          if (i.child_features) {\n            i.child_features.forEach(c => { _unbufferItem(c) })\n          }\n          if (i.derived_features) {\n            i.derived_features.forEach(d => { _unbufferItem(d) })\n          }\n        })\n      }\n    }\n\n    while (\n      this._underConstructionTopLevel.length + additionalItemCount >\n      this.bufferSize\n    ) {\n      const item = this._underConstructionTopLevel.shift()\n      this._emitItem(item)\n      _unbufferItem(item)\n    }\n  }\n\n  /**\n   * return all under-construction features, called when we know\n   * there will be no additional data to attach to them\n   * @private\n   */\n  _emitAllUnderConstructionFeatures() {\n    this._underConstructionTopLevel.forEach(this._emitItem.bind(this))\n\n    this._underConstructionTopLevel = []\n    this._underConstructionById = {}\n    this._completedReferences = {}\n\n    // if we have any orphans hanging around still, this is a\n    // problem. die with a parse error\n    if (\n      Object.values(this._underConstructionOrphans).filter(\n        entry => Object.keys(entry).length,\n      ).length\n    ) {\n      throw new Error(\n        `some features reference other features that do not exist in the file (or in the same '###' scope). ${JSON.stringify(\n          this._underConstructionOrphans,\n        )}`,\n      )\n    }\n  }\n\n  // do the right thing with a newly-parsed feature line\n  _bufferLine(line) {\n    const featureLine = GTF.parseFeature(line)\n    featureLine.child_features = []\n    featureLine.derived_features = []\n    // featureLine._lineNumber = this.lineNumber //< debugging aid\n\n    const featureNumber = this.lineNumber // no such thing as unique ID in GTF. make one up.\n    const isTranscript = featureLine.featureType === 'transcript' // trying to support the Cufflinks convention of adding a transcript line\n    // NOTE: a feature is an arrayref of one or more feature lines.\n    const ids = isTranscript\n      ? featureLine.attributes.transcript_id || []\n      : [featureNumber]\n    const parents = isTranscript\n      ? []\n      : featureLine.attributes.transcript_id || []\n    const derives = featureLine.attributes.Derives_from || []\n\n    if (!ids.length && !parents.length && !derives.length) {\n      // if it has no IDs and does not refer to anything, we can just\n      // output it\n      this._emitItem([featureLine])\n      return\n    }\n\n    function createTranscript(feature) {\n      const result = JSON.parse(JSON.stringify(feature))\n      result.featureType = 'transcript'\n      return GTF.formatFeature(result)\n    }\n\n    parents.forEach(parent => {\n      const underConst = this._underConstructionById[parent]\n      if (!underConst) {\n        this._bufferLine(createTranscript(featureLine))\n      }\n    })\n\n    let feature\n    ids.forEach(id => {\n      const existing = this._underConstructionById[id]\n      if (existing) {\n        existing.push(featureLine)\n        feature = existing\n      } else {\n        // haven't seen it yet, so buffer it so we can attach\n        // child features to it\n        feature = [featureLine]\n\n        this._enforceBufferSizeLimit(1)\n        if (!parents.length && !derives.length) {\n          this._underConstructionTopLevel.push(feature)\n        }\n        this._underConstructionById[id] = feature\n\n        // see if we have anything buffered that refers to it\n        this._resolveReferencesTo(feature, id)\n      }\n    })\n\n    // try to resolve all its references\n    this._resolveReferencesFrom(\n      feature || [featureLine],\n      { Parent: parents, Derives_from: derives },\n      ids,\n    )\n  }\n\n  _resolveReferencesTo(feature, id) {\n    const references = this._underConstructionOrphans[id]\n    if (!references) {\n      return\n    }\n\n    Object.keys(references).forEach(attrname => {\n      const pname = containerAttributes[attrname] || attrname.toLowerCase()\n      feature.forEach(loc => {\n        loc[pname].push(...references[attrname])\n        delete references[attrname]\n      })\n    })\n  }\n\n  _parseError(message) {\n    this.eof = true\n    this.errorCallback(`${this.lineNumber}: ${message}`)\n  }\n\n  _resolveReferencesFrom(feature, references, ids) {\n    // this is all a bit more awkward in javascript than it was in perl\n    function postSet(obj, slot1, slot2) {\n      let subObj = obj[slot1]\n      if (!subObj) {\n        subObj = {}\n         \n        obj[slot1] = subObj\n      }\n      const returnVal = subObj[slot2] || false\n      subObj[slot2] = true\n      return returnVal\n    }\n\n    function expandFeature(parentFeature, childFeature) {\n       \n      parentFeature[0].start = Math.min(\n        parentFeature[0].start,\n        childFeature[0].start,\n      )\n       \n      parentFeature[0].end = Math.max(parentFeature[0].end, childFeature[0].end)\n    }\n\n    Object.entries(references).forEach(([attrname, toIds]) => {\n      let pname\n      toIds.forEach(toId => {\n        const otherFeature = this._underConstructionById[toId]\n        if (otherFeature) {\n          expandFeature(otherFeature, feature)\n          if (!pname) {\n            pname = containerAttributes[attrname] || attrname.toLowerCase()\n          }\n\n          if (\n            !ids.filter(id =>\n              postSet(this._completedReferences, id, `${attrname},${toId}`),\n            ).length\n          ) {\n            otherFeature.forEach(location => {\n              location[pname].push(feature)\n            })\n          }\n        } else {\n          if (!this._underConstructionOrphans[toId]) {\n            this._underConstructionOrphans[toId] = {}\n          }\n          if (!this._underConstructionOrphans[toId][attrname]) {\n            this._underConstructionOrphans[toId][attrname] = []\n          }\n          this._underConstructionOrphans[toId][attrname].push(feature)\n        }\n      })\n    })\n  }\n}\n","export type Strand = '+' | '-' | '.' | '?'\nexport interface FeatureLoc {\n  [key: string]: unknown\n  start: number\n  end: number\n  strand: Strand\n  seq_name: string\n  child_features?: FeatureLoc[][]\n  data: unknown\n  derived_features: unknown\n  attributes: Record<string, unknown[]>\n}\n\nexport function featureData(data: FeatureLoc, id?: string) {\n  const f: Record<string, unknown> = { ...data }\n  ;(f.start as number) -= 1 // convert to interbase\n  f.strand = { '+': 1, '-': -1, '.': 0, '?': undefined }[data.strand] // convert strand\n  f.phase = Number(data.frame)\n  f.refName = data.seq_name\n  if (data.score === null) {\n    f.score = undefined\n  }\n  if (data.frame === null) {\n    f.score = undefined\n  }\n  const defaultFields = new Set([\n    'start',\n    'end',\n    'seq_name',\n    'score',\n    'featureType',\n    'source',\n    'frame',\n    'strand',\n  ])\n  for (const a of Object.keys(data.attributes)) {\n    let b = a.toLowerCase()\n    if (defaultFields.has(b)) {\n      // add \"suffix\" to tag name if it already exists\n      // reproduces behavior of NCList\n      b += '2'\n    }\n    if (data.attributes[a]) {\n      let attr = data.attributes[a] as string[] | string\n      if (Array.isArray(attr) && attr.length === 1) {\n        // gtf uses double quotes for text values in the attributes column,\n        // remove them\n        attr = attr[0]!.replaceAll(/^\"|\"$/g, '')\n      }\n      f[b] = attr\n    }\n  }\n  f.refName = f.seq_name\n  f.type = f.featureType\n\n  // the SimpleFeature constructor takes care of recursively inflating subfeatures\n  if (data.child_features && data.child_features.length > 0) {\n    f.subfeatures = data.child_features.flatMap(childLocs =>\n      childLocs.map(childLoc => featureData(childLoc)),\n    )\n  }\n\n  f.child_features = undefined\n  f.data = undefined\n  f.derived_features = undefined\n  f._linehash = undefined\n  f.attributes = undefined\n  f.seq_name = undefined\n  f.featureType = undefined\n  f.frame = undefined\n\n  if (f.transcript_id) {\n    f.name = f.transcript_id\n  }\n  if (id !== undefined) {\n    f.uniqueId = id\n  }\n  return f\n}\n","import IntervalTree from '@flatten-js/interval-tree'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  SimpleFeature,\n  doesIntersect2,\n  fetchAndMaybeUnzip,\n  max,\n  min,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { parseLineByLine } from '@jbrowse/core/util/parseLineByLine'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { parseStringSync } from 'gtf-nostream'\n\nimport { featureData } from '../util'\n\nimport type { FeatureLoc } from '../util'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\nimport type { Observer } from 'rxjs'\n\ntype StatusCallback = (arg: string) => void\n\nexport default class GtfAdapter extends BaseFeatureDataAdapter {\n  calculatedIntervalTreeMap: Record<string, IntervalTree> = {}\n\n  gtfFeatures?: Promise<{\n    header: string\n    intervalTreeMap: Record<string, (sc?: StatusCallback) => IntervalTree>\n  }>\n\n  private async loadDataP(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('gtfLocation'), this.pluginManager)\n    const buffer = await fetchAndMaybeUnzip(loc, opts)\n    const headerLines = [] as string[]\n    const featureMap = {} as Record<string, string>\n\n    parseLineByLine(\n      buffer,\n      line => {\n        if (line.startsWith('#')) {\n          headerLines.push(line)\n        } else if (line.startsWith('>')) {\n          return false\n        } else {\n          const ret = line.indexOf('\\t')\n          const refName = line.slice(0, ret)\n          if (!featureMap[refName]) {\n            featureMap[refName] = ''\n          }\n          featureMap[refName] += `${line}\\n`\n        }\n        return true\n      },\n      opts?.statusCallback,\n    )\n\n    const intervalTreeMap = Object.fromEntries(\n      Object.entries(featureMap).map(([refName, lines]) => [\n        refName,\n        (sc?: (arg: string) => void) => {\n          if (!this.calculatedIntervalTreeMap[refName]) {\n            sc?.('Parsing GTF data')\n            const intervalTree = new IntervalTree()\n            for (const obj of (parseStringSync(lines) as FeatureLoc[][])\n              .flat()\n              .map((f, i) => featureData(f, `${this.id}-${refName}-${i}`))) {\n              intervalTree.insert([obj.start as number, obj.end as number], obj)\n            }\n\n            this.calculatedIntervalTreeMap[refName] = intervalTree\n          }\n          return this.calculatedIntervalTreeMap[refName]\n        },\n      ]),\n    )\n\n    return {\n      header: headerLines.join('\\n'),\n      intervalTreeMap,\n    }\n  }\n\n  private async loadData(opts: BaseOptions = {}) {\n    if (!this.gtfFeatures) {\n      this.gtfFeatures = this.loadDataP(opts).catch((e: unknown) => {\n        this.gtfFeatures = undefined\n        throw e\n      })\n    }\n\n    return this.gtfFeatures\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { intervalTreeMap } = await this.loadData(opts)\n    return Object.keys(intervalTreeMap)\n  }\n\n  public async getHeader(opts: BaseOptions = {}) {\n    const { header } = await this.loadData(opts)\n    return header\n  }\n\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        await this.getFeaturesHelper({\n          query,\n          opts,\n          observer,\n          allowRedispatch: true,\n        })\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.stopToken)\n  }\n\n  public async getFeaturesHelper({\n    query,\n    opts,\n    observer,\n    allowRedispatch,\n    originalQuery = query,\n  }: {\n    query: Region\n    opts: BaseOptions\n    observer: Observer<Feature>\n    allowRedispatch: boolean\n    originalQuery?: Region\n  }) {\n    const aggregateField = this.getConf('aggregateField')\n    const { start, end, refName } = query\n    const { intervalTreeMap } = await this.loadData(opts)\n    const feats = intervalTreeMap[refName]?.(opts.statusCallback).search([\n      start,\n      end,\n    ])\n    if (feats) {\n      if (allowRedispatch && feats.length) {\n        let minStart = Number.POSITIVE_INFINITY\n        let maxEnd = Number.NEGATIVE_INFINITY\n        let hasAnyAggregateField = false\n        for (const feat of feats) {\n          if (feat.start < minStart) {\n            minStart = feat.start\n          }\n          if (feat.end > maxEnd) {\n            maxEnd = feat.end\n          }\n          if (feat[aggregateField]) {\n            hasAnyAggregateField = true\n          }\n        }\n\n        if (\n          hasAnyAggregateField &&\n          (maxEnd > query.end || minStart < query.start)\n        ) {\n          await this.getFeaturesHelper({\n            query: {\n              ...query,\n              // re-query with 500kb added onto start and end, in order to catch\n              // gene subfeatures that may not overlap your view\n              start: minStart - 500_000,\n              end: maxEnd + 500_000,\n            },\n            opts,\n            observer,\n            allowRedispatch: false,\n            originalQuery: query,\n          })\n          return\n        }\n      }\n\n      const parentAggregation = {} as Record<string, SimpleFeatureSerialized[]>\n\n      if (feats.some(f => f.uniqueId === undefined)) {\n        throw new Error('found uniqueId undefined')\n      }\n      for (const feat of feats) {\n        const aggr = feat[aggregateField]\n        if (!parentAggregation[aggr]) {\n          parentAggregation[aggr] = []\n        }\n\n        if (aggr) {\n          parentAggregation[aggr].push(feat)\n        } else {\n          observer.next(\n            new SimpleFeature({\n              id: feat.uniqueId,\n              data: feat,\n            }),\n          )\n        }\n      }\n\n      for (const [name, subfeatures] of Object.entries(parentAggregation)) {\n        const s = min(subfeatures.map(f => f.start))\n        const e = max(subfeatures.map(f => f.end))\n        if (doesIntersect2(s, e, originalQuery.start, originalQuery.end)) {\n          const { uniqueId, strand } = subfeatures[0]!\n          observer.next(\n            new SimpleFeature({\n              id: `${uniqueId}-parent`,\n              data: {\n                type: 'gene',\n                subfeatures,\n                strand,\n                name,\n                start: s,\n                end: e,\n                refName: query.refName,\n              },\n            }),\n          )\n        }\n      }\n    }\n    observer.complete()\n  }\n}\n","import Parser from './parse'\n\nexport function parseStringSync(str: string): unknown[] {\n  if (!str) {\n    return []\n  }\n\n  const items: unknown[] = []\n\n  const parser = new Parser({\n    // @ts-expect-error\n    featureCallback: item => items.push(item),\n    // @ts-expect-error\n    errorCallback: err => {\n      throw err\n    },\n  })\n\n  for (const line of str.split(/\\r?\\n/)) {\n    parser.addLine(line)\n  }\n  parser.finish()\n\n  return items\n}\n"],"names":["parseLineByLine","buffer","lineCallback","statusCallback","decoder","TextDecoder","blockStart","i","length","n","indexOf","lineEnd","b","subarray","line","decode","trim","getProgressDisplayStr","fieldNames","s","String","replace","_","seq","fromCharCode","parseInt","_escape","regex","ch","hex","charCodeAt","toString","toUpperCase","escapeColumn","translateStrand","_formatSingleFeature","f","seenFeature","attrString","attributes","undefined","attrs","attrOrder","Object","keys","forEach","tag","val","valstring","hasOwnProperty","Array","isArray","values","map","join","push","concat","formatAttributes","fields","formattedString","_formatFeature","feature","strings","multiSlot","formatFeature","featureOrFeatures","containerAttributes","Parent","Derives_from","Parser","constructor","args","nullFunc","assign","this","featureCallback","endCallback","commentCallback","errorCallback","directiveCallback","sequenceCallback","bufferSize","_underConstructionTopLevel","_underConstructionById","_completedReferences","_underConstructionOrphans","eof","lineNumber","addLine","test","_bufferLine","match","exec","hashsigns","contents","_emitAllUnderConstructionFeatures","directive","name","parsed","value","seqId","contentStart","contentEnd","split","seq_id","start","end","source","buildname","_emitItem","comment","errLine","Error","finish","_enforceBufferSizeLimit","additionalItemCount","_unbufferItem","item","ID","id","child_features","c","derived_features","d","shift","bind","filter","entry","JSON","stringify","featureLine","a","slice","attribute","attr","arec","parseAttributes","score","parseFloat","strand","featureNumber","isTranscript","featureType","ids","transcript_id","parents","derives","parent","result","parse","createTranscript","existing","_resolveReferencesTo","_resolveReferencesFrom","references","attrname","pname","toLowerCase","loc","_parseError","message","entries","toIds","toId","otherFeature","parentFeature","childFeature","Math","min","max","obj","slot1","slot2","subObj","returnVal","postSet","location","featureData","data","phase","Number","frame","refName","seq_name","defaultFields","Set","has","replaceAll","type","subfeatures","flatMap","childLocs","childLoc","_linehash","uniqueId","GtfAdapter","BaseFeatureDataAdapter","calculatedIntervalTreeMap","loadDataP","opts","openLocation","getConf","pluginManager","fetchAndMaybeUnzip","headerLines","featureMap","startsWith","ret","intervalTreeMap","fromEntries","lines","sc","intervalTree","IntervalTree","str","items","parser","err","parseStringSync","flat","insert","header","loadData","gtfFeatures","catch","e","getRefNames","getHeader","getFeatures","query","ObservableCreate","async","getFeaturesHelper","observer","allowRedispatch","error","stopToken","originalQuery","aggregateField","feats","search","minStart","POSITIVE_INFINITY","maxEnd","NEGATIVE_INFINITY","hasAnyAggregateField","feat","parentAggregation","some","aggr","next","SimpleFeature","doesIntersect2","complete"],"sourceRoot":""}