{"version":3,"file":"static/js/8528.af7532c7.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/ExportSvgDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  Typography,\n} from '@mui/material'\n\nimport type { ExportSvgOptions } from '../types'\nimport type { TextFieldProps } from '@mui/material'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage(`svg-${key}`, val)\n}\n\nfunction TextField2({ children, ...rest }: TextFieldProps) {\n  return (\n    <div>\n      <TextField {...rest}>{children}</TextField>\n    </div>\n  )\n}\n\nexport default function ExportSvgDialog({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField2\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => {\n            setFilename(event.target.value)\n          }}\n        />\n        <TextField2\n          select\n          label=\"Track label positioning\"\n          variant=\"outlined\"\n          style={{ width: 150 }}\n          value={trackLabels}\n          onChange={event => {\n            setTrackLabels(event.target.value)\n          }}\n        >\n          <MenuItem value=\"offset\">Offset</MenuItem>\n          <MenuItem value=\"overlay\">Overlay</MenuItem>\n          <MenuItem value=\"left\">Left</MenuItem>\n          <MenuItem value=\"none\">None</MenuItem>\n        </TextField2>\n        {session.allThemes ? (\n          <TextField2\n            select\n            label=\"Theme\"\n            variant=\"outlined\"\n            value={themeName}\n            onChange={event => {\n              setThemeName(event.target.value)\n            }}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField2>\n        ) : null}\n\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => {\n                  setRasterizeLayers(val => !val)\n                }}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                trackLabels,\n                themeName,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["LoadingMessage","_jsxs","children","_jsx","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","TextField2","rest","TextField","ExportSvgDialog","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","trackLabels","setTrackLabels","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","helperText","value","onChange","event","target","select","label","variant","width","MenuItem","allThemes","Object","entries","map","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}