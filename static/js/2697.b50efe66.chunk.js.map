{"version":3,"file":"static/js/2697.b50efe66.chunk.js","mappings":"6PAYA,MA6DA,GA7DwBA,EAAAA,EAAAA,UAAS,SAAUC,GAMzC,MAAM,MAAEC,EAAK,YAAEC,GAAgBF,GACxBG,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,IACzBC,EAAW,wBAAwBC,KAAKJ,GAC9C,OACEK,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAAST,EAAaU,MAAM,cAAaC,UACpDC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAAAF,SAAA,EACZL,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAAAH,SAAC,4BACZL,EAAAA,EAAAA,KAACQ,EAAAA,EAAU,CAACC,MAAM,gBAAeJ,SAAC,yDAGlCL,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CACRC,MAAOhB,EACPiB,SAAUC,IACRjB,EAAOiB,EAAMC,OAAOH,QAEtBI,YAAY,iBACZC,MAAsB,IAAfrB,EAAIsB,SAAiBnB,EAC5BoB,WAA2B,IAAfvB,EAAIsB,QAAiBnB,EAA+B,GAApB,kBAC5CqB,aAAa,MACb,cAAY,gBACZC,UAAW,CACTC,UAAW,CACTC,UAAW,EACX,cAAe,2BAIrBhB,EAAAA,EAAAA,MAACiB,EAAAA,EAAa,CAAAlB,SAAA,EACZL,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CACLC,QAAQ,YACRhB,MAAM,UACNiB,KAAK,SACLC,WAAS,EACTC,QAASA,KACPnC,EAAMoC,YAAY,MAAOlC,GACzBD,KACAW,SACH,YAGDL,EAAAA,EAAAA,KAACwB,EAAAA,EAAM,CACLC,QAAQ,YACRhB,MAAM,YACNmB,QAASA,KACPlC,KACAW,SACH,kBAOX,E","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/SortByTagDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst SortByTagDialog = observer(function (props: {\n  model: {\n    setSortedBy: (arg: string, arg2: string) => void\n  }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const [tag, setTag] = useState('')\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n  return (\n    <Dialog open onClose={handleClose} title=\"Sort by tag\">\n      <DialogContent>\n        <Typography>Set the tag to sort by</Typography>\n        <Typography color=\"textSecondary\">\n          Examples: HP for haplotype, RG for read group, etc.\n        </Typography>\n        <TextField\n          value={tag}\n          onChange={event => {\n            setTag(event.target.value)\n          }}\n          placeholder=\"Enter tag name\"\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          data-testid=\"sort-tag-name\"\n          slotProps={{\n            htmlInput: {\n              maxLength: 2,\n              'data-testid': 'sort-tag-name-input',\n            },\n          }}\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            type=\"submit\"\n            autoFocus\n            onClick={() => {\n              model.setSortedBy('tag', tag)\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleClose()\n            }}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default SortByTagDialog\n"],"names":["observer","props","model","handleClose","tag","setTag","useState","validTag","exec","_jsx","Dialog","open","onClose","title","children","_jsxs","DialogContent","Typography","color","TextField","value","onChange","event","target","placeholder","error","length","helperText","autoComplete","slotProps","htmlInput","maxLength","DialogActions","Button","variant","type","autoFocus","onClick","setSortedBy"],"sourceRoot":""}