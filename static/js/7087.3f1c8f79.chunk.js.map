{"version":3,"file":"static/js/7087.3f1c8f79.chunk.js","mappings":"yaAUA,MAAMA,GAAiCC,EAAAA,EAAAA,OACrC,IAAM,kCAEFC,GAAkCD,EAAAA,EAAAA,OACtC,IAAM,kCAGR,SAASE,GAAc,WACrBC,EAAU,MACVC,IAKA,MAAMC,GAAUC,EAAAA,EAAAA,YAAWF,GAC3B,OACEG,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,EAAU,KAAC,iDACZD,EAAAA,cAAA,UACGJ,EAAWM,KAAI,CAACC,EAAWC,IAE1BJ,EAAAA,cAAA,MAAIK,IAAK,GAAGF,KAAaC,KACtBD,EAAW,IACZH,EAAAA,cAACM,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACN,MAAM,KAAEC,GAASd,EACjB,IACE,IAAIc,EAGF,MAAM,IAAIC,MACR,6DAHFD,EAAKE,iBAAiBV,EAM1B,CAAE,MAAOW,GACPC,QAAQC,MAAMF,GACdhB,EAAQmB,OAAO,GAAGH,IACpB,IAEH,aAQb,CAEA,SAASI,GAA+B,WACtCtB,EAAU,MACVC,EAAK,QACLsB,IAMA,MAAMrB,GAAUC,EAAAA,EAAAA,YAAWF,GACrBuB,EAAgB,IAAIC,EAAAA,cAAcF,GAClCG,EAAezB,EAAMc,MAAMY,iBAAiB,IAAID,aACtD,OACEtB,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,EAAU,KAAC,qBACZD,EAAAA,cAAA,UACGJ,EAAWM,KAAIC,GACdH,EAAAA,cAAA,MAAIK,IAAKmB,KAAKC,UAAUtB,IACrB,GAAGgB,EAAQO,WAAWP,EAAQQ,YAAYxB,IAAa,IACxDH,EAAAA,cAACM,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACNZ,EAAQ8B,aAAYC,GAAe,CACjCrC,EACA,CACEqC,cACA/B,UACAqB,QAASC,EACTU,aAAc,GAAGjC,EAAMkC,MAAMT,mCAC7BX,KAAMd,EAAMc,KACZW,kBAEF,GAEL,gBAEO,IACRtB,EAAAA,cAACM,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACNZ,EAAQ8B,aAAYC,GAAe,CACjCnC,EACA,CACEmC,cACA/B,UACAqB,QAASC,EACTU,aAAc,GAAGjC,EAAMkC,MAAMT,oCAC7BX,KAAMd,EAAMc,KACZW,kBAEF,GAEL,oBAQb,CAEe,SAASU,EAAcC,GAKpC,MAAM,MAAEpC,EAAK,WAAED,EAAU,QAAEuB,GAAYc,EACjCnC,GAAUC,EAAAA,EAAAA,YAAWF,IACrB,cAAEqC,IAAkBC,EAAAA,EAAAA,QAAOrC,GACjC,IAAIsC,GAAyB,EAE7B,IACEA,IAA2BF,EAAcG,YAAY,sBACvD,CAAE,MAAOvB,GACP,CAGF,OACEd,EAAAA,cAACsC,EAAAA,QAAQC,EAAA,GAAKN,EAAK,CAAEO,MAAM,cACzBxC,EAAAA,cAACL,EAAa,CAACE,MAAOA,EAAOD,WAAYA,IACxCwC,EACCpC,EAAAA,cAACkB,EAA8B,CAC7BrB,MAAOA,EACPD,WAAYA,EACZuB,QAASA,IAET,KAGV,C","sources":["../../../plugins/variants/src/VariantFeatureWidget/LaunchBreakendPanel.tsx"],"sourcesContent":["import React, { lazy } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { SimpleFeature, getEnv, getSession } from '@jbrowse/core/util'\nimport { Link, Typography } from '@mui/material'\n\nimport type { VariantFeatureWidgetModel } from './stateModelFactory'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst BreakendMultiLevelOptionDialog = lazy(\n  () => import('./BreakendMultiLevelOptionDialog'),\n)\nconst BreakendSingleLevelOptionDialog = lazy(\n  () => import('./BreakendSingleLevelOptionDialog'),\n)\n\nfunction LocStringList({\n  locStrings,\n  model,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n}) {\n  const session = getSession(model)\n  return (\n    <div>\n      <Typography>Navigate to breakend endpoint in linear view:</Typography>\n      <ul>\n        {locStrings.map((locString, index) => (\n          /* biome-ignore lint/suspicious/noArrayIndexKey: */\n          <li key={`${locString}-${index}`}>\n            {locString}{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              (LGV)\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nfunction LaunchBreakpointSplitViewPanel({\n  locStrings,\n  model,\n  feature,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const session = getSession(model)\n  const simpleFeature = new SimpleFeature(feature)\n  const assemblyName = model.view?.displayedRegions[0]?.assemblyName\n  return (\n    <div>\n      <Typography>Launch split view</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={JSON.stringify(locString)}>\n            {`${feature.refName}:${feature.start} // ${locString}`}{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                session.queueDialog(handleClose => [\n                  BreakendMultiLevelOptionDialog,\n                  {\n                    handleClose,\n                    session,\n                    feature: simpleFeature,\n                    stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_multilevel`,\n                    view: model.view,\n                    assemblyName,\n                  },\n                ])\n              }}\n            >\n              (top/bottom)\n            </Link>{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                session.queueDialog(handleClose => [\n                  BreakendSingleLevelOptionDialog,\n                  {\n                    handleClose,\n                    session,\n                    feature: simpleFeature,\n                    stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_singlelevel`,\n                    view: model.view,\n                    assemblyName,\n                  },\n                ])\n              }}\n            >\n              (single row)\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default function BreakendPanel(props: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  let hasBreakpointSplitView = false\n\n  try {\n    hasBreakpointSplitView = !!pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <LocStringList model={model} locStrings={locStrings} />\n      {hasBreakpointSplitView ? (\n        <LaunchBreakpointSplitViewPanel\n          model={model}\n          locStrings={locStrings}\n          feature={feature}\n        />\n      ) : null}\n    </BaseCard>\n  )\n}\n"],"names":["BreakendMultiLevelOptionDialog","lazy","BreakendSingleLevelOptionDialog","LocStringList","locStrings","model","session","getSession","React","Typography","map","locString","index","key","Link","href","onClick","event","preventDefault","view","Error","navToLocString","e","console","error","notify","LaunchBreakpointSplitViewPanel","feature","simpleFeature","SimpleFeature","assemblyName","displayedRegions","JSON","stringify","refName","start","queueDialog","handleClose","stableViewId","id","BreakendPanel","props","pluginManager","getEnv","hasBreakpointSplitView","getViewType","BaseCard","_extends","title"],"sourceRoot":""}