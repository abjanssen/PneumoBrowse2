{"version":3,"file":"static/js/5312.9feb3b7c.chunk.js","mappings":"iNAMA,MAAMA,EACJC,WAAAA,CAAoBC,GAA+B,KAA/BA,WAAAA,CAAgC,CAEpD,UAAMC,CAAKC,EAAkBC,GAC3B,MAAMC,QAAeC,KAAKL,WAAWC,KAAKE,EAAQD,GAClD,OAAOE,EAAOA,OAAOE,MACnBF,EAAOG,WACPH,EAAOG,WAAaH,EAAOI,WAE/B,EAGK,SAASC,EACdC,EACAC,GAEA,OAAO,IAAIb,GAAcc,EAAAA,EAAAA,cAAaF,EAAUC,GAClD,CC2Be,MAAME,UAAmBC,EAAAA,uBAG/Bf,WAAAA,CACLgB,EACAC,EACAL,GAEAM,MAAMF,EAAQC,EAAeL,GAC7BN,KAAKa,IAAM,IAAIC,EAAAA,EAAS,CACtBC,KAAMX,EAAkBJ,KAAKgB,QAAQ,eAAgBhB,KAAKM,gBAE9D,CAEA,WAAcW,CAAMC,GAClB,MAAM,eAAEC,EAAiBA,QAAaD,GAAQ,CAAC,EAC/C,OAAOE,EAAAA,EAAAA,cAAa,0BAA2BD,EAAgB,IAC7DnB,KAAKa,IAAIQ,cAEb,CAEA,eAAaC,CAAUJ,GACrB,MAAM,YAAEK,KAAgBC,SAAexB,KAAKiB,MAAMC,GAGlD,MAAO,IAAKM,EAAMC,YADEzB,KAAKa,IAAIa,0BAE/B,CAEA,iBAAMC,CAAYT,GAEhB,aADuBlB,KAAKiB,MAAMC,IAClBK,YAAYK,IAAIC,GAAOA,EAAIC,KAC7C,CAEA,mBAAMC,CAAcC,EAAad,GAC/B,MAAM,YAAEe,SAAsBjC,KAAKiB,MAAMC,GACnCgB,EAAuBlC,KAAKgB,QAAQ,wBAC1C,IAAImB,EAAmBF,EAAYG,IAAI,GACvC,IAAK,IAAIC,EAAIJ,EAAYnC,OAAS,EAAGuC,GAAK,EAAGA,GAAK,EAAG,CACnD,MAAMC,EAAIL,EAAYI,GAClBC,GAAK,EAAIN,EAAME,IACjBC,EAAmBG,EAEvB,CACA,OAAOH,CACT,CAEAI,WAAAA,CAAYC,EAAgBtB,EAAmB,CAAC,GAC9C,OAAOuB,EAAAA,EAAAA,kBAAgCC,UACrC,MAAQC,QAASd,EAAG,MAAEe,EAAK,IAAEC,GAAQL,GAC/B,WACJM,EAAU,cACVC,EAAgB,KAAI,QACpBC,EAAU,EAAC,eACX7B,EAAiBA,QACfD,EACEc,QAAYhC,KAAK+B,cAAciB,GAAWF,GAAc,KAAO5B,SAE/DE,EAAAA,EAAAA,cAAa,wBAAyBD,EAAgBuB,UAC1D,MAAMO,QAAgBjD,KAAKa,IAAIqC,kBAC7BH,EACA,CAAEH,QAAOf,MAAKgB,OACd,CAAED,QAAOf,MAAKgB,OACd,KACAb,GAEF,IAAK,MAAMmB,KAAUF,EACnBG,EAASC,KAAKF,KAGlBC,EAASE,YACRpC,EAAKqC,UACV,CAGA,uCAAMC,CAAkCC,GACtC,MAAO,CACLC,eAAgB,EAEpB,E","sources":["../../../plugins/hic/src/HicAdapter/HicFilehandle.ts","../../../plugins/hic/src/HicAdapter/HicAdapter.ts"],"sourcesContent":["import { openLocation } from '@jbrowse/core/util/io'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { FileLocation } from '@jbrowse/core/util'\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nclass HicFilehandle {\n  constructor(private filehandle: GenericFilehandle) {}\n\n  async read(position: number, length: number) {\n    const buffer = await this.filehandle.read(length, position)\n    return buffer.buffer.slice(\n      buffer.byteOffset,\n      buffer.byteOffset + buffer.byteLength,\n    )\n  }\n}\n\nexport function openHicFilehandle(\n  location: FileLocation,\n  pluginManager?: PluginManager,\n) {\n  return new HicFilehandle(openLocation(location, pluginManager))\n}\n","import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { updateStatus } from '@jbrowse/core/util'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport HicStraw from 'hic-straw'\n\nimport { openHicFilehandle } from './HicFilehandle'\n\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport type { Region } from '@jbrowse/core/util/types'\n\ninterface ContactRecord {\n  bin1: number\n  bin2: number\n  counts: number\n}\n\ninterface HicMetadata {\n  chromosomes: {\n    name: string\n    length: number\n    id: number\n  }[]\n  resolutions: number[]\n}\ninterface Ref {\n  chr: string\n  start: number\n  end: number\n}\n\ninterface HicOptions extends BaseOptions {\n  resolution?: number\n  bpPerPx?: number\n  normalization?: string\n}\n\ninterface HicParser {\n  getContactRecords: (\n    normalize: string,\n    ref: Ref,\n    ref2: Ref,\n    units: string,\n    binsize: number,\n  ) => Promise<ContactRecord[]>\n  getMetaData: () => Promise<HicMetadata>\n}\n\nexport default class HicAdapter extends BaseFeatureDataAdapter {\n  private hic: HicParser\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    this.hic = new HicStraw({\n      file: openHicFilehandle(this.getConf('hicLocation'), this.pluginManager),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    return updateStatus('Downloading .hic header', statusCallback, () =>\n      this.hic.getMetaData(),\n    )\n  }\n\n  public async getHeader(opts?: BaseOptions) {\n    const { chromosomes, ...rest } = await this.setup(opts)\n    // @ts-expect-error\n    const norms = await this.hic.getNormalizationOptions()\n    return { ...rest, norms }\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    return metadata.chromosomes.map(chr => chr.name)\n  }\n\n  async getResolution(res: number, opts?: BaseOptions) {\n    const { resolutions } = await this.setup(opts)\n    const resolutionMultiplier = this.getConf('resolutionMultiplier')\n    let chosenResolution = resolutions.at(-1)!\n    for (let i = resolutions.length - 1; i >= 0; i -= 1) {\n      const r = resolutions[i]!\n      if (r <= 2 * res * resolutionMultiplier) {\n        chosenResolution = r\n      }\n    }\n    return chosenResolution\n  }\n\n  getFeatures(region: Region, opts: HicOptions = {}) {\n    return ObservableCreate<ContactRecord>(async observer => {\n      const { refName: chr, start, end } = region\n      const {\n        resolution,\n        normalization = 'KR',\n        bpPerPx = 1,\n        statusCallback = () => {},\n      } = opts\n      const res = await this.getResolution(bpPerPx / (resolution || 1000), opts)\n\n      await updateStatus('Downloading .hic data', statusCallback, async () => {\n        const records = await this.hic.getContactRecords(\n          normalization,\n          { start, chr, end },\n          { start, chr, end },\n          'BP',\n          res,\n        )\n        for (const record of records) {\n          observer.next(record)\n        }\n      })\n      observer.complete()\n    }, opts.stopToken) as any\n  }\n\n  // don't do feature stats estimation, similar to bigwigadapter\n  async getMultiRegionFeatureDensityStats(_regions: Region[]) {\n    return {\n      featureDensity: 0,\n    }\n  }\n}\n"],"names":["HicFilehandle","constructor","filehandle","read","position","length","buffer","this","slice","byteOffset","byteLength","openHicFilehandle","location","pluginManager","openLocation","HicAdapter","BaseFeatureDataAdapter","config","getSubAdapter","super","hic","HicStraw","file","getConf","setup","opts","statusCallback","updateStatus","getMetaData","getHeader","chromosomes","rest","norms","getNormalizationOptions","getRefNames","map","chr","name","getResolution","res","resolutions","resolutionMultiplier","chosenResolution","at","i","r","getFeatures","region","ObservableCreate","async","refName","start","end","resolution","normalization","bpPerPx","records","getContactRecords","record","observer","next","complete","stopToken","getMultiRegionFeatureDensityStats","_regions","featureDensity"],"sourceRoot":""}