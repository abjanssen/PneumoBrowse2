{"version":3,"file":"static/js/3047.589494ad.chunk.js","mappings":"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","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyDisplay/drawSynteny.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyDisplay/components/util.ts","../../../plugins/linear-comparative-view/src/LinearSyntenyView/svgcomponents/SVGBackground.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/svgcomponents/SVGLinearGenomeView.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/svgcomponents/SVGLinearSyntenyView.tsx"],"sourcesContent":["import { doesIntersect2, getContainingView } from '@jbrowse/core/util'\n\nimport { draw, drawMatchSimple } from './components/util'\n\nimport type { LinearSyntenyDisplayModel } from './model'\nimport type { LinearSyntenyViewModel } from '../LinearSyntenyView/model'\n\nexport const MAX_COLOR_RANGE = 255 * 255 * 255 // max color range\n\nfunction makeColor(idx: number) {\n  const r = Math.floor(idx / (255 * 255)) % 255\n  const g = Math.floor(idx / 255) % 255\n  const b = idx % 255\n  return `rgb(${r},${g},${b})`\n}\n\nconst colorMap = {\n  I: '#ff03',\n  N: '#0a03',\n  D: '#00f3',\n  X: 'brown',\n  M: '#f003',\n  '=': '#f003',\n}\n\nconst lineLimit = 3\n\nconst oobLimit = 1600\n\nexport function getId(r: number, g: number, b: number, unitMultiplier: number) {\n  return Math.floor((r * 255 * 255 + g * 255 + b - 1) / unitMultiplier)\n}\n\nexport function drawRef(\n  model: LinearSyntenyDisplayModel,\n  ctx1: CanvasRenderingContext2D,\n  ctx3?: CanvasRenderingContext2D,\n) {\n  const view = getContainingView(model) as LinearSyntenyViewModel\n  const drawCurves = view.drawCurves\n  const drawCIGAR = view.drawCIGAR\n  const drawCIGARMatchesOnly = view.drawCIGARMatchesOnly\n  const { level, height, featPositions } = model\n  const width = view.width\n  const bpPerPxs = view.views.map(v => v.bpPerPx)\n\n  if (ctx3) {\n    ctx3.imageSmoothingEnabled = false\n  }\n\n  ctx1.beginPath()\n  const offsets = view.views.map(v => v.offsetPx)\n  const unitMultiplier = Math.floor(MAX_COLOR_RANGE / featPositions.length)\n\n  // this loop is optimized to draw many thin lines with a single ctx.stroke\n  // call, a separate loop below draws larger boxes\n  ctx1.fillStyle = colorMap.M\n  ctx1.strokeStyle = colorMap.M\n  for (const { p11, p12, p21, p22 } of featPositions) {\n    const x11 = p11.offsetPx - offsets[level]!\n    const x12 = p12.offsetPx - offsets[level]!\n    const x21 = p21.offsetPx - offsets[level + 1]!\n    const x22 = p22.offsetPx - offsets[level + 1]!\n    const l1 = Math.abs(x12 - x11)\n    const l2 = Math.abs(x22 - x21)\n    const y1 = 0\n    const y2 = height\n    const mid = (y2 - y1) / 2\n\n    // drawing a line if the results are thin results in much less pixellation\n    // than filling in a thin polygon\n    if (\n      l1 <= lineLimit &&\n      l2 <= lineLimit &&\n      x21 < width + oobLimit &&\n      x21 > -oobLimit\n    ) {\n      ctx1.moveTo(x11, y1)\n      if (drawCurves) {\n        ctx1.bezierCurveTo(x11, mid, x21, mid, x21, y2)\n      } else {\n        ctx1.lineTo(x21, y2)\n      }\n    }\n  }\n  ctx1.stroke()\n\n  // this loop only draws small lines as a polyline, the polyline calls\n  // ctx.stroke once is much more efficient than calling stroke() many times\n  ctx1.fillStyle = colorMap.M\n  ctx1.strokeStyle = colorMap.M\n  for (const { p11, p12, p21, p22, f, cigar } of featPositions) {\n    const x11 = p11.offsetPx - offsets[level]!\n    const x12 = p12.offsetPx - offsets[level]!\n    const x21 = p21.offsetPx - offsets[level + 1]!\n    const x22 = p22.offsetPx - offsets[level + 1]!\n    const l1 = Math.abs(x12 - x11)\n    const l2 = Math.abs(x22 - x21)\n    const minX = Math.min(x21, x22)\n    const maxX = Math.max(x21, x22)\n    const y1 = 0\n    const y2 = height\n    const mid = (y2 - y1) / 2\n\n    if (\n      !(l1 <= lineLimit && l2 <= lineLimit) &&\n      doesIntersect2(minX, maxX, -oobLimit, view.width + oobLimit)\n    ) {\n      const s1 = f.get('strand')\n      const k1 = s1 === -1 ? x12 : x11\n      const k2 = s1 === -1 ? x11 : x12\n\n      // rev1/rev2 flip the direction of the CIGAR drawing in horizontally flipped\n      // modes. somewhat heuristically determined, but tested for\n      const rev1 = k1 < k2 ? 1 : -1\n      const rev2 = (x21 < x22 ? 1 : -1) * s1\n\n      // cx1/cx2 are the current x positions on top and bottom rows\n      let cx1 = k1\n      let cx2 = s1 === -1 ? x22 : x21\n      if (cigar.length && drawCIGAR) {\n        // continuingFlag skips drawing commands on very small CIGAR features\n        let continuingFlag = false\n\n        // px1/px2 are the previous x positions on the top and bottom rows\n        let px1 = 0\n        let px2 = 0\n        const unitMultiplier2 = Math.floor(MAX_COLOR_RANGE / cigar.length)\n\n        for (let j = 0; j < cigar.length; j += 2) {\n          const idx = j * unitMultiplier2 + 1\n\n          const len = +cigar[j]!\n          const op = cigar[j + 1] as keyof typeof colorMap\n\n          if (!continuingFlag) {\n            px1 = cx1\n            px2 = cx2\n          }\n\n          const d1 = len / bpPerPxs[level]!\n          const d2 = len / bpPerPxs[level + 1]!\n\n          if (op === 'M' || op === '=' || op === 'X') {\n            cx1 += d1 * rev1\n            cx2 += d2 * rev2\n          } else if (op === 'D' || op === 'N') {\n            cx1 += d1 * rev1\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n          else if (op === 'I') {\n            cx2 += d2 * rev2\n          }\n\n          // check that we are even drawing in view here, e.g. that all\n          // points are not all less than 0 or greater than width\n          if (\n            !(\n              Math.max(px1, px2, cx1, cx2) < 0 ||\n              Math.min(px1, px2, cx1, cx2) > width\n            )\n          ) {\n            // if it is a small feature and not the last element of the\n            // CIGAR (which could skip rendering it entire if we did turn\n            // it on), then turn on continuing flag\n            const isNotLast = j < cigar.length - 2\n            if (\n              Math.abs(cx1 - px1) <= 1 &&\n              Math.abs(cx2 - px2) <= 1 &&\n              isNotLast\n            ) {\n              continuingFlag = true\n            } else {\n              // allow rendering the dominant color when using continuing\n              // flag if the last element of continuing was a large\n              // feature, else just use match\n              const letter = (continuingFlag && d1 > 1) || d2 > 1 ? op : 'M'\n              ctx1.fillStyle = colorMap[letter]\n              continuingFlag = false\n\n              if (drawCIGARMatchesOnly) {\n                if (letter === 'M') {\n                  draw(ctx1, px1, cx1, y1, cx2, px2, y2, mid, drawCurves)\n                  ctx1.fill()\n                }\n              } else {\n                draw(ctx1, px1, cx1, y1, cx2, px2, y2, mid, drawCurves)\n                ctx1.fill()\n              }\n              if (ctx3) {\n                ctx3.fillStyle = makeColor(idx)\n                draw(ctx3, px1, cx1, y1, cx2, px2, y2, mid, drawCurves)\n                ctx3.fill()\n              }\n            }\n          }\n        }\n      } else {\n        draw(ctx1, x11, x12, y1, x22, x21, y2, mid, drawCurves)\n        ctx1.fill()\n      }\n    }\n  }\n\n  // draw click map\n  const ctx2 = model.clickMapCanvas?.getContext('2d')\n  if (!ctx2) {\n    return\n  }\n  ctx2.imageSmoothingEnabled = false\n  ctx2.clearRect(0, 0, width, height)\n\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let i = 0; i < featPositions.length; i++) {\n    const feature = featPositions[i]!\n    const idx = i * unitMultiplier + 1\n    ctx2.fillStyle = makeColor(idx)\n\n    // too many click map false positives with colored stroked lines\n    drawMatchSimple({\n      cb: ctx => {\n        ctx.fill()\n      },\n      feature,\n      ctx: ctx2,\n      drawCurves,\n      level,\n      offsets,\n      oobLimit,\n      viewWidth: view.width,\n      hideTiny: true,\n      height,\n    })\n  }\n}\n\nexport function drawMouseoverSynteny(model: LinearSyntenyDisplayModel) {\n  const { level, clickId, mouseoverId } = model\n  const highResolutionScaling = 1\n  const view = getContainingView(model) as LinearSyntenyViewModel\n  const drawCurves = view.drawCurves\n  const height = model.height\n  const width = view.width\n  const ctx = model.mouseoverCanvas?.getContext('2d')\n  const offsets = view.views.map(v => v.offsetPx)\n\n  if (!ctx) {\n    return\n  }\n  ctx.resetTransform()\n  ctx.scale(highResolutionScaling, highResolutionScaling)\n  ctx.clearRect(0, 0, width, height)\n  ctx.strokeStyle = 'rgba(0, 0, 0, 0.9)'\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.1)'\n  const feature1 = model.featMap[mouseoverId || '']\n  if (feature1) {\n    drawMatchSimple({\n      cb: ctx => {\n        ctx.fill()\n      },\n      feature: feature1,\n      level,\n      ctx,\n      oobLimit,\n      viewWidth: view.width,\n      drawCurves,\n      offsets,\n      height,\n    })\n  }\n  const feature2 = model.featMap[clickId || '']\n  if (feature2) {\n    drawMatchSimple({\n      cb: ctx => {\n        ctx.stroke()\n      },\n      feature: feature2,\n      ctx,\n      level,\n      oobLimit,\n      viewWidth: view.width,\n      drawCurves,\n      offsets,\n      height,\n    })\n  }\n}\n","import type React from 'react'\n\nimport {\n  assembleLocString,\n  doesIntersect2,\n  getContainingTrack,\n  getContainingView,\n  getSession,\n  isSessionModelWithWidgets,\n} from '@jbrowse/core/util'\n\nimport { MAX_COLOR_RANGE, getId } from '../drawSynteny'\n\nimport type { LinearSyntenyDisplayModel } from '../model'\nimport type { Feature } from '@jbrowse/core/util'\n\ninterface Pos {\n  offsetPx: number\n}\n\nexport interface ClickCoord {\n  clientX: number\n  clientY: number\n  feature: { f: Feature }\n}\n\ninterface FeatPos {\n  p11: Pos\n  p12: Pos\n  p21: Pos\n  p22: Pos\n  f: Feature\n  cigar: string[]\n}\n\nexport function drawMatchSimple({\n  feature,\n  ctx,\n  offsets,\n  level,\n  cb,\n  height,\n  drawCurves,\n  oobLimit,\n  viewWidth,\n  hideTiny,\n}: {\n  feature: FeatPos\n  ctx: CanvasRenderingContext2D\n  offsets: number[]\n  level: number\n  oobLimit: number\n  viewWidth: number\n  cb: (ctx: CanvasRenderingContext2D) => void\n  height: number\n  drawCurves?: boolean\n  hideTiny?: boolean\n}) {\n  const { p11, p12, p21, p22 } = feature\n\n  const x11 = p11.offsetPx - offsets[level]!\n  const x12 = p12.offsetPx - offsets[level]!\n  const x21 = p21.offsetPx - offsets[level + 1]!\n  const x22 = p22.offsetPx - offsets[level + 1]!\n\n  const l1 = Math.abs(x12 - x11)\n  const l2 = Math.abs(x22 - x21)\n  const y1 = 0\n  const y2 = height\n  const mid = (y2 - y1) / 2\n  const minX = Math.min(x21, x22)\n  const maxX = Math.max(x21, x22)\n\n  if (!doesIntersect2(minX, maxX, -oobLimit, viewWidth + oobLimit)) {\n    return\n  }\n\n  // drawing a line if the results are thin: drawing a line results in much\n  // less pixellation than filling in a thin polygon\n  if (l1 <= 1 && l2 <= 1) {\n    // hideTiny can be used to avoid drawing mouseover for thin lines in this\n    // case\n    if (!hideTiny) {\n      ctx.beginPath()\n      ctx.moveTo(x11, y1)\n      if (drawCurves) {\n        ctx.bezierCurveTo(x11, mid, x21, mid, x21, y2)\n      } else {\n        ctx.lineTo(x21, y2)\n      }\n      ctx.stroke()\n    }\n  } else {\n    draw(ctx, x11, x12, y1, x22, x21, y2, mid, drawCurves)\n    cb(ctx)\n  }\n}\n\nexport function draw(\n  ctx: CanvasRenderingContext2D,\n  x1: number,\n  x2: number,\n  y1: number,\n  x3: number,\n  x4: number,\n  y2: number,\n  mid: number,\n  drawCurves?: boolean,\n) {\n  if (drawCurves) {\n    drawBezierBox(ctx, x1, x2, y1, x3, x4, y2, mid)\n  } else {\n    drawBox(ctx, x1, x2, y1, x3, x4, y2)\n  }\n}\n\nexport function drawBox(\n  ctx: CanvasRenderingContext2D,\n  x1: number,\n  x2: number,\n  y1: number,\n  x3: number,\n  x4: number,\n  y2: number,\n) {\n  ctx.beginPath()\n  ctx.moveTo(x1, y1)\n  ctx.lineTo(x2, y1)\n  ctx.lineTo(x3, y2)\n  ctx.lineTo(x4, y2)\n  ctx.closePath()\n}\n\nexport function drawBezierBox(\n  ctx: CanvasRenderingContext2D,\n  x1: number,\n  x2: number,\n  y1: number,\n  x3: number,\n  x4: number,\n  y2: number,\n  mid: number,\n) {\n  const len1 = Math.abs(x1 - x2)\n  const len2 = Math.abs(x1 - x2)\n\n  // heuristic to not draw hourglass inversions with bezier curves when they\n  // are thin and far apart because it results in areas that are not drawn well\n  // demo https://codesandbox.io/s/fast-glitter-q3b1or?file=/src/index.js\n  if (len1 < 5 && len2 < 5 && x2 < x1 && Math.abs(x1 - x3) > 100) {\n    const tmp = x1\n    x1 = x2\n    x2 = tmp\n  }\n  ctx.beginPath()\n  ctx.moveTo(x1, y1)\n  ctx.lineTo(x2, y1)\n  ctx.bezierCurveTo(x2, mid, x3, mid, x3, y2)\n  ctx.lineTo(x4, y2)\n  ctx.bezierCurveTo(x4, mid, x1, mid, x1, y1)\n  ctx.closePath()\n}\n\nexport function onSynClick(\n  event: React.MouseEvent,\n  model: LinearSyntenyDisplayModel,\n) {\n  const view = getContainingView(model)\n  const track = getContainingTrack(model)\n  const {\n    featPositions,\n    numFeats,\n    clickMapCanvas: ref1,\n    cigarClickMapCanvas: ref2,\n    level,\n  } = model\n  if (!ref1 || !ref2) {\n    return\n  }\n  const rect = ref1.getBoundingClientRect()\n  const ctx1 = ref1.getContext('2d')\n  const ctx2 = ref2.getContext('2d')\n  if (!ctx1 || !ctx2) {\n    return\n  }\n  const x = event.clientX - rect.left\n  const y = event.clientY - rect.top\n  const [r1, g1, b1] = ctx1.getImageData(x, y, 1, 1).data\n  const unitMultiplier = Math.floor(MAX_COLOR_RANGE / numFeats)\n  const id = getId(r1!, g1!, b1!, unitMultiplier)\n  const feat = featPositions[id]\n  if (feat) {\n    const { f } = feat\n    model.setClickId(f.id())\n    const session = getSession(model)\n    if (isSessionModelWithWidgets(session)) {\n      session.showWidget(\n        session.addWidget('SyntenyFeatureWidget', 'syntenyFeature', {\n          view,\n          track,\n          featureData: f.toJSON(),\n          level,\n        }),\n      )\n    }\n  }\n  return feat\n}\n\nexport function onSynContextClick(\n  event: React.MouseEvent,\n  model: LinearSyntenyDisplayModel,\n  setAnchorEl: (arg: ClickCoord) => void,\n) {\n  event.preventDefault()\n  const ref1 = model.clickMapCanvas\n  const ref2 = model.cigarClickMapCanvas\n  if (!ref1 || !ref2) {\n    return\n  }\n  const rect = ref1.getBoundingClientRect()\n  const ctx1 = ref1.getContext('2d')\n  const ctx2 = ref2.getContext('2d')\n  if (!ctx1 || !ctx2) {\n    return\n  }\n  const { clientX, clientY } = event\n  const x = clientX - rect.left\n  const y = clientY - rect.top\n  const [r1, g1, b1] = ctx1.getImageData(x, y, 1, 1).data\n  const unitMultiplier = Math.floor(MAX_COLOR_RANGE / model.numFeats)\n  const id = getId(r1!, g1!, b1!, unitMultiplier)\n  const f = model.featPositions[id]\n  if (f) {\n    model.setClickId(f.f.id())\n    setAnchorEl({ clientX, clientY, feature: f })\n  }\n}\n\nexport function getTooltip({\n  feature,\n  cigarOp,\n  cigarOpLen,\n}: {\n  feature: Feature\n  cigarOp?: string\n  cigarOpLen?: string\n}) {\n  // @ts-expect-error\n  const f1 = feature.toJSON() as {\n    refName: string\n    start: number\n    end: number\n    strand?: number\n    assemblyName: string\n    identity?: number\n    name?: string\n    mate: {\n      start: number\n      end: number\n      refName: string\n      name: string\n    }\n  }\n  const f2 = f1.mate\n  const l1 = f1.end - f1.start\n  const l2 = f2.end - f2.start\n  const identity = f1.identity\n  const n1 = f1.name\n  const n2 = f2.name\n  return [\n    `Loc1: ${assembleLocString(f1)}`,\n    `Loc2: ${assembleLocString(f2)}`,\n    `Inverted: ${f1.strand === -1}`,\n    `Query len: ${l1.toLocaleString('en-US')}`,\n    `Target len: ${l2.toLocaleString('en-US')}`,\n    identity ? `Identity: ${identity.toPrecision(2)}` : '',\n    cigarOp ? `CIGAR operator: ${cigarOp}${cigarOpLen}` : '',\n    n1 ? `Name 1: ${n1}` : '',\n    n2 ? `Name 2: ${n2}` : '',\n  ]\n    .filter(f => !!f)\n    .join('<br/>')\n}\n","import { stripAlpha } from '@jbrowse/core/util'\nimport { useTheme } from '@mui/material'\n\nexport default function SVGBackground({\n  width,\n  height,\n  shift,\n}: {\n  width: number\n  height: number\n  shift: number\n}) {\n  const theme = useTheme()\n  return (\n    <rect\n      width={width + shift * 2}\n      height={height}\n      fill={stripAlpha(theme.palette.background.default)}\n    />\n  )\n}\n","import { getFillProps } from '@jbrowse/core/util'\nimport { SVGRuler, SVGTracks } from '@jbrowse/plugin-linear-genome-view'\nimport { useTheme } from '@mui/material'\n\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nexport default function SVGLinearGenomeView({\n  trackLabelOffset,\n  fontSize,\n  textHeight,\n  trackLabels,\n  view,\n  displayResults,\n  rulerHeight,\n  shift,\n}: {\n  textHeight: number\n  trackLabels: string\n  trackLabelOffset: number\n  fontSize: number\n  view: LinearGenomeViewModel\n\n  displayResults: any\n  rulerHeight: number\n  shift: number\n}) {\n  const theme = useTheme()\n  return (\n    <g transform={`translate(${shift} ${fontSize})`}>\n      <g transform={`translate(${trackLabelOffset})`}>\n        <text\n          x={0}\n          fontSize={fontSize}\n          {...getFillProps(theme.palette.text.primary)}\n        >\n          {view.assemblyNames.join(', ')}\n        </text>\n        <SVGRuler model={displayResults.view} fontSize={fontSize} />\n      </g>\n      <g transform={`translate(0 ${rulerHeight + fontSize})`}>\n        <SVGTracks\n          textHeight={textHeight}\n          trackLabels={trackLabels}\n          fontSize={fontSize}\n          model={displayResults.view}\n          displayResults={displayResults.data}\n          trackLabelOffset={trackLabelOffset}\n        />\n      </g>\n    </g>\n  )\n}\n","import { createJBrowseTheme } from '@jbrowse/core/ui'\nimport {\n  ReactRendering,\n  getSerializedSvg,\n  getSession,\n  max,\n  measureText,\n  renderToAbstractCanvas,\n  renderToStaticMarkup,\n  sum,\n} from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport { totalHeight } from '@jbrowse/plugin-linear-genome-view'\nimport { ThemeProvider } from '@mui/material'\nimport { when } from 'mobx'\n\nimport SVGBackground from './SVGBackground'\nimport SVGLinearGenomeView from './SVGLinearGenomeView'\nimport { drawRef } from '../../LinearSyntenyDisplay/drawSynteny'\n\nimport type { LinearSyntenyViewModel } from '../model'\nimport type { ExportSvgOptions } from '../types'\n\n// render LGV to SVG\nexport async function renderToSvg(\n  model: LinearSyntenyViewModel,\n  opts: ExportSvgOptions,\n) {\n  await when(() => model.initialized)\n  const {\n    textHeight = 18,\n    rulerHeight = 30,\n    fontSize = 13,\n    trackLabels = 'offset',\n    Wrapper = ({ children }) => children,\n    themeName = 'default',\n  } = opts\n  const session = getSession(model)\n  const themeVar = session.allThemes?.()[themeName]\n  const { width, views, levels } = model\n  const shift = 50\n  const offset = rulerHeight\n\n  const heights = views.map(\n    v => totalHeight(v.tracks, textHeight, trackLabels) + offset,\n  )\n  const totalHeightSvg = sum(heights) + sum(levels.map(l => l.height)) + 100\n\n  const displayResults = await Promise.all(\n    views.map(\n      async view =>\n        ({\n          view,\n          data: await Promise.all(\n            view.tracks.map(async track => {\n              const d = track.displays[0]\n              await when(() => (d.ready !== undefined ? d.ready : true))\n              return {\n                track,\n                result: await d.renderSvg({ ...opts, theme: themeVar }),\n              }\n            }),\n          ),\n        }) as const,\n    ),\n  )\n\n  const renderings = await Promise.all(\n    levels.map(\n      async level =>\n        await Promise.all(\n          level.tracks.map(async track => {\n            const d = track.displays[0]\n            await when(() => (d.ready !== undefined ? d.ready : true))\n            const r = await renderToAbstractCanvas(\n              width,\n              level.height,\n              { exportSVG: opts },\n              ctx => {\n                drawRef(d, ctx)\n                return undefined\n              },\n            )\n\n            if ('imageData' in r) {\n              throw new Error('found a canvas in svg export, probably a bug')\n            } else if ('canvasRecordedData' in r) {\n              return {\n                html: await getSerializedSvg({\n                  ...r,\n                  width,\n                  height: level.height,\n                }),\n              }\n            } else {\n              return r\n            }\n          }),\n        ),\n    ),\n  )\n\n  const trackLabelMaxLen =\n    max(\n      views.flatMap(view =>\n        view.tracks.map(track =>\n          measureText(getTrackName(track.configuration, session), fontSize),\n        ),\n      ),\n      0,\n    ) + 40\n  const trackLabelOffset = trackLabels === 'left' ? trackLabelMaxLen : 0\n  const w = width + trackLabelOffset\n  const theme = createJBrowseTheme(themeVar)\n  const RenderList = [\n    <SVGLinearGenomeView\n      rulerHeight={rulerHeight}\n      trackLabelOffset={trackLabelOffset}\n      shift={shift}\n      textHeight={textHeight}\n      trackLabels={trackLabels}\n      displayResults={displayResults[0]}\n      key={views[0]!.id}\n      view={views[0]!}\n      fontSize={fontSize}\n    />,\n  ] as React.ReactNode[]\n  let currOffset = heights[0]! + fontSize + rulerHeight\n  for (let i = 1; i < views.length; i++) {\n    const view = views[i]!\n    const level = levels[i - 1]!\n    const rendering = renderings[i - 1]\n    const height = heights[i]!\n    const levelHeight = level.height || 0\n    RenderList.push(\n      <g key={view.id} transform={`translate(0 ${currOffset})`}>\n        {levelHeight ? (\n          <defs>\n            <clipPath id={`synclip-${i}`}>\n              <rect x={0} y={0} width={width} height={levelHeight} />\n            </clipPath>\n          </defs>\n        ) : null}\n        <g\n          transform={`translate(${shift + trackLabelOffset} ${fontSize})`}\n          clipPath={`url(#synclip-${i})`}\n        >\n          {rendering?.map((r, i) => (\n            <ReactRendering key={i} rendering={r} />\n          ))}\n        </g>\n        <g transform={`translate(0 ${levelHeight})`}>\n          <SVGLinearGenomeView\n            rulerHeight={rulerHeight}\n            shift={shift}\n            trackLabelOffset={trackLabelOffset}\n            textHeight={textHeight}\n            trackLabels={trackLabels}\n            displayResults={displayResults[i]}\n            key={view.id}\n            view={view}\n            fontSize={fontSize}\n          />\n        </g>\n      </g>,\n    )\n    currOffset += height + fontSize + rulerHeight + levelHeight\n  }\n\n  // the xlink namespace is used for rendering <image> tag\n  return renderToStaticMarkup(\n    <ThemeProvider theme={theme}>\n      <Wrapper>\n        <svg\n          width={width}\n          height={totalHeightSvg}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n          viewBox={[0, 0, w + shift * 2, totalHeightSvg].toString()}\n        >\n          <SVGBackground width={w} height={totalHeightSvg} shift={shift} />\n          {RenderList}\n        </svg>\n      </Wrapper>\n    </ThemeProvider>,\n  )\n}\n"],"names":["MAX_COLOR_RANGE","makeColor","idx","Math","floor","colorMap","I","N","D","X","M","lineLimit","oobLimit","getId","r","g","b","unitMultiplier","drawRef","model","ctx1","ctx3","view","getContainingView","drawCurves","drawCIGAR","drawCIGARMatchesOnly","level","height","featPositions","width","bpPerPxs","views","map","v","bpPerPx","imageSmoothingEnabled","beginPath","offsets","offsetPx","length","fillStyle","strokeStyle","p11","p12","p21","p22","x11","x12","x21","x22","l1","abs","l2","y1","y2","mid","moveTo","bezierCurveTo","lineTo","stroke","f","cigar","minX","min","maxX","max","doesIntersect2","s1","get","k1","rev1","rev2","cx1","cx2","continuingFlag","px1","px2","unitMultiplier2","j","len","op","d1","d2","isNotLast","letter","draw","fill","ctx2","clickMapCanvas","getContext","clearRect","i","feature","drawMatchSimple","cb","ctx","viewWidth","hideTiny","drawMouseoverSynteny","clickId","mouseoverId","mouseoverCanvas","resetTransform","scale","feature1","featMap","feature2","x1","x2","x3","x4","len1","len2","tmp","closePath","drawBezierBox","drawBox","onSynClick","event","track","getContainingTrack","numFeats","ref1","cigarClickMapCanvas","ref2","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","r1","g1","b1","getImageData","data","feat","setClickId","id","session","getSession","isSessionModelWithWidgets","showWidget","addWidget","featureData","toJSON","onSynContextClick","setAnchorEl","preventDefault","getTooltip","cigarOp","cigarOpLen","f1","f2","mate","end","start","identity","n1","name","n2","assembleLocString","strand","toLocaleString","toPrecision","filter","join","SVGBackground","t0","$","_c","shift","theme","useTheme","t1","t2","t3","palette","background","default","stripAlpha","_jsx","SVGLinearGenomeView","trackLabelOffset","fontSize","textHeight","trackLabels","displayResults","rulerHeight","t4","t5","t6","t7","text","primary","getFillProps","assemblyNames","children","SVGRuler","_jsxs","transform","t8","t9","t10","t11","SVGTracks","async","renderToSvg","opts","when","initialized","Wrapper","themeName","themeVar","allThemes","levels","offset","heights","totalHeight","tracks","totalHeightSvg","sum","l","Promise","all","d","displays","undefined","ready","result","renderSvg","renderings","renderToAbstractCanvas","exportSVG","Error","html","getSerializedSvg","trackLabelMaxLen","flatMap","measureText","getTrackName","configuration","w","createJBrowseTheme","RenderList","currOffset","rendering","levelHeight","push","clipPath","ReactRendering","renderToStaticMarkup","ThemeProvider","xmlns","xmlnsXlink","viewBox","toString"],"sourceRoot":""}