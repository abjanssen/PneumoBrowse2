{"version":3,"file":"static/js/2598.fef4ebb6.chunk.js","mappings":"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","sources":["../../../node_modules/@flatten-js/interval-tree/dist/main.mjs"],"sourcesContent":["/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n/**\n * Interval is a pair of numbers or a pair of any comparable objects on which may be defined predicates\n * *equal*, *less* and method *max(p1, p1)* that returns maximum in a pair.\n * When interval is an object rather than a pair of numbers, this object should have properties *low*, *high*, *max*\n * and implement methods *less_than(), equal_to(), intersect(), not_intersect(), clone(), output()*.\n * Two static methods *comparable_max(), comparable_less_than()* define how to compare values in pair. <br/>\n * This interface is described in typescript definition file *index.d.ts*\n *\n * Axis aligned rectangle is an example of such interval.\n * We may look at rectangle as an interval between its low left and top right corners.\n * See **Box** class in [flatten-js](https://github.com/alexbol99/flatten-js) library as the example\n * of Interval interface implementation\n * @type {Interval}\n */\nconst Interval = class Interval {\n    /**\n     * Accept two comparable values and creates new instance of interval\n     * Predicate Interval.comparable_less(low, high) supposed to return true on these values\n     * @param low\n     * @param high\n     */\n    constructor(low, high) {\n        this.low = low;\n        this.high = high;\n    }\n\n    /**\n     * Clone interval\n     * @returns {Interval}\n     */\n    clone() {\n        return new Interval(this.low, this.high);\n    }\n\n    /**\n     * Propery max returns clone of this interval\n     * @returns {Interval}\n     */\n    get max() {\n        return this.clone();   // this.high;\n    }\n\n    /**\n     * Predicate returns true is this interval less than other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    less_than(other_interval) {\n        return this.low < other_interval.low ||\n            this.low === other_interval.low && this.high < other_interval.high;\n    }\n\n    /**\n     * Predicate returns true is this interval equals to other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    equal_to(other_interval) {\n        return this.low === other_interval.low && this.high === other_interval.high;\n    }\n\n    /**\n     * Predicate returns true if this interval intersects other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    intersect(other_interval) {\n        return !this.not_intersect(other_interval);\n    }\n\n    /**\n     * Predicate returns true if this interval does not intersect other interval\n     * @param other_interval\n     * @returns {boolean}\n     */\n    not_intersect(other_interval) {\n        return (this.high < other_interval.low || other_interval.high < this.low);\n    }\n\n    /**\n     * Returns new interval merged with other interval\n     * @param {Interval} other_interval - Other interval to merge with\n     * @returns {Interval}\n     */\n    merge(other_interval) {\n        return new Interval(\n            this.low === undefined ?\n                other_interval.low : (this.low < other_interval.low ? this.low : other_interval.low),\n            this.high === undefined ?\n                other_interval.high : (this.high > other_interval.high ? this.high : other_interval.high)\n        );\n    }\n\n    /**\n     * Returns how key should return\n     */\n    output() {\n        return [this.low, this.high];\n    }\n\n    /**\n     * Function returns maximum between two comparable values\n     * @param interval1\n     * @param interval2\n     * @returns {Interval}\n     */\n    static comparable_max(interval1, interval2) {\n        return interval1.merge(interval2);\n    }\n\n    /**\n     * Predicate returns true if first value less than second value\n     * @param val1\n     * @param val2\n     * @returns {boolean}\n     */\n    static comparable_less_than(val1, val2 ) {\n        return val1 < val2;\n    }\n};\n\n/**\n * Created by Alex Bol on 3/28/2017.\n */\n\n\n// module.exports = {\n//     RB_TREE_COLOR_RED: 0,\n//     RB_TREE_COLOR_BLACK: 1\n// };\n\nconst RB_TREE_COLOR_RED = 0;\nconst RB_TREE_COLOR_BLACK = 1;\n\n/**\n * Created by Alex Bol on 4/1/2017.\n */\n\n\nclass Node {\n    constructor(key = undefined, value = undefined,\n                left = null, right = null, parent = null, color = RB_TREE_COLOR_BLACK) {\n        this.left = left;                     // reference to left child node\n        this.right = right;                   // reference to right child node\n        this.parent = parent;                 // reference to parent node\n        this.color = color;\n\n        this.item = {key: key, value: value};   // key is supposed to be instance of Interval\n\n        /* If not, this should by an array of two numbers */\n        if (key && key instanceof Array && key.length === 2) {\n            if (!Number.isNaN(key[0]) && !Number.isNaN(key[1])) {\n                let [low, high] = key;\n                if (low > high) [low, high] = [high, low];\n                this.item.key = new Interval(low, high);\n            }\n        }\n\n        this.max = this.item.key ? this.item.key.max : undefined;\n    }\n\n    isNil() {\n        return (this.item.key === undefined && this.item.value === undefined &&\n            this.left === null && this.right === null && this.color === RB_TREE_COLOR_BLACK);\n    }\n\n    _value_less_than(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.less_than ?\n            this.item.value.less_than(other_node.item.value) :\n            this.item.value < other_node.item.value;\n    }\n\n    less_than(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.less_than(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.less_than(other_node.item.key) ||\n                this.item.key.equal_to((other_node.item.key)) && this._value_less_than(other_node)\n        }\n    }\n\n    _value_equal(other_node) {\n        return this.item.value && other_node.item.value && this.item.value.equal_to ?\n            this.item.value.equal_to(other_node.item.value) :\n            this.item.value === other_node.item.value;\n    }\n    equal_to(other_node) {\n        // if tree stores only keys\n        if (this.item.value === this.item.key && other_node.item.value === other_node.item.key) {\n            return this.item.key.equal_to(other_node.item.key);\n        }\n        else {    // if tree stores keys and values\n            return this.item.key.equal_to(other_node.item.key) && this._value_equal(other_node);\n        }\n    }\n\n    intersect(other_node) {\n        return this.item.key.intersect(other_node.item.key);\n    }\n\n    copy_data(other_node) {\n        this.item.key = other_node.item.key;\n        this.item.value = other_node.item.value;\n    }\n\n    update_max() {\n        // use key (Interval) max property instead of key.high\n        this.max = this.item.key ? this.item.key.max : undefined;\n        if (this.right && this.right.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.right.max);\n        }\n        if (this.left && this.left.max) {\n            const comparable_max = this.item.key.constructor.comparable_max;  // static method\n            this.max = comparable_max(this.max, this.left.max);\n        }\n    }\n\n    // Other_node does not intersect any node of left subtree, if this.left.max < other_node.item.key.low\n    not_intersect_left_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let high = this.left.max.high !== undefined ? this.left.max.high : this.left.max;\n        return comparable_less_than(high, search_node.item.key.low);\n    }\n\n    // Other_node does not intersect right subtree if other_node.item.key.high < this.right.key.low\n    not_intersect_right_subtree(search_node) {\n        const comparable_less_than = this.item.key.constructor.comparable_less_than;  // static method\n        let low = this.right.max.low !== undefined ? this.right.max.low : this.right.item.key.low;\n        return comparable_less_than(search_node.item.key.high, low);\n    }\n}\n\n/**\n * Created by Alex Bol on 3/31/2017.\n */\n\n// const nil_node = new Node();\n\n/**\n * Implementation of interval binary search tree <br/>\n * Interval tree stores items which are couples of {key:interval, value: value} <br/>\n * Interval is an object with high and low properties or simply pair [low,high] of numeric values <br />\n * @type {IntervalTree}\n */\nclass IntervalTree {\n    /**\n     * Construct new empty instance of IntervalTree\n     */\n    constructor() {\n        this.root = null;\n        this.nil_node = new Node();\n    }\n\n    /**\n     * Returns number of items stored in the interval tree\n     * @returns {number}\n     */\n    get size() {\n        let count = 0;\n        this.tree_walk(this.root, () => count++);\n        return count;\n    }\n\n    /**\n     * Returns array of sorted keys in the ascending order\n     * @returns {Array}\n     */\n    get keys() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(\n            node.item.key.output ? node.item.key.output() : node.item.key\n        ));\n        return res;\n    }\n\n    /**\n     * Return array of values in the ascending keys order\n     * @returns {Array}\n     */\n    get values() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push(node.item.value));\n        return res;\n    }\n\n    /**\n     * Returns array of items (<key,value> pairs) in the ascended keys order\n     * @returns {Array}\n     */\n    get items() {\n        let res = [];\n        this.tree_walk(this.root, (node) => res.push({\n            key: node.item.key.output ? node.item.key.output() : node.item.key,\n            value: node.item.value\n        }));\n        return res;\n    }\n\n    /**\n     * Returns true if tree is empty\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return (this.root == null || this.root === this.nil_node);\n    }\n\n    /**\n     * Clear tree\n     */\n    clear() {\n        this.root = null;\n    }\n\n    /**\n     * Insert new item into interval tree\n     * @param {Interval} key - interval object or array of two numbers [low, high]\n     * @param {any} value - value representing any object (optional)\n     * @returns {Node} returns reference to inserted node as an object {key:interval, value: value}\n     */\n    insert(key, value = key) {\n        if (key === undefined) return;\n        let insert_node = new Node(key, value, this.nil_node, this.nil_node, null, RB_TREE_COLOR_RED);\n        this.tree_insert(insert_node);\n        this.recalc_max(insert_node);\n        return insert_node;\n    }\n\n    /**\n     * Returns true if item {key,value} exist in the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object to be checked\n     * @returns {boolean} true if item {key, value} exist in the tree, false otherwise\n     */\n    exist(key, value = key) {\n        let search_node = new Node(key, value);\n        return !!this.tree_search(this.root, search_node);\n    }\n\n    /**\n     * Remove entry {key, value} from the tree\n     * @param {Interval} key - interval correspondent to keys stored in the tree\n     * @param {any} value - value object\n     * @returns {boolean} true if item {key, value} deleted, false if not found\n     */\n    remove(key, value = key) {\n        let search_node = new Node(key, value);\n        let delete_node = this.tree_search(this.root, search_node);\n        if (delete_node) {\n            this.tree_delete(delete_node);\n        }\n        return delete_node;\n    }\n\n    /**\n     * Returns array of entry values which keys intersect with given interval <br/>\n     * If no values stored in the tree, returns array of keys which intersect given interval\n     * @param {Interval} interval - search interval, or tuple [low, high]\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\n     * @returns {Array}\n     */\n    search(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\n        let search_node = new Node(interval);\n        let resp_nodes = [];\n        this.tree_search_interval(this.root, search_node, resp_nodes);\n        return resp_nodes.map(node => outputMapperFn(node.item.value, node.item.key))\n    }\n\n    /**\n     * Returns true if intersection between given and any interval stored in the tree found\n     * @param {Interval} interval - search interval or tuple [low, high]\n     * @returns {boolean}\n     */\n    intersect_any(interval) {\n        let search_node = new Node(interval);\n        return this.tree_find_any_interval(this.root, search_node);\n    }\n\n    /**\n     * Tree visitor. For each node implement a callback function. <br/>\n     * Method calls a callback function with two parameters (key, value)\n     * @param visitor(key,value) - function to be called for each tree item\n     */\n    forEach(visitor) {\n        this.tree_walk(this.root, (node) => visitor(node.item.key, node.item.value));\n    }\n\n    /**\n     * Value Mapper. Walk through every node and map node value to another value\n     * @param callback(value,key) - function to be called for each tree item\n     */\n    map(callback) {\n        const tree = new IntervalTree();\n        this.tree_walk(this.root, (node) => tree.insert(node.item.key, callback(node.item.value, node.item.key)));\n        return tree;\n    }\n\n    /**\n     * @param {Interval} interval - optional if the iterator is intended to start from the beginning\n     * @param outputMapperFn(value,key) - optional function that maps (value, key) to custom output\n     * @returns {Iterator}\n     */\n    *iterate(interval, outputMapperFn = (value, key) => value === key ? key.output() : value) {\n        let node;\n        if (interval) {\n            node = this.tree_search_nearest_forward(this.root, new Node(interval));\n        } else if (this.root) {\n            node = this.local_minimum(this.root);\n        }\n        while (node) {\n            yield outputMapperFn(node.item.value, node.item.key);\n            node = this.tree_successor(node);\n        }\n    }\n\n    recalc_max(node) {\n        let node_current = node;\n        while (node_current.parent != null) {\n            node_current.parent.update_max();\n            node_current = node_current.parent;\n        }\n    }\n\n    tree_insert(insert_node) {\n        let current_node = this.root;\n        let parent_node = null;\n\n        if (this.root == null || this.root === this.nil_node) {\n            this.root = insert_node;\n        }\n        else {\n            while (current_node !== this.nil_node) {\n                parent_node = current_node;\n                if (insert_node.less_than(current_node)) {\n                    current_node = current_node.left;\n                }\n                else {\n                    current_node = current_node.right;\n                }\n            }\n\n            insert_node.parent = parent_node;\n\n            if (insert_node.less_than(parent_node)) {\n                parent_node.left = insert_node;\n            }\n            else {\n                parent_node.right = insert_node;\n            }\n        }\n\n        this.insert_fixup(insert_node);\n    }\n\n// After insertion insert_node may have red-colored parent, and this is a single possible violation\n// Go upwords to the root and re-color until violation will be resolved\n    insert_fixup(insert_node) {\n        let current_node;\n        let uncle_node;\n\n        current_node = insert_node;\n        while (current_node !== this.root && current_node.parent.color === RB_TREE_COLOR_RED) {\n            if (current_node.parent === current_node.parent.parent.left) {   // parent is left child of grandfather\n                uncle_node = current_node.parent.parent.right;              // right brother of parent\n                if (uncle_node.color === RB_TREE_COLOR_RED) {             // Case 1. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {                                                    // Case 2 & 3. Uncle is black\n                    if (current_node === current_node.parent.right) {     // Case 2. Current if right child\n                        // This case is transformed into Case 3.\n                        current_node = current_node.parent;\n                        this.rotate_left(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 3. Current is left child.\n                    // Re-color father and grandfather, rotate grandfather right\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_right(current_node.parent.parent);\n                }\n            }\n            else {                                                         // parent is right child of grandfather\n                uncle_node = current_node.parent.parent.left;              // left brother of parent\n                if (uncle_node.color === RB_TREE_COLOR_RED) {             // Case 4. Uncle is red\n                    // re-color father and uncle into black\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    uncle_node.color = RB_TREE_COLOR_BLACK;\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    current_node = current_node.parent.parent;\n                }\n                else {\n                    if (current_node === current_node.parent.left) {             // Case 5. Current is left child\n                        // Transform into case 6\n                        current_node = current_node.parent;\n                        this.rotate_right(current_node);\n                    }\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;    // Case 6. Current is right child.\n                    // Re-color father and grandfather, rotate grandfather left\n                    current_node.parent.parent.color = RB_TREE_COLOR_RED;\n                    this.rotate_left(current_node.parent.parent);\n                }\n            }\n        }\n\n        this.root.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_delete(delete_node) {\n        let cut_node;   // node to be cut - either delete_node or successor_node  (\"y\" from 14.4)\n        let fix_node;   // node to fix rb tree property   (\"x\" from 14.4)\n\n        if (delete_node.left === this.nil_node || delete_node.right === this.nil_node) {  // delete_node has less then 2 children\n            cut_node = delete_node;\n        }\n        else {                                                    // delete_node has 2 children\n            cut_node = this.tree_successor(delete_node);\n        }\n\n        // fix_node if single child of cut_node\n        if (cut_node.left !== this.nil_node) {\n            fix_node = cut_node.left;\n        }\n        else {\n            fix_node = cut_node.right;\n        }\n\n        // remove cut_node from parent\n        /*if (fix_node != this.nil_node) {*/\n            fix_node.parent = cut_node.parent;\n        /*}*/\n\n        if (cut_node === this.root) {\n            this.root = fix_node;\n        }\n        else {\n            if (cut_node === cut_node.parent.left) {\n                cut_node.parent.left = fix_node;\n            }\n            else {\n                cut_node.parent.right = fix_node;\n            }\n            cut_node.parent.update_max();        // update max property of the parent\n        }\n\n        this.recalc_max(fix_node);              // update max property upward from fix_node to root\n\n        // COPY DATA !!!\n        // Delete_node becomes cut_node, it means that we cannot hold reference\n        // to node in outer structure and we will have to delete by key, additional search need\n        if (cut_node !== delete_node) {\n            delete_node.copy_data(cut_node);\n            delete_node.update_max();           // update max property of the cut node at the new place\n            this.recalc_max(delete_node);       // update max property upward from delete_node to root\n        }\n\n        if (/*fix_node != this.nil_node && */cut_node.color === RB_TREE_COLOR_BLACK) {\n            this.delete_fixup(fix_node);\n        }\n    }\n\n    delete_fixup(fix_node) {\n        let current_node = fix_node;\n        let brother_node;\n\n        while (current_node !== this.root && current_node.parent != null && current_node.color === RB_TREE_COLOR_BLACK) {\n            if (current_node === current_node.parent.left) {          // fix node is left child\n                brother_node = current_node.parent.right;\n                if (brother_node.color === RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_left(current_node.parent);\n                    brother_node = current_node.parent.right;                      // update brother\n                }\n                // Derive to cases 2..4: brother is black\n                if (brother_node.left.color === RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color === RB_TREE_COLOR_BLACK) {  // case 2: both nephews black\n                    brother_node.color = RB_TREE_COLOR_RED;              // re-color brother\n                    current_node = current_node.parent;                  // continue iteration\n                }\n                else {\n                    if (brother_node.right.color === RB_TREE_COLOR_BLACK) {   // case 3: left nephew red, right nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;          // re-color brother\n                        brother_node.left.color = RB_TREE_COLOR_BLACK;   // re-color nephew\n                        this.rotate_right(brother_node);\n                        brother_node = current_node.parent.right;                     // update brother\n                        // Derive to case 4: left nephew black, right nephew red\n                    }\n                    // case 4: left nephew black, right nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.right.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_left(current_node.parent);\n                    current_node = this.root;                         // exit from loop\n                }\n            }\n            else {                                             // fix node is right child\n                brother_node = current_node.parent.left;\n                if (brother_node.color === RB_TREE_COLOR_RED) {   // Case 1. Brother is red\n                    brother_node.color = RB_TREE_COLOR_BLACK;         // re-color brother\n                    current_node.parent.color = RB_TREE_COLOR_RED;    // re-color father\n                    this.rotate_right(current_node.parent);\n                    brother_node = current_node.parent.left;                        // update brother\n                }\n                // Go to cases 2..4\n                if (brother_node.left.color === RB_TREE_COLOR_BLACK &&\n                    brother_node.right.color === RB_TREE_COLOR_BLACK) {   // case 2\n                    brother_node.color = RB_TREE_COLOR_RED;             // re-color brother\n                    current_node = current_node.parent;                              // continue iteration\n                }\n                else {\n                    if (brother_node.left.color === RB_TREE_COLOR_BLACK) {  // case 3: right nephew red, left nephew black\n                        brother_node.color = RB_TREE_COLOR_RED;            // re-color brother\n                        brother_node.right.color = RB_TREE_COLOR_BLACK;    // re-color nephew\n                        this.rotate_left(brother_node);\n                        brother_node = current_node.parent.left;                        // update brother\n                        // Derive to case 4: right nephew black, left nephew red\n                    }\n                    // case 4: right nephew black, left nephew red\n                    brother_node.color = current_node.parent.color;\n                    current_node.parent.color = RB_TREE_COLOR_BLACK;\n                    brother_node.left.color = RB_TREE_COLOR_BLACK;\n                    this.rotate_right(current_node.parent);\n                    current_node = this.root;                               // force exit from loop\n                }\n            }\n        }\n\n        current_node.color = RB_TREE_COLOR_BLACK;\n    }\n\n    tree_search(node, search_node) {\n        if (node == null || node === this.nil_node)\n            return undefined;\n\n        if (search_node.equal_to(node)) {\n            return node;\n        }\n        if (search_node.less_than(node)) {\n            return this.tree_search(node.left, search_node);\n        }\n        else {\n            return this.tree_search(node.right, search_node);\n        }\n    }\n\n    tree_search_nearest_forward(node, search_node) {\n        let best;\n        let curr = node;\n        while (curr && curr !== this.nil_node) {\n            if (curr.less_than(search_node)) {\n                if (curr.intersect(search_node)) {\n                    best = curr;\n                    curr = curr.left;\n                } else {\n                    curr = curr.right;\n                }\n            } else {\n                if (!best || curr.less_than(best)) best = curr;\n                curr = curr.left;\n            }\n        }\n        return best || null;\n    }\n\n    // Original search_interval method; container res support push() insertion\n    // Search all intervals intersecting given one\n    tree_search_interval(node, search_node, res) {\n        if (node != null && node !== this.nil_node) {\n            // if (node->left != this.nil_node && node->left->max >= low) {\n            if (node.left !== this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                this.tree_search_interval(node.left, search_node, res);\n            }\n            // if (low <= node->high && node->low <= high) {\n            if (node.intersect(search_node)) {\n                res.push(node);\n            }\n            // if (node->right != this.nil_node && node->low <= high) {\n            if (node.right !== this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                this.tree_search_interval(node.right, search_node, res);\n            }\n        }\n    }\n\n    tree_find_any_interval(node, search_node) {\n        let found = false;\n        if (node != null && node !== this.nil_node) {\n            if (node.left !== this.nil_node && !node.not_intersect_left_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.left, search_node);\n            }\n            if (!found) {\n                found = node.intersect(search_node);\n            }\n            if (!found && node.right !== this.nil_node && !node.not_intersect_right_subtree(search_node)) {\n                found = this.tree_find_any_interval(node.right, search_node);\n            }\n        }\n        return found;\n    }\n\n    local_minimum(node) {\n        let node_min = node;\n        while (node_min.left != null && node_min.left !== this.nil_node) {\n            node_min = node_min.left;\n        }\n        return node_min;\n    }\n\n    // not in use\n    local_maximum(node) {\n        let node_max = node;\n        while (node_max.right != null && node_max.right !== this.nil_node) {\n            node_max = node_max.right;\n        }\n        return node_max;\n    }\n\n    tree_successor(node) {\n        let node_successor;\n        let current_node;\n        let parent_node;\n\n        if (node.right !== this.nil_node) {\n            node_successor = this.local_minimum(node.right);\n        }\n        else {\n            current_node = node;\n            parent_node = node.parent;\n            while (parent_node != null && parent_node.right === current_node) {\n                current_node = parent_node;\n                parent_node = parent_node.parent;\n            }\n            node_successor = parent_node;\n        }\n        return node_successor;\n    }\n\n    //           |            right-rotate(T,y)       |\n    //           y            ---------------.       x\n    //          / \\                                  / \\\n    //         x   c          left-rotate(T,x)      a   y\n    //        / \\             <---------------         / \\\n    //       a   b                                    b   c\n\n    rotate_left(x) {\n        let y = x.right;\n\n        x.right = y.left;           // b goes to x.right\n\n        if (y.left !== this.nil_node) {\n            y.left.parent = x;     // x becomes parent of b\n        }\n        y.parent = x.parent;       // move parent\n\n        if (x === this.root) {\n            this.root = y;           // y becomes root\n        }\n        else {                        // y becomes child of x.parent\n            if (x === x.parent.left) {\n                x.parent.left = y;\n            }\n            else {\n                x.parent.right = y;\n            }\n        }\n        y.left = x;                 // x becomes left child of y\n        x.parent = y;               // and y becomes parent of x\n\n        if (x != null && x !== this.nil_node) {\n            x.update_max();\n        }\n\n        y = x.parent;\n        if (y != null && y !== this.nil_node) {\n            y.update_max();\n        }\n    }\n\n    rotate_right(y) {\n        let x = y.left;\n\n        y.left = x.right;           // b goes to y.left\n\n        if (x.right !== this.nil_node) {\n            x.right.parent = y;        // y becomes parent of b\n        }\n        x.parent = y.parent;          // move parent\n\n        if (y === this.root) {        // x becomes root\n            this.root = x;\n        }\n        else {                        // y becomes child of x.parent\n            if (y === y.parent.left) {\n                y.parent.left = x;\n            }\n            else {\n                y.parent.right = x;\n            }\n        }\n        x.right = y;                 // y becomes right child of x\n        y.parent = x;               // and x becomes parent of y\n\n        if (y !== null && y !== this.nil_node) {\n            y.update_max();\n        }\n\n        x = y.parent;\n        if (x != null && x !== this.nil_node) {\n            x.update_max();\n        }\n    }\n\n    tree_walk(node, action) {\n        if (node != null && node !== this.nil_node) {\n            this.tree_walk(node.left, action);\n            // arr.push(node.toArray());\n            action(node);\n            this.tree_walk(node.right, action);\n        }\n    }\n\n    /* Return true if all red nodes have exactly two black child nodes */\n    testRedBlackProperty() {\n        let res = true;\n        this.tree_walk(this.root, function (node) {\n            if (node.color === RB_TREE_COLOR_RED) {\n                if (!(node.left.color === RB_TREE_COLOR_BLACK && node.right.color === RB_TREE_COLOR_BLACK)) {\n                    res = false;\n                }\n            }\n        });\n        return res;\n    }\n\n    /* Throw error if not every path from root to bottom has same black height */\n    testBlackHeightProperty(node) {\n        let height = 0;\n        let heightLeft = 0;\n        let heightRight = 0;\n        if (node.color === RB_TREE_COLOR_BLACK) {\n            height++;\n        }\n        if (node.left !== this.nil_node) {\n            heightLeft = this.testBlackHeightProperty(node.left);\n        }\n        else {\n            heightLeft = 1;\n        }\n        if (node.right !== this.nil_node) {\n            heightRight = this.testBlackHeightProperty(node.right);\n        }\n        else {\n            heightRight = 1;\n        }\n        if (heightLeft !== heightRight) {\n            throw new Error('Red-black height property violated');\n        }\n        height += heightLeft;\n        return height;\n    }\n}\n\nexport { Interval, Node, IntervalTree as default };\n"],"names":["Interval","constructor","low","high","this","clone","max","less_than","other_interval","equal_to","intersect","not_intersect","merge","undefined","output","comparable_max","interval1","interval2","comparable_less_than","val1","val2","Node","key","value","left","right","parent","color","item","Array","length","Number","isNaN","isNil","_value_less_than","other_node","_value_equal","copy_data","update_max","not_intersect_left_subtree","search_node","not_intersect_right_subtree","IntervalTree","root","nil_node","size","count","tree_walk","keys","res","node","push","values","items","isEmpty","clear","insert","insert_node","tree_insert","recalc_max","exist","tree_search","remove","delete_node","tree_delete","search","interval","outputMapperFn","resp_nodes","tree_search_interval","map","intersect_any","tree_find_any_interval","forEach","visitor","callback","tree","iterate","tree_search_nearest_forward","local_minimum","tree_successor","node_current","current_node","parent_node","insert_fixup","uncle_node","rotate_left","rotate_right","cut_node","fix_node","delete_fixup","brother_node","best","curr","found","node_min","local_maximum","node_max","node_successor","x","y","action","testRedBlackProperty","testBlackHeightProperty","height","heightLeft","heightRight","Error"],"sourceRoot":""}