{"version":3,"file":"static/js/130.24c32f81.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/shared/components/FilterByTagDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Link,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { FilterBy } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(2),\n  },\n  field: {\n    margin: theme.spacing(2),\n  },\n}))\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nfunction Bitmask(props: { flag?: number; setFlag: (arg: number) => void }) {\n  const { flag = 0, setFlag } = props\n  return (\n    <>\n      <TextField\n        type=\"number\"\n        value={flag}\n        onChange={event => {\n          setFlag(+event.target.value)\n        }}\n      />\n      {flagNames.map((name, index) => {\n        const val = flag & (1 << index)\n        const key = `${name}_${val}`\n        return (\n          <div key={key}>\n            <input\n              type=\"checkbox\"\n              checked={Boolean(val)}\n              onChange={event => {\n                if (event.target.checked) {\n                  setFlag(flag | (1 << index))\n                } else {\n                  setFlag(flag & ~(1 << index))\n                }\n              }}\n            />\n            <label htmlFor={key}>{name}</label>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\nconst FilterByTagDialog = observer(function (props: {\n  model: {\n    filterBy: FilterBy\n    setFilterBy: (arg: FilterBy) => void\n  }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const { classes } = useStyles()\n  const { filterBy } = model\n  const [flagInclude, setFlagInclude] = useState(filterBy.flagInclude)\n  const [flagExclude, setFlagExclude] = useState(filterBy.flagExclude)\n  const [tag, setTag] = useState(filterBy.tagFilter?.tag || '')\n  const [tagValue, setTagValue] = useState(filterBy.tagFilter?.value || '')\n  const [readName, setReadName] = useState(filterBy.readName || '')\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n\n  const site = 'https://broadinstitute.github.io/picard/explain-flags.html'\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Filter options\">\n      <DialogContent>\n        <Typography>\n          Set filter bitmask options. Refer to <Link href={site}>{site}</Link>{' '}\n          for details\n        </Typography>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <div style={{ display: 'flex' }}>\n            <div>\n              <Typography>Read must have ALL these flags</Typography>\n              <Bitmask flag={flagInclude} setFlag={setFlagInclude} />\n            </div>\n            <div>\n              <Typography>Read must have NONE of these flags</Typography>\n              <Bitmask flag={flagExclude} setFlag={setFlagExclude} />\n            </div>\n          </div>\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>\n            Filter by tag name and value. Use * in the value field to get all\n            reads containing any value for that tag. Example: filter tag name SA\n            with value * to get all split/supplementary reads. Other examples\n            include HP for haplotype, or RG for read group\n          </Typography>\n          <TextField\n            className={classes.field}\n            value={tag}\n            onChange={event => {\n              setTag(event.target.value)\n            }}\n            placeholder=\"Enter tag name\"\n            error={tag.length === 2 && !validTag}\n            helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n            slotProps={{\n              htmlInput: {\n                maxLength: 2,\n              },\n            }}\n          />\n          <TextField\n            className={classes.field}\n            value={tagValue}\n            onChange={event => {\n              setTagValue(event.target.value)\n            }}\n            placeholder=\"Enter tag value\"\n          />\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>Filter by read name</Typography>\n          <TextField\n            className={classes.field}\n            value={readName}\n            onChange={event => {\n              setReadName(event.target.value)\n            }}\n            placeholder=\"Enter read name\"\n          />\n        </Paper>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            autoFocus\n            type=\"submit\"\n            onClick={() => {\n              model.setFilterBy({\n                flagInclude,\n                flagExclude,\n                readName,\n                tagFilter:\n                  tag !== ''\n                    ? {\n                        tag,\n                        value: tagValue,\n                      }\n                    : undefined,\n              })\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleClose()\n            }}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default FilterByTagDialog\n"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","margin","field","flagNames","Bitmask","props","$","_c","flag","t0","setFlag","undefined","t1","t2","t3","t4","event","target","value","_jsx","TextField","type","onChange","map","name","index","val","key","_jsxs","children","checked","Boolean","event_0","_Fragment","observer","model","handleClose","classes","filterBy","flagInclude","setFlagInclude","useState","flagExclude","setFlagExclude","tag","setTag","tagFilter","tagValue","setTagValue","readName","setReadName","validTag","exec","site","Dialog","open","onClose","title","DialogContent","Typography","Link","href","Paper","className","variant","style","display","placeholder","error","length","helperText","slotProps","htmlInput","maxLength","DialogActions","Button","color","autoFocus","onClick","setFilterBy"],"sourceRoot":""}