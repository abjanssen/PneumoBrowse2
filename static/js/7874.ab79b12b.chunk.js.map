{"version":3,"file":"static/js/7874.ab79b12b.chunk.js","mappings":"odAiBA,MA0GA,GA1G0BA,EAAAA,EAAAA,WAAS,UAAU,KAC3CC,IAWA,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,GACrC,OACEG,EAAAA,cAAAA,EAAAA,SAAA,KACGN,EAAKO,KAAOD,EAAAA,cAACE,EAAAA,EAAU,KAAER,EAAKO,MAAqB,KACpDD,EAAAA,cAACG,EAAAA,EAAI,CAACC,gBAAc,GACjBV,EAAKC,MAAMU,KAAI,CAACC,EAAKC,IACpBP,EAAAA,cAACQ,EAAAA,GAAQ,CAACC,IAAK,GAAGC,KAAKC,UAAUL,MAAQC,IAAOK,gBAAc,GAC5DZ,EAAAA,cAACa,EAAAA,EAAS,CACRlB,MAAOW,EACPQ,SAAUC,IACRrB,EAAKsB,WAAWT,EAAKQ,EAAIE,OAAOtB,MAAM,EAExCuB,UAAW,CACTC,MAAO,CACLC,aACEpB,EAAAA,cAACqB,EAAAA,EAAc,CAACC,SAAS,OACvBtB,EAAAA,cAACuB,EAAAA,EAAU,CACTC,QAASA,KACP9B,EAAK+B,cAAclB,EAAI,GAGzBP,EAAAA,cAAC0B,EAAAA,EAAU,eAU1B5B,EACCE,EAAAA,cAACQ,EAAAA,GAAQ,CAACI,gBAAc,GACtBZ,EAAAA,cAACa,EAAAA,EAAS,CACRlB,MAAOA,EACPgC,YAAY,UACZb,SAAUc,IACRhC,EAASgC,EAAMX,OAAOtB,MAAM,EAE9BuB,UAAW,CACTC,MAAO,CACLC,aACEpB,EAAAA,cAACqB,EAAAA,EAAc,CAACC,SAAS,OACvBtB,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAC6B,EAAAA,EAAM,CACLC,MAAM,UACNC,QAAQ,YACRC,MAAO,CAAEC,OAAQ,GACjB,cAAa,kBAAkBvC,EAAKO,OACpCuB,QAASA,KACPzB,GAAU,GACVL,EAAKwC,IAAIvC,GACTC,EAAS,GAAG,GAEf,MAGDI,EAAAA,cAAC6B,EAAAA,EAAM,CACLC,MAAM,UACNC,QAAQ,YACRC,MAAO,CAAEC,OAAQ,GACjBT,QAASA,KACPzB,GAAU,GACVH,EAAS,GAAG,GAEf,iBAUb,KACJI,EAAAA,cAAC6B,EAAAA,EAAM,CACLC,MAAM,UACNC,QAAQ,YACRC,MAAO,CAAEC,OAAQ,GACjBE,SAAUrC,EACV0B,QAASA,KACPzB,GAAU,EAAK,GAElB,aAIHC,EAAAA,cAACoC,EAAAA,EAAc,KAAE1C,EAAK2C,aAG5B,I,qCC5GA,MAAMC,EACJ,uNAEIC,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,eAAgB,CACdC,UAAW,OACXC,aAAc,aAAaH,EAAMI,QAAQC,UACzCC,MAAO,OACPT,cAEFU,aAAc,CACZV,cAEFW,kBAAmB,CACjBF,MAAO,OACPG,UAAW,QAGbC,MAAO,CACLrB,MAAO,MACPsB,SAAU,aAgGd,GA5FuB3D,EAAAA,EAAAA,WAAS,UAAU,KACxCC,IAUA,MAAM,QAAE2D,GAAYd,KAEbe,EAAMC,IAAW1D,EAAAA,EAAAA,UAASH,EAAKC,QAC/BwD,EAAOK,IAAgB3D,EAAAA,EAAAA,YACxB4D,GAAgBC,EAAAA,EAAAA,aAAYJ,EAAM,KAyBxC,OAvBAK,EAAAA,EAAAA,YAAU,KACR,IACE,MAAMC,EAAoBH,EAAcI,WAAW,SAC/CJ,EACA,QAAQA,IAEZ,GAA0B,UAAtBG,EACF,MAAM,IAAIE,MAAM,uCAElBC,EAAAA,EAAAA,GACEH,GACAI,EAAAA,EAAAA,QAAOtE,GAAMuE,eAAeC,MAE9BxE,EAAKyE,IAAIP,GACTJ,OAAaY,EACf,CAAE,MAAOC,GACPC,QAAQnB,MAAM,CAAEkB,IAChBb,EAAaa,EACf,IACC,CAACZ,EAAe/D,IAKjBM,EAAAA,cAAAA,EAAAA,SAAA,KACGmD,EAAQnD,EAAAA,cAAA,KAAGuE,UAAWlB,EAAQF,OAAQ,GAAGA,KAAe,KACzDnD,EAAAA,cAAA,OAAKuE,UAAWlB,EAAQJ,mBACtBjD,EAAAA,cAACa,EAAAA,EAAS,CACR2D,WAAS,EACTD,UAAWlB,EAAQX,eACnB/C,MAAO2D,EAAKO,WAAW,SAAWP,EAAKmB,MAAM,SAAS,GAAKnB,EAC3DxC,SAAUc,IACR2B,EAAQ3B,EAAMX,OAAOtB,MAAM,EAE7BqC,MAAO,CAAE0C,WAAYvB,EAAQ,YAASiB,GACtClD,UAAW,CACTC,MAAO,CACLkC,QAAS,CACPlC,MAAOkC,EAAQL,kBAMvBhD,EAAAA,cAAA,SAAIN,EAAK2C,aACTrC,EAAAA,cAAC2E,EAAAA,EAAO,CACNC,MACE5E,EAAAA,cAAA,WAAK,6DAEHA,EAAAA,cAAA,WAAM,sCAAoCN,EAAKmF,iBAGnDC,OAAK,GAEL9E,EAAAA,cAACuB,EAAAA,EAAU,CACTO,MAAM,UACNN,QAASA,KACP,MAAMuD,EAAYC,OAAOC,KACvB,mCACA,SACA,uBAEEF,IACFA,EAAUG,OAAS,KACrB,GAGFlF,EAAAA,cAACmF,EAAAA,EAAQ,SAMrB,I,uOC1HO,MAAMC,EAAaC,IASxB,MAAM,MAAE1F,EAAQ,OAAM,MAAE2F,EAAQ,GAAE,eAAEC,EAAiB,CAAC,EAAC,SAAEzE,GAAauE,GAC/DG,EAAWC,IAAgB5F,EAAAA,EAAAA,WAAS,GAE3C,OACEG,EAAAA,cAAA,OAAKgC,MAAO,CAAE0D,QAAS,SACrB1F,EAAAA,cAACa,EAAAA,EAAS8E,EAAA,CACRhG,MAAOA,EACP2F,MAAOA,EACP9D,QAASA,KACPiE,GAAcD,EAAU,EAE1B1E,SAAUc,IACRd,EAASc,EAAMX,OAAOtB,MAAM,GAE1B4F,IAENvF,EAAAA,cAAA,OAAKgC,MAAO,CAAEW,UAAW,KACvB3C,EAAAA,cAACA,EAAAA,SAAc,CAAC4F,SAAU,MACxB5F,EAAAA,cAAC6F,EAAAA,GAAW,CACV/D,MAAOnC,EACPmB,SAAUc,IACRd,EAASc,EAAM,MAKnB,EA4BV,GAxBoBnC,EAAAA,EAAAA,WAAS,SAAU4F,GAQrC,MAAM,KAAE3F,GAAS2F,EACjB,OACErF,EAAAA,cAACoF,EAAS,CACRE,MAAO5F,EAAKO,KACZN,MAAOD,EAAKC,MACZmB,SAAUgB,IACRpC,EAAKyE,IAAIrC,EAAM,EAEjByD,eAAgB,CACdO,WAAYpG,EAAK2C,YACjB0D,WAAW,IAInB,IC1DMzD,EACJ,uNAEIC,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCU,MAAO,CACLrB,MAAO,MACPsB,SAAU,SAEZV,eAAgB,CACdJ,WAAU,EACVc,SAZa,OAabsB,WAAYjC,EAAMI,QAAQ6B,WAAWsB,QACrCjD,MAAO,IACPJ,UAAW,OACXsD,OAAQ,8BAEVhD,kBAAmB,CACjBF,MAAO,OACPG,UAAW,QAEbF,aAAc,CACZV,WAAUA,OA0Dd,GAtDmB7C,EAAAA,EAAAA,WAAS,UAAoB,KAC9CC,IASA,MAAM,QAAE2D,GAAYd,KACb2D,EAAUC,IAAetG,EAAAA,EAAAA,UAASa,KAAKC,UAAUjB,EAAKC,MAAO,KAAM,KACnEwD,EAAOiD,IAAYvG,EAAAA,EAAAA,YAY1B,OAVA8D,EAAAA,EAAAA,YAAU,KACR,IACEyC,OAAShC,GACT1E,EAAKyE,IAAIzD,KAAK2F,MAAMH,GACtB,CAAE,MAAO7B,GACPC,QAAQnB,MAAM,CAAEkB,IAChB+B,EAAS/B,EACX,IACC,CAAC6B,EAAUxG,IAGZM,EAAAA,cAAAA,EAAAA,SAAA,KACGmD,EAAQnD,EAAAA,cAAA,KAAGuE,UAAWlB,EAAQF,OAAQ,GAAGA,KAAe,KACzDnD,EAAAA,cAAA,OAAKuE,UAAWlB,EAAQJ,mBACtBjD,EAAAA,cAACE,EAAAA,EAAU,CAACoG,QAAM,EAACC,QAAQ,eACxB7G,EAAKO,MAERD,EAAAA,cAACa,EAAAA,EAAS,CACR2F,GAAG,cACHjC,UAAWlB,EAAQX,eACnB/C,MAAOuG,EACPJ,WAAYpG,EAAK2C,YACjBmC,WAAS,EACT1D,SAAUc,IACRuE,EAAYvE,EAAMX,OAAOtB,MAAM,EAEjCqC,MAAO,CAAE0C,WAAYvB,EAAQ,YAASiB,GACtClD,UAAW,CACTC,MAAO,CACLkC,QAAS,CACPlC,MAAOkC,EAAQL,mBAQ/B,I,6CC/DA,MAAMT,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCgE,KAAM,CACJ9D,UAAWF,EAAMiE,QAAQ,QA8F7B,GA1F6BjH,EAAAA,EAAAA,WAAS,UAAU,KAC9CC,IAaA,MAAM,QAAE2D,GAAYd,KACb5C,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IACnC,OACEG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACE,EAAAA,EAAU,KAAER,EAAKO,MACjB,IAAIP,EAAKC,OAAOU,KAAI,EAAEI,EAAKH,KAC1BN,EAAAA,cAAC2G,EAAAA,EAAI,CAACC,QAAM,EAACnG,IAAKA,EAAK8D,UAAWlB,EAAQoD,MACxCzG,EAAAA,cAAC6G,EAAAA,EAAU,CACTjC,MAAOnE,EACPqG,OACE9G,EAAAA,cAACuB,EAAAA,EAAU,CACTC,QAASA,KACP9B,EAAKqH,OAAOtG,EAAI,GAGlBT,EAAAA,cAAC0B,EAAAA,EAAU,SAIjB1B,EAAAA,cAACgH,EAAAA,EAAW,KACVhH,EAAAA,cAACiH,EAAiB,CAChBvH,KAAM,CACJO,KAAMP,EAAKO,KACXN,MAAOW,EACP+B,YAAa,gCAAgC5B,IAC7CO,WAAYA,CAACT,EAAaD,KACxBZ,EAAKwH,cAAczG,EAAKF,EAAKD,EAAI,EAEnCmB,cAAgBlB,IACdb,EAAKyH,iBAAiB1G,EAAKF,EAAI,EAEjC2B,IAAM5B,IACJZ,EAAK0H,SAAS3G,EAAKH,EAAI,SAOnCN,EAAAA,cAAC2G,EAAAA,EAAI,CAACC,QAAM,EAACrC,UAAWlB,EAAQoD,MAC9BzG,EAAAA,cAAC6G,EAAAA,EAAU,CACTQ,mBAAiB,EACjBzC,MACE5E,EAAAA,cAACa,EAAAA,EAAS,CACRkF,WAAS,EACTpG,MAAOA,EACPgC,YAAY,UACZb,SAAUc,IACRhC,EAASgC,EAAMX,OAAOtB,MAAM,EAE9BuB,UAAW,CACTC,MAAO,CACLC,aACEpB,EAAAA,cAACqB,EAAAA,EAAc,CAACC,SAAS,OACvBtB,EAAAA,cAACuB,EAAAA,EAAU,CACTY,SAAoB,KAAVxC,EACV6B,QAASA,KACP9B,EAAKwC,IAAIvC,EAAO,IAChBC,EAAS,GAAG,GAGdI,EAAAA,cAACsH,EAAAA,EAAO,eAU1BtH,EAAAA,cAACoC,EAAAA,EAAc,KAAE1C,EAAK2C,aAG5B,I,wNC9Ge,SAASkF,EACtBlC,GAEA,MAAM,WAAES,GAAeT,EACvB,OACErF,EAAAA,cAACa,EAAAA,EAAS8E,EAAA,GACJN,EAAK,CACTS,WAAY9F,EAAAA,cAACwH,EAAAA,cAAa,CAACC,KAAM3B,GAAc,KAC/CC,WAAS,EACT7E,UAAW,CACTwG,eAAgB,CACdC,UAAW,UAKrB,CClBA,MAiCA,IAjCqBlI,EAAAA,EAAAA,WAAS,UAAU,KACtCC,IAUA,MAAOY,EAAKsH,IAAU/H,EAAAA,EAAAA,UAASH,EAAKC,OASpC,OARAgE,EAAAA,EAAAA,YAAU,KACR,MAAMkE,EAAMC,OAAOC,WAAWzH,GAC1BwH,OAAOE,MAAMH,GACfnI,EAAKuI,UAELvI,EAAKyE,IAAI0D,EACX,GACC,CAACnI,EAAMY,IAERN,EAAAA,cAACuH,EAAsB,CACrBjC,MAAO5F,EAAKO,KACZ6F,WAAYpG,EAAK2C,YACjB1C,MAAOW,EACP4H,KAAK,SACLpH,SAAUC,IACR6G,EAAO7G,EAAIE,OAAOtB,MAAM,GAIhC,ICfM4C,IAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCgE,KAAM,CACJ9D,UAAWF,EAAMiE,QAAQ,QAmF7B,IA/EwBjH,EAAAA,EAAAA,WAAS,UAAU,KACzCC,IAUA,MAAM,QAAE2D,GAAYd,MACb5C,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,IACnC,OACEG,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACE,EAAAA,EAAU,KAAER,EAAKO,MACjB,IAAIP,EAAKC,OAAOU,KAAI,EAAEI,EAAKH,KAC1BN,EAAAA,cAAC2G,EAAAA,EAAI,CAACC,QAAM,EAACnG,IAAKA,EAAK8D,UAAWlB,EAAQoD,MACxCzG,EAAAA,cAAC6G,EAAAA,EAAU,CACTjC,MAAOnE,EACPqG,OACE9G,EAAAA,cAACuB,EAAAA,EAAU,CACTC,QAASA,KACP9B,EAAKqH,OAAOtG,EAAI,GAGlBT,EAAAA,cAAC0B,EAAAA,EAAU,SAIjB1B,EAAAA,cAACgH,EAAAA,EAAW,KACVhH,EAAAA,cAACmI,GAAY,CACXzI,KAAM,CACJC,MAAOW,EACP6D,IAAM7D,IACJZ,EAAKwC,IAAIzB,EAAKH,EAAI,SAO9BN,EAAAA,cAAC2G,EAAAA,EAAI,CAACC,QAAM,EAACrC,UAAWlB,EAAQoD,MAC9BzG,EAAAA,cAAC6G,EAAAA,EAAU,CACTQ,mBAAiB,EACjBzC,MACE5E,EAAAA,cAACa,EAAAA,EAAS,CACRkF,WAAS,EACTpG,MAAOA,EACPgC,YAAY,UACZb,SAAUc,IACRhC,EAASgC,EAAMX,OAAOtB,MAAM,EAE9BuB,UAAW,CACTC,MAAO,CACLC,aACEpB,EAAAA,cAACqB,EAAAA,EAAc,CAACC,SAAS,OACvBtB,EAAAA,cAACuB,EAAAA,EAAU,CACTY,SAAoB,KAAVxC,EACV6B,QAASA,KACP9B,EAAKwC,IAAIvC,EAAO,GAChBC,EAAS,GAAG,GAGdI,EAAAA,cAACsH,EAAAA,EAAO,eAU1BtH,EAAAA,cAACoC,EAAAA,EAAc,KAAE1C,EAAK2C,aAG5B,I,wCC7FA,MA4BA,IA5BsB5C,EAAAA,EAAAA,WAAS,UAAU,KACvCC,IASA,OACEM,EAAAA,cAACoI,GAAAA,EAAW,KACVpI,EAAAA,cAACqI,GAAAA,EAAgB,CACf/C,MAAO5F,EAAKO,KACZqI,QACEtI,EAAAA,cAACuI,GAAAA,EAAQ,CACPC,QAAS9I,EAAKC,MACdmB,SAAUC,IACRrB,EAAKyE,IAAIpD,EAAIE,OAAOuH,QAAQ,MAKpCxI,EAAAA,cAACoC,EAAAA,EAAc,KAAE1C,EAAK2C,aAG5B,IClCaoG,IAAsBjG,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACvDiG,MAAO,CACLhD,QAAS,OACTiD,aAAclG,EAAMiE,QAAQ,GAC5BpF,SAAU,YAEZsH,aAAc,CACZ7F,MAAO,QAET8F,eAAgB,CACd9F,MAAO,GACP2B,WAAYjC,EAAMI,QAAQiG,UAAUC,MACpCrD,QAAS,OACTsD,eAAgB,SAChBC,WAAY,cCeVC,IAAezJ,EAAAA,EAAAA,WAAS,UAAU,KACtCC,IASA,OACEM,EAAAA,cAACuH,EAAsB,CACrBjC,MAAO5F,EAAKO,KACZ6F,WAAYpG,EAAK2C,YACjB1C,MAAOD,EAAKC,MACZmB,SAAUC,IACRrB,EAAKyE,IAAIpD,EAAIE,OAAOtB,MAAM,GAIlC,IAEMwJ,IAAa1J,EAAAA,EAAAA,WAAS,UAAU,KACpCC,IASA,OACEM,EAAAA,cAACa,EAAAA,EAAS,CACRyE,MAAO5F,EAAKO,KACZ6F,WAAYpG,EAAK2C,YACjBmC,WAAS,EACT7E,MAAOD,EAAKC,MACZmB,SAAUC,IACRrB,EAAKyE,IAAIpD,EAAIE,OAAOtB,MAAM,GAIlC,IAGMyJ,GAAcA,IAClBpJ,EAAAA,cAACqJ,EAAAA,EAAO,KACNrJ,EAAAA,cAAA,QAAMsJ,EAAE,yYAINC,IAAgB9J,EAAAA,EAAAA,WAAS,UAAU,KACvCC,IASA,MAAOY,EAAKsH,IAAU/H,EAAAA,EAAAA,UAASH,EAAKC,OAOpC,OANAgE,EAAAA,EAAAA,YAAU,KACR,MAAMkE,EAAMC,OAAO0B,SAASlJ,EAAK,IAC5BwH,OAAOE,MAAMH,IAChBnI,EAAKyE,IAAI0D,EACX,GACC,CAACnI,EAAMY,IAERN,EAAAA,cAACuH,EAAsB,CACrBjC,MAAO5F,EAAKO,KACZ6F,WAAYpG,EAAK2C,YACjB1C,MAAOW,EACP4H,KAAK,SACLpH,SAAUC,IACR6G,EAAO7G,EAAIE,OAAOtB,MAAM,GAIhC,IAEM8J,IAAmBhK,EAAAA,EAAAA,WAAS,UAAU,KAC1CC,EAAI,WACJgK,IAKA,MAAMC,GAAIC,EAAAA,EAAAA,qBAAmBC,EAAAA,EAAAA,YAAWH,IAClCI,GAAUC,EAAAA,EAAAA,mBACdA,EAAAA,EAAAA,mBAAiBF,EAAAA,EAAAA,YAAWF,EAAEK,WAAWrK,QAAS,IAClDU,KAAI4J,GAAMA,EAA2BtK,QAEvC,OACEK,EAAAA,cAACuH,EAAsB,CACrB5H,MAAOD,EAAKC,MACZ2F,MAAO5F,EAAKO,KACZiK,QAAM,EACNpE,WAAYpG,EAAK2C,YACjBvB,SAAUC,IACRrB,EAAKyE,IAAIpD,EAAIE,OAAOtB,MAAM,GAG3BmK,EAAQzJ,KAAI8J,GACXnK,EAAAA,cAACoK,EAAAA,EAAQ,CAAC3J,IAAK0J,EAAKxK,MAAOwK,GACxBA,KAKX,IAEME,IAAsB5K,EAAAA,EAAAA,WAAS,UAAU,KAC7CC,IASA,OACEM,EAAAA,cAACsK,EAAAA,aAAY,CACXC,SAAU7K,EAAKC,MACf6K,YAAaD,IACX7K,EAAKyE,IAAIoG,EAAS,EAEpBtK,KAAMP,EAAKO,KACXoC,YAAa3C,EAAK2C,YAElBoI,WAAWzG,EAAAA,EAAAA,QAAOtE,GAAMuE,eAAewG,WAG7C,IAEMC,GAAkB,CACtBC,OAAQzB,GACR0B,KAAMzB,GACN0B,aAAcR,GACdS,YAAa7D,EACb8D,eAAgBC,EAChBC,UAAWC,GACXC,OAAQhD,GACRiD,QAAS7B,GACTzH,MAAOuJ,EACPC,WAAY7B,GACZ8B,QAASC,GACTC,OAAQC,EACRC,oBAAqBD,GA8CvB,IA3CmBjM,EAAAA,EAAAA,WAAS,UAAU,KACpCC,EAAI,WACJgK,IAKA,MAAM,QAAErG,GAAYoF,MACd,KAAEP,GAASxI,EACjB,IAAIkM,EAAiBlM,EAAKmM,WACtBC,EAEApB,GAAgBxC,GAQpB,OAPK0D,IACHtH,QAAQyH,KAAK,8BAA8B7D,wBAC3C0D,EAAiB1C,IAEbhB,KAAQwC,IACZpG,QAAQyH,KAAK,iCAAiC7D,KAG9ClI,EAAAA,cAACgM,EAAAA,EAAK,CAACzH,UAAWlB,EAAQqF,OACxB1I,EAAAA,cAAA,OAAKuE,UAAWlB,EAAQuF,cACtB5I,EAAAA,cAAC4L,EAAc,CAAClM,KAAMA,EAAMgK,WAAYA,KAE1C1J,EAAAA,cAAA,OAAKuE,UAAWlB,EAAQwF,gBACrBnJ,EAAKmF,gBAAgBoH,OACpBjM,EAAAA,cAACuB,EAAAA,EAAU,CACTC,QAASA,IACP9B,EAAKmM,WAAanM,EAAKwM,iBAAmBxM,EAAKyM,oBAEjDvH,MAAO,eACLlF,EAAKmM,WAAa,gBAAkB,aAGrCnM,EAAKmM,WAAa7L,EAAAA,cAACoJ,GAAW,MAAMpJ,EAAAA,cAACoM,EAAAA,EAAwB,OAE9D,MAIZ,ICzLA,IAlCqB3M,EAAAA,EAAAA,WAAS,UAAU,gBACtC4M,EAAe,KACf3M,EAAI,SACJ4M,EAAQ,SACRxL,IAOA,MAAM,QAAEuC,GAAYoF,KACpB,OACEzI,EAAAA,cAACgM,EAAAA,EAAK,CAACzH,UAAWlB,EAAQqF,OACxB1I,EAAAA,cAAA,OAAKuE,UAAWlB,EAAQuF,cACtB5I,EAAAA,cAACa,EAAAA,EAAS,CACRlB,MAAOD,EAAKwI,KACZ5C,MAAM,OACN4E,QAAM,EACNpE,WAAY,WAAWwG,WACvBvG,WAAS,EACTjF,SAAUA,GAETuL,EAAgBhM,KAAI8J,GACnBnK,EAAAA,cAACoK,EAAAA,EAAQ,CAAC3J,IAAK0J,EAAKxK,MAAOwK,GACxBA,OAOf,I,2NCNA,MAAM5H,IAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtC8J,KAAM,CACJzK,MAAOW,EAAMI,QAAQ2J,SAASC,cAAgB,QAEhDC,sBAAuB,CACrBhH,QAAS,QACTiH,QAASlK,EAAMiE,QAAQ,IAEzBkG,UAAW,CACT3G,OAAQ,aAAaxD,EAAMI,QAAQ+H,KAAKiC,WAE1CC,WAAY,CACV/J,MAAO,OACPG,UAAW,YAIT6J,IAAStN,EAAAA,EAAAA,WAAS,SAAU4F,GAOhC,MAAM,QAAEhC,GAAYd,MACd,SACJ+J,EAAQ,WACR5C,EAAU,OACVsD,EAAM,KACNtN,EAAOsN,EAAOV,GAAS,KACvBW,EAAO,IACL5H,EACJ,IAAI6H,EAAAA,EAAAA,2BAA0BxD,GAAa,CACzC,GAAIhK,EAAKuM,OACP,OAAOvM,EAAKW,KAAI,CAAC8M,EAAgCC,KAC/C,MAAM3M,EAAM0M,EAAQjF,KAChB,IAAGmF,EAAAA,EAAAA,UAASf,MAAaa,EAAQjF,OACjC,IAAGmF,EAAAA,EAAAA,UAASf,MAAac,EAAY,IACzC,OAAOpN,EAAAA,cAAC+M,GAAMpH,GAAA,CAAClF,IAAKA,GAAS4E,EAAK,CAAE3F,KAAMyN,EAASb,SAAU7L,IAAO,IAKxE,MAAM4L,GAAkBiB,EAAAA,EAAAA,sCAAqC5D,GAC7D,OACE1J,EAAAA,cAACuN,EAAAA,EAAS,CAACC,iBAAe,EAACjJ,UAAWlB,EAAQuJ,WAC5C5M,EAAAA,cAACyN,EAAAA,EAAgB,CACfC,WAAY1N,EAAAA,cAAC2N,EAAAA,EAAc,CAACpJ,UAAWlB,EAAQkJ,QAE/CvM,EAAAA,cAAC4N,EAAAA,EAAU,KAAE,IAAIX,EAAMX,GAAUuB,KAAK,OAExC7N,EAAAA,cAAC8N,EAAAA,EAAgB,CAACvJ,UAAWlB,EAAQqJ,uBAClCL,EAAgBJ,OACfjM,EAAAA,cAAC+N,GAAY,CACX1B,gBAAiBA,EACjBC,SAAUA,EACV5M,KAAMA,EACNoB,SAAUC,IACJA,EAAIE,OAAOtB,QAAUD,EAAKwI,MAC5B8E,EAAOgB,aAAa1B,EAAU,CAAEpE,KAAMnH,EAAIE,OAAOtB,OACnD,IAGF,KACJK,EAAAA,cAACiO,EAAAA,EAAS,CAAC1J,UAAWlB,EAAQyJ,YAC5B9M,EAAAA,cAACkO,GAAM,CAAClB,OAAQtN,EAAMuN,KAAM,IAAIA,EAAMX,OAKhD,CAAO,OAAI6B,EAAAA,EAAAA,yBAAwBzE,GAC1B1J,EAAAA,cAACoO,GAAU,CAAC3N,IAAK6L,EAAU5M,KAAMA,EAAMgK,WAAYA,IAEnD,IAEX,IAEMwE,IAASzO,EAAAA,EAAAA,WAAS,UAAU,OAChCuN,EAAM,KACNC,EAAO,KAKP,MAAMjD,GAAaqE,EAAAA,EAAAA,YAAWrB,GAAQhD,WACtC,OACEhK,EAAAA,cAAAA,EAAAA,SAAA,KACGsO,OAAOC,QAAQvE,GAAY3J,KAAI,EAAEiM,EAAU5C,KAC1C1J,EAAAA,cAAC+M,GAAM,CACLtM,IAAK6L,EACLA,SAAUA,EACV5C,WAAYA,EACZuD,KAAMA,EACND,OAAQA,MAKlB,IAkCA,IAhC4BvN,EAAAA,EAAAA,WAAS,UAAU,MAC7C+O,IAKA,MAAM,QAAEnL,GAAYd,MAId,OAAEtB,GAAWuN,EACb/N,GAAMgO,EAAAA,EAAAA,gBAAexN,EAAQ,WAC7BhB,GAAOwO,EAAAA,EAAAA,gBAAexN,EAAQ,QACpC,OACEjB,EAAAA,cAACuN,EAAAA,EAAS,CAAC9M,IAAKA,EAAK+M,iBAAe,EAACjJ,UAAWlB,EAAQuJ,WACtD5M,EAAAA,cAACyN,EAAAA,EAAgB,CACfC,WAAY1N,EAAAA,cAAC2N,EAAAA,EAAc,CAACpJ,UAAWlB,EAAQkJ,QAE/CvM,EAAAA,cAAC4N,EAAAA,EAAU,KACT5N,EAAAA,cAACwH,EAAAA,EAAa,CAACC,KAAMxH,GAAQ,oBAGjCD,EAAAA,cAAC8N,EAAAA,EAAgB,CACfvJ,UAAWlB,EAAQqJ,sBACnB,cAAY,gBAEZ1M,EAAAA,cAACkO,GAAM,CAAClB,OAAQ/L,KAIxB,G","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/JsonEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: (arg: number, arg2: string) => void\n    removeAtIndex: (arg: number) => void\n    add: (arg: string) => void\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={`${JSON.stringify(val)}-${idx}`} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => {\n                slot.setAtIndex(idx, evt.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => {\n                          slot.removeAtIndex(idx)\n                        }}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => {\n            setAddNew(true)\n          }}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import React, { useEffect, useState } from 'react'\nimport { Tooltip, IconButton, TextField } from '@mui/material'\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport { getEnv } from 'mobx-state-tree'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport HelpIcon from '@mui/icons-material/Help'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => {\n            setCode(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { TextField } from '@mui/material'\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => {\n          setDisplayed(!displayed)\n        }}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={null}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(event)\n            }}\n          />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import React, { useEffect, useState } from 'react'\nimport { InputLabel, TextField } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n  callbackEditor: {\n    fontFamily,\n    fontSize,\n    background: theme.palette.background.default,\n    width: 800,\n    marginTop: '16px',\n    border: '1px solid rgba(0,0,0,0.42)',\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n}))\n\nconst JsonEditor = observer(function JsonEditor({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: unknown\n    set: (arg: unknown) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [contents, setContents] = useState(JSON.stringify(slot.value, null, 2))\n  const [error, setError] = useState<unknown>()\n\n  useEffect(() => {\n    try {\n      setError(undefined)\n      slot.set(JSON.parse(contents))\n    } catch (e) {\n      console.error({ e })\n      setError(e)\n    }\n  }, [contents, slot])\n\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <InputLabel shrink htmlFor=\"json-editor\">\n          {slot.name}\n        </InputLabel>\n        <TextField\n          id=\"json-editor\"\n          className={classes.callbackEditor}\n          value={contents}\n          helperText={slot.description}\n          multiline\n          onChange={event => {\n            setContents(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </div>\n    </>\n  )\n})\n\nexport default JsonEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) => {\n                  slot.setAtKeyIndex(key, idx, val)\n                },\n                removeAtIndex: (idx: number) => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: (val: string) => {\n                  slot.addToKey(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, [])\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import React from 'react'\nimport { TextField, TextFieldProps } from '@mui/material'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      fullWidth\n      slotProps={{\n        formHelperText: {\n          component: 'div',\n        },\n      }}\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nexport default NumberEditor\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport AddIcon from '@mui/icons-material/Add'\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => {\n                  slot.add(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, 0)\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import React from 'react'\nimport { observer } from 'mobx-react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => {\n              slot.set(evt.target.checked)\n            }}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import React, { useEffect, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers, IAnyType } from 'mobx-state-tree'\nimport { getEnv, FileLocation } from '@jbrowse/core/util'\nimport { FileSelector } from '@jbrowse/core/ui'\nimport {\n  getSubType,\n  getUnionSubTypes,\n  ILiteralType,\n} from '@jbrowse/core/util/mst-reflection'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\n\n// icons\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\n\n// locals\nimport StringArrayEditor from './StringArrayEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport JsonEditor from './JsonEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport NumberMapEditor from './NumberMapEditor'\nimport NumberEditor from './NumberEditor'\nimport BooleanEditor from './BooleanEditor'\nimport {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value!))[1]!,\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => {\n        slot.set(location)\n      }}\n      name={slot.name}\n      description={slot.description}\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import React from 'react'\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import React from 'react'\n\nimport {\n  FormGroup,\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getMembers, IAnyType } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\n\n// jbrowse\nimport { AbstractSessionModel } from '@jbrowse/core/util'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport {\n  readConfObject,\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\n\n// icons\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\n\n// locals\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nconst useStyles = makeStyles()(theme => ({\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = subslot.type\n          ? `${singular(slotName)} ${subslot.type}`\n          : `${singular(slotName)} ${slotIndex + 1}`\n        return <Member key={key} {...props} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.icon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeNameChoices.length ? (\n            <TypeSelector\n              typeNameChoices={typeNameChoices}\n              slotName={slotName}\n              slot={slot}\n              onChange={evt => {\n                if (evt.target.value !== slot.type) {\n                  schema.setSubschema(slotName, { type: evt.target.value })\n                }\n              }}\n            />\n          ) : null}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  } else if (isConfigurationSlotType(slotSchema)) {\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  } else {\n    return null\n  }\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used for\n  // different tracks since only the backing model changes for example see pr\n  // #804\n  const { target } = model\n  const key = readConfObject(target, 'trackId')\n  const name = readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.icon} />}\n      >\n        <Typography>\n          <SanitizedHTML html={name ?? 'Configuration'} />\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        <Schema schema={target} />\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","value","setValue","useState","addNew","setAddNew","React","name","InputLabel","List","disablePadding","map","val","idx","ListItem","key","JSON","stringify","disableGutters","TextField","onChange","evt","setAtIndex","target","slotProps","input","endAdornment","InputAdornment","position","IconButton","onClick","removeAtIndex","DeleteIcon","placeholder","event","Button","color","variant","style","margin","add","disabled","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","fontSize","classes","code","setCode","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","set","undefined","e","console","className","multiline","split","background","Tooltip","title","contextVariable","arrow","newWindow","window","open","opener","HelpIcon","ColorSlot","props","label","TextFieldProps","displayed","setDisplayed","display","_extends","fallback","ColorPicker","helperText","fullWidth","default","border","contents","setContents","setError","parse","shrink","htmlFor","id","card","spacing","Card","raised","CardHeader","action","remove","CardContent","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","disableTypography","AddIcon","ConfigurationTextField","SanitizedHTML","html","formHelperText","component","setVal","num","Number","parseFloat","isNaN","reset","type","NumberEditor","FormControl","FormControlLabel","control","Checkbox","checked","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","icon","tertiary","contrastText","expansionPanelDetails","padding","accordion","primary","noOverflow","Member","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","join","AccordionDetails","TypeSelector","setSubschema","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}