{"version":3,"file":"static/js/6834.3717ca63.chunk.js","mappings":"6PAqBe,MAAMA,UAAsBC,EAAAA,uBAOzC,kBAAaC,CAAaC,GACxB,MAAMC,EAAKC,KAAKC,cACVC,EAAS,IAAIC,EAAAA,EAAO,CACxBC,YAAYC,EAAAA,EAAAA,cAAaL,KAAKM,QAAQ,kBAAmBP,KAErDQ,QAAeL,EAAOM,UAAUV,GAItC,MAAO,CACLI,SACAK,SACAE,OANa,IAAIC,EAAAA,EAAI,CACrBC,QAASJ,EAAOI,UAOpB,CAEA,eAAaC,CAAUd,GAOrB,OANKE,KAAKa,UACRb,KAAKa,QAAUb,KAAKH,aAAaC,GAAMgB,MAAOC,IAE5C,MADAf,KAAKa,aAAUG,EACTD,KAGHf,KAAKa,OACd,CAEA,iBAAaI,CAAYnB,GACvB,MAAM,OAAES,SAAiBP,KAAKY,UAAUd,GACxC,OAAOoB,OAAOC,KAAKZ,EAAOa,WAC5B,CAGA,uBAAaC,CAAkBvB,GAC7B,MAAM,OAAES,SAAiBP,KAAKY,UAAUd,GAgBxC,aAfkBwB,QAAQC,IACxBL,OAAOC,KAAKZ,EAAOa,YAAYI,IAC7BC,gBAEUC,EAAAA,EAAAA,GACJ1B,KAAK2B,YAAY,CACfC,aAAc,GACdC,UACAC,MAAO,EACPC,IAAK,IACJC,MAAKC,EAAAA,EAAAA,QAEV,MAILT,IAAIU,GAAKA,EAAEC,UACXX,IAAIU,IAAK,CACRL,QAASK,EAAEE,KACXC,QAAS,CAACH,EAAEI,KAAMJ,EAAEK,OAAQL,EAAEM,SAC9BC,UAAU,IAEhB,CAEA,aAAaC,GACX,MAAMC,QAAiB3C,KAAKiB,cACtB2B,EAAW,GACjB,IAAK,MAAMf,KAAWc,EAAU,CAC9B,MAAME,QAAUnB,EAAAA,EAAAA,GACd1B,KAAK2B,YAAY,CACfC,aAAc,UACdC,UACAC,MAAO,EACPC,IAAKe,OAAOC,mBACXf,MAAKC,EAAAA,EAAAA,OAEVW,EAASI,KAAKH,EAChB,CACA,OAAOD,EAASK,MAClB,CAEA,eAAMzC,CAAUV,GACd,MAAM,OAAEW,EAAM,OAAEF,SAAiBP,KAAKY,UAAUd,IAC1C,QAAEoD,EAAO,SAAEC,GAAa5C,GACxB,OAAE6C,KAAWzC,GAAYF,EAAOE,QACtC,MAAO,CACLuC,UACAC,WACAxC,UACAyC,aAAcpD,KAAKqD,YAAYvD,GAEnC,CACA,iBAAMuD,CAAYvD,GAChB,MAAM,OAAEW,SAAiBT,KAAKY,UAAUd,IAClC,OAAEsD,GAAW3C,EAAOE,QAC1B,OAAOO,OAAOoC,YACZF,EAAO5B,IAAI,EAAG+B,OAAMC,aAAc,CAACD,EAAMC,IAE7C,CAEA,uBAAaC,EAAkB,MAC7BC,EAAK,KACL5D,EAAI,SACJ6D,EAAQ,gBACRC,EAAe,cACfC,EAAgBH,IAQhB,MAAM,eAAEI,EAAiBA,QAAahE,EAChCiE,EAAc/D,KAAKM,QAAQ,eAC3B0D,EAAiBhE,KAAKM,QAAQ,mBAC9B,OAAEG,EAAM,OAAEP,SAAiB+D,EAAAA,EAAAA,cAC/B,qBACAH,EACA,IAAM9D,KAAKY,UAAUd,IAEjBoE,QAAcD,EAAAA,EAAAA,cAClB,uBACAH,EACA,IACE5D,EAAOyB,YAAY+B,EAAM7B,QAAS6B,EAAM5B,MAAO4B,EAAM3B,IAAK,CACxDoC,aAAcT,EAAM3B,IAAM2B,EAAM5B,eAIhCmC,EAAAA,EAAAA,cAAa,sBAAuBH,EAAgBrC,UACxD,MAAM2C,EAAoB,CAAC,EACrBC,EAAwB,GAE9B,GAAIH,EAAMI,KAAKzB,QAAoB7B,IAAf6B,EAAE0B,UACpB,MAAM,IAAIC,MAAM,4BAElB,IAAK,MAAMC,KAAQP,EAAO,CACxB,MAAMQ,EAAY,CAChBhB,EAAM7B,QACN,GAAG4C,EAAK3C,QACR,GAAG2C,EAAK1C,SACJ0C,EAAKE,MAAMC,MAAM,OAAS,IAE1BC,EAAOpE,EAAOqE,UAAUJ,EAAW,CACvCH,SAAUE,EAAKF,WAGXQ,EAAOF,EAAKb,GACZgB,EAAgBD,GAAiB,SAATA,EAC1BC,IAAkBZ,EAAkBW,KACtCX,EAAkBW,GAAQ,IAE5B,MAAM,SACJR,EAAQ,KACRU,EAAI,MACJC,EAAK,WACLC,EAAU,SACVC,EAAQ,YACRC,EACAC,YAAaC,EACbC,YAAaC,EACbC,WAAYC,EACZC,MAAOC,EAAM,WACbC,EAAU,WACVC,EAAU,SACVC,EAAQ,OACRC,KACGtB,GACDE,EAEEhC,GAAIqD,EAAAA,EAAAA,IAAa,IAClBvB,EACHZ,cACAW,YACAjE,SACA8D,WACAzC,MAAO2C,EAAK3C,MACZC,IAAK0C,EAAK1C,IACVF,QAAS6B,EAAM7B,UAEbmD,GACFZ,EAAkBW,GAAO/B,KAAKH,GAC9BwB,EAAsBrB,KAAKH,KAGzBsD,EAAAA,EAAAA,gBACEtD,EAAEf,MACFe,EAAEd,IACF8B,EAAc/B,MACd+B,EAAc9B,MAGhB4B,EAASyC,KACP,IAAIC,EAAAA,cAAc,CAChBC,GAAI,GAAGtG,KAAKsG,MAAM/B,IAClBM,KAAMhC,IAKhB,CAEA,GAAIe,GAAmBS,EAAsBkC,OAAQ,CACnD,IAAIC,EAAW1D,OAAO2D,kBAClBC,EAAS5D,OAAO6D,kBACpB,IAAK,MAAMlC,KAAQJ,EACbI,EAAK3C,MAAQ0E,IACfA,EAAW/B,EAAK3C,OAEd2C,EAAK1C,IAAM2E,IACbA,EAASjC,EAAK1C,KAIlB,GAAI2E,EAAShD,EAAM3B,KAAOyE,EAAW9C,EAAM5B,MAczC,kBAbM9B,KAAKyD,kBAAkB,CAC3BC,MAAO,IACFA,EAGH5B,MAAO0E,EAAW,IAClBzE,IAAK2E,EAAS,KAEhB5G,OACA6D,WACAC,iBAAiB,EACjBC,cAAeH,GAIrB,CAEAxC,OAAO0F,QAAQxC,GAAmB5C,IAAI,EAAE+B,EAAMsD,MAC5C,MAAMC,GAAIC,EAAAA,EAAAA,KAAIF,EAAYrF,IAAIqB,GAAKA,EAAEf,QAC/Bf,GAAIiG,EAAAA,EAAAA,KAAIH,EAAYrF,IAAIqB,GAAKA,EAAEd,MACrC,IAAIoE,EAAAA,EAAAA,gBAAeW,EAAG/F,EAAG8C,EAAc/B,MAAO+B,EAAc9B,KAAM,CAChE,MAAMkF,EAAOJ,EAAYK,KAAK,CAACC,EAAGC,IAChCD,EAAE5C,SAAS8C,cAAcD,EAAE7C,WAE7B,GACE0C,EAAKK,MAAMR,GACFA,EAAEb,UAAYgB,EAAK,IAAIhB,QAAU,IAG1CtC,EAASyC,KACP,IAAIC,EAAAA,cAAc,CAChBC,GAAI,GAAGtG,KAAKsG,MAAMW,EAAK,IAAI1C,kBAC3BM,KAAM,CACJI,KAAM,OACN4B,YAAaI,EACbhB,OAAQgB,EAAK,IAAIhB,QAAU,EAC3B1C,OACAzB,MAAOgF,EACP/E,IAAKhB,EACLc,QAAS6B,EAAM7B,iBAKrB,IAAK,MAAM0F,KAAON,EAChBtD,EAASyC,KACP,IAAIC,EAAAA,cAAc,CAChBC,GAAI,GAAGtG,KAAKsG,MAAMiB,EAAIhD,kBACtBM,KAAM,CACJI,KAAM,OACN4B,YAAa,CAACU,GACdtB,OAAQgB,EAAK,IAAIhB,QAAU,EAC3B1C,OACAzB,MAAOyF,EAAIzF,MACXC,IAAKwF,EAAIxF,IACTF,QAAS6B,EAAM7B,WAM3B,MAIJ8B,EAAS6D,UACX,CACO7F,WAAAA,CAAY+B,EAAe5D,EAAoB,CAAC,GACrD,OAAO2H,EAAAA,EAAAA,kBAA0BhG,UAC/B,UACQzB,KAAKyD,kBAAkB,CAC3BC,MAAO,IACFA,EACH5B,MAAO4B,EAAM5B,MACbC,IAAK2B,EAAM3B,KAEbjC,OACA6D,WACAC,iBAAiB,GAErB,CAAE,MAAO7C,GACP4C,EAAS+D,MAAM3G,EACjB,GACCjB,EAAK6H,UACV,E,kBClUK,SAASC,EAA+BC,GAC7C,MAAMC,EAAMD,GAAME,OAAOnD,MAAM,KAC/B,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAG0C,MAAMR,QACjB9F,IAAb8G,IAAMhB,KAAoBhE,OAAOkF,OAAOF,EAAIhB,IAEhD,CAEA,SAASmB,EAA2B5C,GAClC,GAAIuC,EAA+BvC,GAAc,CAC/C,MACE6C,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACE3D,EAAY0C,OAAOnD,MAAM,KAC7B,MAAO,CACLsD,cACAC,cACAC,cACAC,cACAC,YACAC,cACAC,YACAC,kBACAC,cACAC,uBACAC,wBACAC,wBACAC,sBACAC,4BACAC,YAEJ,CACA,MAAO,CAAE3D,cACX,CCiDO,SAAS4D,GAAY,KAC1BC,EAAI,OACJC,EAAM,SACNC,EAAQ,OACRC,EAAM,YACNtF,EAAW,OACXtD,EAAM,SACN8D,EAAQ,MACR+E,IAWA,MAAM5E,EAAYwE,EAAKtE,MAAM,MAM7B,OAAOsB,EAAa,CAClBxB,YACA7C,QAPc6C,EAAUyE,GAQxBrH,MAPYgB,OAAOyG,SAAS7E,EAAU0E,GAAY,IAQlDrH,IANAe,OAAOyG,SAAS7E,EAAU2E,GAAU,KAAOD,IAAaC,EAAS,EAAI,GAOrE5I,SACA8D,WACAR,cACAuF,SAEJ,CAEO,SAASpD,GAAa,UAC3BxB,EAAS,QACT7C,EAAO,MACPC,EAAK,IACLC,EAAG,OACHtB,EAAM,SACN8D,EAAQ,YACRR,EAAW,MACXuF,IAWA,MAAMzE,EAAOyE,EAvIf,SAAuBlG,EAAkBsB,GACvC,IAAI8E,GAAgB,EACpB,MAAMtH,EAAI,GAGV,IAAK,IAAIuH,EAAI,EAAGA,EAAI/E,EAAU6B,OAAQkD,IAClB,eAAdrG,EAAOqG,KACTD,GAAgB,GAElBtH,EAAEc,KAAK,CAACI,EAAOqG,GAAK/E,EAAU+E,KAIhC,MAAMC,EAAMxI,OAAOoC,YAAYpB,GAE/B,GAAIsH,EAAe,CACjB,MAAM,YACJhE,EAAW,WACXM,EAAU,YACVR,EAAW,SACXU,EAAQ,WACRD,EAAU,WACVL,KACGf,GACD+E,EAEJ,MAAO,IACF/E,EACHa,YAAamE,EAASnE,GACtBF,YAAaqE,EAASrE,GACtBI,WAAYiE,EAASjE,GACrBK,WAAYA,GAAcA,OAAa/E,EACvCgF,SAAUA,GAAYA,OAAWhF,EACjC8E,WAAYA,GAAcA,OAAa9E,EAE3C,CAIE,OAAO0I,CAEX,CA+FME,CAAcN,EAAO5E,GACrBjE,EAAOqE,UAAUJ,EAAW,CAAEH,cAEhC0B,OAAQ4D,EACRjE,MAAOC,EACPX,MAAO4E,EACP3E,WAAY4E,EACZ3E,SAAU4E,KACPrF,GACDE,EAEEe,EAAQ7B,GAAec,EAAKd,GAAe8B,GAAUA,OAAS7E,EAC9DiF,EACe,iBAAZ4D,EAAoC,MAAZA,GAAmB,EAAI,EAAKA,EAEvDhD,EAAclC,EAAKmB,WA5GpB,UAAoB,MACzBhE,EAAK,SACLyC,EAAQ,QACR1C,EAAO,YACPyD,EAAW,WACXQ,EAAU,WACVJ,EAAU,YACVF,IAUA,MAAMqB,EAAc,GACdoD,EAAS3E,GAAeE,GAAe,GAC7C,IAAK,IAAI4B,EAAI,EAAGA,EAAItB,EAAYsB,IAAK,CACnC,MAAM8C,GAAQD,EAAO7C,IAAM,GAAKtF,EAC1BqI,EAAQzE,IAAa0B,GAC3B,GAAI+C,GAASA,EAAQ,EAAG,CACtB,MAAMC,EAAOF,EAAOC,EACpBtD,EAAY7D,KAAK,CACfuB,SAAU,GAAGA,KAAY6C,IACzBtF,MAAOoI,EACPnI,IAAKqI,EACLvI,UACAoD,KAAM,SAEV,CACF,CACA,OAAO4B,CACT,CA2EMwD,CAAW,CACTvI,QACAyC,WACA1C,UACAyD,YAAaX,EAAKW,YAClBQ,WAAYnB,EAAKmB,WACjBJ,WAAYf,EAAKe,WACjBF,YAAab,EAAKa,mBAEpBxE,EAEJ,GCjLK,UAA4B,UACjC0D,EAAS,MACT5C,EAAK,IACLC,IAMA,QACI2C,EAAU,IAAM,KAAO5C,KACvB4C,EAAU,IAAM,KAAO3C,GACzB,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAIuF,MAClCpF,GAAKwC,EAAUxC,KAAOY,OAAOkF,OAAOtD,EAAUxC,IAGpD,CDiKMoI,CAAmB,CAAE5F,YAAW5C,QAAOC,QACzC,OChKG,UAAkC,UACvC2C,EAAS,SACTH,EAAQ,QACR1C,EAAO,MACPC,EAAK,IACLC,IAUA,MAAO,CAAD,EAIJwI,EAAK,CAELtE,EAAO,CAAD,CAGNuE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACEvG,EAEJ,MAAO,CACLH,WACA1C,UACAC,QACAC,MACAwI,OACA3E,OAAQ8E,GAAsB,EAC9BzE,SACAuE,QACAU,OAAQX,EACRE,cACAC,oBACAC,QACAC,cACAC,cACAC,WACAC,SACAC,SACAC,WAEJ,CDwGWE,CAAyB,CAC9BzG,YACAH,WACA1C,UACAC,QACAC,QAEG,GAAI6F,EAA+BjD,EAAKU,aAAc,CAC3D,MAAM,YACJC,EAAW,WACXI,EAAU,YACVF,EAAW,KACXP,EAAI,WACJa,EAAU,WACVC,EAAU,SACVC,EAAQ,YACRX,KACG+F,GACDzG,EACJ,ODvJG,UAAqC,SAC1CJ,EAAQ,QACR1C,EAAO,MACPC,EAAK,IACLC,EAAG,YACHsD,KACGV,IASH,MAAM,YAAEkC,KAAgBuE,GAAUzG,EAClC,MAAO,IACFyG,KACAnD,EAA2B5C,GAC9Bd,WACA1C,UACAC,QACAC,MAEJ,CC+HWsJ,CAA4B,IAC9BD,EACH7G,WACAc,cACAJ,OACAW,QACA9D,QACAC,MACAkE,SACApE,UACAgF,eAEJ,CAAO,GACLA,GEjNG,UAA0B,WAC/Bd,EAAU,WACVD,EAAU,OACVG,IAMA,OAAOF,GAAcD,GAAyB,IAAXG,CACrC,CFwMIqF,CAAiB,CACfrF,SACAH,WAAYnB,EAAKmB,WACjBC,WAAYpB,EAAKoB,aAEnB,CACA,MAAM,YACJT,EAAW,WACXI,EAAU,KACVT,EAAI,WACJa,EAAU,WACVC,EAAU,SACVC,EAAQ,YACRX,GACEV,EACJ,OErNG,SAAgCE,GACrC,MAAM,OACJoB,EAAS,EACTf,MAAO4E,EACP3E,WAAY4E,EACZ3E,SAAU4E,EAAE,YACZ1E,EAAW,YACXE,EAAW,WACXE,EAAU,SACVnB,KACGI,GACDE,GAEFgC,YAAa0E,EAAc,WAC3BxF,EAAU,SACVC,EAAQ,WACRF,EAAU,QACVjE,KACGuJ,GACDzG,EAEEkC,EAAgC,GAChC3C,EAAQqH,EACXC,OAAOC,GAAwB,UAAfA,EAAMxG,MACtBiC,KAAK,CAACC,EAAGC,IAAMD,EAAErF,MAAQsF,EAAEtF,QAExB,WAAE4J,EAAU,aAAEC,GAAiBP,EACrC,GAAqB,SAAjBO,GAA0C,SAAfD,EAC7B,MAAO,IACFN,EACH7G,WACA0B,SACAhB,KAAM,aACNpD,UACAgF,YAAa3C,EAAM1C,IAAIT,IAAK,IACvBA,EACHkE,KAAM,WAIV,IAAK,MAAM2G,KAAS1H,EAAO,CACzB,MAAMpC,EAAQ8J,EAAM9J,MACdC,EAAM6J,EAAM7J,IACdgE,GAAchE,EAEhB8E,EAAY7D,KAAK,CACfiC,MAASgB,EAAS,EAAI,OAAS,SAAzB,aACNnE,QACAC,MACAF,YAEOkE,EAAajE,GAASiE,EAAahE,GAAOiE,GAAYjE,EAE/D8E,EAAY7D,KACV,CACEiC,MAASgB,EAAS,EAAI,OAAS,SAAzB,aACNnE,QACAC,IAAKgE,EACLlE,WAEF,CACEoD,KAAM,MACN4G,MAAO,EACP/J,MAAOiE,EACPhE,MACAF,YAGKkE,GAAcjE,GAASkE,GAAYjE,EAE5C8E,EAAY7D,KAAK,CACfiC,KAAM,MACN4G,MAAO,EACP/J,QACAC,MACAF,YAEOkE,EAAajE,GAASiE,EAAahE,GAAOiE,EAAWjE,EAE9D8E,EAAY7D,KACV,CACEiC,MAASgB,EAAS,EAAI,OAAS,SAAzB,aACNnE,QACAC,IAAKgE,EACLlE,WAEF,CACEoD,KAAM,MACN4G,MAAO,EACP/J,MAAOiE,EACPhE,IAAKiE,EACLnE,WAEF,CACEoD,MAASgB,EAAS,EAAI,QAAU,QAA1B,aACNnE,MAAOkE,EACPjE,MACAF,YAGKkE,GAAcjE,GAASkE,EAAWlE,GAASkE,EAAWjE,EAE/D8E,EAAY7D,KACV,CACEiC,KAAM,MACN4G,MAAO,EACP/J,QACAC,IAAKiE,EACLnE,WAEF,CACEoD,MAASgB,EAAS,EAAI,QAAU,QAA1B,aACNnE,MAAOkE,EACPjE,MACAF,YAGKmE,GAAYlE,GAErB+E,EAAY7D,KAAK,CACfiC,MAASgB,EAAS,EAAI,QAAU,QAA1B,aACNnE,QACAC,MACAF,WAGN,CACA,MAAO,IACFuJ,EACH7G,WACA0B,SACAhB,KAAM,OACNpD,UACAgF,cAYN,CFoEWiF,CAAuB,IACzBnH,EACHU,cACAC,cACAS,aACAC,WACAN,aACAI,aACAb,OACAW,QACA9D,QACAC,MACAkE,SACApE,UACA0C,WACAsC,eAEJ,CACE,MAAO,IACFlC,EACHJ,WACAqB,QACA9D,QACAC,MACAkE,SACApE,UACAgF,cAGN,CAEO,SAAS8C,EAAS9G,GACvB,YAAa7B,IAAN6B,EACU,iBAANA,EACLA,EAAE+B,MAAM,KAAKpD,IAAIqB,IAAMA,GACvBA,OACF7B,CACN,C","sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/generateRepeatMaskerFeature.ts","../../../plugins/bed/src/util.ts","../../../plugins/bed/src/generateBedMethylFeature.ts","../../../plugins/bed/src/generateUcscTranscript.ts"],"sourcesContent":["import { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  SimpleFeature,\n  doesIntersect2,\n  max,\n  min,\n  updateStatus,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { firstValueFrom, toArray } from 'rxjs'\n\nimport { featureData2 } from '../util'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\nimport type { Observer } from 'rxjs'\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cachedP?: Promise<{\n    bigbed: BigBed\n    header: Awaited<ReturnType<BigBed['getHeader']>>\n    parser: BED\n  }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const bigbed = new BigBed({\n      filehandle: openLocation(this.getConf('bigBedLocation'), pm),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({\n      autoSql: header.autoSql,\n    })\n    return {\n      bigbed,\n      header,\n      parser,\n    }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cachedP) {\n      this.cachedP = this.configurePre(opts).catch((e: unknown) => {\n        this.cachedP = undefined\n        throw e\n      })\n    }\n    return this.cachedP\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  // allow using BigBedAdapter for aliases with chromAlias.bb file from UCSC\n  public async getRefNameAliases(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    const ret = await Promise.all(\n      Object.keys(header.refsByName).map(\n        async refName =>\n          (\n            await firstValueFrom(\n              this.getFeatures({\n                assemblyName: '',\n                refName,\n                start: 0,\n                end: 1,\n              }).pipe(toArray()),\n            )\n          )[0]!,\n      ),\n    )\n    return ret\n      .map(r => r.toJSON())\n      .map(r => ({\n        refName: r.ucsc,\n        aliases: [r.ncbi, r.refseq, r.genbank],\n        override: true,\n      }))\n  }\n\n  public async getData() {\n    const refNames = await this.getRefNames()\n    const features = []\n    for (const refName of refNames) {\n      const f = await firstValueFrom(\n        this.getFeatures({\n          assemblyName: 'unknown',\n          refName,\n          start: 0,\n          end: Number.MAX_SAFE_INTEGER,\n        }).pipe(toArray()),\n      )\n      features.push(f)\n    }\n    return features.flat()\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...autoSql } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql,\n      fields: await this.getMetadata(opts),\n    }\n  }\n  async getMetadata(opts?: BaseOptions) {\n    const { parser } = await this.configure(opts)\n    const { fields } = parser.autoSql\n    return Object.fromEntries(\n      fields.map(({ name, comment }) => [name, comment]),\n    )\n  }\n\n  public async getFeaturesHelper({\n    query,\n    opts,\n    observer,\n    allowRedispatch,\n    originalQuery = query,\n  }: {\n    query: Region\n    opts: BaseOptions\n    observer: Observer<Feature>\n    allowRedispatch: boolean\n    originalQuery?: Region\n  }) {\n    const { statusCallback = () => {} } = opts\n    const scoreColumn = this.getConf('scoreColumn')\n    const aggregateField = this.getConf('aggregateField')\n    const { parser, bigbed } = await updateStatus(\n      'Downloading header',\n      statusCallback,\n      () => this.configure(opts),\n    )\n    const feats = await updateStatus(\n      'Downloading features',\n      statusCallback,\n      () =>\n        bigbed.getFeatures(query.refName, query.start, query.end, {\n          basesPerSpan: query.end - query.start,\n        }),\n    )\n\n    await updateStatus('Processing features', statusCallback, async () => {\n      const parentAggregation = {} as Record<string, SimpleFeatureSerialized[]>\n      const parentAggregationFlat = []\n\n      if (feats.some(f => f.uniqueId === undefined)) {\n        throw new Error('found uniqueId undefined')\n      }\n      for (const feat of feats) {\n        const splitLine = [\n          query.refName,\n          `${feat.start}`,\n          `${feat.end}`,\n          ...(feat.rest?.split('\\t') || []),\n        ]\n        const data = parser.parseLine(splitLine, {\n          uniqueId: feat.uniqueId!,\n        })\n\n        const aggr = data[aggregateField]\n        const aggrIsNotNone = aggr && aggr !== 'none'\n        if (aggrIsNotNone && !parentAggregation[aggr]) {\n          parentAggregation[aggr] = []\n        }\n        const {\n          uniqueId,\n          type,\n          chrom,\n          chromStart,\n          chromEnd,\n          description,\n          chromStarts: chromStarts2,\n          blockStarts: blockStarts2,\n          blockSizes: blockSizes2,\n          score: score2,\n          blockCount,\n          thickStart,\n          thickEnd,\n          strand,\n          ...rest\n        } = data\n\n        const f = featureData2({\n          ...rest,\n          scoreColumn,\n          splitLine,\n          parser,\n          uniqueId,\n          start: feat.start,\n          end: feat.end,\n          refName: query.refName,\n        })\n        if (aggrIsNotNone) {\n          parentAggregation[aggr]!.push(f)\n          parentAggregationFlat.push(f)\n        } else {\n          if (\n            doesIntersect2(\n              f.start,\n              f.end,\n              originalQuery.start,\n              originalQuery.end,\n            )\n          ) {\n            observer.next(\n              new SimpleFeature({\n                id: `${this.id}-${uniqueId}`,\n                data: f,\n              }),\n            )\n          }\n        }\n      }\n\n      if (allowRedispatch && parentAggregationFlat.length) {\n        let minStart = Number.POSITIVE_INFINITY\n        let maxEnd = Number.NEGATIVE_INFINITY\n        for (const feat of parentAggregationFlat) {\n          if (feat.start < minStart) {\n            minStart = feat.start\n          }\n          if (feat.end > maxEnd) {\n            maxEnd = feat.end\n          }\n        }\n\n        if (maxEnd > query.end || minStart < query.start) {\n          await this.getFeaturesHelper({\n            query: {\n              ...query,\n              // re-query with 500kb added onto start and end, in order to catch\n              // gene subfeatures that may not overlap your view\n              start: minStart - 500_000,\n              end: maxEnd + 500_000,\n            },\n            opts,\n            observer,\n            allowRedispatch: false,\n            originalQuery: query,\n          })\n          return\n        }\n      }\n\n      Object.entries(parentAggregation).map(([name, subfeatures]) => {\n        const s = min(subfeatures.map(f => f.start))\n        const e = max(subfeatures.map(f => f.end))\n        if (doesIntersect2(s, e, originalQuery.start, originalQuery.end)) {\n          const subs = subfeatures.sort((a, b) =>\n            a.uniqueId.localeCompare(b.uniqueId),\n          )\n          if (\n            subs.every(s => {\n              return s.strand === (subs[0]?.strand || 1)\n            })\n          ) {\n            observer.next(\n              new SimpleFeature({\n                id: `${this.id}-${subs[0]?.uniqueId}-parent`,\n                data: {\n                  type: 'gene',\n                  subfeatures: subs,\n                  strand: subs[0]?.strand || 1,\n                  name,\n                  start: s,\n                  end: e,\n                  refName: query.refName,\n                },\n              }),\n            )\n          } else {\n            for (const sub of subs) {\n              observer.next(\n                new SimpleFeature({\n                  id: `${this.id}-${sub.uniqueId}-parent`,\n                  data: {\n                    type: 'gene',\n                    subfeatures: [sub],\n                    strand: subs[0]?.strand || 1,\n                    name,\n                    start: sub.start,\n                    end: sub.end,\n                    refName: query.refName,\n                  },\n                }),\n              )\n            }\n          }\n        }\n      })\n    })\n\n    observer.complete()\n  }\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        await this.getFeaturesHelper({\n          query: {\n            ...query,\n            start: query.start,\n            end: query.end,\n          },\n          opts,\n          observer,\n          allowRedispatch: true,\n        })\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.stopToken)\n  }\n}\n","export function isRepeatMaskerDescriptionField(desc?: string): desc is string {\n  const ret = desc?.trim().split(' ')\n  return [0, 1, 2, 3, 5, 6].every(s =>\n    ret?.[s] !== undefined ? !Number.isNaN(+ret[s]) : false,\n  )\n}\n\nfunction makeRepeatTrackDescription(description?: string) {\n  if (isRepeatMaskerDescriptionField(description)) {\n    const [\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    ] = description.trim().split(' ')\n    return {\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    }\n  }\n  return { description }\n}\n\nexport function generateRepeatMaskerFeature({\n  uniqueId,\n  refName,\n  start,\n  end,\n  description,\n  ...rest\n}: {\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n  description: string\n  [key: string]: unknown\n}) {\n  const { subfeatures, ...rest2 } = rest\n  return {\n    ...rest2,\n    ...makeRepeatTrackDescription(description),\n    uniqueId,\n    refName,\n    start,\n    end,\n  }\n}\n","import {\n  generateBedMethylFeature,\n  isBedMethylFeature,\n} from './generateBedMethylFeature'\nimport {\n  generateRepeatMaskerFeature,\n  isRepeatMaskerDescriptionField,\n} from './generateRepeatMaskerFeature'\nimport {\n  generateUcscTranscript,\n  isUcscTranscript,\n} from './generateUcscTranscript'\n\nimport type BED from '@gmod/bed'\n\nfunction defaultParser(fields: string[], splitLine: string[]) {\n  let hasBlockCount = false\n  const r = [] as [string, string][]\n\n  // eslint-disable-next-line unicorn/no-for-loop\n  for (let i = 0; i < splitLine.length; i++) {\n    if (fields[i] === 'blockCount') {\n      hasBlockCount = true\n    }\n    r.push([fields[i]!, splitLine[i]!] as const)\n  }\n  // heuristically try to determine whether to follow 'slow path' as there can\n  // be many features in e.g. GWAS type data\n  const obj = Object.fromEntries(r)\n  // slow path\n  if (hasBlockCount) {\n    const {\n      blockStarts,\n      blockCount,\n      chromStarts,\n      thickEnd,\n      thickStart,\n      blockSizes,\n      ...rest\n    } = obj\n\n    return {\n      ...rest,\n      blockStarts: arrayify(blockStarts),\n      chromStarts: arrayify(chromStarts),\n      blockSizes: arrayify(blockSizes),\n      thickStart: thickStart ? +thickStart : undefined,\n      thickEnd: thickEnd ? +thickEnd : undefined,\n      blockCount: blockCount ? +blockCount : undefined,\n    } as Record<string, unknown>\n  }\n\n  // fast path\n  else {\n    return obj\n  }\n}\n\nexport function makeBlocks({\n  start,\n  uniqueId,\n  refName,\n  chromStarts,\n  blockCount,\n  blockSizes,\n  blockStarts,\n}: {\n  blockCount: number\n  start: number\n  uniqueId: string\n  refName: string\n  chromStarts?: number[]\n  blockSizes?: number[]\n  blockStarts?: number[]\n}) {\n  const subfeatures = []\n  const starts = chromStarts || blockStarts || []\n  for (let b = 0; b < blockCount; b++) {\n    const bmin = (starts[b] || 0) + start\n    const bsize = blockSizes?.[b]\n    if (bsize && bsize > 0) {\n      const bmax = bmin + bsize\n      subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        refName,\n        type: 'block',\n      })\n    }\n  }\n  return subfeatures\n}\n\nexport function featureData({\n  line,\n  colRef,\n  colStart,\n  colEnd,\n  scoreColumn,\n  parser,\n  uniqueId,\n  names,\n}: {\n  line: string\n  colRef: number\n  colStart: number\n  colEnd: number\n  scoreColumn: string\n  parser: BED\n  uniqueId: string\n  names?: string[]\n}) {\n  const splitLine = line.split('\\t')\n  const refName = splitLine[colRef]!\n  const start = Number.parseInt(splitLine[colStart]!, 10)\n  const end =\n    Number.parseInt(splitLine[colEnd]!, 10) + (colStart === colEnd ? 1 : 0)\n\n  return featureData2({\n    splitLine,\n    refName,\n    start,\n    end,\n    parser,\n    uniqueId,\n    scoreColumn,\n    names,\n  })\n}\n\nexport function featureData2({\n  splitLine,\n  refName,\n  start,\n  end,\n  parser,\n  uniqueId,\n  scoreColumn,\n  names,\n}: {\n  splitLine: string[]\n  refName: string\n  start: number\n  end: number\n  parser: BED\n  uniqueId: string\n  scoreColumn: string\n  names?: string[]\n}) {\n  const data = names\n    ? defaultParser(names, splitLine)\n    : parser.parseLine(splitLine, { uniqueId })\n  const {\n    strand: strand2,\n    score: score2,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    ...rest\n  } = data\n\n  const score = scoreColumn ? +data[scoreColumn] : score2 ? +score2 : undefined\n  const strand =\n    typeof strand2 === 'string' ? (strand2 === '-' ? -1 : 1) : strand2\n\n  const subfeatures = rest.blockCount\n    ? makeBlocks({\n        start,\n        uniqueId,\n        refName,\n        chromStarts: rest.chromStarts,\n        blockCount: rest.blockCount,\n        blockSizes: rest.blockSizes,\n        blockStarts: rest.blockStarts,\n      })\n    : undefined\n\n  if (isBedMethylFeature({ splitLine, start, end })) {\n    return generateBedMethylFeature({\n      splitLine,\n      uniqueId,\n      refName,\n      start,\n      end,\n    })\n  } else if (isRepeatMaskerDescriptionField(rest.description)) {\n    const {\n      chromStarts,\n      blockSizes,\n      blockStarts,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n      ...rest2\n    } = rest\n    return generateRepeatMaskerFeature({\n      ...rest2,\n      uniqueId,\n      description,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    })\n  } else if (\n    subfeatures &&\n    isUcscTranscript({\n      strand,\n      blockCount: rest.blockCount,\n      thickStart: rest.thickStart,\n    })\n  ) {\n    const {\n      chromStarts,\n      blockSizes,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n    } = rest\n    return generateUcscTranscript({\n      ...rest,\n      description,\n      chromStarts,\n      thickStart,\n      thickEnd,\n      blockSizes,\n      blockCount,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      uniqueId,\n      subfeatures,\n    })\n  } else {\n    return {\n      ...rest,\n      uniqueId,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    }\n  }\n}\n\nexport function arrayify(f?: string | number[]) {\n  return f !== undefined\n    ? typeof f === 'string'\n      ? f.split(',').map(f => +f)\n      : f\n    : undefined\n}\n","// this uses modkit bedMethyl. unclear how to reliably detect minimal 9+2 bedMethyl\nexport function isBedMethylFeature({\n  splitLine,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  start: number\n  end: number\n}) {\n  return (\n    +(splitLine[6] || 0) === start &&\n    +(splitLine[7] || 0) === end &&\n    [9, 10, 11, 12, 13, 14, 15, 16, 17].every(\n      r => splitLine[r] && !Number.isNaN(+splitLine[r]),\n    )\n  )\n}\n\nexport function generateBedMethylFeature({\n  splitLine,\n  uniqueId,\n  refName,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n}) {\n  // see\n  // https://github.com/nanoporetech/modkit?tab=readme-ov-file#description-of-bedmethyl-output\n  const [\n    ,\n    ,\n    ,\n    code,\n    ,\n    strand,\n    ,\n    ,\n    color,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  ] = splitLine\n\n  return {\n    uniqueId,\n    refName,\n    start,\n    end,\n    code,\n    score: +fraction_modified! || 0,\n    strand,\n    color,\n    source: code,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  }\n}\n","import type { MinimalFeature, TranscriptFeat } from './types'\n\nexport function isUcscTranscript({\n  thickStart,\n  blockCount,\n  strand,\n}: {\n  thickStart?: number\n  blockCount?: number\n  strand?: number\n}) {\n  return thickStart && blockCount && strand !== 0\n}\n\nexport function generateUcscTranscript(data: TranscriptFeat) {\n  const {\n    strand = 0,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    chromStarts,\n    blockStarts,\n    blockSizes,\n    uniqueId,\n    ...rest\n  } = data\n  const {\n    subfeatures: oldSubfeatures,\n    thickStart,\n    thickEnd,\n    blockCount,\n    refName,\n    ...rest2\n  } = rest\n\n  const subfeatures: MinimalFeature[] = []\n  const feats = oldSubfeatures\n    .filter(child => child.type === 'block')\n    .sort((a, b) => a.start - b.start)\n\n  const { cdsEndStat, cdsStartStat } = rest2\n  if (cdsStartStat === 'none' && cdsEndStat === 'none') {\n    return {\n      ...rest2,\n      uniqueId,\n      strand,\n      type: 'transcript',\n      refName,\n      subfeatures: feats.map(e => ({\n        ...e,\n        type: 'exon',\n      })),\n    }\n  } else {\n    for (const block of feats) {\n      const start = block.start\n      const end = block.end\n      if (thickStart >= end) {\n        // left-side UTR\n        subfeatures.push({\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end,\n          refName,\n        })\n      } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n        // UTR | CDS\n        subfeatures.push(\n          {\n            type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n            start,\n            end: thickStart,\n            refName,\n          },\n          {\n            type: 'CDS',\n            phase: 0,\n            start: thickStart,\n            end,\n            refName,\n          },\n        )\n      } else if (thickStart <= start && thickEnd >= end) {\n        // CDS\n        subfeatures.push({\n          type: 'CDS',\n          phase: 0,\n          start,\n          end,\n          refName,\n        })\n      } else if (thickStart > start && thickStart < end && thickEnd < end) {\n        // UTR | CDS | UTR\n        subfeatures.push(\n          {\n            type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n            start,\n            end: thickStart,\n            refName,\n          },\n          {\n            type: 'CDS',\n            phase: 0,\n            start: thickStart,\n            end: thickEnd,\n            refName,\n          },\n          {\n            type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n            start: thickEnd,\n            end,\n            refName,\n          },\n        )\n      } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n        // CDS | UTR\n        subfeatures.push(\n          {\n            type: 'CDS',\n            phase: 0,\n            start,\n            end: thickEnd,\n            refName,\n          },\n          {\n            type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n            start: thickEnd,\n            end,\n            refName,\n          },\n        )\n      } else if (thickEnd <= start) {\n        // right-side UTR\n        subfeatures.push({\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start,\n          end,\n          refName,\n        })\n      }\n    }\n    return {\n      ...rest2,\n      uniqueId,\n      strand,\n      type: 'mRNA',\n      refName,\n      subfeatures,\n    }\n  }\n\n  return {\n    ...rest2,\n    uniqueId,\n    strand,\n    type: 'mRNA',\n    refName,\n    subfeatures,\n  }\n}\n"],"names":["BigBedAdapter","BaseFeatureDataAdapter","configurePre","opts","pm","this","pluginManager","bigbed","BigBed","filehandle","openLocation","getConf","header","getHeader","parser","BED","autoSql","configure","cachedP","catch","e","undefined","getRefNames","Object","keys","refsByName","getRefNameAliases","Promise","all","map","async","firstValueFrom","getFeatures","assemblyName","refName","start","end","pipe","toArray","r","toJSON","ucsc","aliases","ncbi","refseq","genbank","override","getData","refNames","features","f","Number","MAX_SAFE_INTEGER","push","flat","version","fileType","fields","getMetadata","fromEntries","name","comment","getFeaturesHelper","query","observer","allowRedispatch","originalQuery","statusCallback","scoreColumn","aggregateField","updateStatus","feats","basesPerSpan","parentAggregation","parentAggregationFlat","some","uniqueId","Error","feat","splitLine","rest","split","data","parseLine","aggr","aggrIsNotNone","type","chrom","chromStart","chromEnd","description","chromStarts","chromStarts2","blockStarts","blockStarts2","blockSizes","blockSizes2","score","score2","blockCount","thickStart","thickEnd","strand","featureData2","doesIntersect2","next","SimpleFeature","id","length","minStart","POSITIVE_INFINITY","maxEnd","NEGATIVE_INFINITY","entries","subfeatures","s","min","max","subs","sort","a","b","localeCompare","every","sub","complete","ObservableCreate","error","stopToken","isRepeatMaskerDescriptionField","desc","ret","trim","isNaN","makeRepeatTrackDescription","bitsw_score","percent_div","percent_del","percent_ins","query_chr","query_begin","query_end","query_remaining","orientation","matching_repeat_name","matching_repeat_class","matching_repeat_begin","matching_repeat_end","matching_repeat_remaining","repeat_id","featureData","line","colRef","colStart","colEnd","names","parseInt","hasBlockCount","i","obj","arrayify","defaultParser","strand2","_1","_2","_3","starts","bmin","bsize","bmax","makeBlocks","isBedMethylFeature","code","color","n_valid_cov","fraction_modified","n_mod","n_canonical","n_other_mod","n_delete","n_fail","n_diff","n_nocall","source","generateBedMethylFeature","rest2","generateRepeatMaskerFeature","isUcscTranscript","oldSubfeatures","filter","child","cdsEndStat","cdsStartStat","block","phase","generateUcscTranscript"],"sourceRoot":""}