{"version":3,"file":"static/js/7691.0ca9d047.chunk.js","mappings":"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","sources":["../../../plugins/data-management/src/AddConnectionWidget/components/ConfigureConnection.tsx","../../../node_modules/@mui/icons-material/esm/OpenInNew.js","../../../plugins/data-management/src/AddConnectionWidget/components/ConnectionTypeSelect.tsx","../../../plugins/data-management/src/AddConnectionWidget/components/AddConnectionWidget.tsx","../../../packages/product-core/src/Session/BaseSession.ts","../../../packages/product-core/src/Session/Connections.ts"],"sourcesContent":["import { Suspense } from 'react'\n\nimport { LoadingEllipses } from '@jbrowse/core/ui'\nimport { ConfigurationEditor } from '@jbrowse/plugin-config'\nimport { observer } from 'mobx-react'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\n\nconst ConfigureConnection = observer(function ({\n  connectionType,\n  model,\n  session,\n}: {\n  connectionType: ConnectionType\n  model: AnyConfigurationModel\n  session: AbstractSessionModel\n}) {\n  const ConfigEditorComponent =\n    connectionType.configEditorComponent || ConfigurationEditor\n\n  return (\n    <Suspense fallback={<LoadingEllipses />}>\n      <ConfigEditorComponent model={{ target: model }} session={session} />\n    </Suspense>\n  )\n})\n\nexport default ConfigureConnection\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');","import { useEffect } from 'react'\n\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew'\nimport { IconButton, MenuItem, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({\n  connectionTypeChoices,\n  connectionType,\n  setConnectionType,\n}: {\n  connectionTypeChoices: ConnectionType[]\n  connectionType?: ConnectionType\n  setConnectionType: (c?: ConnectionType) => void\n}) {\n  const firstChoice = connectionTypeChoices[0]\n  useEffect(() => {\n    if (!connectionType) {\n      setConnectionType(firstChoice)\n    }\n  }, [connectionType, firstChoice, setConnectionType])\n\n  return (\n    <form autoComplete=\"off\">\n      {connectionType ? (\n        <TextField\n          value={connectionType.name}\n          label=\"connectionType\"\n          helperText={\n            connectionType.description ? (\n              <>\n                {connectionType.description}\n                {connectionType.url ? (\n                  <IconButton\n                    href={connectionType.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\"\n                  >\n                    <OpenInNewIcon />\n                  </IconButton>\n                ) : null}\n              </>\n            ) : null\n          }\n          select\n          fullWidth\n          onChange={event => {\n            setConnectionType(\n              connectionTypeChoices.find(c => c.name === event.target.value),\n            )\n          }}\n          variant=\"outlined\"\n        >\n          {connectionTypeChoices.map(c => (\n            <MenuItem key={c.name} value={c.name}>\n              {c.displayName || c.name}\n            </MenuItem>\n          ))}\n        </TextField>\n      ) : null}\n    </form>\n  )\n})\n\nexport default ConnectionTypeSelect\n","import { useMemo, useState } from 'react'\n\nimport {\n  getEnv,\n  getSession,\n  isSessionModelWithWidgets,\n} from '@jbrowse/core/util'\nimport { isSessionWithConnections } from '@jbrowse/product-core'\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport ConfigureConnection from './ConfigureConnection'\nimport ConnectionTypeSelect from './ConnectionTypeSelect'\n\nimport type { ConnectionType } from '@jbrowse/core/pluggableElementTypes'\n\nconst useStyles = makeStyles()(theme => ({\n  root: {\n    marginTop: theme.spacing(1),\n  },\n  stepper: {\n    backgroundColor: theme.palette.background.default,\n  },\n  button: {\n    marginTop: theme.spacing(1),\n    marginRight: theme.spacing(1),\n  },\n  actionsContainer: {\n    marginBottom: theme.spacing(2),\n  },\n}))\n\nconst steps = ['Select a Connection Type', 'Configure Connection']\n\nconst AddConnectionWidget = observer(function ({ model }: { model: unknown }) {\n  const [connectionType, setConnectionType] = useState<ConnectionType>()\n  const [connectionId, setConnectionId] = useState<string>()\n  const [activeStep, setActiveStep] = useState(0)\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n\n  // useMemo is needed for react@18+mobx-react@9, previous code called configScema.create directly in a setConfigModel useState hook setter but this caused infinite loop\n  const configModel = useMemo(\n    () => connectionType?.configSchema.create({ connectionId }, getEnv(model)),\n    [connectionId, connectionType, model],\n  )\n\n  return (\n    <div className={classes.root}>\n      <Stepper\n        className={classes.stepper}\n        activeStep={activeStep}\n        orientation=\"vertical\"\n      >\n        {steps.map(label => (\n          <Step key={label}>\n            <StepLabel>{label}</StepLabel>\n            <StepContent>\n              {activeStep === 0 ? (\n                <ConnectionTypeSelect\n                  connectionTypeChoices={pluginManager.getConnectionElements()}\n                  connectionType={connectionType}\n                  setConnectionType={c => {\n                    setConnectionType(c)\n                    if (!c) {\n                      return\n                    }\n                    setConnectionId(`${c.name}-${Date.now()}`)\n                  }}\n                />\n              ) : connectionType && configModel ? (\n                <ConfigureConnection\n                  connectionType={connectionType}\n                  model={configModel}\n                  session={session}\n                />\n              ) : null}\n              <div className={classes.actionsContainer}>\n                <Button\n                  disabled={activeStep === 0}\n                  onClick={() => {\n                    setActiveStep(activeStep - 1)\n                  }}\n                  className={classes.button}\n                >\n                  Back\n                </Button>\n                <Button\n                  disabled={\n                    !(\n                      (activeStep === 0 && connectionType) ||\n                      (activeStep === 1 && configModel)\n                    )\n                  }\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={() => {\n                    if (activeStep === steps.length - 1) {\n                      if (configModel && isSessionWithConnections(session)) {\n                        const conf = session.addConnectionConf(configModel)\n                        session.makeConnection(conf)\n                      } else {\n                        session.notify('No config model to add')\n                      }\n\n                      if (isSessionModelWithWidgets(session)) {\n                        session.hideWidget(model)\n                      }\n                    } else {\n                      setActiveStep(activeStep + 1)\n                    }\n                  }}\n                  className={classes.button}\n                  data-testid=\"addConnectionNext\"\n                >\n                  {activeStep === steps.length - 1 ? 'Connect' : 'Next'}\n                </Button>\n              </div>\n            </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n    </div>\n  )\n})\n\nexport default AddConnectionWidget\n","import { ElementId } from '@jbrowse/core/util/types/mst'\nimport { getParent, isStateTreeNode, types } from 'mobx-state-tree'\n\nimport type { BaseRootModelType } from '../RootModel/BaseRootModel'\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { BaseAssemblyConfigSchema } from '@jbrowse/core/assemblyManager'\nimport type { AnyConfigurationSchemaType } from '@jbrowse/core/configuration'\nimport type { IAnyStateTreeNode, Instance } from 'mobx-state-tree'\n\n/**\n * #stateModel BaseSessionModel\n *\n * base session shared by all JBrowse products. Be careful what you include\n * here, everything will use it.\n */\nexport function BaseSessionModel<\n  ROOT_MODEL_TYPE extends BaseRootModelType,\n  JB_CONFIG_SCHEMA extends AnyConfigurationSchemaType,\n>(_pluginManager: PluginManager) {\n  return types\n    .model({\n      /**\n       * #property\n       */\n      id: ElementId,\n      /**\n       * #property\n       */\n      name: types.string,\n      /**\n       * #property\n       */\n      margin: 0,\n    })\n    .volatile(() => ({\n      /**\n       * #volatile\n       * this is the globally \"selected\" object. can be anything. code that\n       * wants to deal with this should examine it to see what kind of thing it\n       * is.\n       */\n      selection: undefined as unknown,\n      /**\n       * #volatile\n       * this is the globally \"hovered\" object. can be anything. code that\n       * wants to deal with this should examine it to see what kind of thing it\n       * is.\n       */\n      hovered: undefined as unknown,\n    }))\n    .views(self => ({\n      /**\n       * #getter\n       */\n      get root() {\n        return getParent<ROOT_MODEL_TYPE>(self)\n      },\n    }))\n    .views(self => ({\n      /**\n       * #getter\n       */\n      get jbrowse() {\n        return self.root.jbrowse\n      },\n      /**\n       * #getter\n       */\n      get rpcManager() {\n        return self.root.rpcManager\n      },\n      /**\n       * #getter\n       */\n      get configuration(): Instance<JB_CONFIG_SCHEMA> {\n        return this.jbrowse.configuration\n      },\n      /**\n       * #getter\n       */\n      get adminMode() {\n        return self.root.adminMode\n      },\n\n      /**\n       * #getter\n       */\n      get textSearchManager() {\n        return self.root.textSearchManager\n      },\n    }))\n    .views(self => ({\n      /**\n       * #getter\n       */\n      get assemblies(): Instance<BaseAssemblyConfigSchema>[] {\n        return self.jbrowse.assemblies\n      },\n    }))\n    .actions(self => ({\n      /**\n       * #action\n       * set the global selection, i.e. the globally-selected object. can be a\n       * feature, a view, just about anything\n       */\n      setSelection(thing: unknown) {\n        self.selection = thing\n      },\n\n      /**\n       * #action\n       * clears the global selection\n       */\n      clearSelection() {\n        self.selection = undefined\n      },\n      /**\n       * #action\n       */\n      setHovered(thing: unknown) {\n        self.hovered = thing\n      },\n    }))\n}\n\n/** Session mixin MST type for the most basic session */\nexport type BaseSessionType = ReturnType<typeof BaseSessionModel>\n\n/** Instance of the most basic possible session */\nexport type BaseSession = Instance<BaseSessionType>\n\n/** Type guard for BaseSession */\nexport function isBaseSession(thing: IAnyStateTreeNode): thing is BaseSession {\n  return 'id' in thing && 'name' in thing && 'root' in thing\n}\n\n/** Type guard for whether a thing is JBrowse session */\nexport function isSession(thing: unknown): thing is BaseSession {\n  return isStateTreeNode(thing) && isBaseSession(thing)\n}\n","import { readConfObject } from '@jbrowse/core/configuration'\nimport { types } from 'mobx-state-tree'\n\nimport { isBaseSession } from './BaseSession'\n\nimport type { SessionWithReferenceManagementType } from './ReferenceManagement'\nimport type { BaseRootModelType } from '../RootModel/BaseRootModel'\nimport type PluginManager from '@jbrowse/core/PluginManager'\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { BaseConnectionModel } from '@jbrowse/core/pluggableElementTypes/models/BaseConnectionModelFactory'\nimport type { BaseConnectionConfigModel } from '@jbrowse/core/pluggableElementTypes/models/baseConnectionConfig'\nimport type { IAnyStateTreeNode, Instance } from 'mobx-state-tree'\n\n/**\n * #stateModel ConnectionManagementSessionMixin\n */\nexport function ConnectionManagementSessionMixin(pluginManager: PluginManager) {\n  return types\n    .model({\n      /**\n       * #property\n       */\n      connectionInstances: types.array(\n        pluginManager.pluggableMstType(\n          'connection',\n          'stateModel',\n        ) as BaseConnectionModel,\n      ),\n    })\n    .views(self => ({\n      /**\n       * #getter\n       */\n      get connections(): BaseConnectionConfigModel[] {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.connections\n      },\n    }))\n    .actions(self => ({\n      /**\n       * #action\n       */\n      makeConnection(\n        configuration: AnyConfigurationModel,\n        initialSnapshot = {},\n      ) {\n        const type = configuration.type as string\n        if (!type) {\n          throw new Error('track configuration has no `type` listed')\n        }\n        const name = readConfObject(configuration, 'name')\n        const connectionType = pluginManager.getConnectionType(type)\n        if (!connectionType) {\n          throw new Error(`unknown connection type ${type}`)\n        }\n        const length = self.connectionInstances.push({\n          ...initialSnapshot,\n          name,\n          // @ts-expect-error unsure why ts doesn't like `type` here, but is\n          // needed\n          type,\n          configuration,\n        })\n        return self.connectionInstances[length - 1]\n      },\n\n      /**\n       * #action\n       */\n      prepareToBreakConnection(configuration: AnyConfigurationModel) {\n        const root = self as typeof self &\n          Instance<SessionWithReferenceManagementType>\n        const callbacksToDeref: (() => void)[] = []\n        const derefTypeCount: Record<string, number> = {}\n        const name = readConfObject(configuration, 'name')\n        const connection = self.connectionInstances.find(c => c.name === name)\n        if (!connection) {\n          return undefined\n        }\n        for (const track of connection.tracks) {\n          const ref = root.getReferring(track)\n          root.removeReferring(ref, track, callbacksToDeref, derefTypeCount)\n        }\n        return [\n          () => {\n            callbacksToDeref.forEach(cb => {\n              cb()\n            })\n            this.breakConnection(configuration)\n          },\n          derefTypeCount,\n        ]\n      },\n\n      /**\n       * #action\n       */\n      breakConnection(configuration: AnyConfigurationModel) {\n        const name = readConfObject(configuration, 'name')\n        const connection = self.connectionInstances.find(c => c.name === name)\n        if (!connection) {\n          throw new Error(`no connection found with name ${name}`)\n        }\n        self.connectionInstances.remove(connection)\n      },\n\n      /**\n       * #action\n       */\n      deleteConnection(configuration: AnyConfigurationModel) {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.deleteConnectionConf(configuration)\n      },\n\n      /**\n       * #action\n       */\n      addConnectionConf(connectionConf: AnyConfigurationModel) {\n        const { jbrowse } = self as typeof self & Instance<BaseRootModelType>\n        return jbrowse.addConnectionConf(connectionConf)\n      },\n\n      /**\n       * #action\n       */\n      clearConnections() {\n        self.connectionInstances.clear()\n      },\n    }))\n}\n\n/** Session mixin MST type for a session that has connections */\nexport type SessionWithConnectionsType = ReturnType<\n  typeof ConnectionManagementSessionMixin\n>\n\n/** Instance of a session that has connections: `connectionInstances`,\n * `makeConnection()`, etc. */\nexport type SessionWithConnections = Instance<SessionWithConnectionsType>\n\n/** Type guard for SessionWithConnections */\nexport function isSessionWithConnections(\n  session: IAnyStateTreeNode,\n): session is SessionWithConnections {\n  return isBaseSession(session) && 'connectionInstances' in session\n}\n"],"names":["observer","connectionType","model","session","ConfigEditorComponent","configEditorComponent","ConfigurationEditor","_jsx","Suspense","fallback","LoadingEllipses","children","target","d","connectionTypeChoices","setConnectionType","firstChoice","useEffect","autoComplete","TextField","value","name","label","helperText","description","_jsxs","_Fragment","url","IconButton","href","rel","OpenInNewIcon","select","fullWidth","onChange","event","find","c","variant","map","MenuItem","displayName","useStyles","makeStyles","theme","root","marginTop","spacing","stepper","backgroundColor","palette","background","default","button","marginRight","actionsContainer","marginBottom","steps","useState","connectionId","setConnectionId","activeStep","setActiveStep","classes","getSession","pluginManager","getEnv","configModel","useMemo","configSchema","create","className","Stepper","orientation","Step","StepLabel","StepContent","ConnectionTypeSelect","getConnectionElements","Date","now","ConfigureConnection","Button","disabled","onClick","color","length","isSessionWithConnections","conf","addConnectionConf","makeConnection","notify","isSessionModelWithWidgets","hideWidget","BaseSessionModel","_pluginManager","types","id","ElementId","string","margin","volatile","selection","undefined","hovered","views","self","getParent","jbrowse","rpcManager","configuration","this","adminMode","textSearchManager","assemblies","actions","setSelection","thing","clearSelection","setHovered","isBaseSession","ConnectionManagementSessionMixin","connectionInstances","array","pluggableMstType","connections","initialSnapshot","type","Error","readConfObject","getConnectionType","push","prepareToBreakConnection","callbacksToDeref","derefTypeCount","connection","track","tracks","ref","getReferring","removeReferring","forEach","cb","breakConnection","remove","deleteConnection","deleteConnectionConf","connectionConf","clearConnections","clear"],"sourceRoot":""}