{"version":3,"file":"static/js/6310.1ae0650f.chunk.js","mappings":"sLAGO,SAASA,EAAeC,GAC7B,MAAMC,GAAQC,EAAAA,EAAAA,GAAcF,GACtBG,EAAOF,EAAMG,QACjBC,KAEIA,EAAKC,WAAW,MAChBD,EAAKC,WAAW,YAChBD,EAAKC,WAAW,YAIhBC,EAAiBN,EAAMO,UAASH,GAAQA,EAAKC,WAAW,OACxDG,EAAc,CAAC,UAAW,QAAS,OACnCC,EAAkBC,KAAKC,IAC3B,GACCT,EAAK,IAAIU,MAAM,OAAOC,QAAU,GAAKL,EAAYK,QAE9CC,EAAaR,GAAgBS,SAAS,MACxCT,EACGU,MAAM,GACNJ,MAAM,MACNI,MAAMR,EAAYK,QAClBI,KAAIC,GAAKA,EAAEC,SACdC,MAAMC,KAAK,CAAER,OAAQJ,IAAmB,CAACa,EAAIC,IAAM,SAASA,MAIhE,MAAO,CACLC,QAHe,IAAIhB,KAAgBM,GAGjBG,KAAIQ,IAAK,CAAGC,KAAMD,MACpCE,OAAQ,CACNC,KAAM1B,EAAKe,KAAI,CAACb,EAAMyB,KACpB,MAAMC,EAAO1B,EAAKQ,MAAM,MACxB,MAAO,CAELmB,SAAU,CACRC,QAASF,EAAK,GACdG,OAAQH,EAAK,GACbI,KAAMJ,EAAK,GACXJ,KAAMI,EAAK,GACXK,MAAOL,EAAK,GACZM,OAAQN,EAAK,MACVO,OAAOC,YACRxB,EAAWG,KAAI,CAACsB,EAAGV,KACjB,MAAMW,EAAIV,EAAKD,EAAMrB,EAAYK,QACjC,MAAO,CAAC0B,GAAGE,EAAAA,EAAAA,GAASD,IAAMA,EAAIA,EAAE,MAKtCE,QAAS,CACPC,SAAU,OAAOd,IACjBG,QAASF,EAAK,GACdG,OAAQH,EAAK,GACbI,KAAMJ,EAAK,GACXJ,KAAMI,EAAK,GACXK,MAAOL,EAAK,GACZM,QAAQQ,EAAAA,EAAAA,GAAYd,EAAK,OACtBO,OAAOC,YACRxB,EAAWG,KAAI,CAACsB,EAAGV,KACjB,MAAMW,EAAIV,EAAKD,EAAMrB,EAAYK,QACjC,MAAO,CAAC0B,GAAGE,EAAAA,EAAAA,GAASD,IAAMA,EAAIA,EAAE,MAIvC,KAIT,C,iBChEO,SAASC,EAASI,GACvB,MAAmB,iBAARA,EACFA,EAAMA,GAAQ,EACG,iBAARA,GAAmC,KAAfA,EAAI1B,QACjC2B,OAAOC,UAAUF,EAI5B,C,kCCfO,SAASD,EAAYR,GAC1B,MAAe,MAAXA,EACK,EACa,MAAXA,GACD,OAER,CAEJ,CAEO,SAASnC,EAAcF,GAC5B,OAAO,IAAIiD,YAAY,QACpBC,OAAOlD,GACPa,MAAM,cACNK,KAAIiC,GAAKA,EAAE/B,SACXhB,QAAO+C,KAAOA,GACnB,C","sources":["../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/BedImport.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/isNumber.ts","../../../plugins/spreadsheet-view/src/SpreadsheetView/importAdapters/util.ts"],"sourcesContent":["import { isNumber } from './isNumber'\nimport { bufferToLines, parseStrand } from './util'\n\nexport function parseBedBuffer(buffer: Uint8Array) {\n  const lines = bufferToLines(buffer)\n  const rest = lines.filter(\n    line =>\n      !(\n        line.startsWith('#') ||\n        line.startsWith('browser') ||\n        line.startsWith('track')\n      ),\n  )\n\n  const lastHeaderLine = lines.findLast(line => line.startsWith('#'))\n  const coreColumns = ['refName', 'start', 'end']\n  const numExtraColumns = Math.max(\n    0,\n    (rest[0]?.split('\\t')?.length || 0) - coreColumns.length,\n  )\n  const extraNames = lastHeaderLine?.includes('\\t')\n    ? lastHeaderLine\n        .slice(1)\n        .split('\\t')\n        .slice(coreColumns.length)\n        .map(t => t.trim())\n    : Array.from({ length: numExtraColumns }, (_v, i) => `field_${i}`)\n\n  const colNames = [...coreColumns, ...extraNames]\n\n  return {\n    columns: colNames.map(c => ({ name: c })),\n    rowSet: {\n      rows: rest.map((line, idx) => {\n        const cols = line.split('\\t')\n        return {\n          // what is displayed\n          cellData: {\n            refName: cols[0],\n            start: +cols[1]!,\n            end: +cols[2]!,\n            name: cols[3],\n            score: cols[4],\n            strand: cols[5],\n            ...Object.fromEntries(\n              extraNames.map((n, idx) => {\n                const r = cols[idx + coreColumns.length]\n                return [n, isNumber(r) ? +r : r]\n              }),\n            ),\n          },\n          // an actual simplefeatureserialized\n          feature: {\n            uniqueId: `bed-${idx}`,\n            refName: cols[0],\n            start: +cols[1]!,\n            end: +cols[2]!,\n            name: cols[3],\n            score: cols[4],\n            strand: parseStrand(cols[5]),\n            ...Object.fromEntries(\n              extraNames.map((n, idx) => {\n                const r = cols[idx + coreColumns.length]\n                return [n, isNumber(r) ? +r : r]\n              }),\n            ),\n          },\n        }\n      }),\n    },\n  }\n}\n","/**\n * is-number <https://github.com/jonschlinkert/is-number>\n *\n * Copyright (c) 2014-present, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nexport function isNumber(num: unknown): num is number {\n  if (typeof num === 'number') {\n    return num - num === 0\n  } else if (typeof num === 'string' && num.trim() !== '') {\n    return Number.isFinite(+num)\n  } else {\n    return false\n  }\n}\n","export function parseStrand(strand?: string) {\n  if (strand === '+') {\n    return 1\n  } else if (strand === '-') {\n    return -1\n  } else {\n    return undefined\n  }\n}\n\nexport function bufferToLines(buffer: Uint8Array) {\n  return new TextDecoder('utf8')\n    .decode(buffer)\n    .split(/\\n|\\r\\n|\\r/)\n    .map(f => f.trim())\n    .filter(f => !!f)\n}\n"],"names":["parseBedBuffer","buffer","lines","bufferToLines","rest","filter","line","startsWith","lastHeaderLine","findLast","coreColumns","numExtraColumns","Math","max","split","length","extraNames","includes","slice","map","t","trim","Array","from","_v","i","columns","c","name","rowSet","rows","idx","cols","cellData","refName","start","end","score","strand","Object","fromEntries","n","r","isNumber","feature","uniqueId","parseStrand","num","Number","isFinite","TextDecoder","decode","f"],"sourceRoot":""}