{"version":3,"file":"static/js/4699.552c3096.chunk.js","mappings":"iPAcA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,OAAQ,CACNC,cAAe,UAiEnB,GA7D2CC,EAAAA,EAAAA,WAAS,SAAUC,GAG5D,MAAM,MAAEC,GAAUD,GACZ,QAAEE,GAAYP,KACd,OAAEQ,EAAM,QAAEC,EAAO,UAAEC,EAAS,UAAEC,GAAcL,EAC5CM,GAAMC,EAAAA,EAAAA,QAAuB,OAC5BC,EAAQC,IAAaC,EAAAA,EAAAA,aACrBC,EAAQC,IAAaF,EAAAA,EAAAA,aACtB,MAAEG,IAAUC,EAAAA,EAAAA,mBAAkBd,GAEpC,OACEe,EAAAA,cAAA,OACET,IAAKA,EACLU,YAAaC,IACX,MAAMC,EAAOZ,EAAIa,SAASC,wBACpBC,EAAMH,GAAMG,KAAO,EACnBC,EAAOJ,GAAMI,MAAQ,EAC3Bb,EAAUQ,EAAMM,QAAUF,GAC1BT,EAAUK,EAAMO,QAAUF,EAAK,EAEjCG,aAAcA,KACZhB,OAAUiB,GACVd,OAAUc,EAAU,GAGtBX,EAAAA,cAACY,EAAAA,GAA+B5B,GAChCgB,EAAAA,cAACa,EAAAA,EAAS,CAAC5B,MAAOA,IACjBQ,GAAUL,EACTY,EAAAA,cAAA,OAAKc,MAAO,CAAEC,SAAU,aACtBf,EAAAA,cAAA,OACEgB,UAAW9B,EAAQL,OACnBiB,MAAOA,EACPX,OAAQA,EACR2B,MAAO,CAAEC,SAAU,WAAYT,IAAKhB,IAEpCU,EAAAA,cAAA,QACEiB,GAAI,EACJC,GAAIpB,EACJqB,GAAI1B,EAASH,EACb8B,GAAI3B,EAASH,EACb+B,OAAO,UAETrB,EAAAA,cAAA,QAAMiB,GAAIrB,EAAQsB,GAAItB,EAAQuB,GAAI,EAAGC,GAAIjC,EAAQkC,OAAO,WAE1DrB,EAAAA,cAACsB,EAAAA,EAAW,KACVtB,EAAAA,cAACuB,EAAAA,cAAa,CACZC,KAAMC,OAAOC,QACXtC,EAAQuC,KAAKC,MAAMnC,EAASJ,KAAe,CAAC,GAE3CwC,QAAO,EAAEC,KAAiB,UAARA,IAClBC,KAAI,EAAED,EAAKE,KAAW,GAAGF,KAAOE,MAChCC,KAAK,UAIZ,KAGV,G","sources":["../../../plugins/variants/src/MultiLinearVariantDisplay/components/VariantDisplayComponent.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport BaseTooltip from '@jbrowse/core/ui/BaseTooltip'\nimport { getContainingView } from '@jbrowse/core/util'\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport LegendBar from '../../shared/LegendBar'\n\nimport type { MultiLinearVariantDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()({\n  cursor: {\n    pointerEvents: 'none',\n  },\n})\n\nconst MultiLinearVariantDisplayComponent = observer(function (props: {\n  model: MultiLinearVariantDisplayModel\n}) {\n  const { model } = props\n  const { classes } = useStyles()\n  const { height, sources, rowHeight, scrollTop } = model\n  const ref = useRef<HTMLDivElement>(null)\n  const [mouseY, setMouseY] = useState<number>()\n  const [mouseX, setMouseX] = useState<number>()\n  const { width } = getContainingView(model) as LinearGenomeViewModel\n\n  return (\n    <div\n      ref={ref}\n      onMouseMove={event => {\n        const rect = ref.current?.getBoundingClientRect()\n        const top = rect?.top || 0\n        const left = rect?.left || 0\n        setMouseY(event.clientY - top)\n        setMouseX(event.clientX - left)\n      }}\n      onMouseLeave={() => {\n        setMouseY(undefined)\n        setMouseX(undefined)\n      }}\n    >\n      <BaseLinearDisplayComponent {...props} />\n      <LegendBar model={model} />\n      {mouseY && sources ? (\n        <div style={{ position: 'relative' }}>\n          <svg\n            className={classes.cursor}\n            width={width}\n            height={height}\n            style={{ position: 'absolute', top: scrollTop }}\n          >\n            <line\n              x1={0}\n              x2={width}\n              y1={mouseY - scrollTop}\n              y2={mouseY - scrollTop}\n              stroke=\"black\"\n            />\n            <line x1={mouseX} x2={mouseX} y1={0} y2={height} stroke=\"black\" />\n          </svg>\n          <BaseTooltip>\n            <SanitizedHTML\n              html={Object.entries(\n                sources[Math.floor(mouseY / rowHeight)] || {},\n              )\n                .filter(([key]) => key !== 'color')\n                .map(([key, value]) => `${key}:${value}`)\n                .join('\\n')}\n            />\n          </BaseTooltip>\n        </div>\n      ) : null}\n    </div>\n  )\n})\n\nexport default MultiLinearVariantDisplayComponent\n"],"names":["useStyles","makeStyles","cursor","pointerEvents","observer","props","model","classes","height","sources","rowHeight","scrollTop","ref","useRef","mouseY","setMouseY","useState","mouseX","setMouseX","width","getContainingView","React","onMouseMove","event","rect","current","getBoundingClientRect","top","left","clientY","clientX","onMouseLeave","undefined","BaseLinearDisplayComponent","LegendBar","style","position","className","x1","x2","y1","y2","stroke","BaseTooltip","SanitizedHTML","html","Object","entries","Math","floor","filter","key","map","value","join"],"sourceRoot":""}