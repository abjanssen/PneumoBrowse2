{"version":3,"file":"static/js/893.05254db6.chunk.js","mappings":"kTAIe,SAAAA,EAAAC,GAAA,MAAAC,GAAAC,EAAAA,EAAAA,GAAA,OAAAC,EAAAC,EAAyDC,EAI9D,OAJKJ,EAAA,KAAAD,KAAoBG,cAAAC,GAAAJ,GAAqCC,EAAA,GAAAD,EAAAC,EAAA,GAAAE,EAAAF,EAAA,GAAAG,IAAAD,EAAAF,EAAA,GAAAG,EAAAH,EAAA,IAAAA,EAAA,KAAAE,GAAAF,EAAA,KAAAG,GAEpEC,GAAAC,EAAAA,EAAAA,KAAA,OAAAH,UACEG,EAAAA,EAAAA,KAACC,EAAAA,EAAS,IAAKH,EAAID,SAAGA,MAClBF,EAAA,GAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAAAI,GAAAA,EAAAJ,EAAA,GAFNI,CAEM,CCWV,SAAAG,IAAA,MAAAP,GAAAC,EAAAA,EAAAA,GAAA,OAAAF,EAKU,OALVC,EAAA,KAAAQ,OAAAC,IAAA,8BAEIV,GAAAW,EAAAA,EAAAA,MAAA,OAAAR,SAAA,EACEG,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CAAOC,KAAE,GAASC,MAAmB,CAAAC,YAAA,OACtDT,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAASC,QAAA,SAAQd,SAAC,oBACzBF,EAAA,GAAAD,GAAAA,EAAAC,EAAA,GAHND,CAGM,CAIV,SAAAkB,EAAAC,EAAAC,GAAA,OACSC,EAAAA,EAAAA,iBAAgB,OAAOF,IAAOC,EAAI,CAG5B,SAASE,GAAgB,MACtCC,EAAK,YACLC,IAKA,MAAMC,GAAUC,EAAAA,EAAAA,YAAWH,GACrBI,EAA6C,oBAApBC,iBACxBC,EAAiBC,IAAsBC,EAAAA,EAAAA,UAASJ,IAChDK,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAUC,GAAejB,EAAY,OAAQ,gBAC7CkB,EAAaC,GAAkBnB,EAAY,cAAe,WAC1DoB,EAAWC,GAAgBrB,EAChC,QACAO,EAAQa,WAAa,YAEhBE,EAAOC,IAAYV,EAAAA,EAAAA,YAC1B,OACEpB,EAAAA,EAAAA,MAAC+B,EAAAA,OAAM,CAACC,MAAI,EAACC,QAASpB,EAAaqB,MAAM,aAAY1C,SAAA,EACnDQ,EAAAA,EAAAA,MAACmC,EAAAA,EAAa,CAAA3C,SAAA,CACXqC,GACClC,EAAAA,EAAAA,KAACyC,EAAAA,aAAY,CAACP,MAAOA,IACnBR,GACF1B,EAAAA,EAAAA,KAACE,EAAc,IACb,MACJF,EAAAA,EAAAA,KAACP,EAAU,CACTiD,WAAW,WACXC,MAAOf,EACPgB,SAAUC,IACRhB,EAAYgB,EAAMC,OAAOH,WAI7BtC,EAAAA,EAAAA,MAACZ,EAAU,CACTsD,QAAM,EACNC,MAAM,0BACNC,QAAQ,WACRN,MAAOb,EACPtB,MAAO,CAAE0C,MAAO,KAChBN,SAAUC,IACRd,EAAec,EAAMC,OAAOH,QAC5B9C,SAAA,EAEFG,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CAACR,MAAM,SAAQ9C,SAAC,YACzBG,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CAACR,MAAM,UAAS9C,SAAC,aAC1BG,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CAACR,MAAM,OAAM9C,SAAC,UACvBG,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CAACR,MAAM,OAAM9C,SAAC,aAEzBG,EAAAA,EAAAA,KAAA,SACCmB,EAAQiC,WACPpD,EAAAA,EAAAA,KAACP,EAAU,CACTsD,QAAM,EACNC,MAAM,QACNC,QAAQ,WACRN,MAAOX,EACPY,SAAUC,IACRZ,EAAaY,EAAMC,OAAOH,QAC1B9C,SAEDwD,OAAOC,QAAQnC,EAAQiC,aAAaG,IAAI,EAAE1C,EAAKC,MAC9Cd,EAAAA,EAAAA,KAACmD,EAAAA,EAAQ,CAAWR,MAAO9B,EAAIhB,SAG3BiB,EAAI0C,MAAQ,kBAHD3C,MAQjB,KACHQ,GACCrB,EAAAA,EAAAA,KAACyD,EAAAA,EAAgB,CACfC,SACE1D,EAAAA,EAAAA,KAAC2D,EAAAA,EAAQ,CACPC,QAASrC,EACTqB,SAAUA,KACRpB,EAAmBV,IAAQA,MAIjCkC,MAAM,kFAGRhD,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAAAb,SAAC,6FAMhBQ,EAAAA,EAAAA,MAACwD,EAAAA,EAAa,CAAAhE,SAAA,EACZG,EAAAA,EAAAA,KAAC8D,EAAAA,EAAM,CACLb,QAAQ,YACRc,MAAM,YACNC,QAASA,KACP9C,KACArB,SACH,YAGDG,EAAAA,EAAAA,KAAC8D,EAAAA,EAAM,CACLb,QAAQ,YACRc,MAAM,UACNE,KAAK,SACLD,QAASE,UACPvC,GAAW,GACXQ,OAASgC,GACT,UACQlD,EAAMmD,UAAU,CACpB7C,kBACAK,WACAI,YACAF,gBAEFZ,GACF,CAAE,MAAOmD,GACPC,QAAQpC,MAAMmC,GACdlC,EAASkC,EACX,CAAE,QACA1C,GAAW,EACb,GACA9B,SACH,gBAMT,C","sources":["../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/TextField2.tsx","../../../plugins/linear-comparative-view/src/LinearSyntenyView/components/ExportSvgDialog.tsx"],"sourcesContent":["import { TextField } from '@mui/material'\n\nimport type { TextFieldProps } from '@mui/material'\n\nexport default function TextField2({ children, ...rest }: TextFieldProps) {\n  return (\n    <div>\n      <TextField {...rest}>{children}</TextField>\n    </div>\n  )\n}\n","import { useState } from 'react'\n\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  Typography,\n} from '@mui/material'\n\nimport TextField2 from './TextField2'\n\nimport type { ExportSvgOptions } from '../types'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage(`svg-${key}`, val)\n}\n\nexport default function ExportSvgDialog({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  const [error, setError] = useState<unknown>()\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField2\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => {\n            setFilename(event.target.value)\n          }}\n        />\n\n        <TextField2\n          select\n          label=\"Track label positioning\"\n          variant=\"outlined\"\n          value={trackLabels}\n          style={{ width: 150 }}\n          onChange={event => {\n            setTrackLabels(event.target.value)\n          }}\n        >\n          <MenuItem value=\"offset\">Offset</MenuItem>\n          <MenuItem value=\"overlay\">Overlay</MenuItem>\n          <MenuItem value=\"left\">Left</MenuItem>\n          <MenuItem value=\"none\">None</MenuItem>\n        </TextField2>\n        <br />\n        {session.allThemes ? (\n          <TextField2\n            select\n            label=\"Theme\"\n            variant=\"outlined\"\n            value={themeName}\n            onChange={event => {\n              setThemeName(event.target.value)\n            }}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField2>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => {\n                  setRasterizeLayers(val => !val)\n                }}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n                trackLabels,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n"],"names":["TextField2","t0","$","_c","children","rest","t1","_jsx","TextField","LoadingMessage","Symbol","for","_jsxs","CircularProgress","size","style","marginRight","Typography","display","useSvgLocal","key","val","useLocalStorage","ExportSvgDialog","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","filename","setFilename","trackLabels","setTrackLabels","themeName","setThemeName","error","setError","Dialog","open","onClose","title","DialogContent","ErrorMessage","helperText","value","onChange","event","target","select","label","variant","width","MenuItem","allThemes","Object","entries","map","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","color","onClick","type","async","undefined","exportSvg","e","console"],"sourceRoot":""}