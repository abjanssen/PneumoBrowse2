{"version":3,"file":"static/js/3523.a8c76bdb.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/icons-material/esm/GetApp.js","../../../plugins/linear-genome-view/src/LinearGenomeView/components/GetSequenceDialog.tsx","../../../plugins/linear-genome-view/src/LinearGenomeView/components/fetchSequence.ts","../../../packages/core/util/formatFastaStrings.ts"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 9h-4V3H9v6H5l7 7zM5 18v2h14v-2z\"\n}), 'GetApp');","import { useEffect, useState } from 'react'\n\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport { complement, reverse } from '@jbrowse/core/util'\nimport { formatSeqFasta } from '@jbrowse/core/util/formatFastaStrings'\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy'\nimport GetAppIcon from '@mui/icons-material/GetApp'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  FormGroup,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { fetchSequence } from './fetchSequence'\n\nimport type { LinearGenomeViewModel } from '..'\nimport type { Feature } from '@jbrowse/core/util'\n\nconst useStyles = makeStyles()({\n  dialogContent: {\n    width: '80em',\n  },\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  ml: {\n    marginLeft: 10,\n  },\n})\n\nconst GetSequenceDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: LinearGenomeViewModel\n  handleClose: () => void\n}) {\n  const { classes } = useStyles()\n  const [error, setError] = useState<unknown>()\n  const [sequenceChunks, setSequenceChunks] = useState<Feature[]>()\n  const [rev, setReverse] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const [comp, setComplement] = useState(false)\n  const { leftOffset, rightOffset } = model\n  const loading = sequenceChunks === undefined\n\n  useEffect(() => {\n    const controller = new AbortController()\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        // random note: the current selected region can't be a computed because\n        // it uses action on base1dview even though it's on the ephemeral\n        // base1dview\n        const selection = model.getSelectedRegions(leftOffset, rightOffset)\n        if (selection.length === 0) {\n          throw new Error('Selected region is out of bounds')\n        }\n        setSequenceChunks(await fetchSequence(model, selection))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n\n    return () => {\n      controller.abort()\n    }\n  }, [model, leftOffset, rightOffset])\n\n  const sequence = sequenceChunks\n    ? formatSeqFasta(\n        sequenceChunks.map(chunk => {\n          let chunkSeq = chunk.get('seq')\n          const chunkRefName = chunk.get('refName')\n          const chunkStart = chunk.get('start') + 1\n          const chunkEnd = chunk.get('end')\n          const loc = `${chunkRefName}:${chunkStart}-${chunkEnd}`\n          if (chunkSeq?.length !== chunkEnd - chunkStart + 1) {\n            throw new Error(\n              `${loc} returned ${chunkSeq.length.toLocaleString()} bases, but should have returned ${(\n                chunkEnd - chunkStart\n              ).toLocaleString()}`,\n            )\n          }\n\n          if (rev) {\n            chunkSeq = reverse(chunkSeq)\n          }\n          if (comp) {\n            chunkSeq = complement(chunkSeq)\n          }\n          return {\n            header: loc + (rev ? '-rev' : '') + (comp ? '-comp' : ''),\n            seq: chunkSeq,\n          }\n        }),\n      )\n    : ''\n\n  const sequenceTooLarge = sequence ? sequence.length > 1_000_000 : false\n\n  return (\n    <Dialog\n      maxWidth=\"xl\"\n      open\n      onClose={() => {\n        handleClose()\n        model.setOffsets()\n      }}\n      title=\"Reference sequence\"\n    >\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingEllipses message=\"Retrieving sequences\" />\n        ) : null}\n        <TextField\n          data-testid=\"rubberband-sequence\"\n          variant=\"outlined\"\n          multiline\n          minRows={5}\n          maxRows={10}\n          disabled={sequenceTooLarge}\n          className={classes.dialogContent}\n          fullWidth\n          value={\n            sequenceTooLarge\n              ? 'Reference sequence too large to display, use the download FASTA button'\n              : sequence\n          }\n          slotProps={{\n            input: {\n              readOnly: true,\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n        <FormGroup>\n          <FormControlLabel\n            control={\n              <Checkbox\n                value={rev}\n                onChange={event => {\n                  setReverse(event.target.checked)\n                }}\n              />\n            }\n            label=\"Reverse sequence\"\n          />\n          <FormControlLabel\n            control={\n              <Checkbox\n                value={comp}\n                onChange={event => {\n                  setComplement(event.target.checked)\n                }}\n              />\n            }\n            label=\"Complement sequence\"\n          />\n        </FormGroup>\n        <Typography style={{ margin: 10 }}>\n          Note: Check both boxes for the &quot;reverse complement&quot;\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            copy(sequence)\n            setCopied(true)\n            setTimeout(() => {\n              setCopied(false)\n            }, 500)\n          }}\n          disabled={loading || !!error || sequenceTooLarge}\n          color=\"primary\"\n          startIcon={<ContentCopyIcon />}\n        >\n          {copied ? 'Copied' : 'Copy to clipboard'}\n        </Button>\n        <Button\n          onClick={() => {\n            saveAs(\n              new Blob([sequence || ''], {\n                type: 'text/x-fasta;charset=utf-8',\n              }),\n              'jbrowse_ref_seq.fa',\n            )\n          }}\n          disabled={loading || !!error}\n          color=\"primary\"\n          startIcon={<GetAppIcon />}\n        >\n          Download FASTA\n        </Button>\n        <Button onClick={handleClose} variant=\"contained\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default GetSequenceDialog\n","import { getConf } from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\n\nimport type { LinearGenomeViewModel } from '../model'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\n\nexport async function fetchSequence(\n  model: LinearGenomeViewModel,\n  regions: Region[],\n) {\n  const session = getSession(model)\n  const { leftOffset, rightOffset } = model\n\n  if (!leftOffset || !rightOffset) {\n    throw new Error('no offsets on model to use for range')\n  }\n\n  const assemblyNames = new Set(regions.map(r => r.assemblyName))\n  if (assemblyNames.size > 1) {\n    throw new Error(\n      'not able to fetch sequences from multiple assemblies currently',\n    )\n  }\n  const { rpcManager, assemblyManager } = session\n  const assemblyName = leftOffset.assemblyName || rightOffset.assemblyName || ''\n  const assembly = assemblyManager.get(assemblyName)\n  if (!assembly) {\n    throw new Error(`assembly ${assemblyName} not found`)\n  }\n  const adapterConfig = getConf(assembly, ['sequence', 'adapter'])\n\n  const sessionId = 'getSequence'\n  return rpcManager.call(sessionId, 'CoreGetFeatures', {\n    adapterConfig,\n    regions,\n    sessionId,\n  }) as Promise<Feature[]>\n}\n","export interface SeqChunk {\n  header: string\n  seq: string\n}\n/**\n * Returns sequence with new line every 80 characters\n * ref https://stackoverflow.com/a/51506718/2129219\n *\n * @param seqString -  string\n * @returns formatted sequence string\n */\nexport function formatFastaLines(seqString: string) {\n  return seqString.replaceAll(/(.{1,80})/g, '$1\\n').trimEnd()\n}\n/**\n * Formats the sequences chunks into Fasta format\n *\n * @param chunks - array of seq chunks of the form `{ header: string, seq: string }`\n * @returns formatted sequence in fasta format\n */\nexport function formatSeqFasta(chunks: SeqChunk[]) {\n  return chunks\n    .map(chunk => `>${chunk.header}\\n${formatFastaLines(chunk.seq)}`)\n    .join('\\n')\n}\n"],"names":["d","useStyles","makeStyles","dialogContent","width","textAreaFont","fontFamily","ml","marginLeft","observer","model","handleClose","classes","error","setError","useState","sequenceChunks","setSequenceChunks","rev","setReverse","copied","setCopied","comp","setComplement","leftOffset","rightOffset","loading","undefined","useEffect","controller","AbortController","selection","getSelectedRegions","length","Error","async","regions","session","getSession","Set","map","r","assemblyName","size","rpcManager","assemblyManager","assembly","get","adapterConfig","getConf","sessionId","call","fetchSequence","e","console","abort","sequence","chunk","chunkSeq","chunkRefName","chunkStart","chunkEnd","loc","toLocaleString","reverse","complement","header","seq","seqString","replaceAll","trimEnd","join","sequenceTooLarge","_jsxs","Dialog","maxWidth","open","onClose","setOffsets","title","children","DialogContent","_jsx","ErrorMessage","LoadingEllipses","message","TextField","variant","multiline","minRows","maxRows","disabled","className","fullWidth","value","slotProps","input","readOnly","FormGroup","FormControlLabel","control","Checkbox","onChange","event","target","checked","label","Typography","style","margin","DialogActions","Button","onClick","copy","setTimeout","color","startIcon","ContentCopyIcon","saveAs","Blob","type","GetAppIcon"],"sourceRoot":""}