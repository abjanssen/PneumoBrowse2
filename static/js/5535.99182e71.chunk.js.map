{"version":3,"file":"static/js/5535.99182e71.chunk.js","mappings":"4NAUA,MAAMA,GAAiCC,EAAAA,EAAAA,OACrC,IAAM,kCAEFC,GAAkCD,EAAAA,EAAAA,OACtC,IAAM,kCAGR,SAASE,GAAc,WACrBC,EAAU,MACVC,IAKA,MAAMC,GAAUC,EAAAA,EAAAA,YAAWF,GAC3B,OACEG,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,mDACZC,EAAAA,EAAAA,KAAA,MAAAD,SACGL,EAAWQ,KAAI,CAACC,EAAWC,KAE1BN,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACGI,EAAW,KACZH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACN,MAAM,KAAEC,GAASf,EACjB,IACE,IAAIe,EAGF,MAAM,IAAIC,MACR,6DAHFD,EAAKE,iBAAiBT,EAM1B,CAAE,MAAOU,GACPC,QAAQC,MAAMF,GACdjB,EAAQoB,OAAO,GAAGH,IACpB,GACAd,SACH,YApBM,GAAGI,KAAaC,WA4BnC,CAEA,SAASa,GAA+B,WACtCvB,EAAU,MACVC,EAAK,QACLuB,IAMA,MAAMtB,GAAUC,EAAAA,EAAAA,YAAWF,GACrBwB,EAAgB,IAAIC,EAAAA,cAAcF,GAClCG,EAAe1B,EAAMe,MAAMY,iBAAiB,IAAID,aACtD,OACEvB,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,SAAC,uBACZC,EAAAA,EAAAA,KAAA,MAAAD,SACGL,EAAWQ,KAAIC,IACdL,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CACG,GAAGmB,EAAQK,WAAWL,EAAQM,YAAYrB,IAAa,KACxDH,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACNb,EAAQ6B,aAAYC,GAAe,CACjCpC,EACA,CACEoC,cACA9B,UACAsB,QAASC,EACTQ,aAAc,GAAGhC,EAAMiC,MAAMP,mCAC7BX,KAAMf,EAAMe,KACZW,oBAGJtB,SACH,iBAEO,KACRC,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACNb,EAAQ6B,aAAYC,GAAe,CACjClC,EACA,CACEkC,cACA9B,UACAsB,QAASC,EACTQ,aAAc,GAAGhC,EAAMiC,MAAMP,oCAC7BX,KAAMf,EAAMe,KACZW,oBAGJtB,SACH,mBArCM8B,KAAKC,UAAU3B,UA6ClC,CAEe,SAAS4B,EAAoBC,GAK1C,MAAM,MAAErC,EAAK,WAAED,EAAU,QAAEwB,GAAYc,EACjCpC,GAAUC,EAAAA,EAAAA,YAAWF,IACrB,cAAEsC,IAAkBC,EAAAA,EAAAA,QAAOtC,GACjC,IAAIuC,GAAyB,EAE7B,IACEA,IAA2BF,EAAcG,YAAY,sBACvD,CAAE,MAAOvB,GACP,CAGF,OACEf,EAAAA,EAAAA,MAACuC,EAAAA,QAAQ,IAAKL,EAAOM,MAAM,YAAWvC,SAAA,EACpCC,EAAAA,EAAAA,KAACP,EAAa,CAACE,MAAOA,EAAOD,WAAYA,IACxCyC,GACCnC,EAAAA,EAAAA,KAACiB,EAA8B,CAC7BtB,MAAOA,EACPD,WAAYA,EACZwB,QAASA,IAET,OAGV,C","sources":["../../../plugins/variants/src/VariantFeatureWidget/LaunchBreakendPanel/LaunchBreakendPanel.tsx"],"sourcesContent":["import { lazy } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { SimpleFeature, getEnv, getSession } from '@jbrowse/core/util'\nimport { Link, Typography } from '@mui/material'\n\nimport type { VariantFeatureWidgetModel } from '../stateModelFactory'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst BreakendMultiLevelOptionDialog = lazy(\n  () => import('./BreakendMultiLevelOptionDialog'),\n)\nconst BreakendSingleLevelOptionDialog = lazy(\n  () => import('./BreakendSingleLevelOptionDialog'),\n)\n\nfunction LocStringList({\n  locStrings,\n  model,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n}) {\n  const session = getSession(model)\n  return (\n    <div>\n      <Typography>Navigate to breakend endpoint in linear view:</Typography>\n      <ul>\n        {locStrings.map((locString, index) => (\n          /* biome-ignore lint/suspicious/noArrayIndexKey: */\n          <li key={`${locString}-${index}`}>\n            {locString}{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                const { view } = model\n                try {\n                  if (view) {\n                    view.navToLocString?.(locString)\n                  } else {\n                    throw new Error(\n                      'No view associated with this feature detail panel anymore',\n                    )\n                  }\n                } catch (e) {\n                  console.error(e)\n                  session.notify(`${e}`)\n                }\n              }}\n            >\n              (LGV)\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nfunction LaunchBreakpointSplitViewPanel({\n  locStrings,\n  model,\n  feature,\n}: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const session = getSession(model)\n  const simpleFeature = new SimpleFeature(feature)\n  const assemblyName = model.view?.displayedRegions[0]?.assemblyName\n  return (\n    <div>\n      <Typography>Launch split view</Typography>\n      <ul>\n        {locStrings.map(locString => (\n          <li key={JSON.stringify(locString)}>\n            {`${feature.refName}:${feature.start} // ${locString}`}{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                session.queueDialog(handleClose => [\n                  BreakendMultiLevelOptionDialog,\n                  {\n                    handleClose,\n                    session,\n                    feature: simpleFeature,\n                    stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_multilevel`,\n                    view: model.view,\n                    assemblyName,\n                  },\n                ])\n              }}\n            >\n              (top/bottom)\n            </Link>{' '}\n            <Link\n              href=\"#\"\n              onClick={event => {\n                event.preventDefault()\n                session.queueDialog(handleClose => [\n                  BreakendSingleLevelOptionDialog,\n                  {\n                    handleClose,\n                    session,\n                    feature: simpleFeature,\n                    stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_singlelevel`,\n                    view: model.view,\n                    assemblyName,\n                  },\n                ])\n              }}\n            >\n              (single row)\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nexport default function LaunchBreakendPanel(props: {\n  locStrings: string[]\n  model: VariantFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { model, locStrings, feature } = props\n  const session = getSession(model)\n  const { pluginManager } = getEnv(session)\n  let hasBreakpointSplitView = false\n\n  try {\n    hasBreakpointSplitView = !!pluginManager.getViewType('BreakpointSplitView')\n  } catch (e) {\n    // ignore\n  }\n\n  return (\n    <BaseCard {...props} title=\"Breakends\">\n      <LocStringList model={model} locStrings={locStrings} />\n      {hasBreakpointSplitView ? (\n        <LaunchBreakpointSplitViewPanel\n          model={model}\n          locStrings={locStrings}\n          feature={feature}\n        />\n      ) : null}\n    </BaseCard>\n  )\n}\n"],"names":["BreakendMultiLevelOptionDialog","lazy","BreakendSingleLevelOptionDialog","LocStringList","locStrings","model","session","getSession","_jsxs","children","_jsx","Typography","map","locString","index","Link","href","onClick","event","preventDefault","view","Error","navToLocString","e","console","error","notify","LaunchBreakpointSplitViewPanel","feature","simpleFeature","SimpleFeature","assemblyName","displayedRegions","refName","start","queueDialog","handleClose","stableViewId","id","JSON","stringify","LaunchBreakendPanel","props","pluginManager","getEnv","hasBreakpointSplitView","getViewType","BaseCard","title"],"sourceRoot":""}