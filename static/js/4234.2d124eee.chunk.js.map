{"version":3,"file":"static/js/4234.2d124eee.chunk.js","mappings":"6NAgBe,MAAMA,UAAsBC,EAAAA,uBAMzC,oBAA6B,CAC3B,gBACA,gBACA,kBAGF,cAAcC,CAASC,GACrB,MAAM,eAAEC,EAAiBA,QAAaD,GAAQ,CAAC,EACzCE,EAAgBC,KAAKD,cACrBE,EAAS,IAAIC,EAAAA,EAAO,CACxBC,YAAYC,EAAAA,EAAAA,cAAaJ,KAAKK,QAAQ,kBAAmBN,KAE3D,MAAO,CACLE,SACAK,aAAcC,EAAAA,EAAAA,cACZ,4BACAT,EACA,IAAMG,EAAOO,UAAUX,IAG7B,CAEA,WAAMY,CAAMZ,GAOV,OANKG,KAAKU,SACRV,KAAKU,OAASV,KAAKJ,SAASC,GAAMc,MAAOC,IAEvC,MADAZ,KAAKU,YAASG,EACRD,KAGHZ,KAAKU,MACd,CAEA,iBAAaI,CAAYjB,GACvB,MAAM,OAAES,SAAiBN,KAAKS,MAAMZ,GACpC,OAAOkB,OAAOC,KAAKV,EAAOW,WAC5B,CAEA,iBAAaC,CAAYC,GACvB,MAAM,OAAEb,SAAiBN,KAAKS,QAC9B,OAAOH,EAAOc,aAAaD,IAAQE,IACrC,CAEA,oBAAaC,CAAezB,GAC1B,MAAM,OAAES,SAAiBN,KAAKS,MAAMZ,GACpC,OAAO0B,EAAAA,EAAAA,IAAajB,EAAOkB,aAC7B,CAEOC,WAAAA,CAAYC,EAAgB7B,EAAsB,CAAC,GACxD,MAAM,QAAE8B,EAAO,MAAEC,EAAK,IAAEC,GAAQH,GAC1B,QACJI,EAAU,EAAC,WACXC,EAAa,EAAC,UACdC,EAAS,eACTlC,EAAiBA,QACfD,EACJ,OAAOoC,EAAAA,EAAAA,kBAA0BC,UAC/B,MAAMC,EAASnC,KAAKK,QAAQ,UACtB+B,EAAuBpC,KAAKK,QAAQ,yBACpC,OAAEJ,SAAiBD,KAAKS,MAAMZ,GAC9BwC,QAAc9B,EAAAA,EAAAA,cAClB,0BACAT,EACA,IACEG,EAAOwB,YAAYE,EAASC,EAAOC,EAAK,IACnChC,EACHyC,aAAeR,EAAUC,EAAcK,KAI7C,IAAK,MAAMG,KAAQF,EAAO,CACpBF,IAEFI,EAAKJ,OAASA,GAEhB,MAAMK,EAAW,GAAGL,KAAUT,EAAOC,WAAWY,EAAKX,SAASW,EAAKV,MAEnEU,EAAKZ,QAAUA,EACfY,EAAKC,SAAWA,EAChBC,EAASC,KAAK,CAEZC,IAAMC,GAAiBL,EAAiCK,GACxDC,GAAIA,IAAML,EAEVM,OAAQA,IAAMP,GAElB,CACAE,EAASM,YACRf,EACL,CAGA,uCAAMgB,CAAkCC,GACtC,MAAO,CACLC,eAAgB,EAEpB,E","sources":["../../../plugins/wiggle/src/BigWigAdapter/BigWigAdapter.ts"],"sourcesContent":["import { BigWig } from '@gmod/bbi'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { updateStatus } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { rectifyStats } from '@jbrowse/core/util/stats'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature } from '@jbrowse/core/util'\nimport type { UnrectifiedQuantitativeStats } from '@jbrowse/core/util/stats'\nimport type { AugmentedRegion as Region } from '@jbrowse/core/util/types'\n\ninterface WiggleOptions extends BaseOptions {\n  resolution?: number\n}\n\nexport default class BigWigAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<{\n    bigwig: BigWig\n    header: Awaited<ReturnType<BigWig['getHeader']>>\n  }>\n\n  public static capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n  ]\n\n  private async setupPre(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    const pluginManager = this.pluginManager\n    const bigwig = new BigWig({\n      filehandle: openLocation(this.getConf('bigWigLocation'), pluginManager),\n    })\n    return {\n      bigwig,\n      header: await updateStatus(\n        'Downloading bigwig header',\n        statusCallback,\n        () => bigwig.getHeader(opts),\n      ),\n    }\n  }\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.setup(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  public async refIdToName(refId: number) {\n    const { header } = await this.setup()\n    return header.refsByNumber[refId]?.name\n  }\n\n  public async getGlobalStats(opts?: BaseOptions) {\n    const { header } = await this.setup(opts)\n    return rectifyStats(header.totalSummary as UnrectifiedQuantitativeStats)\n  }\n\n  public getFeatures(region: Region, opts: WiggleOptions = {}) {\n    const { refName, start, end } = region\n    const {\n      bpPerPx = 0,\n      resolution = 1,\n      stopToken,\n      statusCallback = () => {},\n    } = opts\n    return ObservableCreate<Feature>(async observer => {\n      const source = this.getConf('source')\n      const resolutionMultiplier = this.getConf('resolutionMultiplier')\n      const { bigwig } = await this.setup(opts)\n      const feats = await updateStatus(\n        'Downloading bigwig data',\n        statusCallback,\n        () =>\n          bigwig.getFeatures(refName, start, end, {\n            ...opts,\n            basesPerSpan: (bpPerPx / resolution) * resolutionMultiplier,\n          }),\n      )\n\n      for (const data of feats) {\n        if (source) {\n          // @ts-expect-error\n          data.source = source\n        }\n        const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`\n        // @ts-expect-error\n        data.refName = refName\n        data.uniqueId = uniqueId\n        observer.next({\n          // @ts-expect-error\n          get: (str: string) => (data as Record<string, unknown>)[str],\n          id: () => uniqueId,\n          // @ts-expect-error\n          toJSON: () => data,\n        })\n      }\n      observer.complete()\n    }, stopToken)\n  }\n\n  // always render bigwig instead of calculating a feature density for it\n  async getMultiRegionFeatureDensityStats(_regions: Region[]) {\n    return {\n      featureDensity: 0,\n    }\n  }\n}\n"],"names":["BigWigAdapter","BaseFeatureDataAdapter","setupPre","opts","statusCallback","pluginManager","this","bigwig","BigWig","filehandle","openLocation","getConf","header","updateStatus","getHeader","setup","setupP","catch","e","undefined","getRefNames","Object","keys","refsByName","refIdToName","refId","refsByNumber","name","getGlobalStats","rectifyStats","totalSummary","getFeatures","region","refName","start","end","bpPerPx","resolution","stopToken","ObservableCreate","async","source","resolutionMultiplier","feats","basesPerSpan","data","uniqueId","observer","next","get","str","id","toJSON","complete","getMultiRegionFeatureDensityStats","_regions","featureDensity"],"sourceRoot":""}