{"version":3,"file":"static/js/725.335a012a.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/Radio/radioClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../../../plugins/wiggle/src/LinearWiggleDisplay/components/SetColorDialog.tsx","../../../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/esm/Radio/Radio.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport { ColorPicker } from '@jbrowse/core/ui/ColorPicker'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  Radio,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst SetColorDialog = observer(function SetColorDialog({\n  model,\n  handleClose,\n}: {\n  model: {\n    color?: string\n    posColor?: string\n    negColor?: string\n    setColor: (arg?: string) => void\n    setPosColor: (arg?: string) => void\n    setNegColor: (arg?: string) => void\n  }\n  handleClose: () => void\n}) {\n  const [posneg, setPosNeg] = useState(false)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Set color\">\n      <DialogContent>\n        <Typography>\n          Select either an overall color, or the positive/negative colors. Note\n          that density renderers only work properly with positive/negative\n          colors\n        </Typography>\n        <FormControlLabel\n          checked={!posneg}\n          onClick={() => {\n            setPosNeg(false)\n          }}\n          control={<Radio />}\n          label=\"Overall color\"\n        />\n        <FormControlLabel\n          checked={posneg}\n          onClick={() => {\n            setPosNeg(true)\n          }}\n          control={<Radio />}\n          label=\"Positive/negative color\"\n        />\n\n        {posneg ? (\n          <>\n            <Typography>Positive color</Typography>\n            <ColorPicker\n              color={model.posColor || 'black'}\n              onChange={event => {\n                model.setPosColor(event)\n                model.setColor(undefined)\n              }}\n            />\n            <Typography>Negative color</Typography>\n\n            <ColorPicker\n              color={model.negColor || 'black'}\n              onChange={event => {\n                model.setNegColor(event)\n                model.setColor(undefined)\n              }}\n            />\n          </>\n        ) : (\n          <>\n            <Typography>Overall color</Typography>\n            <ColorPicker\n              color={model.color || 'black'}\n              onChange={event => {\n                model.setColor(event)\n              }}\n            />\n          </>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            model.setPosColor(undefined)\n            model.setNegColor(undefined)\n            model.setColor(undefined)\n          }}\n          color=\"secondary\"\n          variant=\"contained\"\n        >\n          Restore default\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default SetColorDialog\n","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  name: 'MuiRadioButtonIcon',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;"],"names":["getRadioUtilityClass","slot","undefined","observer","model","handleClose","posneg","setPosNeg","useState","_jsxs","Dialog","open","onClose","title","children","DialogContent","_jsx","Typography","FormControlLabel","checked","onClick","control","Radio","label","_Fragment","ColorPicker","color","posColor","onChange","event","setPosColor","setColor","negColor","setNegColor","DialogActions","Button","variant","type","useRadioGroup","createSvgIcon","d","RadioButtonIconRoot","styled","name","shouldForwardProp","rootShouldForwardProp","position","display","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","theme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","props","style","easeOut","classes","fontSize","ownerState","className","root","background","dot","RadioRoot","SwitchBase","prop","overridesResolver","styles","size","capitalize","vars","palette","text","secondary","radioClasses","disabled","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","Object","entries","filter","createSimplePaletteValueFilter","map","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChangeProp","disabledProp","slots","slotProps","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","createChainedFunction","a","b","value","String","externalInputProps","input","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","args","additionalProps"],"sourceRoot":""}