{"version":3,"file":"static/js/2367.8a35ffb2.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/shared/drawAlleleCount.ts","../../../plugins/variants/src/MultiLinearVariantMatrixRenderer/makeImageData.ts","../../../plugins/variants/src/shared/drawPhased.ts","../../../plugins/variants/src/shared/util.ts","../../../plugins/variants/src/shared/constants.ts"],"sourcesContent":["import { colord } from '@jbrowse/core/util/colord'\n\nimport { f2 } from './constants'\n\nfunction getColorAlleleCount(alleles: string[], mostFrequentAlt: string) {\n  const total = alleles.length\n  let alt = 0\n  let uncalled = 0\n  let alt2 = 0\n  let ref = 0\n  for (const allele of alleles) {\n    if (allele === mostFrequentAlt) {\n      alt++\n    } else if (allele === '0') {\n      ref++\n    } else if (allele === '.') {\n      uncalled++\n    } else {\n      alt2++\n    }\n  }\n\n  if (ref === total) {\n    return `#ccc`\n  } else {\n    let a1\n    if (alt) {\n      a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`)\n    }\n    if (alt2) {\n      const l = `hsla(0,100%,20%,${alt2 / total})`\n      // @ts-ignore\n      a1 = a1 ? a1.mix(l) : colord(l)\n    }\n    if (uncalled) {\n      const l = `hsl(50,50%,50%,${uncalled / total})`\n      // @ts-ignore\n      a1 = a1 ? a1.mix(l) : colord(l)\n    }\n    return a1?.toHex() || 'black'\n  }\n}\n\nexport function drawColorAlleleCount(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  mostFrequentAlt: string,\n) {\n  ctx.fillStyle = getColorAlleleCount(alleles, mostFrequentAlt)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","import { updateStatus } from '@jbrowse/core/util'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\n\nimport { f2 } from '../shared/constants'\nimport { drawColorAlleleCount } from '../shared/drawAlleleCount'\nimport { drawPhased } from '../shared/drawPhased'\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils'\n\nimport type { RenderArgsDeserializedWithFeaturesAndLayout } from './types'\n\ntype SampleGenotype = Record<string, string[]>\n\nexport async function makeImageData({\n  ctx,\n  canvasWidth,\n  canvasHeight,\n  renderArgs,\n}: {\n  ctx: CanvasRenderingContext2D\n  canvasWidth: number\n  canvasHeight: number\n  renderArgs: RenderArgsDeserializedWithFeaturesAndLayout\n}) {\n  const {\n    renderingMode: renderingMode,\n    minorAlleleFrequencyFilter,\n    sources,\n    features,\n    stopToken,\n  } = renderArgs\n\n  const { statusCallback = () => {} } = renderArgs\n  const h = canvasHeight / sources.length\n  checkStopToken(stopToken)\n  const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(\n    features.values(),\n    minorAlleleFrequencyFilter,\n  )\n  checkStopToken(stopToken)\n  const arr = [] as string[][]\n  const m = mafs.length\n  const w = canvasWidth / m\n\n  await updateStatus('Drawing variant matrix', statusCallback, () => {\n    let start = performance.now()\n    for (let i = 0; i < m; i++) {\n      if (performance.now() - start > 400) {\n        checkStopToken(stopToken)\n        start = performance.now()\n      }\n      const arr2 = [] as string[]\n      const { feature, mostFrequentAlt } = mafs[i]!\n      const hasPhaseSet = (\n        feature.get('FORMAT') as string | undefined\n      )?.includes('PS')\n      if (hasPhaseSet) {\n        const samp = feature.get('samples') as Record<string, SampleGenotype>\n        const x = (i / mafs.length) * canvasWidth\n        const sln = sources.length\n        for (let j = 0; j < sln; j++) {\n          const y = (j / sln) * canvasHeight\n          const { name, HP } = sources[j]!\n          const s = samp[name]\n          if (s) {\n            const genotype = s.GT?.[0]\n            if (genotype) {\n              arr2.push(genotype)\n              const isPhased = genotype.includes('|')\n              if (renderingMode === 'phased') {\n                if (isPhased) {\n                  const PS = s.PS?.[0]\n                  const alleles = genotype.split('|')\n                  drawPhased(alleles, ctx, x, y, w, h, HP!, PS)\n                } else {\n                  ctx.fillStyle = 'black'\n                  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n                }\n              } else {\n                const alleles = genotype.split(/[/|]/)\n                drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt)\n              }\n            }\n          }\n        }\n      } else {\n        const samp = feature.get('genotypes') as Record<string, string>\n        const x = (i / mafs.length) * canvasWidth\n        const sln = sources.length\n        for (let j = 0; j < sln; j++) {\n          const y = (j / sln) * canvasHeight\n          const { name, HP } = sources[j]!\n          const genotype = samp[name]\n          if (genotype) {\n            arr2.push(genotype)\n            const isPhased = genotype.includes('|')\n            if (renderingMode === 'phased') {\n              if (isPhased) {\n                const alleles = genotype.split('|')\n                drawPhased(alleles, ctx, x, y, w, h, HP!)\n              } else {\n                ctx.fillStyle = 'black'\n                ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n              }\n            } else {\n              const alleles = genotype.split(/[/|]/)\n              drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt)\n            }\n          }\n        }\n      }\n      arr.push(arr2)\n    }\n  })\n  return {\n    mafs,\n    arr,\n  }\n}\n","import { set1 } from '@jbrowse/core/ui/colors'\n\nimport { f2 } from './constants'\nimport { colorify } from './util'\n\nfunction getColorPhased(alleles: string[], HP: number) {\n  const c = +alleles[HP]!\n  return c ? set1[c - 1] || 'black' : '#ccc'\n}\n\nfunction getColorPhasedWithPhaseSet(alleles: string[], HP: number, PS: string) {\n  const c = +alleles[HP]!\n  return c ? colorify(+PS) || 'black' : '#ccc'\n}\n\nexport function drawPhased(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  HP: number,\n  PS?: string,\n) {\n  ctx.fillStyle =\n    PS !== undefined\n      ? getColorPhasedWithPhaseSet(alleles, HP, PS)\n      : getColorPhased(alleles, HP)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  color?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function randomColor(str: string) {\n  let sum = 0\n\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i)\n  }\n  return colorify(sum * 10)\n}\n\nexport function colorify(n: number) {\n  return `hsl(${n % 255}, 50%, 50%)`\n}\n","export const fudgeFactor = 0.6\nexport const f2 = fudgeFactor / 2\n"],"names":["drawColorAlleleCount","alleles","ctx","x","y","w","h","mostFrequentAlt","fillStyle","total","length","alt","uncalled","alt2","ref","allele","a1","colord","l","mix","toHex","getColorAlleleCount","fillRect","f2","async","makeImageData","canvasWidth","canvasHeight","renderArgs","renderingMode","minorAlleleFrequencyFilter","sources","features","stopToken","statusCallback","checkStopToken","mafs","getFeaturesThatPassMinorAlleleFrequencyFilter","values","arr","m","updateStatus","start","performance","now","i","arr2","feature","hasPhaseSet","get","includes","samp","sln","j","name","HP","s","genotype","GT","push","isPhased","PS","split","drawPhased","undefined","colorify","getColorPhasedWithPhaseSet","c","set1","getColorPhased","randomColor","str","sum","charCodeAt","n","fudgeFactor"],"sourceRoot":""}