{"version":3,"file":"static/js/4138.44f9ea81.chunk.js","mappings":"mRAoBA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAaC,IAAS,CACtCC,oBAAqB,CACnBC,MAAO,IACPC,OAAQH,EAAMI,QAAQ,OAIpBC,GAAgBC,EAAAA,EAAAA,UAAS,UAAuB,KACpDC,EAAI,QACJC,EAAO,gBACPC,IAMA,MAAQC,oBAAqBC,EAAY,IAAOH,EAC1CI,GAAOC,EAAAA,EAAAA,gBAAeN,EAAM,QAC5BO,GAAgBD,EAAAA,EAAAA,gBAAeN,EAAM,iBACrCQ,EAAQJ,EAAUK,KAAKC,GAAQL,IAASK,EAAKL,MACnD,OACEM,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAEfC,SACEF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CACPC,UAAWP,EACXQ,SAAUA,KACJR,EACFN,EAAgBF,GAEhBC,EAAQgB,iBAAiBjB,IAG7BkB,MAAM,YAGVC,MAAO,CACLd,EACAE,EAAca,OAAS,IA1CbC,EA0C0Bd,EAAce,KAAK,KAzCtDD,EAAKD,OAAS,GAAK,GAAGC,EAAKE,MAAM,EAAG,SAAWF,KAyCkB,IAEjEG,OAAOC,KAAOA,GACdH,KAAK,MAnBHtB,EAAK0B,cA1BhB,IAAkBL,CAgDlB,GAEMM,GAAiB5B,EAAAA,EAAAA,UAAS,UAAyB,QACvDE,EAAO,gBACPC,IAKA,MAAM,QAAE0B,GAAYrC,IACpB,OACEoB,EAAAA,EAAAA,KAAA,OAAKkB,UAAWD,EAAQlC,oBAAoBoC,SACxC7B,EAAQ8B,YAAYX,OAGpBnB,EAAQ8B,YAAYC,IAAI,CAAChC,EAAMiC,KAC7BtB,EAAAA,EAAAA,KAAA,OAAAmB,UACEnB,EAAAA,EAAAA,KAACb,EAAa,CACZE,KAAMA,EACNC,QAASA,EACTC,gBAAiBA,KAJX,GAAGF,EAAKK,QAAQ4B,OAH5BtB,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAAAJ,SAAC,0BAcpB,GAqCA,GAnC+B/B,EAAAA,EAAAA,UAAS,UAAU,QAChDE,EAAO,YACPkC,EAAW,gBACXjC,IAMA,OACEkC,EAAAA,EAAAA,MAACC,EAAAA,OAAM,CACLC,MAAI,EACJC,QAASJ,EACTK,SAAS,KACTC,MAAM,0BAAyBX,SAAA,EAE/BM,EAAAA,EAAAA,MAACM,EAAAA,EAAa,CAAAZ,SAAA,EACZnB,EAAAA,EAAAA,KAACuB,EAAAA,EAAU,CAAAJ,SAAC,iDACZnB,EAAAA,EAAAA,KAACgB,EAAc,CAAC1B,QAASA,EAASC,gBAAiBA,QAErDS,EAAAA,EAAAA,KAACgC,EAAAA,EAAa,CAAAb,UACZnB,EAAAA,EAAAA,KAACiC,EAAAA,EAAM,CACLC,QAASA,KACPV,KAEFW,QAAQ,YACR5B,MAAM,UAASY,SAChB,cAMT,E","sources":["../../../plugins/data-management/src/HierarchicalTrackSelectorWidget/components/dialogs/ToggleConnectionsDialog.tsx"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration'\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  Checkbox,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\n\nfunction ellipses(slug: string) {\n  return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug\n}\n\nconst useStyles = makeStyles()(theme => ({\n  connectionContainer: {\n    width: 500,\n    margin: theme.spacing(4),\n  },\n}))\n\nconst ConnectionRow = observer(function ConnectionRow({\n  conf,\n  session,\n  breakConnection,\n}: {\n  conf: AnyConfigurationModel\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  const { connectionInstances: instances = [] } = session\n  const name = readConfObject(conf, 'name')\n  const assemblyNames = readConfObject(conf, 'assemblyNames')\n  const found = instances.find(conn => name === conn.name)\n  return (\n    <FormControlLabel\n      key={conf.connectionId}\n      control={\n        <Checkbox\n          checked={!!found}\n          onChange={() => {\n            if (found) {\n              breakConnection(conf)\n            } else {\n              session.makeConnection?.(conf)\n            }\n          }}\n          color=\"primary\"\n        />\n      }\n      label={[\n        name,\n        assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',\n      ]\n        .filter(f => !!f)\n        .join(' ')}\n    />\n  )\n})\n\nconst ConnectionList = observer(function ConnectionsList({\n  session,\n  breakConnection,\n}: {\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  const { classes } = useStyles()\n  return (\n    <div className={classes.connectionContainer}>\n      {!session.connections.length ? (\n        <Typography>No connections found</Typography>\n      ) : (\n        session.connections.map((conf, idx) => (\n          <div key={`${conf.name}_${idx}`}>\n            <ConnectionRow\n              conf={conf}\n              session={session}\n              breakConnection={breakConnection}\n            />\n          </div>\n        ))\n      )}\n    </div>\n  )\n})\n\nconst ToggleConnectionDialog = observer(function ({\n  session,\n  handleClose,\n  breakConnection,\n}: {\n  handleClose: () => void\n  session: AbstractSessionModel\n  breakConnection: (arg: AnyConfigurationModel) => void\n}) {\n  return (\n    <Dialog\n      open\n      onClose={handleClose}\n      maxWidth=\"lg\"\n      title=\"Turn on/off connections\"\n    >\n      <DialogContent>\n        <Typography>Use the checkbox to turn on/off connections</Typography>\n        <ConnectionList session={session} breakConnection={breakConnection} />\n      </DialogContent>\n      <DialogActions>\n        <Button\n          onClick={() => {\n            handleClose()\n          }}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n})\n\nexport default ToggleConnectionDialog\n"],"names":["useStyles","makeStyles","theme","connectionContainer","width","margin","spacing","ConnectionRow","observer","conf","session","breakConnection","connectionInstances","instances","name","readConfObject","assemblyNames","found","find","conn","_jsx","FormControlLabel","control","Checkbox","checked","onChange","makeConnection","color","label","length","slug","join","slice","filter","f","connectionId","ConnectionList","classes","className","children","connections","map","idx","Typography","handleClose","_jsxs","Dialog","open","onClose","maxWidth","title","DialogContent","DialogActions","Button","onClick","variant"],"sourceRoot":""}