{"version":3,"file":"static/js/4006.23a42d37.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Position.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/CoreDetails.tsx","../../../plugins/variants/src/VariantFeatureWidget/AltFormatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Formatter.tsx","../../../plugins/variants/src/VariantFeatureWidget/Checkbox2.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantGenotypeFrequencyTable.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleFilters.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/VariantSampleGrid.tsx","../../../plugins/variants/src/VariantFeatureWidget/VariantSampleGrid/getSampleGridRows.ts","../../../plugins/variants/src/VariantFeatureWidget/variantFieldDescriptions.ts","../../../plugins/variants/src/VariantFeatureWidget/VariantFeatureWidget.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeaturePanel.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx"],"sourcesContent":["import { assembleLocString } from '../../util'\n\nimport type { BaseProps } from '../types'\n\nexport default function Position(props: BaseProps) {\n  const { feature } = props\n  const strand = feature.strand as number\n  const strandMap: Record<string, string> = {\n    '-1': '-',\n    '0': '',\n    '1': '+',\n  }\n  const str = strandMap[strand] ? `(${strandMap[strand]})` : ''\n  const loc = assembleLocString(feature)\n  return <>{`${loc} ${str}`}</>\n}\n","import Position from './Position'\nimport SimpleField from './SimpleField'\nimport { toLocale } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseProps } from '../types'\n\nexport default function CoreDetails(props: BaseProps) {\n  const { feature } = props\n  const obj = feature as SimpleFeatureSerialized & {\n    start: number\n    end: number\n    assemblyName?: string\n    strand: number\n    refName: string\n    __jbrowsefmt: {\n      start?: number\n      assemblyName?: string\n      end?: number\n      refName?: string\n      name?: string\n    }\n  }\n\n  const formattedFeat = { ...obj, ...obj.__jbrowsefmt }\n  const { start, end } = formattedFeat\n\n  const displayedDetails: Record<string, any> = {\n    ...formattedFeat,\n    length: toLocale(end - start),\n  }\n\n  const coreRenderedDetails = {\n    description: 'Description',\n    name: 'Name',\n    length: 'Length',\n    type: 'Type',\n  }\n  return (\n    <>\n      <SimpleField\n        name=\"Position\"\n        value={<Position {...props} feature={formattedFeat} />}\n      />\n      {Object.entries(coreRenderedDetails)\n        .map(([key, name]) => [name, displayedDetails[key]])\n        .filter(([, value]) => value != null)\n        .map(([name, value]) => (\n          <SimpleField key={name} name={name} value={value} />\n        ))}\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport { getMinimalDesc } from '../VcfFeature/util'\n\nexport default function AltFormatter({\n  value,\n  ref,\n}: {\n  value: string\n  ref: string\n}) {\n  const [show, setShow] = useState(false)\n  const alt = getMinimalDesc(ref, value)\n  return alt !== value ? (\n    <div>\n      <button\n        onClick={() => {\n          setShow(!show)\n        }}\n      >\n        {show ? 'Show simplified ALT' : 'Show raw ALT'}\n      </button>{' '}\n      {show ? value : getMinimalDesc(ref, value)}\n    </div>\n  ) : (\n    value\n  )\n}\n","import { useState } from 'react'\n\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' for long strings\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import { Checkbox, FormControlLabel, Typography } from '@mui/material'\n\nexport default function Checkbox2({\n  checked,\n  disabled,\n  label,\n  onChange,\n}: {\n  checked: boolean\n  disabled?: boolean\n  label: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  return (\n    <FormControlLabel\n      disabled={disabled}\n      control={<Checkbox checked={checked} onChange={onChange} />}\n      label={<Typography variant=\"body2\">{label}</Typography>}\n    />\n  )\n}\n","import { useState } from 'react'\n\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport type { FrequencyTable, VariantSampleGridRow } from './types'\n\nfunction toP(n: number) {\n  return n.toPrecision(3)\n}\n\nexport default function VariantGenotypeFrequencyTable({\n  rows,\n}: {\n  rows: VariantSampleGridRow[]\n}) {\n  const [useCounts, setUseCounts] = useState(false)\n\n  const summary = {} as FrequencyTable\n  if (!useCounts) {\n    for (const row of rows) {\n      const gt = row.GT\n      if (!summary[gt]) {\n        summary[gt] = {\n          count: 0,\n          GT: row.GT,\n          genotype: row.genotype,\n        }\n      }\n      summary[gt].count++\n    }\n  } else {\n    for (const row of rows) {\n      const alleleCounts = {} as Record<string, number>\n      const alleles = row.GT.split(/[/|]/)\n      for (const allele of alleles) {\n        alleleCounts[allele] = (alleleCounts[allele] || 0) + 1\n      }\n      const key = Object.entries(alleleCounts)\n        .map(([key, val]) => `${key}:${val}`)\n        .join(';')\n\n      if (!summary[key]) {\n        summary[key] = {\n          count: 0,\n          GT: key,\n          genotype: row.genotype,\n        }\n      }\n      summary[key].count++\n    }\n  }\n  const gridRows = Object.entries(summary).map(([key, val]) => ({\n    id: key,\n    ...val,\n    count: `${val.count} / ${rows.length}`,\n    frequency: `${toP((val.count / rows.length) * 100)}%`,\n  }))\n\n  const keys = gridRows[0] ? Object.keys(gridRows[0]) : []\n  const widths = keys.map(e =>\n    measureGridWidth(gridRows.map(r => `${r[e as keyof typeof r]}`)),\n  )\n\n  return (\n    <div>\n      <FormControlLabel\n        control={<Checkbox checked={useCounts} />}\n        label={\n          <Typography variant=\"body2\">\n            Use allele counts instead of exact GT\n          </Typography>\n        }\n        onChange={(_, checked) => {\n          setUseCounts(checked)\n        }}\n      />\n      <DataGridFlexContainer>\n        <DataGrid\n          rows={gridRows}\n          hideFooter\n          rowHeight={25}\n          columnHeaderHeight={35}\n          columns={[\n            {\n              field: 'GT',\n              width: widths[0],\n            },\n            {\n              field: 'count',\n              width: widths[1],\n            },\n            {\n              field: 'frequency',\n              width: widths[2],\n            },\n            {\n              field: 'genotype',\n              width: widths[3],\n            },\n          ]}\n        />\n      </DataGridFlexContainer>\n    </div>\n  )\n}\n","import { TextField, Typography } from '@mui/material'\n\ntype Filters = Record<string, string>\n\nexport default function SampleFilters({\n  columns,\n  filter,\n  setFilter,\n}: {\n  columns: { field: string }[]\n  filter: Filters\n  setFilter: (arg: Filters) => void\n}) {\n  return (\n    <>\n      <Typography>\n        These filters can use a plain text search or regex style query, e.g. in\n        the genotype field, entering 1 will query for all genotypes that include\n        the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\d* will find\n        any non-zero allele e.g. 0|2 or 2/33\n      </Typography>\n      {columns.map(({ field }) => (\n        <TextField\n          key={`filter-${field}`}\n          placeholder={`Filter ${field}`}\n          value={filter[field] || ''}\n          onChange={event => {\n            setFilter({ ...filter, [field]: event.target.value })\n          }}\n        />\n      ))}\n    </>\n  )\n}\n","import { useState } from 'react'\n\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport DataGridFlexContainer from '@jbrowse/core/ui/DataGridFlexContainer'\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { measureGridWidth } from '@jbrowse/core/util'\nimport { ToggleButton, ToggleButtonGroup, Typography } from '@mui/material'\nimport { DataGrid } from '@mui/x-data-grid'\n\nimport Checkbox2 from '../Checkbox2'\nimport VariantGenotypeFrequencyTable from './VariantGenotypeFrequencyTable'\nimport SampleFilters from './VariantSampleFilters'\nimport { getSampleGridRows } from './getSampleGridRows'\n\nimport type { Filters, InfoFields, VariantFieldDescriptions } from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { GridColDef } from '@mui/x-data-grid'\n\n// Define a type for the column display mode\ntype ColumnDisplayMode = 'all' | 'gtOnly' | 'genotypeOnly'\n\nexport default function VariantSampleGrid(props: {\n  feature: SimpleFeatureSerialized\n  descriptions?: VariantFieldDescriptions | null\n}) {\n  const { feature, descriptions = {} } = props\n  const [filter, setFilter] = useState<Filters>({})\n  const [columnDisplayMode, setColumnDisplayMode] =\n    useState<ColumnDisplayMode>('all')\n  const [showFilters, setShowFilters] = useState(false)\n  const samples = (feature.samples || {}) as Record<string, InfoFields>\n  const ALT = feature.ALT as string[]\n  const REF = feature.REF as string\n\n  // Use the getSampleGridRows function to process the data\n  const { rows, error } = getSampleGridRows(samples, REF, ALT, filter)\n\n  const colKeySet = new Set(['sample', ...Object.keys(rows[0] || {})])\n  colKeySet.delete('id')\n  const keys = [...colKeySet]\n  const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])))\n  const columns = keys.map(\n    (field, index) =>\n      ({\n        field,\n        description: descriptions?.FORMAT?.[field]?.Description,\n        width: widths[index],\n      }) satisfies GridColDef<(typeof rows)[0]>,\n  )\n\n  const s1 = new Set(['sample', 'GT'])\n  const s2 = new Set(['sample', 'GT', 'genotype'])\n\n  return !rows.length ? null : (\n    <>\n      <BaseCard {...props} title=\"Genotype frequencies\">\n        <ErrorBoundary FallbackComponent={ErrorMessage}>\n          <VariantGenotypeFrequencyTable rows={rows} />\n        </ErrorBoundary>\n      </BaseCard>\n      <BaseCard {...props} title=\"Samples\">\n        {error ? <Typography color=\"error\">{`${error}`}</Typography> : null}\n        <div>\n          <Checkbox2\n            label=\"Show filters\"\n            checked={showFilters}\n            onChange={event => {\n              setShowFilters(event.target.checked)\n            }}\n          />\n          <ToggleButtonGroup\n            value={columnDisplayMode}\n            exclusive\n            size=\"small\"\n            onChange={(_, newValue) => {\n              if (newValue !== null) {\n                setColumnDisplayMode(newValue as ColumnDisplayMode)\n              }\n            }}\n          >\n            <ToggleButton value=\"all\">All</ToggleButton>\n            <ToggleButton value=\"gtOnly\">GT only</ToggleButton>\n            <ToggleButton value=\"genotypeOnly\">\n              GT+resolved genotype\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n\n        {showFilters ? (\n          <SampleFilters\n            setFilter={setFilter}\n            columns={columns}\n            filter={filter}\n          />\n        ) : null}\n\n        <DataGridFlexContainer>\n          <DataGrid\n            rows={rows}\n            hideFooter={rows.length < 100}\n            columns={\n              columnDisplayMode === 'gtOnly'\n                ? columns.filter(f => s1.has(f.field))\n                : columnDisplayMode === 'genotypeOnly'\n                  ? columns.filter(f => s2.has(f.field))\n                  : columns\n            }\n            rowHeight={25}\n            columnHeaderHeight={35}\n            showToolbar\n          />\n        </DataGridFlexContainer>\n      </BaseCard>\n    </>\n  )\n}\n","import { makeSimpleAltString } from '../../VcfFeature/util'\n\nimport type { Filters, InfoFields, VariantSampleGridRow } from './types'\n\nexport function getSampleGridRows(\n  samples: Record<string, InfoFields>,\n  REF: string,\n  ALT: string[],\n  filter: Filters,\n): {\n  rows: VariantSampleGridRow[]\n  error: unknown\n} {\n  const preFilteredRows = Object.entries(samples).map(([key, val]) => {\n    const gt = val.GT?.[0]\n    return [\n      key,\n      {\n        ...val,\n        ...(gt\n          ? {\n              GT: `${gt}`,\n              genotype: makeSimpleAltString(`${gt}`, REF, ALT),\n            }\n          : {}),\n      },\n    ] as const\n  })\n\n  let error: unknown\n  let rows = [] as VariantSampleGridRow[]\n  const filters = Object.keys(filter)\n\n  // catch some error thrown from regex\n  // note: maps all values into a string, if this is not done rows are not\n  // sortable by the data-grid\n  try {\n    rows = preFilteredRows\n      .map(([key, val]) => {\n        return {\n          ...Object.fromEntries(\n            Object.entries(val).map(([formatField, formatValue]) => [\n              formatField,\n              formatValue,\n            ]),\n          ),\n          sample: key,\n          id: key,\n        } as VariantSampleGridRow\n      })\n      .filter(row =>\n        filters.length\n          ? filters.every(key => {\n              const currFilter = filter[key]\n              return currFilter\n                ? new RegExp(currFilter, 'i').exec(row[key]!)\n                : true\n            })\n          : true,\n      )\n  } catch (e) {\n    console.error(e)\n    error = e\n  }\n\n  return { rows, error }\n}\n","export const variantFieldDescriptions = {\n  CHROM: 'chromosome: An identifier from the reference genome',\n  POS: 'position: The reference position, with the 1st base having position 1',\n  ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n  REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n  ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n  QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n  FILTER:\n    'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n}\n","import { Suspense, lazy } from 'react'\n\nimport { parseBreakend } from '@gmod/vcf'\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport AltFormatter from './AltFormatter'\nimport Formatter from './Formatter'\nimport VariantSampleGrid from './VariantSampleGrid/VariantSampleGrid'\nimport { variantFieldDescriptions } from './variantFieldDescriptions'\n\nimport type { VariantFeatureWidgetModel } from './stateModelFactory'\nimport type { Descriptions, ReducedFeature } from './types'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst LaunchBreakendPanel = lazy(\n  () => import('./LaunchBreakendPanel/LaunchBreakendPanel'),\n)\nconst VariantConsequenceDataGrid = lazy(\n  () => import('./VariantConsequence/VariantConsequenceDataGrid'),\n)\n\nfunction AnnPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const annDesc = descriptions?.INFO?.ANN?.Description\n  const annFields =\n    annDesc?.match(/.*Functional annotations:'(.*)'$/)?.[1]?.split('|') || []\n  const ann = feature.INFO?.ANN || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={annFields}\n      data={ann}\n      title=\"Variant ANN field\"\n    />\n  )\n}\n\nfunction CsqPanel({\n  descriptions,\n  feature,\n}: {\n  descriptions?: Descriptions\n  feature: SimpleFeatureSerialized & ReducedFeature\n}) {\n  const csqDescription = descriptions?.INFO?.CSQ?.Description\n  const csqFields =\n    csqDescription?.match(/.*Format: (.*)/)?.[1]?.split('|') || []\n  const csq = feature.INFO?.CSQ || []\n  return (\n    <VariantConsequenceDataGrid\n      fields={csqFields}\n      data={csq}\n      title=\"Variant CSQ field\"\n    />\n  )\n}\n\nfunction LaunchBreakendWidgetArea({\n  model,\n}: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { featureData } = model\n  const feat = JSON.parse(JSON.stringify(featureData))\n  const { type = '' } = feat\n\n  return type === 'breakend' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      locStrings={feat.ALT.map(\n        (alt: string) => parseBreakend(alt)?.MatePosition || '',\n      )}\n      model={model}\n    />\n  ) : type === 'translocation' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.INFO.CHR2[0]}:${feat.INFO.END}`]}\n    />\n  ) : type === 'paired_feature' ? (\n    <LaunchBreakendPanel\n      feature={feat}\n      model={model}\n      locStrings={[`${feat.mate.refName}:${feat.mate.start}`]}\n    />\n  ) : type.includes('inversion') ||\n    type.includes('deletion') ||\n    type.includes('duplication') ||\n    type.includes('cnv') ||\n    type.includes('sv') ? (\n    <LaunchBreakendPanel\n      feature={{\n        uniqueId: 'random',\n        refName: feat.refName,\n        start: feat.start,\n        end: feat.start + 1,\n        mate: {\n          refName: feat.refName,\n          start: feat.end,\n          end: feat.end + 1,\n        },\n      }}\n      model={model}\n      locStrings={[`${feat.refName}:${feat.end}`]}\n    />\n  ) : null\n}\n\nconst FeatDefined = observer(function (props: {\n  feat: SimpleFeatureSerialized\n  model: VariantFeatureWidgetModel\n}) {\n  const { feat, model } = props\n  const { descriptions } = model\n  const { samples, ...rest } = feat\n  const { REF } = rest\n\n  return (\n    <Paper data-testid=\"variant-side-drawer\">\n      <FeatureDetails\n        feature={rest}\n        descriptions={{\n          ...variantFieldDescriptions,\n          ...descriptions,\n        }}\n        formatter={(value, key) => {\n          return key === 'ALT' ? (\n            <AltFormatter value={`${value}`} ref={REF as string} />\n          ) : (\n            <Formatter value={value} />\n          )\n        }}\n        {...props}\n      />\n      <Suspense fallback={null}>\n        <CsqPanel feature={rest} descriptions={descriptions} />\n        <AnnPanel feature={rest} descriptions={descriptions} />\n        <LaunchBreakendWidgetArea model={model} />\n      </Suspense>\n      <VariantSampleGrid\n        feature={feat}\n        {...props}\n        descriptions={descriptions}\n      />\n    </Paper>\n  )\n})\n\nconst VariantFeatureWidget = observer(function (props: {\n  model: VariantFeatureWidgetModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = structuredClone(featureData)\n\n  return feat ? (\n    <FeatDefined feat={feat} {...props} />\n  ) : (\n    <div>\n      No feature loaded, may not be available after page refresh because it was\n      too large for localStorage\n    </div>\n  )\n})\n\nexport default VariantFeatureWidget\n","import { Suspense, lazy, useState } from 'react'\n\nimport Help from '@mui/icons-material/Help'\nimport { Button, FormControl, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport { LoadingEllipses } from '../../ui'\nimport { getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { BaseFeatureWidgetModel } from '../stateModelFactory'\n\n// lazies\nconst SequenceFeatureDetails = lazy(() => import('./SequenceFeatureDetails'))\nconst HelpDialog = lazy(() => import('./dialogs/HelpDialog'))\n\nconst useStyles = makeStyles()(theme => ({\n  formControl: {\n    margin: 0,\n  },\n\n  container: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n}))\n\n// display the stitched-together sequence of a gene's CDS, cDNA, or protein\n// sequence. this is a best effort and weird genomic phenomena could lead these\n// to not be 100% accurate\nconst SequenceFeaturePanel = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { classes } = useStyles()\n  const [shown, setShown] = useState(false)\n\n  return (\n    <div className={classes.container}>\n      <FormControl className={classes.formControl}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setShown(!shown)\n          }}\n        >\n          {shown ? 'Hide feature sequence' : 'Show feature sequence'}\n        </Button>\n      </FormControl>\n\n      <IconButton\n        onClick={() => {\n          getSession(model).queueDialog(handleClose => [\n            HelpDialog,\n            {\n              handleClose,\n            },\n          ])\n        }}\n      >\n        <Help />\n      </IconButton>\n      {shown ? (\n        <Suspense fallback={<LoadingEllipses />}>\n          <SequenceFeatureDetails\n            key={feature.uniqueId}\n            model={model}\n            feature={feature}\n          />\n        </Suspense>\n      ) : null}\n    </div>\n  )\n})\n\nexport default SequenceFeaturePanel\n","import { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { Divider, Typography } from '@mui/material'\n\nimport { generateTitle } from './util'\nimport SequenceFeatureDetails from '../SequenceFeatureDetails'\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\nimport { ErrorMessage } from '../../ui'\nimport { getEnv, getSession } from '../../util'\n\nimport type { SimpleFeatureSerialized } from '../../util'\nimport type { Descriptors } from '../types'\nimport type { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// coreDetails are omitted in some circumstances\nconst coreDetails = [\n  'name',\n  'start',\n  'end',\n  'strand',\n  'refName',\n  'description',\n  'type',\n]\n\ninterface PanelDescriptor {\n  name: string\n  Component: React.FC<any>\n}\n\nexport default function FeatureDetails(props: {\n  model: IAnyStateTreeNode\n  feature: SimpleFeatureSerialized\n  depth?: number\n  omit?: string[]\n  descriptions?: Descriptors\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}) {\n  const { omit = [], model, feature, depth = 0 } = props\n  const { maxDepth } = model\n  const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature\n  const pm = getEnv(model).pluginManager\n  const session = getSession(model)\n\n  const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {\n    session,\n    feature,\n    model,\n  }) as PanelDescriptor | undefined\n  const m = mate as { start: number; end: number; refName: string } | undefined\n  return (\n    <BaseCard title={generateTitle(name, id, type)}>\n      <Typography>Core details</Typography>\n      <CoreDetails {...props} />\n      {m ? (\n        <>\n          <Divider />\n          <Typography>Mate details</Typography>\n          <CoreDetails\n            {...props}\n            feature={{\n              ...m,\n              start: m.start,\n              end: m.end,\n              refName: m.refName,\n              uniqueId: `${uniqueId}-mate`,\n            }}\n          />\n        </>\n      ) : null}\n\n      <Divider />\n      <Typography>Attributes</Typography>\n      <Attributes\n        attributes={feature}\n        {...props}\n        omit={omit}\n        omitSingleLevel={coreDetails}\n      />\n\n      <ErrorBoundary FallbackComponent={e => <ErrorMessage error={e.error} />}>\n        <SequenceFeatureDetails {...props} />\n      </ErrorBoundary>\n\n      {ExtraPanel ? (\n        <>\n          <Divider />\n          <BaseCard title={ExtraPanel.name}>\n            <ExtraPanel.Component {...props} />\n          </BaseCard>\n        </>\n      ) : null}\n\n      {depth < maxDepth && subfeatures?.length ? (\n        <BaseCard title=\"Subfeatures\" defaultExpanded={depth < 1}>\n          {subfeatures.map((sub, idx) => (\n            <FeatureDetails\n              key={JSON.stringify(sub)}\n              feature={{\n                ...sub,\n                uniqueId: `${uniqueId}_${idx}`,\n              }}\n              model={model}\n              depth={depth + 1}\n            />\n          ))}\n        </BaseCard>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import ExpandMore from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n"],"names":["Position","props","$","_c","feature","strand","strandMap","str","t0","assembleLocString","t1","_jsx","_Fragment","children","CoreDetails","obj","formattedFeat","__jbrowsefmt","start","end","displayedDetails","length","toLocale","coreRenderedDetails","description","name","type","_jsxs","SimpleField","value","Object","entries","map","key","filter","_temp","_temp2","name_0","value_0","AltFormatter","ref","show","setShow","useState","getMinimalDesc","onClick","Formatter","copied","setCopied","display","String","copy","setTimeout","slice","val","Checkbox2","checked","disabled","label","onChange","t2","t3","Checkbox","Typography","variant","FormControlLabel","control","VariantGenotypeFrequencyTable","rows","useCounts","setUseCounts","summary","row_0","alleleCounts","alleles","row","GT","split","allele","key_0","join","count","genotype","gt","key_1","val_0","id","frequency","n","toPrecision","gridRows","keys","t4","e","measureGridWidth","r","widths","t5","t6","t7","t8","t9","t10","t11","t12","t13","t14","t15","Symbol","for","_","field","width","DataGridFlexContainer","DataGrid","hideFooter","rowHeight","columnHeaderHeight","columns","SampleFilters","setFilter","TextField","placeholder","event","target","VariantSampleGrid","descriptions","undefined","columnDisplayMode","setColumnDisplayMode","showFilters","setShowFilters","samples","ALT","REF","error","preFilteredRows","makeSimpleAltString","filters","fromEntries","formatField","formatValue","sample","every","currFilter","RegExp","exec","console","getSampleGridRows","colKeySet","Set","delete","index","FORMAT","Description","s1","s2","BaseCard","title","ErrorBoundary","ErrorMessage","color","ToggleButtonGroup","exclusive","size","newValue","ToggleButton","f","has","f_0","showToolbar","variantFieldDescriptions","CHROM","POS","ID","QUAL","FILTER","LaunchBreakendPanel","lazy","VariantConsequenceDataGrid","AnnPanel","annDesc","INFO","ANN","match","annFields","ann","CsqPanel","csqDescription","CSQ","csqFields","csq","LaunchBreakendWidgetArea","model","featureData","feat","JSON","parse","stringify","locStrings","CHR2","END","mate","refName","includes","uniqueId","alt","parseBreakend","MatePosition","FeatDefined","observer","rest","Paper","FeatureDetails","formatter","Suspense","fallback","structuredClone","SequenceFeatureDetails","HelpDialog","useStyles","makeStyles","theme","formControl","margin","container","marginTop","spacing","marginBottom","classes","shown","setShown","className","FormControl","Button","IconButton","getSession","queueDialog","handleClose","Help","LoadingEllipses","coreDetails","omit","depth","maxDepth","subfeatures","pm","getEnv","pluginManager","session","evaluateExtensionPoint","ExtraPanel","m","t16","t17","generateTitle","Divider","Attributes","FallbackComponent","Component","defaultExpanded","sub","idx","expansionPanelDetails","padding","icon","palette","tertiary","contrastText","ExpandMore","AccordionSummary","expandIcon","AccordionDetails","Accordion"],"sourceRoot":""}