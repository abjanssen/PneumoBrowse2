{"version":3,"file":"static/js/8408.e6f0b677.chunk.js","mappings":"sMAWA,MAAMA,GAAQC,EAAAA,EAAAA,WAAS,UAAU,MAC/BC,IAIA,MAAMC,GAAOC,EAAAA,EAAAA,mBAAkBF,GACzBG,EAAQC,KAAKC,MAAMJ,EAAKK,cAAcC,cACtCC,EAASR,EAAMQ,OAGfC,GAAKC,EAAAA,EAAAA,cACRC,IACCX,EAAMY,OAAOD,EAAI,GAGnB,CAACX,EAAOG,EAAOK,IAIjB,OACEK,EAAAA,cAAA,UACE,cAAY,eACZF,IAAKF,EACLK,MAAO,CAAEX,QAAOK,SAAQO,SAAU,YAClCZ,MAAe,EAARA,EACPK,OAAiB,EAATA,GAGd,IAaA,GAXsCT,EAAAA,EAAAA,WAAS,UAAU,MACvDC,IAIA,OACEa,EAAAA,cAACG,EAAAA,EAAoB,CAAChB,MAAOA,GAC3Ba,EAAAA,cAACf,EAAK,CAACE,MAAOA,IAGpB,G,6HCpCA,MAAMiB,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,QAAS,CACPC,gBAAiBF,EAAMG,QAAQC,WAAWC,QAC1CC,gBAAiB,kEAAkEN,EAAMG,QAAQI,OAAOC,2BAA2BR,EAAMG,QAAQI,OAAOC,2BACxJZ,SAAU,WACVa,OAAQ,EACRpB,OAAQ,GACRL,MAAO,IACP0B,MAAO,EACPC,cAAe,OACfC,UAAW,cAITf,GAAuBjB,EAAAA,EAAAA,WAAS,UAAU,MAC9CC,EAAK,SACLgC,IAKA,MAAM,MAAEC,EAAK,eAAEC,GAAmBlC,EAClC,OAAOiC,EACLpB,EAAAA,cAACsB,EAAAA,GAAQ,CACPC,QAAS,GAAGH,IACZI,SAAS,QACTX,OACEb,EAAAA,cAACyB,EAAAA,EAAO,CAACC,MAAM,UACb1B,EAAAA,cAAC2B,EAAAA,EAAM,CACL,cAAY,gBACZC,QAASA,KACPzC,EAAM0C,QAAQ,GAEjB,aAMLR,EACFlC,EAAM2C,yBAEN9B,EAAAA,cAAC+B,EAAW,CAAC5C,MAAOA,GAAQgC,EAEhC,IAEMY,GAAc7C,EAAAA,EAAAA,WAAS,UAAU,MACrCC,EAAK,SACLgC,IAKA,MAAM,MAAEa,EAAK,QAAEzB,GAAYpB,EACrBC,GAAOC,EAAAA,EAAAA,mBAAkBF,GACzB8C,GAAQ9C,EAAM+C,mBAAqB,GAAK9C,EAAK+C,SACnD,OAGEnC,EAAAA,cAAA,OAAK,cAAa,SAASgC,KACzBhC,EAAAA,cAAA,OAAKC,MAAO,CAAEC,SAAU,WAAY+B,SAASd,GACnC,IAATc,GAAc1B,EAAUP,EAAAA,cAACoC,EAAU,CAACjD,MAAOA,IAAY,KAG9D,IAEMiD,GAAalD,EAAAA,EAAAA,WAAS,UAAU,MACpCC,IAIA,MAAM,QAAEkD,GAAYjC,KACd,QAAEmB,GAAYpC,EACpB,OACEa,EAAAA,cAAA,OAAKsC,UAAWD,EAAQ9B,SACtBP,EAAAA,cAACuC,EAAAA,gBAAe,CAAChB,QAASA,IAGhC,IAEA,G","sources":["../../../plugins/alignments/src/LinearReadCloudDisplay/components/ReactComponent.tsx","../../../plugins/alignments/src/shared/components/BaseDisplayComponent.tsx"],"sourcesContent":["import React, { useCallback } from 'react'\nimport { observer } from 'mobx-react'\nimport { getContainingView } from '@jbrowse/core/util'\nimport { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\n// local\nimport { LinearReadCloudDisplayModel } from '../model'\nimport BaseDisplayComponent from '../../shared/components/BaseDisplayComponent'\n\ntype LGV = LinearGenomeViewModel\n\nconst Cloud = observer(function ({\n  model,\n}: {\n  model: LinearReadCloudDisplayModel\n}) {\n  const view = getContainingView(model) as LGV\n  const width = Math.round(view.dynamicBlocks.totalWidthPx)\n  const height = model.height\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies:\n  const cb = useCallback(\n    (ref: HTMLCanvasElement) => {\n      model.setRef(ref)\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [model, width, height],\n  )\n\n  // note: the position absolute below avoids scrollbar from appearing on track\n  return (\n    <canvas\n      data-testid=\"cloud-canvas\"\n      ref={cb}\n      style={{ width, height, position: 'absolute' }}\n      width={width * 2}\n      height={height * 2}\n    />\n  )\n})\n\nconst LinearReadCloudReactComponent = observer(function ({\n  model,\n}: {\n  model: LinearReadCloudDisplayModel\n}) {\n  return (\n    <BaseDisplayComponent model={model}>\n      <Cloud model={model} />\n    </BaseDisplayComponent>\n  )\n})\nexport default LinearReadCloudReactComponent\n","import React from 'react'\nimport { LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  BlockMsg,\n  LinearGenomeViewModel,\n} from '@jbrowse/plugin-linear-genome-view'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getContainingView } from '@jbrowse/core/util'\nimport { Button, Tooltip } from '@mui/material'\n\n// local\nimport { LinearReadCloudDisplayModel } from '../../LinearReadCloudDisplay/model'\nimport { LinearReadArcsDisplayModel } from '../../LinearReadArcsDisplay/model'\n\nconst useStyles = makeStyles()(theme => ({\n  loading: {\n    backgroundColor: theme.palette.background.default,\n    backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,\n    position: 'absolute',\n    bottom: 0,\n    height: 50,\n    width: 300,\n    right: 0,\n    pointerEvents: 'none',\n    textAlign: 'center',\n  },\n}))\n\nconst BaseDisplayComponent = observer(function ({\n  model,\n  children,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n  children?: React.ReactNode\n}) {\n  const { error, regionTooLarge } = model\n  return error ? (\n    <BlockMsg\n      message={`${error}`}\n      severity=\"error\"\n      action={\n        <Tooltip title=\"Reload\">\n          <Button\n            data-testid=\"reload_button\"\n            onClick={() => {\n              model.reload()\n            }}\n          >\n            Reload\n          </Button>\n        </Tooltip>\n      }\n    />\n  ) : regionTooLarge ? (\n    model.regionCannotBeRendered()\n  ) : (\n    <DataDisplay model={model}>{children}</DataDisplay>\n  )\n})\n\nconst DataDisplay = observer(function ({\n  model,\n  children,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n  children?: React.ReactNode\n}) {\n  const { drawn, loading } = model\n  const view = getContainingView(model) as LinearGenomeViewModel\n  const left = (model.lastDrawnOffsetPx || 0) - view.offsetPx\n  return (\n    // this data-testid is located here because changing props on the canvas\n    // itself is very sensitive to triggering ref invalidation\n    <div data-testid={`drawn-${drawn}`}>\n      <div style={{ position: 'absolute', left }}>{children}</div>\n      {left !== 0 || loading ? <LoadingBar model={model} /> : null}\n    </div>\n  )\n})\n\nconst LoadingBar = observer(function ({\n  model,\n}: {\n  model: LinearReadArcsDisplayModel | LinearReadCloudDisplayModel\n}) {\n  const { classes } = useStyles()\n  const { message } = model\n  return (\n    <div className={classes.loading}>\n      <LoadingEllipses message={message} />\n    </div>\n  )\n})\n\nexport default BaseDisplayComponent\n"],"names":["Cloud","observer","model","view","getContainingView","width","Math","round","dynamicBlocks","totalWidthPx","height","cb","useCallback","ref","setRef","React","style","position","BaseDisplayComponent","useStyles","makeStyles","theme","loading","backgroundColor","palette","background","default","backgroundImage","action","disabledBackground","bottom","right","pointerEvents","textAlign","children","error","regionTooLarge","BlockMsg","message","severity","Tooltip","title","Button","onClick","reload","regionCannotBeRendered","DataDisplay","drawn","left","lastDrawnOffsetPx","offsetPx","LoadingBar","classes","className","LoadingEllipses"],"sourceRoot":""}