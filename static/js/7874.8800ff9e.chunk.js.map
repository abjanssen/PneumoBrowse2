{"version":3,"file":"static/js/7874.8800ff9e.chunk.js","mappings":"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","sources":["../../../plugins/config/src/ConfigurationEditorWidget/components/BooleanEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/CallbackEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ColorEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationTextField.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/JsonEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/NumberMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/StringArrayMapEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/useSlotEditorStyles.ts","../../../plugins/config/src/ConfigurationEditorWidget/components/SlotEditor.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/TypeSelector.tsx","../../../plugins/config/src/ConfigurationEditorWidget/components/ConfigurationEditor.tsx"],"sourcesContent":["import React from 'react'\n\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst BooleanEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: boolean\n    set: (arg: boolean) => void\n    description: string\n  }\n}) {\n  return (\n    <FormControl>\n      <FormControlLabel\n        label={slot.name}\n        control={\n          <Checkbox\n            checked={slot.value}\n            onChange={evt => {\n              slot.set(evt.target.checked)\n            }}\n          />\n        }\n      />\n      <FormHelperText>{slot.description}</FormHelperText>\n    </FormControl>\n  )\n})\n\nexport default BooleanEditor\n","import React, { useEffect, useState } from 'react'\n\nimport { useDebounce } from '@jbrowse/core/util'\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings'\nimport HelpIcon from '@mui/icons-material/Help'\nimport { IconButton, TextField, Tooltip } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getEnv } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\n// Optimize by using system default fonts:\n// https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  callbackEditor: {\n    marginTop: '16px',\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    width: '100%',\n    fontFamily,\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n}))\n\nconst CallbackEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    set: (arg: string) => void\n    description: string\n    name: string\n    value: string\n    contextVariable: string\n  }\n}) {\n  const { classes } = useStyles()\n\n  const [code, setCode] = useState(slot.value)\n  const [error, setCodeError] = useState<unknown>()\n  const debouncedCode = useDebounce(code, 400)\n\n  useEffect(() => {\n    try {\n      const jexlDebouncedCode = debouncedCode.startsWith('jexl:')\n        ? debouncedCode\n        : `jexl:${debouncedCode}`\n\n      if (jexlDebouncedCode === 'jexl:') {\n        throw new Error('Empty jexl expression is not valid')\n      }\n      stringToJexlExpression(\n        jexlDebouncedCode,\n        getEnv(slot).pluginManager?.jexl,\n      )\n      slot.set(jexlDebouncedCode)\n      setCodeError(undefined)\n    } catch (e) {\n      console.error({ e })\n      setCodeError(e)\n    }\n  }, [debouncedCode, slot])\n\n  // if default value is a callback, will have to remove jexl:\n  // do this last\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <TextField\n          multiline\n          className={classes.callbackEditor}\n          value={code.startsWith('jexl:') ? code.split('jexl:')[1] : code}\n          onChange={event => {\n            setCode(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n\n        <p>{slot.description}</p>\n        <Tooltip\n          title={\n            <div>\n              Callbacks are written in Jexl format. Click to learn more.\n              <br /> Names of available context items: {slot.contextVariable}\n            </div>\n          }\n          arrow\n        >\n          <IconButton\n            color=\"primary\"\n            onClick={() => {\n              const newWindow = window.open(\n                'https://github.com/TomFrost/Jexl',\n                '_blank',\n                'noopener,noreferrer',\n              )\n              if (newWindow) {\n                newWindow.opener = null\n              }\n            }}\n          >\n            <HelpIcon />\n          </IconButton>\n        </Tooltip>\n      </div>\n    </>\n  )\n})\n\nexport default CallbackEditor\n","import React, { useState } from 'react'\n\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker'\nimport { TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nexport const ColorSlot = (props: {\n  value: string\n  label?: string\n  TextFieldProps?: {\n    helperText: string\n    fullWidth: boolean\n  }\n  onChange: (arg: string) => void\n}) => {\n  const { value = '#000', label = '', TextFieldProps = {}, onChange } = props\n  const [displayed, setDisplayed] = useState(false)\n\n  return (\n    <div style={{ display: 'flex' }}>\n      <TextField\n        value={value}\n        label={label}\n        onClick={() => {\n          setDisplayed(!displayed)\n        }}\n        onChange={event => {\n          onChange(event.target.value)\n        }}\n        {...TextFieldProps}\n      />\n      <div style={{ marginTop: 10 }}>\n        <React.Suspense fallback={null}>\n          <ColorPicker\n            color={value}\n            onChange={event => {\n              onChange(event)\n            }}\n          />\n        </React.Suspense>\n      </div>\n    </div>\n  )\n}\n\nconst ColorEditor = observer(function (props: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (arg: string) => void\n  }\n}) {\n  const { slot } = props\n  return (\n    <ColorSlot\n      label={slot.name}\n      value={slot.value}\n      onChange={color => {\n        slot.set(color)\n      }}\n      TextFieldProps={{\n        helperText: slot.description,\n        fullWidth: true,\n      }}\n    />\n  )\n})\n\nexport default ColorEditor\n","import React from 'react'\n\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport { TextField } from '@mui/material'\n\nimport type { TextFieldProps } from '@mui/material'\n\n// adds ability to have html in helperText. note that FormHelperTextProps is\n// div because the default is p which does not like div children\nexport default function ConfigurationTextField(\n  props: { helperText?: string } & TextFieldProps,\n) {\n  const { helperText } = props\n  return (\n    <TextField\n      {...props}\n      helperText={<SanitizedHTML html={helperText || ''} />}\n      fullWidth\n      slotProps={{\n        formHelperText: {\n          component: 'div',\n        },\n      }}\n    />\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { InputLabel, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// fontSize and fontFamily have to match between Editor and SyntaxHighlighter\nconst fontSize = '12px'\n// Optimize by using system default fonts: https://css-tricks.com/snippets/css/font-stacks/\nconst fontFamily =\n  'Consolas, \"Andale Mono WT\", \"Andale Mono\", \"Lucida Console\", \"Lucida Sans Typewriter\", \"DejaVu Sans Mono\", \"Bitstream Vera Sans Mono\", \"Liberation Mono\", \"Nimbus Mono L\", Monaco, \"Courier New\", Courier, monospace'\n\nconst useStyles = makeStyles()(theme => ({\n  error: {\n    color: 'red',\n    fontSize: '0.8em',\n  },\n  callbackEditor: {\n    fontFamily,\n    fontSize,\n    background: theme.palette.background.default,\n    width: 800,\n    marginTop: '16px',\n    border: '1px solid rgba(0,0,0,0.42)',\n  },\n  callbackContainer: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n  textAreaFont: {\n    fontFamily,\n  },\n}))\n\nconst JsonEditor = observer(function JsonEditor({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: unknown\n    set: (arg: unknown) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [contents, setContents] = useState(JSON.stringify(slot.value, null, 2))\n  const [error, setError] = useState<unknown>()\n\n  useEffect(() => {\n    try {\n      setError(undefined)\n      slot.set(JSON.parse(contents))\n    } catch (e) {\n      console.error({ e })\n      setError(e)\n    }\n  }, [contents, slot])\n\n  return (\n    <>\n      {error ? <p className={classes.error}>{`${error}`}</p> : null}\n      <div className={classes.callbackContainer}>\n        <InputLabel shrink htmlFor=\"json-editor\">\n          {slot.name}\n        </InputLabel>\n        <TextField\n          id=\"json-editor\"\n          className={classes.callbackEditor}\n          value={contents}\n          helperText={slot.description}\n          multiline\n          onChange={event => {\n            setContents(event.target.value)\n          }}\n          style={{ background: error ? '#fdd' : undefined }}\n          slotProps={{\n            input: {\n              classes: {\n                input: classes.textAreaFont,\n              },\n            },\n          }}\n        />\n      </div>\n    </>\n  )\n})\n\nexport default JsonEditor\n","import React, { useEffect, useState } from 'react'\n\nimport { observer } from 'mobx-react'\n\nimport ConfigurationTextField from './ConfigurationTextField'\n\nconst NumberEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name?: string\n    value: string\n    description?: string\n    set: (val: number) => void\n    reset?: () => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseFloat(val)\n    if (Number.isNaN(num)) {\n      slot.reset?.()\n    } else {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nexport default NumberEditor\n","import React, { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport NumberEditor from './NumberEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst NumberMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string>\n    remove: (key: string) => void\n    add: (key: string, val: number) => void\n    description: string\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <NumberEditor\n              slot={{\n                value: val,\n                set: (val: number) => {\n                  slot.add(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, 0)\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default NumberMapEditor\n","import React, { useState } from 'react'\n\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Button,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  List,\n  ListItem,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\nconst StringArrayEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string[]\n    setAtIndex: (arg: number, arg2: string) => void\n    removeAtIndex: (arg: number) => void\n    add: (arg: string) => void\n    description: string\n  }\n}) {\n  const [value, setValue] = useState('')\n  const [addNew, setAddNew] = useState(false)\n  return (\n    <>\n      {slot.name ? <InputLabel>{slot.name}</InputLabel> : null}\n      <List disablePadding>\n        {slot.value.map((val, idx) => (\n          <ListItem key={`${JSON.stringify(val)}-${idx}`} disableGutters>\n            <TextField\n              value={val}\n              onChange={evt => {\n                slot.setAtIndex(idx, evt.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        onClick={() => {\n                          slot.removeAtIndex(idx)\n                        }}\n                      >\n                        <DeleteIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ))}\n\n        {addNew ? (\n          <ListItem disableGutters>\n            <TextField\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          data-testid={`stringArrayAdd-${slot.name}`}\n                          onClick={() => {\n                            setAddNew(false)\n                            slot.add(value)\n                            setValue('')\n                          }}\n                        >\n                          OK\n                        </Button>\n                        <Button\n                          color=\"primary\"\n                          variant=\"contained\"\n                          style={{ margin: 2 }}\n                          onClick={() => {\n                            setAddNew(false)\n                            setValue('')\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          </ListItem>\n        ) : null}\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          style={{ margin: 4 }}\n          disabled={addNew}\n          onClick={() => {\n            setAddNew(true)\n          }}\n        >\n          Add item\n        </Button>\n      </List>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayEditor\n","import React, { useState } from 'react'\n\nimport AddIcon from '@mui/icons-material/Add'\nimport DeleteIcon from '@mui/icons-material/Delete'\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  FormHelperText,\n  IconButton,\n  InputAdornment,\n  InputLabel,\n  TextField,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\nimport StringArrayEditor from './StringArrayEditor'\n\nconst useStyles = makeStyles()(theme => ({\n  card: {\n    marginTop: theme.spacing(1),\n  },\n}))\n\nconst StringArrayMapEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: Map<string, string[]>\n    remove: (key: string) => void\n    add: (key: string, val: string[]) => void\n    description: string\n    setAtKeyIndex: (key: string, idx: number, val: string) => void\n    removeAtKeyIndex: (key: string, idx: number) => void\n    addToKey: (key: string, val: string) => void\n  }\n}) {\n  const { classes } = useStyles()\n  const [value, setValue] = useState('')\n  return (\n    <>\n      <InputLabel>{slot.name}</InputLabel>\n      {[...slot.value].map(([key, val]) => (\n        <Card raised key={key} className={classes.card}>\n          <CardHeader\n            title={key}\n            action={\n              <IconButton\n                onClick={() => {\n                  slot.remove(key)\n                }}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            <StringArrayEditor\n              slot={{\n                name: slot.name,\n                value: val,\n                description: `Values associated with entry ${key}`,\n                setAtIndex: (idx: number, val: string) => {\n                  slot.setAtKeyIndex(key, idx, val)\n                },\n                removeAtIndex: (idx: number) => {\n                  slot.removeAtKeyIndex(key, idx)\n                },\n                add: (val: string) => {\n                  slot.addToKey(key, val)\n                },\n              }}\n            />\n          </CardContent>\n        </Card>\n      ))}\n      <Card raised className={classes.card}>\n        <CardHeader\n          disableTypography\n          title={\n            <TextField\n              fullWidth\n              value={value}\n              placeholder=\"add new\"\n              onChange={event => {\n                setValue(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  endAdornment: (\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        disabled={value === ''}\n                        onClick={() => {\n                          slot.add(value, [])\n                          setValue('')\n                        }}\n                      >\n                        <AddIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  ),\n                },\n              }}\n            />\n          }\n        />\n      </Card>\n      <FormHelperText>{slot.description}</FormHelperText>\n    </>\n  )\n})\n\nexport default StringArrayMapEditor\n","import { makeStyles } from 'tss-react/mui'\n\nexport const useSlotEditorStyles = makeStyles()(theme => ({\n  paper: {\n    display: 'flex',\n    marginBottom: theme.spacing(2),\n    position: 'relative',\n  },\n  paperContent: {\n    width: '100%',\n  },\n  slotModeSwitch: {\n    width: 24,\n    background: theme.palette.secondary.light,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n}))\n","import React, { useEffect, useState } from 'react'\n\nimport { FileSelector } from '@jbrowse/core/ui'\nimport { getEnv } from '@jbrowse/core/util'\nimport { getSubType, getUnionSubTypes } from '@jbrowse/core/util/mst-reflection'\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked'\nimport { IconButton, MenuItem, Paper, SvgIcon, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getPropertyMembers } from 'mobx-state-tree'\n\nimport BooleanEditor from './BooleanEditor'\nimport CallbackEditor from './CallbackEditor'\nimport ColorEditor from './ColorEditor'\nimport ConfigurationTextField from './ConfigurationTextField'\nimport JsonEditor from './JsonEditor'\nimport NumberEditor from './NumberEditor'\nimport NumberMapEditor from './NumberMapEditor'\nimport StringArrayEditor from './StringArrayEditor'\nimport StringArrayMapEditor from './StringArrayMapEditor'\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type {\n  AnyConfigurationSlot,\n  AnyConfigurationSlotType,\n} from '@jbrowse/core/configuration'\nimport type { FileLocation } from '@jbrowse/core/util'\nimport type { ILiteralType } from '@jbrowse/core/util/mst-reflection'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst StringEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst TextEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    description: string\n    value: string\n    set: (arg: string) => void\n  }\n}) {\n  return (\n    <TextField\n      label={slot.name}\n      helperText={slot.description}\n      multiline\n      value={slot.value}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    />\n  )\n})\n\n// checked checkbox, looks like a styled (x)\nconst SvgCheckbox = () => (\n  <SvgIcon>\n    <path d=\"M20.41,3C21.8,5.71 22.35,8.84 22,12C21.8,15.16 20.7,18.29 18.83,21L17.3,20C18.91,17.57 19.85,14.8 20,12C20.34,9.2 19.89,6.43 18.7,4L20.41,3M5.17,3L6.7,4C5.09,6.43 4.15,9.2 4,12C3.66,14.8 4.12,17.57 5.3,20L3.61,21C2.21,18.29 1.65,15.17 2,12C2.2,8.84 3.3,5.71 5.17,3M12.08,10.68L14.4,7.45H16.93L13.15,12.45L15.35,17.37H13.09L11.71,14L9.28,17.33H6.76L10.66,12.21L8.53,7.45H10.8L12.08,10.68Z\" />\n  </SvgIcon>\n)\n\nconst IntegerEditor = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: string\n    description: string\n    set: (num: number) => void\n  }\n}) {\n  const [val, setVal] = useState(slot.value)\n  useEffect(() => {\n    const num = Number.parseInt(val, 10)\n    if (!Number.isNaN(num)) {\n      slot.set(num)\n    }\n  }, [slot, val])\n  return (\n    <ConfigurationTextField\n      label={slot.name}\n      helperText={slot.description}\n      value={val}\n      type=\"number\"\n      onChange={evt => {\n        setVal(evt.target.value)\n      }}\n    />\n  )\n})\n\nconst StringEnumEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: AnyConfigurationSlot\n  slotSchema: AnyConfigurationSlotType\n}) {\n  const p = getPropertyMembers(getSubType(slotSchema))\n  const choices = getUnionSubTypes(\n    getUnionSubTypes(getSubType(p.properties.value!))[1]!,\n  ).map(t => (t as ILiteralType<string>).value)\n\n  return (\n    <ConfigurationTextField\n      value={slot.value}\n      label={slot.name}\n      select\n      helperText={slot.description}\n      onChange={evt => {\n        slot.set(evt.target.value)\n      }}\n    >\n      {choices.map(str => (\n        <MenuItem key={str} value={str}>\n          {str}\n        </MenuItem>\n      ))}\n    </ConfigurationTextField>\n  )\n})\n\nconst FileSelectorWrapper = observer(function ({\n  slot,\n}: {\n  slot: {\n    name: string\n    value: FileLocation\n    set: (arg: FileLocation) => void\n    description: string\n  }\n}) {\n  return (\n    <FileSelector\n      location={slot.value}\n      setLocation={location => {\n        slot.set(location)\n      }}\n      name={slot.name}\n      description={slot.description}\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      rootModel={getEnv(slot).pluginManager?.rootModel}\n    />\n  )\n})\n\nconst valueComponents = {\n  string: StringEditor,\n  text: TextEditor,\n  fileLocation: FileSelectorWrapper,\n  stringArray: StringArrayEditor,\n  stringArrayMap: StringArrayMapEditor,\n  numberMap: NumberMapEditor,\n  number: NumberEditor,\n  integer: IntegerEditor,\n  color: ColorEditor,\n  stringEnum: StringEnumEditor,\n  boolean: BooleanEditor,\n  frozen: JsonEditor,\n  configRelationships: JsonEditor,\n}\n\nconst SlotEditor = observer(function ({\n  slot,\n  slotSchema,\n}: {\n  slot: any\n  slotSchema: IAnyType\n}) {\n  const { classes } = useSlotEditorStyles()\n  const { type } = slot\n  let ValueComponent = slot.isCallback\n    ? CallbackEditor\n    : // @ts-expect-error\n      valueComponents[type]\n  if (!ValueComponent) {\n    console.warn(`no slot editor defined for ${type}, editing as string`)\n    ValueComponent = StringEditor\n  }\n  if (!(type in valueComponents)) {\n    console.warn(`SlotEditor needs to implement ${type}`)\n  }\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <ValueComponent slot={slot} slotSchema={slotSchema} />\n      </div>\n      <div className={classes.slotModeSwitch}>\n        {slot.contextVariable.length ? (\n          <IconButton\n            onClick={() =>\n              slot.isCallback ? slot.convertToValue() : slot.convertToCallback()\n            }\n            title={`convert to ${\n              slot.isCallback ? 'regular value' : 'callback'\n            }`}\n          >\n            {slot.isCallback ? <SvgCheckbox /> : <RadioButtonUncheckedIcon />}\n          </IconButton>\n        ) : null}\n      </div>\n    </Paper>\n  )\n})\n\nexport default SlotEditor\n","import React from 'react'\n\nimport { MenuItem, Paper, TextField } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport { useSlotEditorStyles } from './useSlotEditorStyles'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\n\nconst TypeSelector = observer(function ({\n  typeNameChoices,\n  slot,\n  slotName,\n  onChange,\n}: {\n  typeNameChoices: string[]\n  slot: AnyConfigurationModel\n  slotName: string\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void\n}) {\n  const { classes } = useSlotEditorStyles()\n  return (\n    <Paper className={classes.paper}>\n      <div className={classes.paperContent}>\n        <TextField\n          value={slot.type}\n          label=\"Type\"\n          select\n          helperText={`Type of ${slotName} to use`}\n          fullWidth\n          onChange={onChange}\n        >\n          {typeNameChoices.map(str => (\n            <MenuItem key={str} value={str}>\n              {str}\n            </MenuItem>\n          ))}\n        </TextField>\n      </div>\n    </Paper>\n  )\n})\n\nexport default TypeSelector\n","import React from 'react'\n\nimport {\n  getTypeNamesFromExplicitlyTypedUnion,\n  isConfigurationSchemaType,\n  isConfigurationSlotType,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  FormGroup,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { getMembers } from 'mobx-state-tree'\nimport { singular } from 'pluralize'\nimport { makeStyles } from 'tss-react/mui'\n\nimport SlotEditor from './SlotEditor'\nimport TypeSelector from './TypeSelector'\n\nimport type { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport type { AbstractSessionModel } from '@jbrowse/core/util'\nimport type { IAnyType } from 'mobx-state-tree'\n\nconst useStyles = makeStyles()(theme => ({\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  accordion: {\n    border: `1px solid ${theme.palette.text.primary}`,\n  },\n  noOverflow: {\n    width: '100%',\n    overflowX: 'auto',\n  },\n}))\n\nconst Member = observer(function (props: {\n  slotName: string\n  slotSchema: IAnyType\n  schema: AnyConfigurationModel\n  slot?: AnyConfigurationModel | AnyConfigurationModel[]\n  path?: string[]\n}) {\n  const { classes } = useStyles()\n  const {\n    slotName,\n    slotSchema,\n    schema,\n    slot = schema[slotName],\n    path = [],\n  } = props\n  if (isConfigurationSchemaType(slotSchema)) {\n    if (slot.length) {\n      return slot.map((subslot: AnyConfigurationModel, slotIndex: number) => {\n        const key = subslot.type\n          ? `${singular(slotName)} ${subslot.type}`\n          : `${singular(slotName)} ${slotIndex + 1}`\n        return <Member key={key} {...props} slot={subslot} slotName={key} />\n      })\n    }\n    // if this is an explicitly typed schema, make a type-selecting dropdown\n    // that can be used to change its type\n    const typeNameChoices = getTypeNamesFromExplicitlyTypedUnion(slotSchema)\n    return (\n      <Accordion defaultExpanded className={classes.accordion}>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon className={classes.icon} />}\n        >\n          <Typography>{[...path, slotName].join('➔')}</Typography>\n        </AccordionSummary>\n        <AccordionDetails className={classes.expansionPanelDetails}>\n          {typeNameChoices.length ? (\n            <TypeSelector\n              typeNameChoices={typeNameChoices}\n              slotName={slotName}\n              slot={slot}\n              onChange={evt => {\n                if (evt.target.value !== slot.type) {\n                  schema.setSubschema(slotName, { type: evt.target.value })\n                }\n              }}\n            />\n          ) : null}\n          <FormGroup className={classes.noOverflow}>\n            <Schema schema={slot} path={[...path, slotName]} />\n          </FormGroup>\n        </AccordionDetails>\n      </Accordion>\n    )\n  } else if (isConfigurationSlotType(slotSchema)) {\n    return <SlotEditor key={slotName} slot={slot} slotSchema={slotSchema} />\n  } else {\n    return null\n  }\n})\n\nconst Schema = observer(function ({\n  schema,\n  path = [],\n}: {\n  schema: AnyConfigurationModel\n  path?: string[]\n}) {\n  const properties = getMembers(schema).properties\n  return (\n    <>\n      {Object.entries(properties).map(([slotName, slotSchema]) => (\n        <Member\n          key={slotName}\n          slotName={slotName}\n          slotSchema={slotSchema}\n          path={path}\n          schema={schema}\n        />\n      ))}\n    </>\n  )\n})\n\nconst ConfigurationEditor = observer(function ({\n  model,\n}: {\n  model: { target: AnyConfigurationModel }\n  session?: AbstractSessionModel\n}) {\n  const { classes } = useStyles()\n  // key forces a re-render, otherwise the same field can end up being used for\n  // different tracks since only the backing model changes for example see pr\n  // #804\n  const { target } = model\n  const key = readConfObject(target, 'trackId')\n  const name = readConfObject(target, 'name')\n  return (\n    <Accordion key={key} defaultExpanded className={classes.accordion}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon className={classes.icon} />}\n      >\n        <Typography>\n          <SanitizedHTML html={name ?? 'Configuration'} />\n        </Typography>\n      </AccordionSummary>\n      <AccordionDetails\n        className={classes.expansionPanelDetails}\n        data-testid=\"configEditor\"\n      >\n        <Schema schema={target} />\n      </AccordionDetails>\n    </Accordion>\n  )\n})\n\nexport default ConfigurationEditor\n"],"names":["observer","slot","React","FormControl","FormControlLabel","label","name","control","Checkbox","checked","value","onChange","evt","set","target","FormHelperText","description","fontFamily","useStyles","makeStyles","theme","callbackEditor","marginTop","borderBottom","palette","divider","width","textAreaFont","callbackContainer","overflowX","error","color","fontSize","classes","code","setCode","useState","setCodeError","debouncedCode","useDebounce","useEffect","jexlDebouncedCode","startsWith","Error","stringToJexlExpression","getEnv","pluginManager","jexl","undefined","e","console","className","TextField","multiline","split","event","style","background","slotProps","input","Tooltip","title","contextVariable","arrow","IconButton","onClick","newWindow","window","open","opener","HelpIcon","ColorSlot","props","TextFieldProps","displayed","setDisplayed","display","_extends","fallback","ColorPicker","helperText","fullWidth","ConfigurationTextField","SanitizedHTML","html","formHelperText","component","default","border","contents","setContents","JSON","stringify","setError","parse","InputLabel","shrink","htmlFor","id","val","setVal","num","Number","parseFloat","isNaN","reset","type","card","spacing","setValue","map","key","Card","raised","CardHeader","action","remove","DeleteIcon","CardContent","NumberEditor","add","disableTypography","placeholder","endAdornment","InputAdornment","position","disabled","AddIcon","addNew","setAddNew","List","disablePadding","idx","ListItem","disableGutters","setAtIndex","removeAtIndex","Button","variant","margin","StringArrayEditor","setAtKeyIndex","removeAtKeyIndex","addToKey","useSlotEditorStyles","paper","marginBottom","paperContent","slotModeSwitch","secondary","light","justifyContent","alignItems","StringEditor","TextEditor","SvgCheckbox","SvgIcon","d","IntegerEditor","parseInt","StringEnumEditor","slotSchema","p","getPropertyMembers","getSubType","choices","getUnionSubTypes","properties","t","select","str","MenuItem","FileSelectorWrapper","FileSelector","location","setLocation","rootModel","valueComponents","string","text","fileLocation","stringArray","stringArrayMap","StringArrayMapEditor","numberMap","NumberMapEditor","number","integer","ColorEditor","stringEnum","boolean","BooleanEditor","frozen","JsonEditor","configRelationships","ValueComponent","isCallback","CallbackEditor","warn","Paper","length","convertToValue","convertToCallback","RadioButtonUncheckedIcon","typeNameChoices","slotName","icon","tertiary","contrastText","expansionPanelDetails","padding","accordion","primary","noOverflow","Member","schema","path","isConfigurationSchemaType","subslot","slotIndex","singular","getTypeNamesFromExplicitlyTypedUnion","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","Typography","join","AccordionDetails","TypeSelector","setSubschema","FormGroup","Schema","isConfigurationSlotType","SlotEditor","getMembers","Object","entries","model","readConfObject"],"sourceRoot":""}