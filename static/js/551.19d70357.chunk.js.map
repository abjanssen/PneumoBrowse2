{"version":3,"file":"static/js/551.19d70357.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/esm/Radio/radioClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroupContext.js","../../../node_modules/@mui/material/esm/RadioGroup/radioGroupClasses.js","../../../node_modules/@mui/material/esm/RadioGroup/useRadioGroup.js","../../../plugins/variants/src/shared/components/MultiVariantClusterDialog/ClusterDialogAuto.tsx","../../../plugins/variants/src/shared/components/MultiVariantClusterDialog/ClusterDialogManual.tsx","../../../plugins/variants/src/shared/components/MultiVariantClusterDialog/ClusterDialog.tsx","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonUnchecked.js","../../../node_modules/@mui/material/esm/internal/svg-icons/RadioButtonChecked.js","../../../node_modules/@mui/material/esm/Radio/RadioButtonIcon.js","../../../node_modules/@mui/material/esm/Radio/Radio.js","../../../node_modules/@mui/material/esm/RadioGroup/RadioGroup.js"],"sourcesContent":["import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getRadioGroupUtilityClass(slot) {\n  return generateUtilityClass('MuiRadioGroup', slot);\n}\nconst radioGroupClasses = generateUtilityClasses('MuiRadioGroup', ['root', 'row', 'error']);\nexport default radioGroupClasses;","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","import { useState } from 'react'\n\nimport { ErrorMessage } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n} from '@jbrowse/core/util'\nimport { createStopToken, stopStopToken } from '@jbrowse/core/util/stopToken'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport { Button, DialogActions, DialogContent } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst ClusterDialogAuto = observer(function ({\n  model,\n  children,\n  handleClose,\n}: {\n  model: ReducedModel\n  children: React.ReactNode\n  handleClose: () => void\n}) {\n  const [progress, setProgress] = useState('')\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n  const [stopToken, setStopToken] = useState('')\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <div>\n          {loading ? (\n            <div style={{ padding: 50 }}>\n              <span>{progress || 'Loading...'}</span>\n              <Button\n                onClick={() => {\n                  stopStopToken(stopToken)\n                }}\n              >\n                Stop\n              </Button>\n            </div>\n          ) : null}\n          {error ? <ErrorMessage error={error} /> : null}\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          disabled={loading}\n          onClick={async () => {\n            try {\n              setError(undefined)\n              setProgress('Initializing')\n              setLoading(true)\n              const view = getContainingView(model) as LinearGenomeViewModel\n              if (!view.initialized) {\n                return\n              }\n              const { rpcManager } = getSession(model)\n              const {\n                sourcesWithoutLayout,\n                minorAlleleFrequencyFilter,\n                lengthCutoffFilter,\n                adapterConfig,\n              } = model\n              if (sourcesWithoutLayout) {\n                const sessionId = getRpcSessionId(model)\n                const stopToken = createStopToken()\n                setStopToken(stopToken)\n                const ret = (await rpcManager.call(\n                  sessionId,\n                  'MultiVariantClusterGenotypeMatrix',\n                  {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources: sourcesWithoutLayout,\n                    minorAlleleFrequencyFilter,\n                    lengthCutoffFilter,\n                    sessionId,\n                    adapterConfig,\n                    stopToken,\n                    statusCallback: (arg: string) => {\n                      setProgress(arg)\n                    },\n                  },\n                )) as { order: number[] }\n\n                model.setLayout(\n                  ret.order.map(idx => {\n                    const ret = sourcesWithoutLayout[idx]\n                    if (!ret) {\n                      throw new Error(`out of bounds at ${idx}`)\n                    }\n                    return ret\n                  }),\n                )\n              }\n              handleClose()\n            } catch (e) {\n              if (!isAbortException(e) && isAlive(model)) {\n                console.error(e)\n                setError(e)\n              }\n            } finally {\n              setLoading(false)\n              setProgress('')\n              setStopToken('')\n            }\n          }}\n        >\n          Run clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n            if (stopToken) {\n              stopStopToken(stopToken)\n            }\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default ClusterDialogAuto\n","import { useEffect, useState } from 'react'\n\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\nimport {\n  getContainingView,\n  getSession,\n  isAbortException,\n  useLocalStorage,\n} from '@jbrowse/core/util'\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  Paper,\n  Radio,\n  RadioGroup,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport copy from 'copy-to-clipboard'\nimport { saveAs } from 'file-saver'\nimport { observer } from 'mobx-react'\nimport { isAlive } from 'mobx-state-tree'\nimport { makeStyles } from 'tss-react/mui'\n\nimport type { ReducedModel } from './types'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst useStyles = makeStyles()(theme => ({\n  textAreaFont: {\n    fontFamily: 'Courier New',\n  },\n  mgap: {\n    display: 'flex',\n    flexDirection: 'column',\n    gap: theme.spacing(4),\n  },\n}))\n\nconst ClusterDialogManuals = observer(function ({\n  model,\n  handleClose,\n  children,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n  children: React.ReactNode\n}) {\n  const { classes } = useStyles()\n  const [paste, setPaste] = useState('')\n  const [ret, setRet] = useState<Record<string, any>>()\n  const [error, setError] = useState<unknown>()\n  const [loading, setLoading] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useLocalStorage(\n    'cluster-showAdvanced',\n    false,\n  )\n  const [clusterMethod, setClusterMethod] = useState('single')\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        setError(undefined)\n        setRet(undefined)\n        setLoading(true)\n        const view = getContainingView(model) as LinearGenomeViewModel\n        if (!view.initialized) {\n          return\n        }\n        const { rpcManager } = getSession(model)\n        const {\n          sourcesWithoutLayout,\n          minorAlleleFrequencyFilter,\n          lengthCutoffFilter,\n          adapterConfig,\n        } = model\n        const sessionId = getRpcSessionId(model)\n        const ret = (await rpcManager.call(\n          sessionId,\n          'MultiVariantGetGenotypeMatrix',\n          {\n            regions: view.dynamicBlocks.contentBlocks,\n            sources: sourcesWithoutLayout,\n            minorAlleleFrequencyFilter,\n            lengthCutoffFilter,\n            sessionId,\n            adapterConfig,\n          },\n        )) as Record<string, number[]>\n\n        setRet(ret)\n      } catch (e) {\n        if (!isAbortException(e) && isAlive(model)) {\n          console.error(e)\n          setError(e)\n        }\n      } finally {\n        setLoading(false)\n      }\n    })()\n  }, [model])\n\n  const results = ret\n    ? `inputMatrix<-matrix(c(${Object.values(ret)\n        .map(val => val.join(','))\n        .join(',\\n')}\n),nrow=${Object.values(ret).length},byrow=TRUE)\nrownames(inputMatrix)<-c(${Object.keys(ret)\n        .map(key => `'${key}'`)\n        .join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n    : undefined\n\n  const resultsTsv = ret\n    ? Object.entries(ret)\n        .map(([key, val]) => [key, ...val].join('\\t'))\n        .join('\\n')\n    : undefined\n\n  return (\n    <>\n      <DialogContent>\n        {children}\n        <Paper style={{ padding: 16 }}>\n          <div>\n            <div\n              style={{\n                display: 'flex',\n                gap: '8px',\n                flexWrap: 'wrap',\n                marginBottom: '16px',\n              }}\n            >\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  saveAs(\n                    new Blob([results || ''], {\n                      type: 'text/plain;charset=utf-8',\n                    }),\n                    'cluster.R',\n                  )\n                }}\n              >\n                Download Rscript\n              </Button>{' '}\n              or{' '}\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  copy(results || '')\n                }}\n              >\n                Copy Rscript to clipboard\n              </Button>{' '}\n              or{' '}\n              <Button\n                variant=\"contained\"\n                onClick={() => {\n                  saveAs(\n                    new Blob([resultsTsv || ''], {\n                      type: 'text/plain;charset=utf-8',\n                    }),\n                    'genotypes.tsv',\n                  )\n                }}\n              >\n                Download TSV\n              </Button>\n              <div>\n                <Button\n                  variant=\"contained\"\n                  onClick={() => {\n                    setShowAdvanced(!showAdvanced)\n                  }}\n                >\n                  {showAdvanced\n                    ? 'Hide advanced options'\n                    : 'Show advanced options'}\n                </Button>\n              </div>\n            </div>\n            {showAdvanced ? (\n              <div>\n                <Typography variant=\"h6\">Advanced options</Typography>\n                <RadioGroup>\n                  {Object.entries({\n                    single: 'Single',\n                    complete: 'Complete',\n                  }).map(([key, val]) => (\n                    <FormControlLabel\n                      key={key}\n                      control={\n                        <Radio\n                          checked={clusterMethod === key}\n                          onChange={() => {\n                            setClusterMethod(key)\n                          }}\n                        />\n                      }\n                      label={val}\n                    />\n                  ))}\n                </RadioGroup>\n              </div>\n            ) : null}\n            {results ? (\n              <div />\n            ) : loading ? (\n              <LoadingEllipses\n                variant=\"h6\"\n                title=\"Generating genotype matrix\"\n              />\n            ) : error ? (\n              <ErrorMessage error={error} />\n            ) : null}\n          </div>\n\n          <div>\n            <Typography\n              variant=\"subtitle2\"\n              gutterBottom\n              style={{ marginTop: '16px' }}\n            >\n              Clustering Results:\n            </Typography>\n            <TextField\n              multiline\n              fullWidth\n              variant=\"outlined\"\n              placeholder=\"Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\"\n              rows={10}\n              value={paste}\n              onChange={event => {\n                setPaste(event.target.value)\n              }}\n              slotProps={{\n                input: {\n                  classes: {\n                    input: classes.textAreaFont,\n                  },\n                },\n              }}\n            />\n          </div>\n        </Paper>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            const { sourcesWithoutLayout } = model\n            if (sourcesWithoutLayout) {\n              try {\n                model.setLayout(\n                  paste\n                    .split('\\n')\n                    .map(t => t.trim())\n                    .filter(f => !!f)\n                    .map(r => +r)\n                    .map(idx => {\n                      const ret = sourcesWithoutLayout[idx - 1]\n                      if (!ret) {\n                        throw new Error(`out of bounds at ${idx}`)\n                      }\n                      return ret\n                    }),\n                )\n              } catch (e) {\n                console.error(e)\n                getSession(model).notifyError(`${e}`, e)\n              }\n            }\n            handleClose()\n          }}\n        >\n          Apply clustering\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n      </DialogActions>\n    </>\n  )\n})\n\nexport default ClusterDialogManuals\n","import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport { FormControlLabel, Radio, RadioGroup, Typography } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport ClusterDialogAuto from './ClusterDialogAuto'\nimport ClusterDialogManual from './ClusterDialogManual'\n\nimport type { ReducedModel } from './types'\n\nfunction Header({\n  activeMode,\n  setActiveMode,\n}: {\n  activeMode: string\n  setActiveMode: (arg: string) => void\n}) {\n  return (\n    <div>\n      <Typography style={{ marginBottom: 30 }}>\n        This procedure will cluster the visible genotype data using hierarchical\n        clustering\n      </Typography>\n\n      <RadioGroup>\n        {Object.entries({\n          auto: (\n            <div>\n              Run in-app clustering (slower, particularly for large numbers of\n              samples, uses JS implementation of hclust)\n            </div>\n          ),\n          manual: (\n            <div>\n              Download R script to run clustering (faster, uses R implementation\n              of hclust)\n            </div>\n          ),\n        }).map(([key, val]) => (\n          <FormControlLabel\n            key={key}\n            control={\n              <Radio\n                checked={activeMode === key}\n                onChange={() => {\n                  setActiveMode(key)\n                }}\n              />\n            }\n            label={val}\n          />\n        ))}\n      </RadioGroup>\n    </div>\n  )\n}\n\nconst ClusterDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: ReducedModel\n  handleClose: () => void\n}) {\n  const [activeMode, setActiveMode] = useState('auto')\n\n  return (\n    <Dialog\n      open\n      title=\"Cluster by genotype\"\n      onClose={(_, reason) => {\n        // don't close on backdrop click\n        if (reason !== 'backdropClick') {\n          handleClose()\n        }\n      }}\n    >\n      {activeMode === 'auto' ? (\n        <ClusterDialogAuto model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </ClusterDialogAuto>\n      ) : (\n        <ClusterDialogManual model={model} handleClose={handleClose}>\n          <Header activeMode={activeMode} setActiveMode={setActiveMode} />\n        </ClusterDialogManual>\n      )}\n    </Dialog>\n  )\n})\n\nexport default ClusterDialog\n","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from \"../../utils/createSvgIcon.js\";\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from \"../internal/svg-icons/RadioButtonUnchecked.js\";\nimport RadioButtonCheckedIcon from \"../internal/svg-icons/RadioButtonChecked.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span', {\n  name: 'MuiRadioButtonIcon',\n  shouldForwardProp: rootShouldForwardProp\n})({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon, {\n  name: 'MuiRadioButtonIcon'\n})(memoTheme(({\n  theme\n}) => ({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  }),\n  variants: [{\n    props: {\n      checked: true\n    },\n    style: {\n      transform: 'scale(1)',\n      transition: theme.transitions.create('transform', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.shortest\n      })\n    }\n  }]\n})));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = {\n    ...props,\n    checked\n  };\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes /* remove-proptypes */ = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport refType from '@mui/utils/refType';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { alpha } from '@mui/system/colorManipulator';\nimport SwitchBase from \"../internal/SwitchBase.js\";\nimport RadioButtonIcon from \"./RadioButtonIcon.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createChainedFunction from \"../utils/createChainedFunction.js\";\nimport useFormControl from \"../FormControl/useFormControl.js\";\nimport useRadioGroup from \"../RadioGroup/useRadioGroup.js\";\nimport radioClasses, { getRadioUtilityClass } from \"./radioClasses.js\";\nimport rootShouldForwardProp from \"../styles/rootShouldForwardProp.js\";\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport useSlot from \"../utils/useSlot.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return {\n    ...classes,\n    ...composeClasses(slots, getRadioUtilityClass, classes)\n  };\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  color: (theme.vars || theme).palette.text.secondary,\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  },\n  variants: [{\n    props: {\n      color: 'default',\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)\n      }\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false,\n      disableRipple: false\n    },\n    style: {\n      '&:hover': {\n        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[color].main, theme.palette.action.hoverOpacity)\n      }\n    }\n  })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color,\n      disabled: false\n    },\n    style: {\n      [`&.${radioClasses.checked}`]: {\n        color: (theme.vars || theme).palette[color].main\n      }\n    }\n  })), {\n    // Should be last to override other colors\n    props: {\n      disableRipple: false\n    },\n    style: {\n      // Reset on touch devices, it doesn't add specificity\n      '&:hover': {\n        '@media (hover: none)': {\n          backgroundColor: 'transparent'\n        }\n      }\n    }\n  }]\n})));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n    checked: checkedProp,\n    checkedIcon = defaultCheckedIcon,\n    color = 'primary',\n    icon = defaultIcon,\n    name: nameProp,\n    onChange: onChangeProp,\n    size = 'medium',\n    className,\n    disabled: disabledProp,\n    disableRipple = false,\n    slots = {},\n    slotProps = {},\n    inputProps,\n    ...other\n  } = props;\n  const muiFormControl = useFormControl();\n  let disabled = disabledProp;\n  if (muiFormControl) {\n    if (typeof disabled === 'undefined') {\n      disabled = muiFormControl.disabled;\n    }\n  }\n  disabled ??= false;\n  const ownerState = {\n    ...props,\n    disabled,\n    disableRipple,\n    color,\n    size\n  };\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  const externalInputProps = slotProps.input ?? inputProps;\n  const [RootSlot, rootSlotProps] = useSlot('root', {\n    ref,\n    elementType: RadioRoot,\n    className: clsx(classes.root, className),\n    shouldForwardComponentProp: true,\n    externalForwardedProps: {\n      slots,\n      slotProps,\n      ...other\n    },\n    getSlotProps: handlers => ({\n      ...handlers,\n      onChange: (event, ...args) => {\n        handlers.onChange?.(event, ...args);\n        onChange(event, ...args);\n      }\n    }),\n    ownerState,\n    additionalProps: {\n      type: 'radio',\n      icon: /*#__PURE__*/React.cloneElement(icon, {\n        fontSize: icon.props.fontSize ?? size\n      }),\n      checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n        fontSize: checkedIcon.props.fontSize ?? size\n      }),\n      disabled,\n      name,\n      checked,\n      slots,\n      slotProps: {\n        // Do not forward `slotProps.root` again because it's already handled by the `RootSlot` in this file.\n        input: typeof externalInputProps === 'function' ? externalInputProps(ownerState) : externalInputProps\n      }\n    }\n  });\n  return /*#__PURE__*/_jsx(RootSlot, {\n    ...rootSlotProps,\n    classes: classes\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/input#attributes) applied to the `input` element.\n   * @deprecated Use `slotProps.input` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   * @deprecated Use `slotProps.input.ref` instead. This prop will be removed in a future major release. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The props used for each slot inside.\n   * @default {}\n   */\n  slotProps: PropTypes.shape({\n    input: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    root: PropTypes.oneOfType([PropTypes.func, PropTypes.object])\n  }),\n  /**\n   * The components used for each slot inside.\n   * @default {}\n   */\n  slots: PropTypes.shape({\n    input: PropTypes.elementType,\n    root: PropTypes.elementType\n  }),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport FormGroup from \"../FormGroup/index.js\";\nimport { getRadioGroupUtilityClass } from \"./radioGroupClasses.js\";\nimport useForkRef from \"../utils/useForkRef.js\";\nimport useControlled from \"../utils/useControlled.js\";\nimport RadioGroupContext from \"./RadioGroupContext.js\";\nimport useId from \"../utils/useId.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = props => {\n  const {\n    classes,\n    row,\n    error\n  } = props;\n  const slots = {\n    root: ['root', row && 'row', error && 'error']\n  };\n  return composeClasses(slots, getRadioGroupUtilityClass, classes);\n};\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    className,\n    defaultValue,\n    name: nameProp,\n    onChange,\n    value: valueProp,\n    ...other\n  } = props;\n  const rootRef = React.useRef(null);\n  const classes = useUtilityClasses(props);\n  const [value, setValueState] = useControlled({\n    controlled: valueProp,\n    default: defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n  const name = useId(nameProp);\n  const contextValue = React.useMemo(() => ({\n    name,\n    onChange(event) {\n      setValueState(event.target.value);\n      if (onChange) {\n        onChange(event, event.target.value);\n      }\n    },\n    value\n  }), [name, onChange, setValueState, value]);\n  return /*#__PURE__*/_jsx(RadioGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(FormGroup, {\n      role: \"radiogroup\",\n      ref: handleRef,\n      className: clsx(classes.root, className),\n      ...other,\n      children: children\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.any,\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * @param {string} value The value of the selected radio button.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"],"names":["getRadioUtilityClass","slot","undefined","getRadioGroupUtilityClass","useRadioGroup","observer","model","children","handleClose","progress","setProgress","useState","loading","setLoading","error","setError","stopToken","setStopToken","_jsxs","_Fragment","DialogContent","style","padding","_jsx","Button","onClick","stopStopToken","ErrorMessage","DialogActions","variant","disabled","async","view","getContainingView","initialized","rpcManager","getSession","sourcesWithoutLayout","minorAlleleFrequencyFilter","lengthCutoffFilter","adapterConfig","sessionId","getRpcSessionId","createStopToken","ret","call","regions","dynamicBlocks","contentBlocks","sources","statusCallback","arg","setLayout","order","map","idx","Error","e","isAbortException","isAlive","console","color","useStyles","makeStyles","theme","textAreaFont","fontFamily","mgap","display","flexDirection","gap","spacing","classes","paste","setPaste","setRet","showAdvanced","setShowAdvanced","useLocalStorage","clusterMethod","setClusterMethod","useEffect","results","Object","values","val","join","length","keys","key","resultsTsv","entries","Paper","flexWrap","marginBottom","saveAs","Blob","type","copy","Typography","RadioGroup","single","complete","FormControlLabel","control","Radio","checked","onChange","label","LoadingEllipses","title","gutterBottom","marginTop","TextField","multiline","fullWidth","placeholder","rows","value","event","target","slotProps","input","split","t","trim","filter","f","r","notifyError","Header","t0","$","_c","activeMode","setActiveMode","t1","t2","t3","Symbol","for","t4","auto","manual","t5","Dialog","open","onClose","_","reason","ClusterDialogAuto","ClusterDialogManual","createSvgIcon","d","RadioButtonIconRoot","styled","name","shouldForwardProp","rootShouldForwardProp","position","RadioButtonIconBackground","RadioButtonUnchecked","transform","RadioButtonIconDot","RadioButtonChecked","memoTheme","left","transition","transitions","create","easing","easeIn","duration","shortest","variants","props","easeOut","fontSize","ownerState","className","root","background","dot","RadioRoot","SwitchBase","prop","overridesResolver","styles","size","capitalize","vars","palette","text","secondary","radioClasses","action","disableRipple","backgroundColor","activeChannel","hoverOpacity","active","createSimplePaletteValueFilter","mainChannel","main","defaultCheckedIcon","defaultIcon","inProps","ref","checkedProp","checkedIcon","icon","nameProp","onChangeProp","disabledProp","slots","inputProps","other","muiFormControl","useFormControl","composeClasses","useUtilityClasses","radioGroup","createChainedFunction","a","b","String","externalInputProps","RootSlot","rootSlotProps","useSlot","elementType","clsx","shouldForwardComponentProp","externalForwardedProps","getSlotProps","handlers","args","additionalProps","actions","defaultValue","valueProp","rootRef","row","setValueState","controlled","default","focus","current","querySelector","handleRef","contextValue","Provider","role"],"sourceRoot":""}