{"version":3,"file":"static/js/9978.c862be3b.chunk.js","mappings":"oKA2CO,SAASA,EACdC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEAL,EAAIM,UAhDN,SAA6BP,EAAmBM,GAC9C,MAAME,EAAQR,EAAQS,OACtB,IAAIC,EAAM,EACNC,EAAW,EACXC,EAAO,EACPC,EAAM,EACV,IAAK,MAAMC,KAAUd,EACfc,IAAWR,EACbI,IACoB,MAAXI,EACTD,IACoB,MAAXC,EACTH,IAEAC,IAIJ,GAAIC,IAAQL,EACV,MAAO,OACF,CACL,IAAIO,EAIJ,GAHIL,IACFK,GAAKC,EAAAA,EAAAA,GAAO,eAAe,GAAMN,EAAMF,EAAS,SAE9CI,EAAM,CACR,MAAMK,EAAI,mBAAmBL,EAAOJ,KAEpCO,EAAKA,EAAKA,EAAGG,IAAID,IAAKD,EAAAA,EAAAA,GAAOC,EAC/B,CACA,GAAIN,EAAU,CACZ,MAAMM,EAAI,kBAAkBN,EAAWH,KAEvCO,EAAKA,EAAKA,EAAGG,IAAID,IAAKD,EAAAA,EAAAA,GAAOC,EAC/B,CACA,OAAOF,GAAII,SAAW,OACxB,CACF,CAWkBC,CAAoBpB,EAASM,GAC7CL,EAAIoB,SAASnB,EAAIoB,EAAAA,GAAInB,EAAImB,EAAAA,GAAIlB,EAAIkB,EAAAA,GAAIjB,EAAIiB,EAAAA,GAC3C,C,wECvCO,SAASC,EACdvB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAmB,EACAC,GAEAxB,EAAIM,eACKmB,IAAPD,EAhBJ,SAAoCzB,EAAmBwB,EAAYC,GAEjE,OADWzB,EAAQwB,IACRG,EAAAA,EAAAA,KAAUF,IAAO,QAAU,MACxC,CAcQG,CAA2B5B,EAASwB,EAAIC,GAtBhD,SAAwBzB,EAAmBwB,GACzC,MAAMK,GAAK7B,EAAQwB,GACnB,OAAOK,EAAIC,EAAAA,KAAKD,EAAI,IAAM,QAAU,MACtC,CAoBQE,CAAe/B,EAASwB,GAC9BvB,EAAIoB,SAASnB,EAAIoB,EAAAA,GAAInB,EAAImB,EAAAA,GAAIlB,EAAIkB,EAAAA,GAAIjB,EAAIiB,EAAAA,GAC3C,C,kBCNO,SAASU,EAAYC,GAC1B,IAAIC,EAAM,EAEV,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAIxB,OAAQ0B,IAC9BD,GAAOD,EAAIG,WAAWD,GAExB,OAAOR,EAAe,GAANO,EAClB,CAEO,SAASP,EAASU,GACvB,MAAO,OAAOA,EAAI,gBACpB,C,8DCnCO,MACMf,EAAKgB,E,yICUXC,eAAeC,EACpBvC,EACAwC,GAEA,MAAM,UACJC,EAAS,2BACTC,EAA0B,QAC1BC,EAAO,UACPC,EAAS,SACTC,EAAQ,QACRC,EAAO,QACPC,EAAO,cACPC,EAAa,UACbC,GACET,EACEU,EAASJ,EAAQ,IAEvBK,EAAAA,EAAAA,IAAeF,GACf,MAAMG,GAAOC,EAAAA,EAAAA,IACXR,EAASS,SACTZ,IAEFS,EAAAA,EAAAA,IAAeF,GACf,MAAMM,EAAQ,IAAIC,KAClB,IAAIC,EAAQC,YAAYC,MACxB,IAAK,MAAM,gBAAEtD,EAAe,QAAEuD,KAAaR,EAAM,CAC3CM,YAAYC,MAAQF,EAAQ,OAC9BN,EAAAA,EAAAA,IAAeF,GACfQ,EAAQC,YAAYC,OAEtB,MAAOE,EAAQC,IAAWC,EAAAA,EAAAA,eAAcH,EAASV,EAAQH,GACnD5C,EAAI6D,KAAKC,IAAID,KAAKE,MAAMJ,EAAUD,GAAS,GAC3CM,EAAOP,EAAQQ,IAAI,aACzB,IAAIlE,GAAKuC,EAET,MAAM4B,EAAI1B,EAAQnC,OAClB,IAAK,IAAI8D,EAAI,EAAGA,EAAID,EAAGC,IAAK,CAC1B,MAAM,KAAEC,EAAI,GAAEhD,GAAOoB,EAAQ2B,GACvBE,EAAWL,EAAKI,GAChBtE,EAAI+D,KAAKS,MAAMZ,GACfzD,EAAI4D,KAAKC,IAAIrB,EAAW,GAC9B,GAAI4B,EAAU,CACZjB,EAAMmB,OAAO,CACXC,KAAM1E,EAAIoB,EAAAA,GACVuD,KAAM3E,EAAIE,EAAIkB,EAAAA,GACdwD,KAAM3E,EAAImB,EAAAA,GACVyD,KAAM5E,EAAIE,EAAIiB,EAAAA,GACdmD,aAEF,MAAMO,EAAWP,EAASQ,SAAS,KACnC,GAAsB,WAAlBhC,EACF,GAAI+B,EAAU,CACZ,MAAMhF,EAAUyE,EAASS,MAAM,MAC/B3D,EAAAA,EAAAA,GAAWvB,EAASC,EAAKC,EAAGC,EAAGC,EAAGC,EAAGmB,EACvC,MACEvB,EAAIM,UAAY,QAChBN,EAAIoB,SAASnB,EAAIoB,EAAAA,GAAInB,EAAImB,EAAAA,GAAIlB,EAAIkB,EAAAA,GAAIjB,EAAIiB,EAAAA,QAEtC,CACL,MAAMtB,EAAUyE,EAASS,MAAM,SAC/BnF,EAAAA,EAAAA,GAAqBC,EAASC,EAAKC,EAAGC,EAAGC,EAAGC,EAAGC,EACjD,CACF,CACAH,GAAK0C,CACP,CACF,CACA,MAAO,CACLW,MAAOA,EAAM2B,SAEjB,C","sources":["../../../plugins/variants/src/shared/drawAlleleCount.ts","../../../plugins/variants/src/shared/drawPhased.ts","../../../plugins/variants/src/shared/util.ts","../../../plugins/variants/src/shared/constants.ts","../../../plugins/variants/src/MultiLinearVariantRenderer/makeImageData.ts"],"sourcesContent":["import { colord } from '@jbrowse/core/util/colord'\n\nimport { f2 } from './constants'\n\nfunction getColorAlleleCount(alleles: string[], mostFrequentAlt: string) {\n  const total = alleles.length\n  let alt = 0\n  let uncalled = 0\n  let alt2 = 0\n  let ref = 0\n  for (const allele of alleles) {\n    if (allele === mostFrequentAlt) {\n      alt++\n    } else if (allele === '0') {\n      ref++\n    } else if (allele === '.') {\n      uncalled++\n    } else {\n      alt2++\n    }\n  }\n\n  if (ref === total) {\n    return `#ccc`\n  } else {\n    let a1\n    if (alt) {\n      a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`)\n    }\n    if (alt2) {\n      const l = `hsla(0,100%,20%,${alt2 / total})`\n      // @ts-ignore\n      a1 = a1 ? a1.mix(l) : colord(l)\n    }\n    if (uncalled) {\n      const l = `hsl(50,50%,50%,${uncalled / total})`\n      // @ts-ignore\n      a1 = a1 ? a1.mix(l) : colord(l)\n    }\n    return a1?.toHex() || 'black'\n  }\n}\n\nexport function drawColorAlleleCount(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  mostFrequentAlt: string,\n) {\n  ctx.fillStyle = getColorAlleleCount(alleles, mostFrequentAlt)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","import { set1 } from '@jbrowse/core/ui/colors'\n\nimport { f2 } from './constants'\nimport { colorify } from './util'\n\nfunction getColorPhased(alleles: string[], HP: number) {\n  const c = +alleles[HP]!\n  return c ? set1[c - 1] || 'black' : '#ccc'\n}\n\nfunction getColorPhasedWithPhaseSet(alleles: string[], HP: number, PS: string) {\n  const c = +alleles[HP]!\n  return c ? colorify(+PS) || 'black' : '#ccc'\n}\n\nexport function drawPhased(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  HP: number,\n  PS?: string,\n) {\n  ctx.fillStyle =\n    PS !== undefined\n      ? getColorPhasedWithPhaseSet(alleles, HP, PS)\n      : getColorPhased(alleles, HP)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  color?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function randomColor(str: string) {\n  let sum = 0\n\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i)\n  }\n  return colorify(sum * 10)\n}\n\nexport function colorify(n: number) {\n  return `hsl(${n % 255}, 50%, 50%)`\n}\n","export const fudgeFactor = 0.6\nexport const f2 = fudgeFactor / 2\n","import { featureSpanPx } from '@jbrowse/core/util'\nimport { checkStopToken } from '@jbrowse/core/util/stopToken'\nimport RBush from 'rbush'\n\nimport { f2 } from '../shared/constants'\nimport { drawColorAlleleCount } from '../shared/drawAlleleCount'\nimport { drawPhased } from '../shared/drawPhased'\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils'\n\nimport type { MultiRenderArgsDeserialized } from './types'\n\nexport async function makeImageData(\n  ctx: CanvasRenderingContext2D,\n  props: MultiRenderArgsDeserialized,\n) {\n  const {\n    scrollTop,\n    minorAlleleFrequencyFilter,\n    sources,\n    rowHeight,\n    features,\n    regions,\n    bpPerPx,\n    renderingMode,\n    stopToken,\n  } = props\n  const region = regions[0]!\n\n  checkStopToken(stopToken)\n  const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(\n    features.values(),\n    minorAlleleFrequencyFilter,\n  )\n  checkStopToken(stopToken)\n  const rbush = new RBush()\n  let start = performance.now()\n  for (const { mostFrequentAlt, feature } of mafs) {\n    if (performance.now() - start > 400) {\n      checkStopToken(stopToken)\n      start = performance.now()\n    }\n    const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx)\n    const w = Math.max(Math.round(rightPx - leftPx), 2)\n    const samp = feature.get('genotypes') as Record<string, string>\n    let y = -scrollTop\n\n    const s = sources.length\n    for (let j = 0; j < s; j++) {\n      const { name, HP } = sources[j]!\n      const genotype = samp[name]\n      const x = Math.floor(leftPx)\n      const h = Math.max(rowHeight, 1)\n      if (genotype) {\n        rbush.insert({\n          minX: x - f2,\n          maxX: x + w + f2,\n          minY: y - f2,\n          maxY: y + h + f2,\n          genotype,\n        })\n        const isPhased = genotype.includes('|')\n        if (renderingMode === 'phased') {\n          if (isPhased) {\n            const alleles = genotype.split('|')\n            drawPhased(alleles, ctx, x, y, w, h, HP!)\n          } else {\n            ctx.fillStyle = 'black'\n            ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n          }\n        } else {\n          const alleles = genotype.split(/[/|]/)\n          drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt)\n        }\n      }\n      y += rowHeight\n    }\n  }\n  return {\n    rbush: rbush.toJSON(),\n  }\n}\n"],"names":["drawColorAlleleCount","alleles","ctx","x","y","w","h","mostFrequentAlt","fillStyle","total","length","alt","uncalled","alt2","ref","allele","a1","colord","l","mix","toHex","getColorAlleleCount","fillRect","f2","drawPhased","HP","PS","undefined","colorify","getColorPhasedWithPhaseSet","c","set1","getColorPhased","randomColor","str","sum","i","charCodeAt","n","fudgeFactor","async","makeImageData","props","scrollTop","minorAlleleFrequencyFilter","sources","rowHeight","features","regions","bpPerPx","renderingMode","stopToken","region","checkStopToken","mafs","getFeaturesThatPassMinorAlleleFrequencyFilter","values","rbush","RBush","start","performance","now","feature","leftPx","rightPx","featureSpanPx","Math","max","round","samp","get","s","j","name","genotype","floor","insert","minX","maxX","minY","maxY","isPhased","includes","split","toJSON"],"sourceRoot":""}