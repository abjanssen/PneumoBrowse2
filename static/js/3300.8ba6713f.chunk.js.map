{"version":3,"file":"static/js/3300.8ba6713f.chunk.js","mappings":"4LAYe,SAASA,EAAeC,GACrC,MAAM,MAAEC,EAAQ,aAAY,QAAEC,GAAYF,EAC1C,OACEG,EAAAA,EAAAA,KAACC,EAAAA,QAAQ,IAAKJ,EAAOC,MAAOA,EAAMI,UAChCF,EAAAA,EAAAA,KAACG,EAAAA,QAAU,IAAKN,EAAOO,WAAYL,KAGzC,C,mQCVA,MAuBA,GAvB0BM,EAAAA,EAAAA,WAAS,UAAU,MAAEC,IAC7C,MAAM,MAAEC,EAAK,aAAEC,EAAY,YAAEC,GAAgBH,EAE7C,GAAIC,EACF,OAAOP,EAAAA,EAAAA,KAACU,EAAAA,aAAY,CAACH,MAAOA,IACvB,GAAKE,EAEL,CAKL,MAAME,GAAeC,EAAAA,EAAAA,IAAyBH,GAC9C,OAAOI,EAAAA,EAAAA,IAAQF,GAAgB,MAC7BX,EAAAA,EAAAA,KAACc,EAAAA,QAAc,CACbR,MAAOA,EACPP,QAASY,EACTH,aAAcA,GAGpB,CAdE,OAAO,IAeX,G,qFCzBe,SAASO,EAAgBlB,GACtC,MAAM,MAAEC,EAAQ,gBAAmBD,EACnC,OACEG,EAAAA,EAAAA,KAACC,EAAAA,QAAQ,IAAKJ,EAAOC,MAAOA,EAAMI,UAChCF,EAAAA,EAAAA,KAACgB,EAAAA,EAAW,IAAKnB,KAGvB,C","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseAttributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/index.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCoreDetails.tsx"],"sourcesContent":["import Attributes from './Attributes'\nimport BaseCard from './BaseCard'\n\nimport type { BaseCardProps, BaseProps } from '../types'\n\nexport interface BaseInputProps extends BaseCardProps {\n  omit?: string[]\n  model: any\n  descriptions?: Record<string, React.ReactNode>\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}\n\nexport default function BaseAttributes(props: BaseProps) {\n  const { title = 'Attributes', feature } = props\n  return (\n    <BaseCard {...props} title={title}>\n      <Attributes {...props} attributes={feature} />\n    </BaseCard>\n  )\n}\n","import { observer } from 'mobx-react'\n\nimport { isEmpty } from './util'\nimport { replaceUndefinedWithNull } from '../util'\nimport FeatureDetails from './FeatureDetails'\nimport { ErrorMessage } from '../../ui'\n\nimport type { BaseInputProps } from './types'\n\nconst BaseFeatureDetail = observer(function ({ model }: BaseInputProps) {\n  const { error, descriptions, featureData } = model\n\n  if (error) {\n    return <ErrorMessage error={error} />\n  } else if (!featureData) {\n    return null\n  } else {\n    // replacing undefined with null helps with allowing fields to be hidden,\n    // setting null is not allowed by jexl so we set it to undefined to hide.\n    // see config guide. this replacement happens both here and when\n    // snapshotting the featureData\n    const featureData2 = replaceUndefinedWithNull(featureData)\n    return isEmpty(featureData2) ? null : (\n      <FeatureDetails\n        model={model}\n        feature={featureData2}\n        descriptions={descriptions}\n      />\n    )\n  }\n})\n\nexport default BaseFeatureDetail\n\nexport { default as BaseCard } from './BaseCard'\nexport { default as BaseAttributes } from './BaseAttributes'\nexport { default as BaseCoreDetails } from './BaseCoreDetails'\nexport { default as FeatureDetails } from './FeatureDetails'\n","import BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\n\nimport type { BaseProps } from '../types'\n\nexport default function BaseCoreDetails(props: BaseProps) {\n  const { title = 'Primary data' } = props\n  return (\n    <BaseCard {...props} title={title}>\n      <CoreDetails {...props} />\n    </BaseCard>\n  )\n}\n"],"names":["BaseAttributes","props","title","feature","_jsx","BaseCard","children","Attributes","attributes","observer","model","error","descriptions","featureData","ErrorMessage","featureData2","replaceUndefinedWithNull","isEmpty","FeatureDetails","BaseCoreDetails","CoreDetails"],"sourceRoot":""}