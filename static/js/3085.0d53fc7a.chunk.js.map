{"version":3,"file":"static/js/3085.0d53fc7a.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/abortable-promise-cache/src/AggregateAbortController.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AggregateStatusReporter.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AbortablePromiseCache.ts","../../../node_modules/@gmod/tabix/src/chunk.ts","../../../node_modules/@gmod/tabix/src/indexFile.ts","../../../node_modules/@gmod/tabix/src/long.ts","../../../node_modules/@gmod/tabix/src/util.ts","../../../node_modules/@gmod/tabix/src/virtualOffset.ts","../../../node_modules/@gmod/tabix/src/csi.ts","../../../node_modules/@gmod/tabix/src/tbi.ts","../../../node_modules/@gmod/tabix/src/tabixIndexedFile.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass NullSignal {}\n\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nexport default class AggregateAbortController {\n  signals = new Set()\n  abortController = new AbortController()\n\n  /**\n   * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n   *  will be treated as a null-signal, and this abortcontroller will no\n   *  longer be abortable.\n   */\n  //@ts-ignore\n  addSignal(signal: AbortSignal = new NullSignal()): void {\n    if (this.signal.aborted) {\n      throw new Error('cannot add a signal, already aborted!')\n    }\n\n    // note that a NullSignal will never fire, so if we\n    // have one this thing will never actually abort\n    this.signals.add(signal)\n    if (signal.aborted) {\n      // handle the abort immediately if it is already aborted\n      // for some reason\n      this.handleAborted(signal)\n    } else if (typeof signal.addEventListener === 'function') {\n      signal.addEventListener('abort', () => {\n        this.handleAborted(signal)\n      })\n    }\n  }\n\n  handleAborted(signal: AbortSignal): void {\n    this.signals.delete(signal)\n    if (this.signals.size === 0) {\n      this.abortController.abort()\n    }\n  }\n\n  get signal(): AbortSignal {\n    return this.abortController.signal\n  }\n\n  abort(): void {\n    this.abortController.abort()\n  }\n}\n","export default class AggregateStatusReporter<V> {\n  callbacks = new Set<(arg: V) => void>()\n  currentMessage?: V\n\n  addCallback(callback: (arg: V) => void = () => {}): void {\n    this.callbacks.add(callback)\n    if (this.currentMessage) {\n      callback(this.currentMessage)\n    }\n  }\n\n  callback(message: V) {\n    this.currentMessage = message\n    for (const elt of this.callbacks) {\n      elt(message)\n    }\n  }\n}\n","import AggregateAbortController from './AggregateAbortController.ts'\nimport AggregateStatusReporter from './AggregateStatusReporter.ts'\n\ninterface Cache<U> {\n  delete: (key: string) => void\n  keys: () => Iterator<string>\n  get: (key: string) => U | undefined\n  set: (key: string, value: U) => void\n  has: (key: string) => boolean\n}\ntype FillCallback<T, U, V> = (\n  data: T,\n  signal?: AbortSignal,\n  statusCallback?: (arg: V) => void,\n) => Promise<U>\n\ninterface Entry<U, V> {\n  aborter: AggregateAbortController\n  settled: boolean\n  readonly aborted: boolean\n  statusReporter: AggregateStatusReporter<V>\n  promise: Promise<U>\n}\nexport default class AbortablePromiseCache<T, U, V = string> {\n  /**\n   * @param {object} args constructor args\n   * @param {Function} args.fill fill callback, will be called with sig `fill(data, signal)`\n   * @param {object} args.cache backing store to use, must implement `get(key)`, `set(key, val)`,\n   *   `delete(key)`, and `keys() -> iterator`\n   */\n\n  private cache: Cache<Entry<U, V>>\n  private fillCallback: FillCallback<T, U, V>\n\n  constructor({\n    fill,\n    cache,\n  }: {\n    fill: FillCallback<T, U, V>\n    cache: Cache<Entry<U, V>>\n  }) {\n    if (typeof fill !== 'function') {\n      throw new TypeError('must pass a fill function')\n    }\n    if (typeof cache !== 'object') {\n      throw new TypeError('must pass a cache object')\n    }\n    if (\n      typeof cache.get !== 'function' ||\n      typeof cache.set !== 'function' ||\n      typeof cache.delete !== 'function'\n    ) {\n      throw new TypeError(\n        'cache must implement get(key), set(key, val), and and delete(key)',\n      )\n    }\n\n    this.cache = cache\n    this.fillCallback = fill\n  }\n\n  static isAbortException(exception: Error) {\n    return (\n      // DOMException\n      exception.name === 'AbortError' ||\n      // standard-ish non-DOM abort exception\n      //@ts-ignore\n      exception.code === 'ERR_ABORTED' ||\n      // stringified DOMException\n      exception.message === 'AbortError: aborted' ||\n      // stringified standard-ish exception\n      exception.message === 'Error: aborted'\n    )\n  }\n\n  evict(key: string, entry: Entry<U, V>) {\n    if (this.cache.get(key) === entry) {\n      this.cache.delete(key)\n    }\n  }\n\n  fill(\n    key: string,\n    data: T,\n    signal?: AbortSignal,\n    statusCallback?: (arg: V) => void,\n  ) {\n    const aborter = new AggregateAbortController()\n    const statusReporter = new AggregateStatusReporter<V>()\n    statusReporter.addCallback(statusCallback)\n    const newEntry: Entry<U, V> = {\n      aborter: aborter,\n      promise: this.fillCallback(data, aborter.signal, (message: V) => {\n        statusReporter.callback(message)\n      }),\n      settled: false,\n      statusReporter,\n      get aborted() {\n        return this.aborter.signal.aborted\n      },\n    }\n    newEntry.aborter.addSignal(signal)\n\n    // remove the fill from the cache when its abortcontroller fires, if still in there\n    newEntry.aborter.signal.addEventListener('abort', () => {\n      if (!newEntry.settled) {\n        this.evict(key, newEntry)\n      }\n    })\n\n    // chain off the cached promise to record when it settles\n    newEntry.promise\n      .then(\n        () => {\n          newEntry.settled = true\n        },\n        () => {\n          newEntry.settled = true\n\n          // if the fill throws an error (including abort) and is still in the cache, remove it\n          this.evict(key, newEntry)\n        },\n      )\n      .catch((error: unknown) => {\n        // this will only be reached if there is some kind of\n        // bad bug in this library\n        console.error(error)\n        throw error\n      })\n\n    this.cache.set(key, newEntry)\n  }\n\n  static checkSinglePromise<U>(promise: Promise<U>, signal?: AbortSignal) {\n    // check just this signal for having been aborted, and abort the\n    // promise if it was, regardless of what happened with the cached\n    // response\n    function checkForSingleAbort() {\n      if (signal?.aborted) {\n        throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' })\n      }\n    }\n\n    return promise.then(\n      result => {\n        checkForSingleAbort()\n        return result\n      },\n      (error: unknown) => {\n        checkForSingleAbort()\n        throw error\n      },\n    )\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key)\n  }\n\n  /**\n   * Callback for getting status of the pending async\n   *\n   * @callback statusCallback\n   * @param {any} status, current status string or message object\n   */\n\n  /**\n   * @param {any} key cache key to use for this request\n   * @param {any} data data passed as the first argument to the fill callback\n   * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n   * @param {statusCallback} a callback to get the current status of a pending async operation\n   */\n  get(\n    key: string,\n    data: T,\n    signal?: AbortSignal,\n    statusCallback?: (arg: V) => void,\n  ): Promise<U> {\n    if (!signal && data instanceof AbortSignal) {\n      throw new TypeError(\n        'second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?',\n      )\n    }\n    const cacheEntry = this.cache.get(key)\n\n    if (cacheEntry) {\n      if (cacheEntry.aborted && !cacheEntry.settled) {\n        // if it's aborted but has not realized it yet, evict it and redispatch\n        this.evict(key, cacheEntry)\n        return this.get(key, data, signal, statusCallback)\n      }\n\n      if (cacheEntry.settled) {\n        // too late to abort, just return it\n        return cacheEntry.promise\n      }\n\n      // request is in-flight, add this signal to its list of signals,\n      // or if there is no signal, the aborter will become non-abortable\n      cacheEntry.aborter.addSignal(signal)\n      cacheEntry.statusReporter.addCallback(statusCallback)\n\n      return AbortablePromiseCache.checkSinglePromise(\n        cacheEntry.promise,\n        signal,\n      )\n    }\n\n    // if we got here, it is not in the cache. fill.\n    this.fill(key, data, signal, statusCallback)\n    return AbortablePromiseCache.checkSinglePromise(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.cache.get(key)!.promise,\n      signal,\n    )\n  }\n\n  /**\n   * delete the given entry from the cache. if it exists and its fill request has\n   * not yet settled, the fill will be signaled to abort.\n   *\n   * @param {any} key\n   */\n  delete(key: string) {\n    const cachedEntry = this.cache.get(key)\n    if (cachedEntry) {\n      if (!cachedEntry.settled) {\n        cachedEntry.aborter.abort()\n      }\n      this.cache.delete(key)\n    }\n  }\n\n  /**\n   * Clear all requests from the cache. Aborts any that have not settled.\n   * @returns {number} count of entries deleted\n   */\n  clear() {\n    // iterate without needing regenerator-runtime\n    const keyIter = this.cache.keys()\n    let deleteCount = 0\n    for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n      this.delete(result.value)\n      deleteCount += 1\n    }\n    return deleteCount\n  }\n}\n","import VirtualOffset from './virtualOffset.ts'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public minv: VirtualOffset\n  public maxv: VirtualOffset\n  public bin: number\n  public _fetchedSize?: number\n\n  constructor(\n    minv: VirtualOffset,\n    maxv: VirtualOffset,\n    bin: number,\n    fetchedSize = undefined,\n  ) {\n    this.minv = minv\n    this.maxv = maxv\n    this.bin = bin\n    this._fetchedSize = fetchedSize\n  }\n\n  toUniqueString() {\n    return `${this.minv}..${this.maxv} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","import Chunk from './chunk.ts'\nimport VirtualOffset from './virtualOffset.ts'\n\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nexport interface Options {\n  signal?: AbortSignal\n}\n\nexport interface IndexData {\n  refNameToId: Record<string, number>\n  refIdToName: string[]\n  metaChar: string | null\n  columnNumbers: { ref: number; start: number; end: number }\n  coordinateType: string\n  format: string\n  [key: string]: any\n}\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (arg0: string) => string\n  private parseP?: Promise<IndexData>\n\n  constructor({\n    filehandle,\n    renameRefSeqs = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeqs?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeqs\n  }\n\n  public abstract lineCount(refName: string, args: Options): Promise<number>\n\n  protected abstract _parse(opts: Options): Promise<IndexData>\n\n  public async getMetadata(opts: Options = {}) {\n    const { indices: _indices, ...rest } = await this.parse(opts)\n    return rest\n  }\n\n  public abstract blocksForRange(\n    refName: string,\n    start: number,\n    end: number,\n    opts: Options,\n  ): Promise<Chunk[]>\n\n  _findFirstData(\n    currentFdl: VirtualOffset | undefined,\n    virtualOffset: VirtualOffset,\n  ) {\n    if (currentFdl) {\n      return currentFdl.compareTo(virtualOffset) > 0\n        ? virtualOffset\n        : currentFdl\n    } else {\n      return virtualOffset\n    }\n  }\n\n  async parse(opts: Options = {}) {\n    if (!this.parseP) {\n      this.parseP = this._parse(opts).catch((e: unknown) => {\n        this.parseP = undefined\n        throw e\n      })\n    }\n    return this.parseP\n  }\n\n  async hasRefSeq(seqId: number, opts: Options = {}) {\n    const idx = await this.parse(opts)\n    return !!idx.indices[seqId]?.binIndex\n  }\n}\n","export const TWO_PWR_16_DBL = 1 << 16\nexport const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL\n\nexport function longFromBytesToUnsigned(source: Uint8Array, i = 0) {\n  const low =\n    source[i]! |\n    (source[i + 1]! << 8) |\n    (source[i + 2]! << 16) |\n    (source[i + 3]! << 24)\n  const high =\n    source[i + 4]! |\n    (source[i + 5]! << 8) |\n    (source[i + 6]! << 16) |\n    (source[i + 7]! << 24)\n  return (high >>> 0) * TWO_PWR_32_DBL + (low >>> 0)\n}\n","import Chunk from './chunk.ts'\nimport VirtualOffset from './virtualOffset.ts'\n\nclass AbortError extends Error {\n  public code: string | undefined\n}\n/**\n * Properly check if the given AbortSignal is aborted. Per the standard, if the\n * signal reads as aborted, this function throws either a DOMException\n * AbortError, or a regular error with a `code` attribute set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted`\n * attribute\n *\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    if (typeof DOMException !== 'undefined') {\n      throw new DOMException('aborted', 'AbortError')\n    } else {\n      const e = new AbortError('aborted')\n      e.code = 'ERR_ABORTED'\n      throw e\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest?: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | null = null\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort(function (c0, c1) {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif !== 0 ? dif : c0.minv.dataPosition - c1.minv.dataPosition\n  })\n\n  chunks.forEach(chunk => {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === null) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  })\n\n  return mergedChunks\n}\n","export default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n}\nexport function fromBytes(bytes: Uint8Array, offset = 0) {\n  return new VirtualOffset(\n    bytes[offset + 7]! * 0x10000000000 +\n      bytes[offset + 6]! * 0x100000000 +\n      bytes[offset + 5]! * 0x1000000 +\n      bytes[offset + 4]! * 0x10000 +\n      bytes[offset + 3]! * 0x100 +\n      bytes[offset + 2]!,\n    (bytes[offset + 1]! << 8) | bytes[offset]!,\n  )\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\n\nimport Chunk from './chunk.ts'\nimport IndexFile, { Options } from './indexFile.ts'\nimport { longFromBytesToUnsigned } from './long.ts'\nimport { optimizeChunks } from './util.ts'\nimport VirtualOffset, { fromBytes } from './virtualOffset.ts'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nconst formats = {\n  0: 'generic',\n  1: 'SAM',\n  2: 'VCF',\n}\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber: number\n  private depth: number\n  private minShift: number\n  constructor(args: any) {\n    super(args)\n    this.maxBinNumber = 0\n    this.depth = 0\n    this.minShift = 0\n  }\n  async lineCount(refName: string, opts: Options = {}): Promise<number> {\n    const indexData = await this.parse(opts)\n    const refId = indexData.refNameToId[refName]\n    if (refId === undefined) {\n      return -1\n    }\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    const { stats } = indexData.indices[refId]\n    if (stats) {\n      return stats.lineCount\n    }\n    return -1\n  }\n\n  indexCov() {\n    throw new Error('CSI indexes do not support indexcov')\n  }\n\n  parseAuxData(bytes: Uint8Array, offset: number) {\n    const dataView = new DataView(bytes.buffer)\n    const formatFlags = dataView.getInt32(offset, true)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = formats[(formatFlags & 0xf) as 0 | 1 | 2]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: dataView.getInt32(offset + 4, true),\n      start: dataView.getInt32(offset + 8, true),\n      end: dataView.getInt32(offset + 12, true),\n    }\n    const metaValue = dataView.getInt32(offset + 16, true)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = dataView.getInt32(offset + 20, true)\n    const nameSectionLength = dataView.getInt32(offset + 24, true)\n\n    const { refIdToName, refNameToId } = this._parseNameBytes(\n      bytes.subarray(offset + 28, offset + 28 + nameSectionLength),\n    )\n\n    return {\n      refIdToName,\n      refNameToId,\n      skipLines,\n      metaChar,\n      columnNumbers,\n      format,\n      coordinateType,\n    }\n  }\n\n  _parseNameBytes(namesBytes: Uint8Array) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName = []\n    const refNameToId: Record<string, number> = {}\n    const decoder = new TextDecoder('utf8')\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          const refName = this.renameRefSeq(\n            decoder.decode(namesBytes.subarray(currNameStart, i)),\n          )\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return {\n      refNameToId,\n      refIdToName,\n    }\n  }\n\n  // fetch and parse the index\n\n  async _parse(opts: Options = {}) {\n    const bytes = await unzip(await this.filehandle.readFile(opts))\n    const dataView = new DataView(bytes.buffer)\n\n    // check TBI magic numbers\n    let csiVersion\n    if (dataView.getUint32(0, true) === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (dataView.getUint32(0, true) === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error('Not a CSI file')\n    }\n\n    this.minShift = dataView.getInt32(4, true)\n    this.depth = dataView.getInt32(8, true)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (this.minShift + this.depth * 3)\n    const auxLength = dataView.getInt32(12, true)\n    const aux =\n      auxLength && auxLength >= 30\n        ? this.parseAuxData(bytes, 16)\n        : {\n            refIdToName: [],\n            refNameToId: {},\n            metaChar: null,\n            columnNumbers: { ref: 0, start: 1, end: 2 },\n            coordinateType: 'zero-based-half-open',\n            format: 'generic',\n          }\n    const refCount = dataView.getInt32(16 + auxLength, true)\n\n    // read the indexes for each reference sequence\n    let firstDataLine: VirtualOffset | undefined\n    let currOffset = 16 + auxLength + 4\n    const indices = new Array(refCount).fill(0).map(() => {\n      const binCount = dataView.getInt32(currOffset, true)\n      currOffset += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = dataView.getUint32(currOffset, true)\n        if (bin > this.maxBinNumber) {\n          // this is a fake bin that actually has stats information about the\n          // reference sequence in it\n          stats = this.parsePseudoBin(bytes, currOffset + 4)\n          currOffset += 4 + 8 + 4 + 16 + 16\n        } else {\n          const loffset = fromBytes(bytes, currOffset + 4)\n          firstDataLine = this._findFirstData(firstDataLine, loffset)\n          const chunkCount = dataView.getInt32(currOffset + 12, true)\n          currOffset += 16\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      return { binIndex, stats }\n    })\n\n    return {\n      ...aux,\n      csi: true,\n      refCount,\n      maxBlockSize: 1 << 16,\n      firstDataLine,\n      csiVersion,\n      indices,\n      depth: this.depth,\n      maxBinNumber: this.maxBinNumber,\n      maxRefLength,\n    }\n  }\n\n  parsePseudoBin(bytes: Uint8Array, offset: number) {\n    return {\n      lineCount: longFromBytesToUnsigned(bytes, offset + 28),\n    }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const refId = indexData.refNameToId[refName]\n    if (refId === undefined) {\n      return []\n    }\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    // List of bin #s that overlap min, max\n    const overlappingBins = this.reg2bins(min, max)\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end) (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e] as const)\n    }\n    return bins\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\n\nimport Chunk from './chunk.ts'\nimport IndexFile, { Options } from './indexFile.ts'\nimport { longFromBytesToUnsigned } from './long.ts'\nimport { checkAbortSignal, optimizeChunks } from './util.ts'\nimport VirtualOffset, { fromBytes } from './virtualOffset.ts'\n\nconst TBI_MAGIC = 21578324 // TBI\\1\nconst TAD_LIDX_SHIFT = 14\n\n/**\n * calculate the list of bins that may overlap with region [beg,end)\n * (zero-based half-open)\n */\nfunction reg2bins(beg: number, end: number) {\n  beg += 1 // < convert to 1-based closed\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ] as const\n}\n\nexport default class TabixIndex extends IndexFile {\n  async lineCount(refName: string, opts: Options = {}) {\n    const indexData = await this.parse(opts)\n    const refId = indexData.refNameToId[refName]\n    if (refId === undefined) {\n      return -1\n    }\n    const idx = indexData.indices[refId]\n    if (!idx) {\n      return -1\n    }\n    return indexData.indices[refId].stats?.lineCount ?? -1\n  }\n\n  // fetch and parse the index\n  async _parse(opts: Options = {}) {\n    const buf = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buf)\n    checkAbortSignal(opts.signal)\n    const dataView = new DataView(bytes.buffer)\n\n    const magic = dataView.getUint32(0, true)\n    if (magic !== TBI_MAGIC /* \"TBI\\1\" */) {\n      throw new Error('Not a TBI file')\n    }\n\n    // number of reference sequences in the index\n    const refCount = dataView.getUint32(4, true)\n    const formatFlags = dataView.getUint32(8, true)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const formatOpts: Record<number, string> = {\n      0: 'generic',\n      1: 'SAM',\n      2: 'VCF',\n    }\n    const format = formatOpts[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: dataView.getInt32(12, true),\n      start: dataView.getInt32(16, true),\n      end: dataView.getInt32(20, true),\n    }\n    const metaValue = dataView.getInt32(24, true)\n    const depth = 5\n    const maxBinNumber = ((1 << ((depth + 1) * 3)) - 1) / 7\n    const maxRefLength = 2 ** (14 + depth * 3)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : null\n    const skipLines = dataView.getInt32(28, true)\n\n    // read sequence dictionary\n    const nameSectionLength = dataView.getInt32(32, true)\n    const { refNameToId, refIdToName } = this._parseNameBytes(\n      bytes.slice(36, 36 + nameSectionLength),\n    )\n\n    // read the indexes for each reference sequence\n    let currOffset = 36 + nameSectionLength\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array(refCount).fill(0).map(() => {\n      // the binning index\n      const binCount = dataView.getInt32(currOffset, true)\n      currOffset += 4\n      const binIndex: Record<number, Chunk[]> = {}\n      let stats\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = dataView.getUint32(currOffset, true)\n        currOffset += 4\n        if (bin > maxBinNumber + 1) {\n          throw new Error(\n            'tabix index contains too many bins, please use a CSI index',\n          )\n        } else if (bin === maxBinNumber + 1) {\n          const chunkCount = dataView.getInt32(currOffset, true)\n          currOffset += 4\n          if (chunkCount === 2) {\n            stats = this.parsePseudoBin(bytes, currOffset)\n          }\n          currOffset += 16 * chunkCount\n        } else {\n          const chunkCount = dataView.getInt32(currOffset, true)\n          currOffset += 4\n          const chunks = new Array(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, currOffset)\n            const v = fromBytes(bytes, currOffset + 8)\n            currOffset += 16\n            firstDataLine = this._findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      // the linear index\n      const linearCount = dataView.getInt32(currOffset, true)\n      currOffset += 4\n      const linearIndex = new Array(linearCount)\n      for (let k = 0; k < linearCount; k += 1) {\n        linearIndex[k] = fromBytes(bytes, currOffset)\n        currOffset += 8\n        firstDataLine = this._findFirstData(firstDataLine, linearIndex[k])\n      }\n      return {\n        binIndex,\n        linearIndex,\n        stats,\n      }\n    })\n\n    return {\n      indices,\n      metaChar,\n      maxBinNumber,\n      maxRefLength,\n      skipLines,\n      firstDataLine,\n      columnNumbers,\n      coordinateType,\n      format,\n      refIdToName,\n      refNameToId,\n      maxBlockSize: 1 << 16,\n    }\n  }\n\n  parsePseudoBin(bytes: Uint8Array, offset: number) {\n    return {\n      lineCount: longFromBytesToUnsigned(bytes, offset + 16),\n    }\n  }\n\n  _parseNameBytes(namesBytes: Uint8Array) {\n    let currRefId = 0\n    let currNameStart = 0\n    const refIdToName: string[] = []\n    const refNameToId: Record<string, number> = {}\n    const decoder = new TextDecoder('utf8')\n    for (let i = 0; i < namesBytes.length; i += 1) {\n      if (!namesBytes[i]) {\n        if (currNameStart < i) {\n          const refName = this.renameRefSeq(\n            decoder.decode(namesBytes.subarray(currNameStart, i)),\n          )\n          refIdToName[currRefId] = refName\n          refNameToId[refName] = currRefId\n        }\n        currNameStart = i + 1\n        currRefId += 1\n      }\n    }\n    return {\n      refNameToId,\n      refIdToName,\n    }\n  }\n\n  async blocksForRange(\n    refName: string,\n    min: number,\n    max: number,\n    opts: Options = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const refId = indexData.refNameToId[refName]\n    if (refId === undefined) {\n      return []\n    }\n    const ba = indexData.indices[refId]\n    if (!ba) {\n      return []\n    }\n\n    const minOffset = ba.linearIndex.length\n      ? ba.linearIndex[\n          min >> TAD_LIDX_SHIFT >= ba.linearIndex.length\n            ? ba.linearIndex.length - 1\n            : min >> TAD_LIDX_SHIFT\n        ]\n      : new VirtualOffset(0, 0)\n    if (!minOffset) {\n      console.warn('querying outside of possible tabix range')\n    }\n\n    // const { linearIndex, binIndex } = indexes\n\n    const overlappingBins = reg2bins(min, max) // List of bin #s that overlap min, max\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        if (ba.binIndex[bin]) {\n          for (const c of ba.binIndex[bin]) {\n            chunks.push(new Chunk(c.minv, c.maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest = null\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n      if (vp) {\n        if (!lowest || vp.compareTo(lowest) < 0) {\n          lowest = vp\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n}\n","import AbortablePromiseCache from '@gmod/abortable-promise-cache'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { LocalFile, RemoteFile } from 'generic-filehandle2'\nimport LRU from 'quick-lru'\n\nimport Chunk from './chunk.ts'\nimport CSI from './csi.ts'\nimport IndexFile, { IndexData, Options } from './indexFile.ts'\nimport TBI from './tbi.ts'\nimport { checkAbortSignal } from './util.ts'\n\nimport type { GenericFilehandle } from 'generic-filehandle2'\n\nfunction isASCII(str: string) {\n  // eslint-disable-next-line no-control-regex\n  return /^[\\u0000-\\u007F]*$/.test(str)\n}\n\ntype GetLinesCallback = (line: string, fileOffset: number) => void\n\ninterface GetLinesOpts {\n  [key: string]: unknown\n  signal?: AbortSignal\n  lineCallback: GetLinesCallback\n}\n\ninterface ReadChunk {\n  buffer: Uint8Array\n  cpositions: number[]\n  dpositions: number[]\n}\n\nexport default class TabixIndexedFile {\n  private filehandle: GenericFilehandle\n  private index: IndexFile\n  private renameRefSeq: (n: string) => string\n  private chunkCache: AbortablePromiseCache<Chunk, ReadChunk>\n\n  /**\n   * @param {object} args\n   *\n   * @param {string} [args.path]\n   *\n   * @param {filehandle} [args.filehandle]\n   *\n   * @param {string} [args.tbiPath]\n   *\n   * @param {filehandle} [args.tbiFilehandle]\n   *\n   * @param {string} [args.csiPath]\n   *\n   * @param {filehandle} [args.csiFilehandle]\n   *\n   * @param {url} [args.url]\n   *\n   * @param {csiUrl} [args.csiUrl]\n   *\n   * @param {tbiUrl} [args.tbiUrl]\n   *\n   * @param {function} [args.renameRefSeqs] optional function with sig `string\n   * => string` to transform reference sequence names for the purpose of\n   * indexing and querying. note that the data that is returned is not altered,\n   * just the names of the reference sequences that are used for querying.\n   */\n  constructor({\n    path,\n    filehandle,\n    url,\n    tbiPath,\n    tbiUrl,\n    tbiFilehandle,\n    csiPath,\n    csiUrl,\n    csiFilehandle,\n    renameRefSeqs = n => n,\n    chunkCacheSize = 5 * 2 ** 20,\n  }: {\n    path?: string\n    filehandle?: GenericFilehandle\n    url?: string\n    tbiPath?: string\n    tbiUrl?: string\n    tbiFilehandle?: GenericFilehandle\n    csiPath?: string\n    csiUrl?: string\n    csiFilehandle?: GenericFilehandle\n    renameRefSeqs?: (n: string) => string\n    chunkCacheSize?: number\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else if (url) {\n      this.filehandle = new RemoteFile(url)\n    } else {\n      throw new TypeError('must provide either filehandle or path')\n    }\n\n    if (tbiFilehandle) {\n      this.index = new TBI({\n        filehandle: tbiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (csiFilehandle) {\n      this.index = new CSI({\n        filehandle: csiFilehandle,\n        renameRefSeqs,\n      })\n    } else if (tbiPath) {\n      this.index = new TBI({\n        filehandle: new LocalFile(tbiPath),\n        renameRefSeqs,\n      })\n    } else if (csiPath) {\n      this.index = new CSI({\n        filehandle: new LocalFile(csiPath),\n        renameRefSeqs,\n      })\n    } else if (path) {\n      this.index = new TBI({\n        filehandle: new LocalFile(`${path}.tbi`),\n        renameRefSeqs,\n      })\n    } else if (csiUrl) {\n      this.index = new CSI({\n        filehandle: new RemoteFile(csiUrl),\n      })\n    } else if (tbiUrl) {\n      this.index = new TBI({\n        filehandle: new RemoteFile(tbiUrl),\n      })\n    } else if (url) {\n      this.index = new TBI({\n        filehandle: new RemoteFile(`${url}.tbi`),\n      })\n    } else {\n      throw new TypeError(\n        'must provide one of tbiFilehandle, tbiPath, csiFilehandle, csiPath, tbiUrl, csiUrl',\n      )\n    }\n\n    this.renameRefSeq = renameRefSeqs\n    this.chunkCache = new AbortablePromiseCache<Chunk, ReadChunk>({\n      cache: new LRU({ maxSize: Math.floor(chunkCacheSize / (1 << 16)) }),\n      fill: (args: Chunk, signal?: AbortSignal) =>\n        this.readChunk(args, { signal }),\n    })\n  }\n\n  /**\n   * @param refName name of the reference sequence\n   *\n   * @param start start of the region (in 0-based half-open coordinates)\n   *\n   * @param end end of the region (in 0-based half-open coordinates)\n   *\n   * @param opts callback called for each line in the region. can also pass a\n   * object param containing obj.lineCallback, obj.signal, etc\n   *\n   * @returns promise that is resolved when the whole read is finished,\n   * rejected on error\n   */\n  async getLines(\n    refName: string,\n    s: number | undefined,\n    e: number | undefined,\n    opts: GetLinesOpts | GetLinesCallback,\n  ) {\n    let signal: AbortSignal | undefined\n    let options: Options = {}\n    let callback: (line: string, lineOffset: number) => void\n\n    if (typeof opts === 'function') {\n      callback = opts\n    } else {\n      options = opts\n      callback = opts.lineCallback\n      signal = opts.signal\n    }\n\n    const metadata = await this.index.getMetadata(options)\n    checkAbortSignal(signal)\n    const start = s ?? 0\n    const end = e ?? metadata.maxRefLength\n    if (!(start <= end)) {\n      throw new TypeError(\n        'invalid start and end coordinates. start must be less than or equal to end',\n      )\n    }\n    if (start === end) {\n      return\n    }\n\n    const chunks = await this.index.blocksForRange(refName, start, end, options)\n    checkAbortSignal(signal)\n    const decoder = new TextDecoder('utf8')\n\n    // now go through each chunk and parse and filter the lines out of it\n    for (const c of chunks) {\n      const { buffer, cpositions, dpositions } = await this.chunkCache.get(\n        c.toString(),\n        c,\n        signal,\n      )\n\n      checkAbortSignal(signal)\n      let blockStart = 0\n      let pos = 0\n\n      // fast path, Buffer is just ASCII chars and not gigantor, can be\n      // converted to string and processed directly. if it is not ASCII or\n      // gigantic (chrome max str len is 512Mb), we have to decode line by line\n      const str = decoder.decode(buffer)\n      const strIsASCII = isASCII(str)\n      while (blockStart < str.length) {\n        let line: string\n        let n: number\n        if (strIsASCII) {\n          n = str.indexOf('\\n', blockStart)\n          if (n === -1) {\n            break\n          }\n          line = str.slice(blockStart, n)\n        } else {\n          n = buffer.indexOf('\\n'.charCodeAt(0), blockStart)\n          if (n === -1) {\n            break\n          }\n          const b = buffer.slice(blockStart, n)\n          line = decoder.decode(b)\n        }\n\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (dpositions) {\n          while (blockStart + c.minv.dataPosition >= dpositions[pos++]!) {}\n          pos--\n        }\n\n        // filter the line for whether it is within the requested range\n        const { startCoordinate, overlaps } = this.checkLine(\n          metadata,\n          refName,\n          start,\n          end,\n          line,\n        )\n\n        if (overlaps) {\n          callback(\n            line,\n            // cpositions[pos] refers to actual file offset of a bgzip block\n            // boundaries\n            //\n            // we multiply by (1 <<8) in order to make sure each block has a\n            // \"unique\" address space so that data in that block could never\n            // overlap\n            //\n            // then the blockStart-dpositions is an uncompressed file offset\n            // from that bgzip block boundary, and since the cpositions are\n            // multiplied by (1 << 8) these uncompressed offsets get a unique\n            // space\n            cpositions[pos]! * (1 << 8) +\n              (blockStart - dpositions[pos]!) +\n              c.minv.dataPosition +\n              1,\n          )\n        } else if (startCoordinate !== undefined && startCoordinate >= end) {\n          // the lines were overlapping the region, but now have stopped, so we\n          // must be at the end of the relevant data and we can stop processing\n          // data now\n          return\n        }\n        blockStart = n + 1\n      }\n    }\n  }\n\n  async getMetadata(opts: Options = {}) {\n    return this.index.getMetadata(opts)\n  }\n\n  /**\n   * get a buffer containing the \"header\" region of the file, which are the\n   * bytes up to the first non-meta line\n   */\n  async getHeaderBuffer(opts: Options = {}) {\n    const { firstDataLine, metaChar, maxBlockSize } =\n      await this.getMetadata(opts)\n\n    checkAbortSignal(opts.signal)\n\n    const maxFetch = (firstDataLine?.blockPosition || 0) + maxBlockSize\n    // TODO: what if we don't have a firstDataLine, and the header actually\n    // takes up more than one block? this case is not covered here\n\n    const buf = await this.filehandle.read(maxFetch, 0, opts)\n    const bytes = await unzip(buf)\n\n    // trim off lines after the last non-meta line\n    if (metaChar) {\n      // trim backward from the end\n      let lastNewline = -1\n      const newlineByte = '\\n'.charCodeAt(0)\n      const metaByte = metaChar.charCodeAt(0)\n      for (let i = 0; i < bytes.length; i += 1) {\n        if (i === lastNewline + 1 && bytes[i] !== metaByte) {\n          break\n        }\n        if (bytes[i] === newlineByte) {\n          lastNewline = i\n        }\n      }\n      return bytes.subarray(0, lastNewline + 1)\n    }\n    return bytes\n  }\n\n  /**\n   * get a string containing the \"header\" region of the file, is the portion up\n   * to the first non-meta line\n   *\n   * @returns {Promise} for a string\n   */\n  async getHeader(opts: Options = {}) {\n    const decoder = new TextDecoder('utf8')\n    const bytes = await this.getHeaderBuffer(opts)\n    return decoder.decode(bytes)\n  }\n\n  /**\n   * get an array of reference sequence names, in the order in which they occur\n   * in the file. reference sequence renaming is not applied to these names.\n   */\n  async getReferenceSequenceNames(opts: Options = {}) {\n    const metadata = await this.getMetadata(opts)\n    return metadata.refIdToName\n  }\n\n  /**\n   * @param {object} metadata metadata object from the parsed index, containing\n   * columnNumbers, metaChar, and format\n   *\n   * @param {string} regionRefName\n   *\n   * @param {number} regionStart region start coordinate (0-based-half-open)\n   *\n   * @param {number} regionEnd region end coordinate (0-based-half-open)\n   *\n   * @param {array[string]} line\n   *\n   * @returns {object} like `{startCoordinate, overlaps}`. overlaps is boolean,\n   * true if line is a data line that overlaps the given region\n   */\n  checkLine(\n    metadata: IndexData,\n    regionRefName: string,\n    regionStart: number,\n    regionEnd: number,\n    line: string,\n  ) {\n    const { columnNumbers, metaChar, coordinateType, format } = metadata\n    // skip meta lines\n    if (metaChar && line.startsWith(metaChar)) {\n      return { overlaps: false }\n    }\n\n    // check ref/start/end using column metadata from index\n    let { ref, start, end } = columnNumbers\n    if (!ref) {\n      ref = 0\n    }\n    if (!start) {\n      start = 0\n    }\n    if (!end) {\n      end = 0\n    }\n    if (format === 'VCF') {\n      end = 8\n    }\n    const maxColumn = Math.max(ref, start, end)\n\n    // this code is kind of complex, but it is fairly fast. basically, we want\n    // to avoid doing a split, because if the lines are really long that could\n    // lead to us allocating a bunch of extra memory, which is slow\n\n    let currentColumnNumber = 1 // cols are numbered starting at 1 in the index metadata\n    let currentColumnStart = 0\n    let refSeq = ''\n    let startCoordinate = -Infinity\n    const l = line.length\n    for (let i = 0; i < l + 1; i++) {\n      if (line[i] === '\\t' || i === l) {\n        if (currentColumnNumber === ref) {\n          if (\n            this.renameRefSeq(line.slice(currentColumnStart, i)) !==\n            regionRefName\n          ) {\n            return {\n              overlaps: false,\n            }\n          }\n        } else if (currentColumnNumber === start) {\n          startCoordinate = parseInt(line.slice(currentColumnStart, i), 10)\n          // we convert to 0-based-half-open\n          if (coordinateType === '1-based-closed') {\n            startCoordinate -= 1\n          }\n          if (startCoordinate >= regionEnd) {\n            return {\n              startCoordinate,\n              overlaps: false,\n            }\n          }\n          if (end === 0 || end === start) {\n            // if we have no end, we assume the feature is 1 bp long\n            if (startCoordinate + 1 <= regionStart) {\n              return {\n                startCoordinate,\n                overlaps: false,\n              }\n            }\n          }\n        } else if (format === 'VCF' && currentColumnNumber === 4) {\n          refSeq = line.slice(currentColumnStart, i)\n        } else if (currentColumnNumber === end) {\n          // this will never match if there is no end column\n          const endCoordinate =\n            format === 'VCF'\n              ? this._getVcfEnd(\n                  startCoordinate,\n                  refSeq,\n                  line.slice(currentColumnStart, i),\n                )\n              : Number.parseInt(line.slice(currentColumnStart, i), 10)\n          if (endCoordinate <= regionStart) {\n            return {\n              overlaps: false,\n            }\n          }\n        }\n        currentColumnStart = i + 1\n        currentColumnNumber += 1\n        if (currentColumnNumber > maxColumn) {\n          break\n        }\n      }\n    }\n    return {\n      startCoordinate,\n      overlaps: true,\n    }\n  }\n\n  _getVcfEnd(startCoordinate: number, refSeq: string, info: any) {\n    let endCoordinate = startCoordinate + refSeq.length\n    // ignore TRA features as they specify CHR2 and END as being on a different\n    // chromosome\n    //\n    // if CHR2 is on the same chromosome, still ignore it because there should\n    // be another pairwise feature at the end of this one\n    const isTRA = info.includes('SVTYPE=TRA')\n    if (info[0] !== '.' && !isTRA) {\n      let prevChar = ';'\n      for (let j = 0; j < info.length; j += 1) {\n        if (prevChar === ';' && info.slice(j, j + 4) === 'END=') {\n          let valueEnd = info.indexOf(';', j)\n          if (valueEnd === -1) {\n            valueEnd = info.length\n          }\n          endCoordinate = parseInt(info.slice(j + 4, valueEnd), 10)\n          break\n        }\n        prevChar = info[j]\n      }\n    } else if (isTRA) {\n      return startCoordinate + 1\n    }\n    return endCoordinate\n  }\n\n  /**\n   * return the approximate number of data lines in the given reference\n   * sequence\n   *\n   * @param refSeq reference sequence name\n   *\n   * @returns number of data lines present on that reference sequence\n   */\n  async lineCount(refName: string, opts: Options = {}) {\n    return this.index.lineCount(refName, opts)\n  }\n\n  /**\n   * read and uncompress the data in a chunk (composed of one or more\n   * contiguous bgzip blocks) of the file\n   */\n  async readChunk(c: Chunk, opts: Options = {}) {\n    const ret = await this.filehandle.read(\n      c.fetchedSize(),\n      c.minv.blockPosition,\n      opts,\n    )\n    return unzipChunkSlice(ret, c)\n  }\n}\n"],"names":["NullSignal","AggregateAbortController","signals","Set","abortController","AbortController","addSignal","signal","this","aborted","Error","add","handleAborted","addEventListener","delete","size","abort","AggregateStatusReporter","callbacks","addCallback","callback","currentMessage","message","elt","AbortablePromiseCache","constructor","fill","cache","TypeError","get","set","fillCallback","isAbortException","exception","name","code","evict","key","entry","data","statusCallback","aborter","statusReporter","newEntry","promise","settled","then","catch","error","console","checkSinglePromise","checkForSingleAbort","Object","assign","result","has","AbortSignal","cacheEntry","cachedEntry","clear","keyIter","keys","deleteCount","next","done","value","Chunk","minv","maxv","bin","fetchedSize","undefined","_fetchedSize","toUniqueString","toString","compareTo","b","blockPosition","IndexFile","filehandle","renameRefSeqs","n","renameRefSeq","getMetadata","opts","indices","_indices","rest","parse","_findFirstData","currentFdl","virtualOffset","parseP","_parse","e","hasRefSeq","seqId","idx","binIndex","longFromBytesToUnsigned","source","i","low","TWO_PWR_16_DBL","AbortError","checkAbortSignal","DOMException","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","length","sort","c0","c1","dif","dataPosition","forEach","chunk","chunk1","chunk2","push","VirtualOffset","fromBytes","bytes","offset","formats","rshift","num","bits","Math","floor","CSI","args","super","maxBinNumber","depth","minShift","lineCount","refName","indexData","refId","refNameToId","stats","indexCov","parseAuxData","dataView","DataView","buffer","formatFlags","getInt32","coordinateType","format","columnNumbers","ref","start","end","metaValue","metaChar","String","fromCharCode","skipLines","nameSectionLength","refIdToName","_parseNameBytes","subarray","namesBytes","currRefId","currNameStart","decoder","TextDecoder","decode","readFile","csiVersion","getUint32","maxRefLength","auxLength","aux","refCount","firstDataLine","currOffset","Array","map","binCount","j","parsePseudoBin","loffset","chunkCount","k","u","v","csi","maxBlockSize","blocksForRange","min","max","ba","overlappingBins","reg2bins","c","beg","l","t","s","bins","TabixIndex","buf","slice","linearCount","linearIndex","warn","nintv","minLin","maxLin","vp","isASCII","str","test","TabixIndexedFile","path","url","tbiPath","tbiUrl","tbiFilehandle","csiPath","csiUrl","csiFilehandle","chunkCacheSize","index","chunkCache","A","maxSize","readChunk","getLines","options","lineCallback","metadata","cpositions","dpositions","blockStart","pos","strIsASCII","line","indexOf","charCodeAt","startCoordinate","overlaps","checkLine","getHeaderBuffer","maxFetch","read","lastNewline","newlineByte","metaByte","getHeader","getReferenceSequenceNames","regionRefName","regionStart","regionEnd","startsWith","maxColumn","currentColumnNumber","currentColumnStart","refSeq","parseInt","_getVcfEnd","Number","info","endCoordinate","isTRA","includes","prevChar","valueEnd","ret"],"sourceRoot":""}