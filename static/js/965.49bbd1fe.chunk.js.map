{"version":3,"file":"static/js/965.49bbd1fe.chunk.js","mappings":"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","sources":["../../../packages/product-core/src/ui/FileInfoPanel.tsx","../../../packages/product-core/src/ui/RefNameInfoDialog.tsx","../../../packages/product-core/src/ui/AboutDialogContents.tsx","../../../packages/product-core/src/ui/AboutDialog.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  BaseCard,\n  Attributes,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui'\n\ntype FileInfo = Record<string, unknown> | string\n\nexport default function FileInfoPanel({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [error, setError] = useState<unknown>()\n  const [info, setInfo] = useState<FileInfo>()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const adapterConfig = readConfObject(config, 'adapter')\n        const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n          adapterConfig,\n        })\n        setInfo(result as FileInfo)\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const details =\n    typeof info === 'string'\n      ? {\n          header: `<pre>${info\n            .replaceAll('<', '&lt;')\n            .replaceAll('>', '&gt;')}</pre>`,\n        }\n      : info || {}\n\n  return (\n    <BaseCard title=\"File info\">\n      {error ? (\n        <ErrorMessage error={error} />\n      ) : info === undefined ? (\n        <LoadingEllipses message=\"Loading file data\" />\n      ) : (\n        <Attributes attributes={details} />\n      )}\n    </BaseCard>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Button, DialogContent, Typography } from '@mui/material'\nimport {\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport { Dialog, LoadingEllipses } from '@jbrowse/core/ui'\nimport { getSession } from '@jbrowse/core/util'\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\nimport copy from 'copy-to-clipboard'\n\nconst MAX_REF_NAMES = 10_000\n\nconst useStyles = makeStyles()(theme => ({\n  container: {\n    minWidth: 800,\n  },\n  refNames: {\n    maxHeight: 300,\n    width: '100%',\n    overflow: 'auto',\n    flexGrow: 1,\n    background: theme.palette.background.default,\n  },\n}))\n\nconst RefNameInfoDialog = observer(function ({\n  config,\n  onClose,\n}: {\n  config: AnyConfigurationModel\n  onClose: () => void\n}) {\n  const [error, setError] = useState<unknown>()\n  const [refNames, setRefNames] = useState<Record<string, string[]>>()\n  const [copied, setCopied] = useState(false)\n  const { classes } = useStyles()\n  const session = getSession(config)\n  const { rpcManager } = session\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    ;(async () => {\n      try {\n        const map = await Promise.all(\n          [...new Set(getConfAssemblyNames(config))].map(async assemblyName => {\n            const adapterConfig = readConfObject(config, 'adapter')\n            return [\n              assemblyName,\n              (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                adapterConfig,\n                // hack for synteny adapters\n                regions: [{ assemblyName }],\n              })) as string[],\n            ] as const\n          }),\n        )\n        setRefNames(Object.fromEntries(map))\n      } catch (e) {\n        console.error(e)\n        setError(e)\n      }\n    })()\n  }, [config, rpcManager])\n\n  const names = refNames ? Object.entries(refNames) : []\n  const result = names\n    .flatMap(([assemblyName, refNames]) => {\n      return [\n        `--- ${assemblyName} ---`,\n        ...refNames.slice(0, MAX_REF_NAMES),\n        refNames.length > MAX_REF_NAMES\n          ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n          : '',\n      ]\n    })\n    .filter(f => !!f)\n    .join('\\n')\n\n  return (\n    <Dialog\n      open\n      title=\"Reference sequence names used in track\"\n      onClose={onClose}\n    >\n      <DialogContent className={classes.container}>\n        {error ? (\n          <Typography color=\"error\">{`${error}`}</Typography>\n        ) : refNames === undefined ? (\n          <LoadingEllipses message=\"Loading refNames\" />\n        ) : (\n          <>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                copy(\n                  names\n                    .flatMap(([assemblyName, refNames]) => [\n                      `--- ${assemblyName} ---`,\n                      ...refNames,\n                    ])\n                    .filter(f => !!f)\n                    .join('\\n'),\n                )\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy ref names'}\n            </Button>\n\n            <pre className={classes.refNames}>{result}</pre>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default RefNameInfoDialog\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport clone from 'clone'\nimport copy from 'copy-to-clipboard'\nimport { Button } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport {\n  getConf,\n  readConfObject,\n  AnyConfigurationModel,\n} from '@jbrowse/core/configuration'\nimport { getSession, getEnv } from '@jbrowse/core/util'\nimport {\n  BaseCard,\n  Attributes,\n} from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport FileInfoPanel from './FileInfoPanel'\nimport RefNameInfoDialog from './RefNameInfoDialog'\n\nconst useStyles = makeStyles()({\n  content: {\n    minWidth: 800,\n  },\n  button: {\n    float: 'right',\n  },\n})\n\nfunction removeAttr(obj: Record<string, unknown>, attr: string) {\n  for (const prop in obj) {\n    if (prop === attr) {\n      delete obj[prop]\n    } else if (typeof obj[prop] === 'object') {\n      removeAttr(obj[prop] as Record<string, unknown>, attr)\n    }\n  }\n  return obj\n}\n\nconst AboutDialogContents = observer(function ({\n  config,\n}: {\n  config: AnyConfigurationModel\n}) {\n  const [copied, setCopied] = useState(false)\n  const conf = readConfObject(config)\n  const session = getSession(config)\n  const { classes } = useStyles()\n  const [showRefNames, setShowRefNames] = useState(false)\n\n  const hideUris =\n    getConf(session, ['formatAbout', 'hideUris']) ||\n    readConfObject(config, ['formatAbout', 'hideUris'])\n\n  const { pluginManager } = getEnv(session)\n\n  const confPostExt = pluginManager.evaluateExtensionPoint(\n    'Core-customizeAbout',\n    {\n      config: {\n        ...conf,\n        ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n        ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n      },\n    },\n    { session, config },\n  ) as Record<string, unknown>\n\n  const ExtraPanel = pluginManager.evaluateExtensionPoint(\n    'Core-extraAboutPanel',\n    null,\n    { session, config },\n  ) as { name: string; Component: React.FC<any> } | null\n\n  return (\n    <div className={classes.content}>\n      <BaseCard title=\"Configuration\">\n        {!hideUris ? (\n          <span className={classes.button}>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => {\n                setShowRefNames(true)\n              }}\n            >\n              Show ref names\n            </Button>\n            <Button\n              variant=\"contained\"\n              onClick={() => {\n                const snap = removeAttr(clone(conf), 'baseUri')\n                copy(JSON.stringify(snap, null, 2))\n                setCopied(true)\n                setTimeout(() => {\n                  setCopied(false)\n                }, 1000)\n              }}\n            >\n              {copied ? 'Copied to clipboard!' : 'Copy config'}\n            </Button>\n          </span>\n        ) : null}\n        <Attributes\n          attributes={confPostExt}\n          omit={['displays', 'baseUri', 'refNames', 'formatAbout']}\n          hideUris={hideUris}\n        />\n      </BaseCard>\n      {ExtraPanel ? (\n        <BaseCard title={ExtraPanel.name}>\n          <ExtraPanel.Component config={config} />\n        </BaseCard>\n      ) : null}\n      <FileInfoPanel config={config} />\n      {showRefNames ? (\n        <RefNameInfoDialog\n          config={config}\n          onClose={() => {\n            setShowRefNames(false)\n          }}\n        />\n      ) : null}\n    </div>\n  )\n})\n\nexport default AboutDialogContents\n","import React from 'react'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport Dialog from '@jbrowse/core/ui/Dialog'\nimport { getSession, getEnv } from '@jbrowse/core/util'\nimport { getTrackName } from '@jbrowse/core/util/tracks'\nimport AboutContents from './AboutDialogContents'\n\nexport function AboutDialog({\n  config,\n  handleClose,\n}: {\n  config: AnyConfigurationModel\n  handleClose: () => void\n}) {\n  const session = getSession(config)\n  const trackName = getTrackName(config, session)\n  const { pluginManager } = getEnv(session)\n\n  const AboutComponent = pluginManager.evaluateExtensionPoint(\n    'Core-replaceAbout',\n    AboutContents,\n    { session, config },\n  ) as React.FC<any>\n\n  return (\n    <Dialog open onClose={handleClose} title={trackName} maxWidth=\"xl\">\n      <AboutComponent config={config} />\n    </Dialog>\n  )\n}\n"],"names":["FileInfoPanel","config","error","setError","useState","info","setInfo","session","getSession","rpcManager","useEffect","adapterConfig","readConfObject","result","call","trackId","e","console","details","header","replaceAll","React","BaseCard","title","ErrorMessage","undefined","LoadingEllipses","message","Attributes","attributes","useStyles","makeStyles","theme","container","minWidth","refNames","maxHeight","width","overflow","flexGrow","background","palette","default","observer","onClose","setRefNames","copied","setCopied","classes","map","Promise","all","Set","getConfAssemblyNames","async","assemblyName","regions","Object","fromEntries","names","entries","flatMap","slice","length","filter","f","join","Dialog","open","DialogContent","className","Typography","color","Button","variant","onClick","copy","setTimeout","content","button","float","removeAttr","obj","attr","prop","conf","showRefNames","setShowRefNames","hideUris","getConf","pluginManager","getEnv","confPostExt","evaluateExtensionPoint","ExtraPanel","snap","clone","JSON","stringify","omit","name","Component","RefNameInfoDialog","AboutDialog","handleClose","trackName","getTrackName","AboutComponent","AboutContents","maxWidth"],"sourceRoot":""}