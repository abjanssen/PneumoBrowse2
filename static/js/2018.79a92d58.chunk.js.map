{"version":3,"file":"static/js/2018.79a92d58.chunk.js","mappings":"mOAYA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,EAAaC,IAAS,CACtCC,MAAO,CACLC,OAAQF,EAAMG,UACdC,QAASJ,EAAMG,WAEjBE,OAAQ,CACNC,UAAW,GACXC,aAAc,IACdC,QAAS,aAKb,SAASC,EAAiBC,GACxB,MAAM,SAAEC,GAAaC,OAAOC,QAAQ,YACpC,OAAOC,EAAAA,WACH,CACEC,UAAWJ,EAASK,eAAeN,GACnCO,aAAc,sBAEhBC,EAAAA,EAAAA,mBAAkB,CAAEC,KAAMT,GAChC,CAEe,SAASU,GAAkB,MAAEC,IAC1C,MAAM,QAAEC,GAAYxB,KACbyB,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,KACxBC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,gBAAeG,KAAKC,OAC/D,OACEC,EAAAA,cAACC,EAAAA,EAAK,CAACC,UAAWV,EAAQrB,OACxB6B,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,sDACJA,EAAAA,cAAA,UAAI,6EAKNA,EAAAA,cAACG,EAAAA,EAAS,CACRC,WAAS,EACTC,WAAS,EACTC,KAAM,GACNC,MAAOd,EACPe,YAAY,sDACZC,QAAQ,WACRC,SAAUC,IACRjB,EAAOiB,EAAMC,OAAOL,MAAM,IAG9BP,EAAAA,cAACa,EAAAA,EAAM,CAACJ,QAAQ,WAAWK,UAAU,SAAQ,kCAE3Cd,EAAAA,cAAA,SACEe,KAAK,OACLC,QAAM,EACNC,UAAQ,EACRP,SAAUA,EAAGE,aACX,MAAMM,EAAM,IAAKN,EAAOO,OAAS,IAAKC,KAAIxC,IAAQ,CAChDmC,KAAM,gBACNM,eAAgB1C,EAAiBC,GACjC0C,OAAQ1C,EAAK2C,SAEf7B,EAAO8B,KAAKC,UAAUP,EAAK,KAAM,GAAG,KAI1ClB,EAAAA,cAACG,EAAAA,EAAS,CACRI,MAAOX,EACP8B,WAAW,aACXhB,SAAUC,IACRd,EAAac,EAAMC,OAAOL,MAAM,IAGpCP,EAAAA,cAACa,EAAAA,EAAM,CACLJ,QAAQ,YACRP,UAAWV,EAAQjB,OACnBoD,QAASA,KACP,MAAMC,GAAUC,EAAAA,EAAAA,YAAWtC,GAC3B,IACE,MAAMuC,EAAU,CACd,GAAGlC,EAAUmC,cAAcC,WAAW,IAAK,QAAQlC,KAAKC,QACxD6B,EAAQK,UAAY,GAAK,iBACzBC,KAAK,IAGP,IAAIC,EACJ,IACEA,EAAUX,KAAKY,MAAM3C,EACvB,CAAE,MAAO4C,GACPF,EAAU1C,EACP6C,MAAM,cACNlB,KAAImB,GAAKA,EAAEC,SACXC,QAAOF,KAAOA,GACnB,CACA,MAAMG,EACkB,iBAAfP,EAAQ,GACX,CAAEA,WACF,CAAEQ,YAAaR,IAEjBS,EAAAA,EAAAA,wBAAuBhB,KACzBA,EAAQiB,aAAa,CACnBf,UACAf,KAAM,yBACNQ,KAAM3B,EACNkD,cAAe,CAACvD,EAAMwD,UACtBC,QAAS,CACPjC,KAAM,wBACH2B,KAIPnD,EAAM0D,MAAMC,UAAUpB,IAExBvC,EAAM4D,aACFC,EAAAA,EAAAA,2BAA0BxB,IAC5BA,EAAQyB,WAAW9D,EAEvB,CAAE,MAAO8C,GACPiB,QAAQC,MAAMlB,GACdT,EAAQ4B,YAAY,GAAGnB,IAAKA,EAC9B,IAEH,UAGDrC,EAAAA,cAAA,SAAG,sBACHA,EAAAA,cAAA,UACEA,EAAAA,cAAA,UAAI,6FAEoB,IACtBA,EAAAA,cAAA,YAAO,2HAAkI,IAAI,iDAG/IA,EAAAA,cAAA,UAAI,oHAOZ,C","sources":["../../../plugins/wiggle/src/MultiWiggleAddTrackWorkflow/AddTrackWorkflow.tsx"],"sourcesContent":["import React, { useState } from 'react'\nimport { Button, Paper, TextField } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\nimport {\n  getSession,\n  isElectron,\n  isSessionModelWithWidgets,\n  isSessionWithAddTracks,\n} from '@jbrowse/core/util'\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks'\nimport { AddTrackModel } from '@jbrowse/plugin-data-management'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    margin: theme.spacing(),\n    padding: theme.spacing(),\n  },\n  submit: {\n    marginTop: 25,\n    marginBottom: 100,\n    display: 'block',\n  },\n}))\n\n// on electron, use path to LocalFileLocation, on web, use the BlobLocation\nfunction makeFileLocation(file: File) {\n  const { webUtils } = window.require('electron')\n  return isElectron\n    ? {\n        localPath: webUtils.getPathForFile(file),\n        locationType: 'LocalPathLocation',\n      }\n    : storeBlobLocation({ blob: file })\n}\n\nexport default function MultiWiggleWidget({ model }: { model: AddTrackModel }) {\n  const { classes } = useStyles()\n  const [val, setVal] = useState('')\n  const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`)\n  return (\n    <Paper className={classes.paper}>\n      <ul>\n        <li>Enter list of URLs for bigwig files in the textbox</li>\n        <li>\n          Or, use the button below the text box to select files from your\n          computer\n        </li>\n      </ul>\n      <TextField\n        multiline\n        fullWidth\n        rows={10}\n        value={val}\n        placeholder=\"Paste list of URLs here, or use file selector below\"\n        variant=\"outlined\"\n        onChange={event => {\n          setVal(event.target.value)\n        }}\n      />\n      <Button variant=\"outlined\" component=\"label\">\n        Choose Files from your computer\n        <input\n          type=\"file\"\n          hidden\n          multiple\n          onChange={({ target }) => {\n            const res = [...(target.files || [])].map(file => ({\n              type: 'BigWigAdapter',\n              bigWigLocation: makeFileLocation(file),\n              source: file.name,\n            }))\n            setVal(JSON.stringify(res, null, 2))\n          }}\n        />\n      </Button>\n      <TextField\n        value={trackName}\n        helperText=\"Track name\"\n        onChange={event => {\n          setTrackName(event.target.value)\n        }}\n      />\n      <Button\n        variant=\"contained\"\n        className={classes.submit}\n        onClick={() => {\n          const session = getSession(model)\n          try {\n            const trackId = [\n              `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n              session.adminMode ? '' : '-sessionTrack',\n            ].join('')\n\n            // allow list of bigwigs in JSON format or line-by-line\n            let bigWigs: unknown[]\n            try {\n              bigWigs = JSON.parse(val)\n            } catch (e) {\n              bigWigs = val\n                .split(/\\n|\\r\\n|\\r/)\n                .map(f => f.trim())\n                .filter(f => !!f)\n            }\n            const obj =\n              typeof bigWigs[0] === 'string'\n                ? { bigWigs }\n                : { subadapters: bigWigs }\n\n            if (isSessionWithAddTracks(session)) {\n              session.addTrackConf({\n                trackId,\n                type: 'MultiQuantitativeTrack',\n                name: trackName,\n                assemblyNames: [model.assembly],\n                adapter: {\n                  type: 'MultiWiggleAdapter',\n                  ...obj,\n                },\n              })\n\n              model.view?.showTrack(trackId)\n            }\n            model.clearData()\n            if (isSessionModelWithWidgets(session)) {\n              session.hideWidget(model)\n            }\n          } catch (e) {\n            console.error(e)\n            session.notifyError(`${e}`, e)\n          }\n        }}\n      >\n        Submit\n      </Button>\n      <p>Additional notes: </p>\n      <ul>\n        <li>\n          The list of bigwig files in the text box can be a list of URLs, or a\n          list of elements like{' '}\n          <code>{`[{\"type\":\"BigWigAdapter\",\"bigWigLocation\":{\"uri\":\"http://host/file.bw\"}, \"color\":\"green\",\"source\":\"name for subtrack\"}]`}</code>{' '}\n          to apply e.g. the color attribute to the view\n        </li>\n        <li>\n          Adding local files will update the textbox with JSON contents that are\n          ready to submit with the \"Submit\" button\n        </li>\n      </ul>\n    </Paper>\n  )\n}\n"],"names":["useStyles","makeStyles","theme","paper","margin","spacing","padding","submit","marginTop","marginBottom","display","makeFileLocation","file","webUtils","window","require","isElectron","localPath","getPathForFile","locationType","storeBlobLocation","blob","MultiWiggleWidget","model","classes","val","setVal","useState","trackName","setTrackName","Date","now","React","Paper","className","TextField","multiline","fullWidth","rows","value","placeholder","variant","onChange","event","target","Button","component","type","hidden","multiple","res","files","map","bigWigLocation","source","name","JSON","stringify","helperText","onClick","session","getSession","trackId","toLowerCase","replaceAll","adminMode","join","bigWigs","parse","e","split","f","trim","filter","obj","subadapters","isSessionWithAddTracks","addTrackConf","assemblyNames","assembly","adapter","view","showTrack","clearData","isSessionModelWithWidgets","hideWidget","console","error","notifyError"],"sourceRoot":""}