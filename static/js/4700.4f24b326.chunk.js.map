{"version":3,"file":"static/js/4700.4f24b326.chunk.js","mappings":"gPAOe,SAASA,GAAU,MAAEC,IAClC,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,WAAS,IAC1BC,EAAQC,IAAaF,EAAAA,EAAAA,WAAS,GAC/BG,EAAUC,OAAOP,GACvB,OAAOM,EAAQE,OAAS,KACtBC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAASA,KACPC,IAAKT,GACLD,GAAU,GACVW,YAAW,KACTX,GAAU,KACT,MACHM,SAEDP,EAAS,sBAAwB,UAEpCQ,EAAAA,EAAAA,KAAA,UACEC,KAAK,SACLC,QAASA,KACPZ,GAAQe,IAAQA,KAChBN,SAEDV,EAAO,YAAc,eAExBW,EAAAA,EAAAA,KAAA,OAAAD,SAAMV,EAAOK,EAAU,GAAGA,EAAQY,MAAM,EAAG,gBAG7CN,EAAAA,EAAAA,KAAA,OAAAD,SAAML,GAEV,C,0BCvBA,MAAMa,GAA0BC,EAAAA,EAAAA,OAC9B,IAAM,kCAmFR,GAhF0BC,EAAAA,EAAAA,WAAS,UAAU,MAC3CC,EAAK,KACLC,IAKA,MAAM,KAAEC,EAAI,MAAEC,EAAK,QAAEC,GAAYJ,EACjC,OACEb,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACiB,sBAAda,EAAKX,MACJD,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAAA,EAAI,CACHC,KAAK,IACLd,QAASe,IACPA,EAAMC,iBACN,MAAM,MAAEC,GAAUP,EAClB,QAAcQ,IAAVP,EAIFM,EAAMN,IAAQQ,MAAMV,GACpBQ,EAAMN,EAAQ,IAAIQ,MAAMV,EAAKW,UACxB,CAKL,MAAMC,EAAKZ,EACLa,EAAKb,EAAKW,KACVG,EAAKF,EAAGG,aACRC,EAAKH,EAAGE,aACRE,EAAKT,EAAMU,MAAKjB,GAAQA,EAAKkB,cAAc,KAAOL,IAClDM,EAAKZ,EAAMU,MAAKjB,GAAQA,EAAKkB,cAAc,KAAOH,IACnDC,GAAOG,IACVC,EAAAA,EAAAA,YAAWtB,GAAOuB,OAChB,CACEL,EACI,mBAAkBM,EAAAA,EAAAA,mBAAkBX,qBACpC,GACJQ,EACI,mBAAkBG,EAAAA,EAAAA,mBAAkBV,qBACpC,IACJW,KAAK,UAGXP,GAAIP,MAAME,GACVQ,GAAIV,MAAMG,EACZ,GACAzB,SACH,kCAID,MACJC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAACe,EAAAA,EAAI,CACHC,KAAK,IACLd,QAASe,IACPA,EAAMC,iBACN,MAAMkB,EAAU,IAAIC,EAAAA,cAAc1B,GAC5B2B,GAAUN,EAAAA,EAAAA,YAAWtB,GAC3B4B,EAAQC,aAAYC,GAAe,CACjCjC,EACA,CACE+B,UACAF,UACAtB,UACA0B,mBAGJzC,SACH,uDAMT,IC9DA,GAzB6BU,EAAAA,EAAAA,WAAS,SAAUgC,GAG9C,MAAM,MAAE/B,GAAU+B,GACZ,YAAEC,GAAgBhC,EAClBC,EAAOgC,gBAAgBD,GAC7B,OAAO/B,GACLd,EAAAA,EAAAA,MAAC+C,EAAAA,EAAK,CAAA7C,SAAA,EACJC,EAAAA,EAAAA,KAAC6C,EAAAA,QAAc,IACTJ,EACJL,QAASzB,EACTmC,UAAW1D,IAASY,EAAAA,EAAAA,KAACb,EAAS,CAACC,MAAOA,OAExCY,EAAAA,EAAAA,KAAC+C,EAAAA,QAAQ,CAACC,MAAM,eAAcjD,UAC5BC,EAAAA,EAAAA,KAACiD,EAAiB,CAACvC,MAAOA,EAAOC,KAAMA,UAI3CX,EAAAA,EAAAA,KAAA,OAAAD,SAAK,wGAKT,G","sources":["../../../plugins/linear-comparative-view/src/SyntenyFeatureDetail/Formatter.tsx","../../../plugins/linear-comparative-view/src/SyntenyFeatureDetail/LinkToSyntenyView.tsx","../../../plugins/linear-comparative-view/src/SyntenyFeatureDetail/SyntenyFeatureDetail.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport copy from 'copy-to-clipboard'\n\n// this 'show more...' used specifically as a formatter on alignments feature\n// details because long SEQ or CRAM files, even a single div full of a ton of\n// data from a long read, can slow down the rest of the app\nexport default function Formatter({ value }: { value: unknown }) {\n  const [show, setShow] = useState(false)\n  const [copied, setCopied] = useState(false)\n  const display = String(value)\n  return display.length > 100 ? (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => {\n          copy(display)\n          setCopied(true)\n          setTimeout(() => {\n            setCopied(false)\n          }, 700)\n        }}\n      >\n        {copied ? 'Copied to clipboard' : 'Copy'}\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => {\n          setShow(val => !val)\n        }}\n      >\n        {show ? 'Show less' : 'Show more'}\n      </button>\n      <div>{show ? display : `${display.slice(0, 100)}...`}</div>\n    </>\n  ) : (\n    <div>{display}</div>\n  )\n}\n","import { lazy } from 'react'\n\nimport {\n  SimpleFeature,\n  assembleLocString,\n  getSession,\n} from '@jbrowse/core/util'\nimport { Link } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport type { SyntenyFeatureDetailModel } from './types'\nimport type { LinearSyntenyViewModel } from '../LinearSyntenyView/model'\nimport type { SimpleFeatureSerialized } from '@jbrowse/core/util'\n\n// lazies\nconst LaunchSyntenyViewDialog = lazy(\n  () => import('../LGVSyntenyDisplay/components/LaunchSyntenyViewDialog'),\n)\n\nconst LinkToSyntenyView = observer(function ({\n  model,\n  feat,\n}: {\n  model: SyntenyFeatureDetailModel\n  feat: SimpleFeatureSerialized\n}) {\n  const { view, level, trackId } = model\n  return (\n    <ul>\n      {view.type === 'LinearSyntenyView' ? (\n        <li>\n          <Link\n            href=\"#\"\n            onClick={event => {\n              event.preventDefault()\n              const { views } = view as LinearSyntenyViewModel\n              if (level !== undefined) {\n                // level is \"pre-known\", and stored in the SyntenyFeatureWidget\n                // model state e.g. when clicking on a feature from a\n                // LinearSyntenyRendering\n                views[level]?.navTo(feat)\n                views[level + 1]?.navTo(feat.mate as SimpleFeatureSerialized)\n              } else {\n                // best effort to find the right level. this is triggered for\n                // example if a user clicks on a feature in a LGVSyntenyDisplay\n                // in an existing LinearSyntenyView, there is no real proper\n                // level \"pre-known\" to this situation\n                const f1 = feat\n                const f2 = feat.mate as SimpleFeatureSerialized\n                const r1 = f1.assemblyName as string\n                const r2 = f2.assemblyName as string\n                const v1 = views.find(view => view.assemblyNames[0] === r1)\n                const v2 = views.find(view => view.assemblyNames[0] === r2)\n                if (!v1 || !v2) {\n                  getSession(model).notify(\n                    [\n                      v1\n                        ? `Unable to find ${assembleLocString(f1)} in synteny view`\n                        : '',\n                      v2\n                        ? `Unable to find ${assembleLocString(f2)} in synteny view`\n                        : '',\n                    ].join(' ... '),\n                  )\n                }\n                v1?.navTo(f1)\n                v2?.navTo(f2)\n              }\n            }}\n          >\n            Center view on this feature\n          </Link>\n        </li>\n      ) : null}\n      <li>\n        <Link\n          href=\"#\"\n          onClick={event => {\n            event.preventDefault()\n            const feature = new SimpleFeature(feat)\n            const session = getSession(model)\n            session.queueDialog(handleClose => [\n              LaunchSyntenyViewDialog,\n              {\n                session,\n                feature,\n                trackId,\n                handleClose,\n              },\n            ])\n          }}\n        >\n          Launch new linear synteny view on this feature\n        </Link>\n      </li>\n    </ul>\n  )\n})\n\nexport default LinkToSyntenyView\n","import BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails'\nimport { Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\nimport Formatter from './Formatter'\nimport LinkToSyntenyView from './LinkToSyntenyView'\n\nimport type { SyntenyFeatureDetailModel } from './types'\n\nconst SyntenyFeatureDetail = observer(function (props: {\n  model: SyntenyFeatureDetailModel\n}) {\n  const { model } = props\n  const { featureData } = model\n  const feat = structuredClone(featureData)\n  return feat ? (\n    <Paper>\n      <FeatureDetails\n        {...props}\n        feature={feat}\n        formatter={value => <Formatter value={value} />}\n      />\n      <BaseCard title=\"Link to view\">\n        <LinkToSyntenyView model={model} feat={feat} />\n      </BaseCard>\n    </Paper>\n  ) : (\n    <div>\n      No feature loaded, may not be available after page refresh because it was\n      too large for localStorage\n    </div>\n  )\n})\n\nexport default SyntenyFeatureDetail\n"],"names":["Formatter","value","show","setShow","useState","copied","setCopied","display","String","length","_jsxs","_Fragment","children","_jsx","type","onClick","copy","setTimeout","val","slice","LaunchSyntenyViewDialog","lazy","observer","model","feat","view","level","trackId","Link","href","event","preventDefault","views","undefined","navTo","mate","f1","f2","r1","assemblyName","r2","v1","find","assemblyNames","v2","getSession","notify","assembleLocString","join","feature","SimpleFeature","session","queueDialog","handleClose","props","featureData","structuredClone","Paper","FeatureDetails","formatter","BaseCard","title","LinkToSyntenyView"],"sourceRoot":""}