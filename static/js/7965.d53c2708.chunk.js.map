{"version":3,"file":"static/js/7965.d53c2708.chunk.js","mappings":"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","sources":["../../../node_modules/crc/mjs/calculators/crc32.js","../../../node_modules/@gmod/bam/src/virtualOffset.ts","../../../node_modules/@gmod/bam/src/chunk.ts","../../../node_modules/@gmod/bam/src/long.ts","../../../node_modules/@gmod/bam/src/util.ts","../../../node_modules/@gmod/bam/src/indexFile.ts","../../../node_modules/@gmod/bam/src/bai.ts","../../../node_modules/@gmod/bam/src/csi.ts","../../../node_modules/@gmod/bam/src/constants.ts","../../../node_modules/@gmod/bam/src/record.ts","../../../node_modules/@gmod/bam/src/sam.ts","../../../node_modules/@gmod/bam/src/bamFile.ts","../../../node_modules/@gmod/bam/src/htsget.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AggregateAbortController.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AggregateStatusReporter.ts","../../../node_modules/@gmod/abortable-promise-cache/src/AbortablePromiseCache.ts"],"sourcesContent":["// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc32 = (current, previous) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\nexport default crc32;\n","export default class VirtualOffset {\n  public blockPosition: number\n  public dataPosition: number\n  constructor(blockPosition: number, dataPosition: number) {\n    this.blockPosition = blockPosition // < offset of the compressed data block\n    this.dataPosition = dataPosition // < offset into the uncompressed data\n  }\n\n  toString() {\n    return `${this.blockPosition}:${this.dataPosition}`\n  }\n\n  compareTo(b: VirtualOffset) {\n    return (\n      this.blockPosition - b.blockPosition || this.dataPosition - b.dataPosition\n    )\n  }\n\n  static min(...args: VirtualOffset[]) {\n    let min\n    let i = 0\n    for (; !min; i += 1) {\n      min = args[i]\n    }\n    for (; i < args.length; i += 1) {\n      if (min.compareTo(args[i]) > 0) {\n        min = args[i]\n      }\n    }\n    return min\n  }\n}\nexport function fromBytes(bytes: Uint8Array, offset = 0, bigendian = false) {\n  if (bigendian) {\n    throw new Error('big-endian virtual file offsets not implemented')\n  }\n\n  return new VirtualOffset(\n    bytes[offset + 7] * 0x10000000000 +\n      bytes[offset + 6] * 0x100000000 +\n      bytes[offset + 5] * 0x1000000 +\n      bytes[offset + 4] * 0x10000 +\n      bytes[offset + 3] * 0x100 +\n      bytes[offset + 2],\n    (bytes[offset + 1] << 8) | bytes[offset],\n  )\n}\n","import VirtualOffset from './virtualOffset'\n\n// little class representing a chunk in the index\nexport default class Chunk {\n  public buffer?: Uint8Array\n\n  constructor(\n    public minv: VirtualOffset,\n    public maxv: VirtualOffset,\n    public bin: number,\n    public _fetchedSize?: number,\n  ) {}\n\n  toUniqueString() {\n    return `${this.minv.toString()}..${this.maxv.toString()} (bin ${\n      this.bin\n    }, fetchedSize ${this.fetchedSize()})`\n  }\n\n  toString() {\n    return this.toUniqueString()\n  }\n\n  compareTo(b: Chunk) {\n    return (\n      this.minv.compareTo(b.minv) ||\n      this.maxv.compareTo(b.maxv) ||\n      this.bin - b.bin\n    )\n  }\n\n  fetchedSize() {\n    if (this._fetchedSize !== undefined) {\n      return this._fetchedSize\n    }\n    return this.maxv.blockPosition + (1 << 16) - this.minv.blockPosition\n  }\n}\n","export const TWO_PWR_16_DBL = 1 << 16\nexport const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL\n\nexport function longFromBytesToUnsigned(source: Uint8Array, i = 0) {\n  const low =\n    source[i] |\n    (source[i + 1] << 8) |\n    (source[i + 2] << 16) |\n    (source[i + 3] << 24)\n  const high =\n    source[i + 4] |\n    (source[i + 5] << 8) |\n    (source[i + 6] << 16) |\n    (source[i + 7] << 24)\n  return (high >>> 0) * TWO_PWR_32_DBL + (low >>> 0)\n}\n","import Chunk from './chunk'\nimport { longFromBytesToUnsigned } from './long'\nimport VirtualOffset from './virtualOffset'\n\nexport function timeout(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\n/**\n * Properly check if the given AbortSignal is aborted.\n *\n * Per the standard, if the signal reads as aborted, this function throws\n * either a DOMException AbortError, or a regular error with a `code` attribute\n * set to `ERR_ABORTED`.\n *\n * For convenience, passing `undefined` is a no-op\n *\n * @param {AbortSignal} [signal] an AbortSignal, or anything with an `aborted` attribute\n * @returns nothing\n */\nexport function checkAbortSignal(signal?: AbortSignal) {\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    // console.log('bam aborted!')\n    if (typeof DOMException === 'undefined') {\n      const e = new Error('aborted')\n      //@ts-ignore\n      e.code = 'ERR_ABORTED'\n      throw e\n    } else {\n      throw new DOMException('aborted', 'AbortError')\n    }\n  }\n}\n\n/**\n * Skips to the next tick, then runs `checkAbortSignal`.\n * Await this to inside an otherwise synchronous loop to\n * provide a place to break when an abort signal is received.\n * @param {AbortSignal} signal\n */\nexport async function abortBreakPoint(signal?: AbortSignal) {\n  await Promise.resolve()\n  checkAbortSignal(signal)\n}\n\nexport function canMergeBlocks(chunk1: Chunk, chunk2: Chunk) {\n  return (\n    chunk2.minv.blockPosition - chunk1.maxv.blockPosition < 65000 &&\n    chunk2.maxv.blockPosition - chunk1.minv.blockPosition < 5000000\n  )\n}\n\nexport interface BamOpts {\n  viewAsPairs?: boolean\n  pairAcrossChr?: boolean\n  maxInsertSize?: number\n  signal?: AbortSignal\n}\n\nexport interface BaseOpts {\n  signal?: AbortSignal\n}\n\nexport function makeOpts(obj: AbortSignal | BaseOpts = {}): BaseOpts {\n  return 'aborted' in obj ? ({ signal: obj } as BaseOpts) : obj\n}\n\nexport function optimizeChunks(chunks: Chunk[], lowest?: VirtualOffset) {\n  const mergedChunks: Chunk[] = []\n  let lastChunk: Chunk | undefined\n\n  if (chunks.length === 0) {\n    return chunks\n  }\n\n  chunks.sort((c0, c1) => {\n    const dif = c0.minv.blockPosition - c1.minv.blockPosition\n    return dif === 0 ? c0.minv.dataPosition - c1.minv.dataPosition : dif\n  })\n\n  for (const chunk of chunks) {\n    if (!lowest || chunk.maxv.compareTo(lowest) > 0) {\n      if (lastChunk === undefined) {\n        mergedChunks.push(chunk)\n        lastChunk = chunk\n      } else {\n        if (canMergeBlocks(lastChunk, chunk)) {\n          if (chunk.maxv.compareTo(lastChunk.maxv) > 0) {\n            lastChunk.maxv = chunk.maxv\n          }\n        } else {\n          mergedChunks.push(chunk)\n          lastChunk = chunk\n        }\n      }\n    }\n  }\n\n  return mergedChunks\n}\n\nexport function parsePseudoBin(bytes: Uint8Array, offset: number) {\n  return {\n    lineCount: longFromBytesToUnsigned(bytes, offset),\n  }\n}\n\nexport function findFirstData(\n  firstDataLine: VirtualOffset | undefined,\n  virtualOffset: VirtualOffset,\n) {\n  return firstDataLine\n    ? firstDataLine.compareTo(virtualOffset) > 0\n      ? virtualOffset\n      : firstDataLine\n    : virtualOffset\n}\n\nexport function parseNameBytes(\n  namesBytes: Uint8Array,\n  renameRefSeq: (arg: string) => string = s => s,\n) {\n  let currRefId = 0\n  let currNameStart = 0\n  const refIdToName = []\n  const refNameToId: Record<string, number> = {}\n  for (let i = 0; i < namesBytes.length; i += 1) {\n    if (!namesBytes[i]) {\n      if (currNameStart < i) {\n        let refName = ''\n        for (let j = currNameStart; j < i; j++) {\n          refName += String.fromCharCode(namesBytes[j])\n        }\n        refName = renameRefSeq(refName)\n        refIdToName[currRefId] = refName\n        refNameToId[refName] = currRefId\n      }\n      currNameStart = i + 1\n      currRefId += 1\n    }\n  }\n  return { refNameToId, refIdToName }\n}\n\nexport function sum(array: Uint8Array[]) {\n  let sum = 0\n  for (const entry of array) {\n    sum += entry.length\n  }\n  return sum\n}\nexport function concatUint8Array(args: Uint8Array[]) {\n  const mergedArray = new Uint8Array(sum(args))\n  let offset = 0\n  for (const entry of args) {\n    mergedArray.set(entry, offset)\n    offset += entry.length\n  }\n  return mergedArray\n}\n","import { GenericFilehandle } from 'generic-filehandle2'\nimport Chunk from './chunk'\nimport { BaseOpts } from './util'\n\nexport default abstract class IndexFile {\n  public filehandle: GenericFilehandle\n  public renameRefSeq: (s: string) => string\n\n  /**\n   * @param {filehandle} filehandle\n   * @param {function} [renameRefSeqs]\n   */\n  constructor({\n    filehandle,\n    renameRefSeq = (n: string) => n,\n  }: {\n    filehandle: GenericFilehandle\n    renameRefSeq?: (a: string) => string\n  }) {\n    this.filehandle = filehandle\n    this.renameRefSeq = renameRefSeq\n  }\n  public abstract lineCount(refId: number): Promise<number>\n  public abstract indexCov(\n    refId: number,\n    start?: number,\n    end?: number,\n  ): Promise<{ start: number; end: number; score: number }[]>\n\n  public abstract blocksForRange(\n    chrId: number,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ): Promise<Chunk[]>\n}\n","import VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\n\nimport { optimizeChunks, parsePseudoBin, findFirstData, BaseOpts } from './util'\nimport IndexFile from './indexFile'\n\nconst BAI_MAGIC = 21578050 // BAI\\1\n\nfunction roundDown(n: number, multiple: number) {\n  return n - (n % multiple)\n}\nfunction roundUp(n: number, multiple: number) {\n  return n - (n % multiple) + multiple\n}\n\nfunction reg2bins(beg: number, end: number) {\n  end -= 1\n  return [\n    [0, 0],\n    [1 + (beg >> 26), 1 + (end >> 26)],\n    [9 + (beg >> 23), 9 + (end >> 23)],\n    [73 + (beg >> 20), 73 + (end >> 20)],\n    [585 + (beg >> 17), 585 + (end >> 17)],\n    [4681 + (beg >> 14), 4681 + (end >> 14)],\n  ] as const\n}\n\nexport default class BAI extends IndexFile {\n  public setupP?: ReturnType<BAI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  // fetch and parse the index\n  async _parse(_opts?: BaseOpts) {\n    const bytes = await this.filehandle.readFile()\n    const dataView = new DataView(bytes.buffer)\n\n    // check BAI magic numbers\n    if (dataView.getUint32(0, true) !== BAI_MAGIC) {\n      throw new Error('Not a BAI file')\n    }\n\n    const refCount = dataView.getInt32(4, true)\n    const depth = 5\n    const binLimit = ((1 << ((depth + 1) * 3)) - 1) / 7\n\n    // read the indexes for each reference sequence\n    let curr = 8\n    let firstDataLine: VirtualOffset | undefined\n\n    type BinIndex = Record<string, Chunk[]>\n    type LinearIndex = VirtualOffset[]\n    const indices = new Array<{\n      binIndex: BinIndex\n      linearIndex: LinearIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n\n      const binCount = dataView.getInt32(curr, true)\n      let stats\n\n      curr += 4\n      const binIndex: Record<number, Chunk[]> = {}\n\n      for (let j = 0; j < binCount; j += 1) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin === binLimit + 1) {\n          curr += 4\n          stats = parsePseudoBin(bytes, curr + 16)\n          curr += 32\n        } else if (bin > binLimit + 1) {\n          throw new Error('bai index contains too many bins, please use CSI')\n        } else {\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k++) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      const linearCount = dataView.getInt32(curr, true)\n      curr += 4\n      // as we're going through the linear index, figure out the smallest\n      // virtual offset in the indexes, which tells us where the BAM header\n      // ends\n      const linearIndex = new Array<VirtualOffset>(linearCount)\n      for (let j = 0; j < linearCount; j++) {\n        const offset = fromBytes(bytes, curr)\n        curr += 8\n        firstDataLine = findFirstData(firstDataLine, offset)\n        linearIndex[j] = offset\n      }\n\n      indices[i] = { binIndex, linearIndex, stats }\n    }\n\n    return {\n      bai: true,\n      firstDataLine,\n      maxBlockSize: 1 << 16,\n      indices,\n      refCount,\n    }\n  }\n\n  async indexCov(\n    seqId: number,\n    start?: number,\n    end?: number,\n    opts: BaseOpts = {},\n  ): Promise<{ start: number; end: number; score: number }[]> {\n    const v = 16384\n    const range = start !== undefined\n    const indexData = await this.parse(opts)\n    const seqIdx = indexData.indices[seqId]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!seqIdx) {\n      return []\n    }\n    const { linearIndex = [], stats } = seqIdx\n    if (linearIndex.length === 0) {\n      return []\n    }\n    const e = end === undefined ? (linearIndex.length - 1) * v : roundUp(end, v)\n    const s = start === undefined ? 0 : roundDown(start, v)\n    const depths = range\n      ? new Array((e - s) / v)\n      : new Array(linearIndex.length - 1)\n    const totalSize = linearIndex[linearIndex.length - 1].blockPosition\n    if (e > (linearIndex.length - 1) * v) {\n      throw new Error('query outside of range of linear index')\n    }\n    let currentPos = linearIndex[s / v].blockPosition\n    for (let i = s / v, j = 0; i < e / v; i++, j++) {\n      depths[j] = {\n        score: linearIndex[i + 1].blockPosition - currentPos,\n        start: i * v,\n        end: i * v + v,\n      }\n      currentPos = linearIndex[i + 1].blockPosition\n    }\n    return depths.map(d => ({\n      ...d,\n      score: (d.score * (stats?.lineCount || 0)) / totalSize,\n    }))\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!indexData) {\n      return []\n    }\n    const ba = indexData.indices[refId]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!ba) {\n      return []\n    }\n\n    // List of bin #s that overlap min, max\n    const overlappingBins = reg2bins(min, max)\n    const chunks: Chunk[] = []\n\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const binChunk of binChunks) {\n            chunks.push(new Chunk(binChunk.minv, binChunk.maxv, bin))\n          }\n        }\n      }\n    }\n\n    // Use the linear index to find minimum file position of chunks that could\n    // contain alignments in the region\n    const nintv = ba.linearIndex.length\n    let lowest: VirtualOffset | undefined\n    const minLin = Math.min(min >> 14, nintv - 1)\n    const maxLin = Math.min(max >> 14, nintv - 1)\n    for (let i = minLin; i <= maxLin; ++i) {\n      const vp = ba.linearIndex[i]\n\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (vp && (!lowest || vp.compareTo(lowest) < 0)) {\n        lowest = vp\n      }\n    }\n\n    return optimizeChunks(chunks, lowest)\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport VirtualOffset, { fromBytes } from './virtualOffset'\nimport Chunk from './chunk'\nimport {\n  optimizeChunks,\n  findFirstData,\n  parsePseudoBin,\n  parseNameBytes,\n  BaseOpts,\n} from './util'\n\nimport IndexFile from './indexFile'\n\nconst CSI1_MAGIC = 21582659 // CSI\\1\nconst CSI2_MAGIC = 38359875 // CSI\\2\n\nfunction lshift(num: number, bits: number) {\n  return num * 2 ** bits\n}\nfunction rshift(num: number, bits: number) {\n  return Math.floor(num / 2 ** bits)\n}\n\nexport default class CSI extends IndexFile {\n  private maxBinNumber = 0\n  private depth = 0\n  private minShift = 0\n\n  public setupP?: ReturnType<CSI['_parse']>\n\n  async lineCount(refId: number, opts?: BaseOpts) {\n    const indexData = await this.parse(opts)\n    return indexData.indices[refId]?.stats?.lineCount || 0\n  }\n\n  async indexCov() {\n    return []\n  }\n\n  parseAuxData(bytes: Uint8Array, offset: number) {\n    const dataView = new DataView(bytes.buffer)\n    const formatFlags = dataView.getUint32(offset, true)\n    const coordinateType =\n      formatFlags & 0x10000 ? 'zero-based-half-open' : '1-based-closed'\n    const format = (\n      { 0: 'generic', 1: 'SAM', 2: 'VCF' } as Record<number, string>\n    )[formatFlags & 0xf]\n    if (!format) {\n      throw new Error(`invalid Tabix preset format flags ${formatFlags}`)\n    }\n    const columnNumbers = {\n      ref: dataView.getInt32(offset + 4, true),\n      start: dataView.getInt32(offset + 8, true),\n      end: dataView.getInt32(offset + 12, true),\n    }\n    const metaValue = dataView.getInt32(offset + 16, true)\n    const metaChar = metaValue ? String.fromCharCode(metaValue) : ''\n    const skipLines = dataView.getInt32(offset + 20, true)\n    const nameSectionLength = dataView.getInt32(offset + 24, true)\n\n    return {\n      columnNumbers,\n      coordinateType,\n      metaValue,\n      metaChar,\n      skipLines,\n      format,\n      formatFlags,\n      ...parseNameBytes(\n        bytes.subarray(offset + 28, offset + 28 + nameSectionLength),\n        this.renameRefSeq,\n      ),\n    }\n  }\n\n  // fetch and parse the index\n  async _parse(opts: { signal?: AbortSignal }) {\n    const buffer = await this.filehandle.readFile(opts)\n    const bytes = await unzip(buffer)\n\n    const dataView = new DataView(bytes.buffer)\n    let csiVersion\n    const magic = dataView.getUint32(0, true)\n\n    if (magic === CSI1_MAGIC) {\n      csiVersion = 1\n    } else if (magic === CSI2_MAGIC) {\n      csiVersion = 2\n    } else {\n      throw new Error(`Not a CSI file ${magic}`)\n      // TODO: do we need to support big-endian CSI files?\n    }\n\n    this.minShift = dataView.getInt32(4, true)\n    this.depth = dataView.getInt32(8, true)\n    this.maxBinNumber = ((1 << ((this.depth + 1) * 3)) - 1) / 7\n    const auxLength = dataView.getInt32(12, true)\n    const aux = auxLength >= 30 ? this.parseAuxData(bytes, 16) : undefined\n    const refCount = dataView.getInt32(16 + auxLength, true)\n\n    type BinIndex = Record<string, Chunk[]>\n\n    // read the indexes for each reference sequence\n    let curr = 16 + auxLength + 4\n    let firstDataLine: VirtualOffset | undefined\n    const indices = new Array<{\n      binIndex: BinIndex\n      stats?: { lineCount: number }\n    }>(refCount)\n    for (let i = 0; i < refCount; i++) {\n      // the binning index\n      const binCount = dataView.getInt32(curr, true)\n      curr += 4\n      const binIndex: Record<string, Chunk[]> = {}\n      let stats // < provided by parsing a pseudo-bin, if present\n      for (let j = 0; j < binCount; j++) {\n        const bin = dataView.getUint32(curr, true)\n        curr += 4\n        if (bin > this.maxBinNumber) {\n          stats = parsePseudoBin(bytes, curr + 28)\n          curr += 28 + 16\n        } else {\n          firstDataLine = findFirstData(firstDataLine, fromBytes(bytes, curr))\n          curr += 8\n          const chunkCount = dataView.getInt32(curr, true)\n          curr += 4\n          const chunks = new Array<Chunk>(chunkCount)\n          for (let k = 0; k < chunkCount; k += 1) {\n            const u = fromBytes(bytes, curr)\n            curr += 8\n            const v = fromBytes(bytes, curr)\n            curr += 8\n            firstDataLine = findFirstData(firstDataLine, u)\n            chunks[k] = new Chunk(u, v, bin)\n          }\n          binIndex[bin] = chunks\n        }\n      }\n\n      indices[i] = { binIndex, stats }\n    }\n\n    return {\n      csiVersion,\n      firstDataLine,\n      indices,\n      refCount,\n      csi: true,\n      maxBlockSize: 1 << 16,\n      ...aux,\n    }\n  }\n\n  async blocksForRange(\n    refId: number,\n    min: number,\n    max: number,\n    opts: BaseOpts = {},\n  ) {\n    if (min < 0) {\n      min = 0\n    }\n\n    const indexData = await this.parse(opts)\n    const ba = indexData.indices[refId]\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!ba) {\n      return []\n    }\n    const overlappingBins = this.reg2bins(min, max)\n\n    if (overlappingBins.length === 0) {\n      return []\n    }\n\n    const chunks = []\n    // Find chunks in overlapping bins.  Leaf bins (< 4681) are not pruned\n    for (const [start, end] of overlappingBins) {\n      for (let bin = start; bin <= end; bin++) {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        if (ba.binIndex[bin]) {\n          const binChunks = ba.binIndex[bin]\n          for (const c of binChunks) {\n            chunks.push(c)\n          }\n        }\n      }\n    }\n\n    return optimizeChunks(chunks, new VirtualOffset(0, 0))\n  }\n\n  /**\n   * calculate the list of bins that may overlap with region [beg,end)\n   * (zero-based half-open)\n   */\n  reg2bins(beg: number, end: number) {\n    beg -= 1 // < convert to 1-based closed\n    if (beg < 1) {\n      beg = 1\n    }\n    if (end > 2 ** 50) {\n      end = 2 ** 34\n    } // 17 GiB ought to be enough for anybody\n    end -= 1\n    let l = 0\n    let t = 0\n    let s = this.minShift + this.depth * 3\n    const bins = []\n    for (; l <= this.depth; s -= 3, t += lshift(1, l * 3), l += 1) {\n      const b = t + rshift(beg, s)\n      const e = t + rshift(end, s)\n      if (e - b + bins.length > this.maxBinNumber) {\n        throw new Error(\n          `query ${beg}-${end} is too large for current binning scheme (shift ${this.minShift}, depth ${this.depth}), try a smaller query or a coarser index binning scheme`,\n        )\n      }\n      bins.push([b, e] as const)\n    }\n    return bins\n  }\n\n  async parse(opts: BaseOpts = {}) {\n    if (!this.setupP) {\n      this.setupP = this._parse(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async hasRefSeq(seqId: number, opts: BaseOpts = {}) {\n    const header = await this.parse(opts)\n    return !!header.indices[seqId]?.binIndex\n  }\n}\n","export default {\n  //  the read is paired in sequencing, no matter whether it is mapped in a pair\n  BAM_FPAIRED: 1,\n  //  the read is mapped in a proper pair\n  BAM_FPROPER_PAIR: 2,\n  //  the read itself is unmapped; conflictive with BAM_FPROPER_PAIR\n  BAM_FUNMAP: 4,\n  //  the mate is unmapped\n  BAM_FMUNMAP: 8,\n  //  the read is mapped to the reverse strand\n  BAM_FREVERSE: 16,\n  //  the mate is mapped to the reverse strand\n  BAM_FMREVERSE: 32,\n  //  this is read1\n  BAM_FREAD1: 64,\n  //  this is read2\n  BAM_FREAD2: 128,\n  //  not primary alignment\n  BAM_FSECONDARY: 256,\n  //  QC failure\n  BAM_FQCFAIL: 512,\n  //  optical or PCR duplicate\n  BAM_FDUP: 1024,\n  //  supplementary alignment\n  BAM_FSUPPLEMENTARY: 2048,\n}\n","import Constants from './constants'\n\nconst SEQRET_DECODER = '=ACMGRSVTWYHKDBN'.split('')\nconst CIGAR_DECODER = 'MIDNSHP=X???????'.split('')\n\ninterface Bytes {\n  start: number\n  end: number\n  byteArray: Uint8Array\n}\n\nexport default class BamRecord {\n  public fileOffset: number\n  private bytes: Bytes\n  #dataView: DataView\n\n  constructor(args: { bytes: Bytes; fileOffset: number }) {\n    this.bytes = args.bytes\n    this.fileOffset = args.fileOffset\n    this.#dataView = new DataView(this.bytes.byteArray.buffer)\n  }\n\n  get byteArray() {\n    return this.bytes.byteArray\n  }\n\n  get flags() {\n    return (\n      (this.#dataView.getInt32(this.bytes.start + 16, true) & 0xffff0000) >> 16\n    )\n  }\n  get ref_id() {\n    return this.#dataView.getInt32(this.bytes.start + 4, true)\n  }\n\n  get start() {\n    return this.#dataView.getInt32(this.bytes.start + 8, true)\n  }\n\n  get end() {\n    return this.start + this.length_on_ref\n  }\n\n  get id() {\n    return this.fileOffset\n  }\n\n  get mq() {\n    const mq = (this.bin_mq_nl & 0xff00) >> 8\n    return mq === 255 ? undefined : mq\n  }\n\n  get score() {\n    return this.mq\n  }\n\n  get qual() {\n    if (this.isSegmentUnmapped()) {\n      return\n    }\n\n    const p =\n      this.b0 +\n      this.read_name_length +\n      this.num_cigar_ops * 4 +\n      this.num_seq_bytes\n    return this.byteArray.subarray(p, p + this.seq_length)\n  }\n\n  get strand() {\n    return this.isReverseComplemented() ? -1 : 1\n  }\n\n  get b0() {\n    return this.bytes.start + 36\n  }\n  get name() {\n    let str = ''\n    for (let i = 0; i < this.read_name_length - 1; i++) {\n      str += String.fromCharCode(this.byteArray[this.b0 + i])\n    }\n    return str\n  }\n\n  get tags() {\n    let p =\n      this.b0 +\n      this.read_name_length +\n      this.num_cigar_ops * 4 +\n      this.num_seq_bytes +\n      this.seq_length\n\n    const blockEnd = this.bytes.end\n    const tags = {} as Record<string, unknown>\n    while (p < blockEnd) {\n      const tag = String.fromCharCode(this.byteArray[p], this.byteArray[p + 1])\n      const type = String.fromCharCode(this.byteArray[p + 2])\n      p += 3\n\n      if (type === 'A') {\n        tags[tag] = String.fromCharCode(this.byteArray[p])\n        p += 1\n      } else if (type === 'i') {\n        tags[tag] = this.#dataView.getInt32(p, true)\n        p += 4\n      } else if (type === 'I') {\n        tags[tag] = this.#dataView.getUint32(p, true)\n        p += 4\n      } else if (type === 'c') {\n        tags[tag] = this.#dataView.getInt8(p)\n        p += 1\n      } else if (type === 'C') {\n        tags[tag] = this.#dataView.getUint8(p)\n        p += 1\n      } else if (type === 's') {\n        tags[tag] = this.#dataView.getInt16(p, true)\n        p += 2\n      } else if (type === 'S') {\n        tags[tag] = this.#dataView.getUint16(p, true)\n        p += 2\n      } else if (type === 'f') {\n        tags[tag] = this.#dataView.getFloat32(p, true)\n        p += 4\n      } else if (type === 'Z' || type === 'H') {\n        const value = []\n        while (p <= blockEnd) {\n          const cc = this.byteArray[p++]\n          if (cc !== 0) {\n            value.push(String.fromCharCode(cc))\n          } else {\n            break\n          }\n        }\n        tags[tag] = value.join('')\n      } else if (type === 'B') {\n        const cc = this.byteArray[p++]\n        const Btype = String.fromCharCode(cc)\n        const limit = this.#dataView.getInt32(p, true)\n        p += 4\n        if (Btype === 'i') {\n          if (tag === 'CG') {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              const cigop = this.#dataView.getInt32(p, true)\n              const lop = cigop >> 4\n              const op = CIGAR_DECODER[cigop & 0xf]\n              value.push(lop + op)\n              p += 4\n            }\n            tags[tag] = value.join('')\n          } else {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              value.push(this.#dataView.getInt32(p, true))\n              p += 4\n            }\n            tags[tag] = value\n          }\n        } else if (Btype === 'I') {\n          if (tag === 'CG') {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              const cigop = this.#dataView.getUint32(p, true)\n              const lop = cigop >> 4\n              const op = CIGAR_DECODER[cigop & 0xf]\n              value.push(lop + op)\n              p += 4\n            }\n            tags[tag] = value.join('')\n          } else {\n            const value = []\n            for (let k = 0; k < limit; k++) {\n              value.push(this.#dataView.getUint32(p, true))\n              p += 4\n            }\n            tags[tag] = value\n          }\n        } else if (Btype === 's') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getInt16(p, true))\n            p += 2\n          }\n          tags[tag] = value\n        } else if (Btype === 'S') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getUint16(p, true))\n            p += 2\n          }\n          tags[tag] = value\n        } else if (Btype === 'c') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getInt8(p))\n            p += 1\n          }\n          tags[tag] = value\n        } else if (Btype === 'C') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getUint8(p))\n            p += 1\n          }\n          tags[tag] = value\n        } else if (Btype === 'f') {\n          const value = []\n          for (let k = 0; k < limit; k++) {\n            value.push(this.#dataView.getFloat32(p, true))\n            p += 4\n          }\n          tags[tag] = value\n        }\n      } else {\n        console.error('Unknown BAM tag type', type)\n        break\n      }\n    }\n    return tags\n  }\n\n  /**\n   * @returns {boolean} true if the read is paired, regardless of whether both\n   * segments are mapped\n   */\n  isPaired() {\n    return !!(this.flags & Constants.BAM_FPAIRED)\n  }\n\n  /** @returns {boolean} true if the read is paired, and both segments are mapped */\n  isProperlyPaired() {\n    return !!(this.flags & Constants.BAM_FPROPER_PAIR)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isSegmentUnmapped() {\n    return !!(this.flags & Constants.BAM_FUNMAP)\n  }\n\n  /** @returns {boolean} true if the read itself is unmapped; conflictive with isProperlyPaired */\n  isMateUnmapped() {\n    return !!(this.flags & Constants.BAM_FMUNMAP)\n  }\n\n  /** @returns {boolean} true if the read is mapped to the reverse strand */\n  isReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FREVERSE)\n  }\n\n  /** @returns {boolean} true if the mate is mapped to the reverse strand */\n  isMateReverseComplemented() {\n    return !!(this.flags & Constants.BAM_FMREVERSE)\n  }\n\n  /** @returns {boolean} true if this is read number 1 in a pair */\n  isRead1() {\n    return !!(this.flags & Constants.BAM_FREAD1)\n  }\n\n  /** @returns {boolean} true if this is read number 2 in a pair */\n  isRead2() {\n    return !!(this.flags & Constants.BAM_FREAD2)\n  }\n\n  /** @returns {boolean} true if this is a secondary alignment */\n  isSecondary() {\n    return !!(this.flags & Constants.BAM_FSECONDARY)\n  }\n\n  /** @returns {boolean} true if this read has failed QC checks */\n  isFailedQc() {\n    return !!(this.flags & Constants.BAM_FQCFAIL)\n  }\n\n  /** @returns {boolean} true if the read is an optical or PCR duplicate */\n  isDuplicate() {\n    return !!(this.flags & Constants.BAM_FDUP)\n  }\n\n  /** @returns {boolean} true if this is a supplementary alignment */\n  isSupplementary() {\n    return !!(this.flags & Constants.BAM_FSUPPLEMENTARY)\n  }\n\n  get cigarAndLength() {\n    if (this.isSegmentUnmapped()) {\n      return {\n        length_on_ref: 0,\n        CIGAR: '',\n      }\n    }\n\n    const numCigarOps = this.num_cigar_ops\n    let p = this.b0 + this.read_name_length\n    const CIGAR = []\n\n    // check for CG tag by inspecting whether the CIGAR field contains a clip\n    // that consumes entire seqLen\n    let cigop = this.#dataView.getInt32(p, true)\n    let lop = cigop >> 4\n    let op = CIGAR_DECODER[cigop & 0xf]\n    if (op === 'S' && lop === this.seq_length) {\n      // if there is a CG the second CIGAR field will be a N tag the represents\n      // the length on ref\n      p += 4\n      cigop = this.#dataView.getInt32(p, true)\n      lop = cigop >> 4\n      op = CIGAR_DECODER[cigop & 0xf]\n      if (op !== 'N') {\n        console.warn('CG tag with no N tag')\n      }\n      return {\n        CIGAR: this.tags.CG as string,\n        length_on_ref: lop,\n      }\n    } else {\n      let lref = 0\n      for (let c = 0; c < numCigarOps; ++c) {\n        cigop = this.#dataView.getInt32(p, true)\n        lop = cigop >> 4\n        op = CIGAR_DECODER[cigop & 0xf]\n        CIGAR.push(lop + op)\n        // soft clip, hard clip, and insertion don't count toward the length on\n        // the reference\n        if (op !== 'H' && op !== 'S' && op !== 'I') {\n          lref += lop\n        }\n\n        p += 4\n      }\n\n      return {\n        CIGAR: CIGAR.join(''),\n        length_on_ref: lref,\n      }\n    }\n  }\n\n  get length_on_ref() {\n    return this.cigarAndLength.length_on_ref\n  }\n\n  get CIGAR() {\n    return this.cigarAndLength.CIGAR\n  }\n\n  get num_cigar_ops() {\n    return this.flag_nc & 0xffff\n  }\n\n  get read_name_length() {\n    return this.bin_mq_nl & 0xff\n  }\n\n  get num_seq_bytes() {\n    return (this.seq_length + 1) >> 1\n  }\n\n  get seq() {\n    const { byteArray } = this.bytes\n    const p = this.b0 + this.read_name_length + this.num_cigar_ops * 4\n    const seqBytes = this.num_seq_bytes\n    const len = this.seq_length\n    const buf = []\n    let i = 0\n    for (let j = 0; j < seqBytes; ++j) {\n      const sb = byteArray[p + j]\n      buf.push(SEQRET_DECODER[(sb & 0xf0) >> 4])\n      i++\n      if (i < len) {\n        buf.push(SEQRET_DECODER[sb & 0x0f])\n        i++\n      }\n    }\n    return buf.join('')\n  }\n\n  // adapted from igv.js\n  get pair_orientation() {\n    if (\n      !this.isSegmentUnmapped() &&\n      !this.isMateUnmapped() &&\n      this.ref_id === this.next_refid\n    ) {\n      const s1 = this.isReverseComplemented() ? 'R' : 'F'\n      const s2 = this.isMateReverseComplemented() ? 'R' : 'F'\n      let o1 = ' '\n      let o2 = ' '\n      if (this.isRead1()) {\n        o1 = '1'\n        o2 = '2'\n      } else if (this.isRead2()) {\n        o1 = '2'\n        o2 = '1'\n      }\n\n      const tmp = []\n      const isize = this.template_length\n      if (isize > 0) {\n        tmp[0] = s1\n        tmp[1] = o1\n        tmp[2] = s2\n        tmp[3] = o2\n      } else {\n        tmp[2] = s1\n        tmp[3] = o1\n        tmp[0] = s2\n        tmp[1] = o2\n      }\n      return tmp.join('')\n    }\n    return undefined\n  }\n\n  get bin_mq_nl() {\n    return this.#dataView.getInt32(this.bytes.start + 12, true)\n  }\n\n  get flag_nc() {\n    return this.#dataView.getInt32(this.bytes.start + 16, true)\n  }\n\n  get seq_length() {\n    return this.#dataView.getInt32(this.bytes.start + 20, true)\n  }\n\n  get next_refid() {\n    return this.#dataView.getInt32(this.bytes.start + 24, true)\n  }\n\n  get next_pos() {\n    return this.#dataView.getInt32(this.bytes.start + 28, true)\n  }\n\n  get template_length() {\n    return this.#dataView.getInt32(this.bytes.start + 32, true)\n  }\n\n  toJSON() {\n    const data: Record<string, any> = {}\n    for (const k of Object.keys(this)) {\n      if (k.startsWith('_') || k === 'bytes') {\n        continue\n      }\n      //@ts-ignore\n      data[k] = this[k]\n    }\n\n    return data\n  }\n}\n\nfunction cacheGetter<T>(ctor: { prototype: T }, prop: keyof T): void {\n  const desc = Object.getOwnPropertyDescriptor(ctor.prototype, prop)\n  if (!desc) {\n    throw new Error('OH NO, NO PROPERTY DESCRIPTOR')\n  }\n  // eslint-disable-next-line @typescript-eslint/unbound-method\n  const getter = desc.get\n  if (!getter) {\n    throw new Error('OH NO, NOT A GETTER')\n  }\n  Object.defineProperty(ctor.prototype, prop, {\n    get() {\n      const ret = getter.call(this)\n      Object.defineProperty(this, prop, { value: ret })\n      return ret\n    },\n  })\n}\n\ncacheGetter(BamRecord, 'tags')\ncacheGetter(BamRecord, 'cigarAndLength')\ncacheGetter(BamRecord, 'seq')\ncacheGetter(BamRecord, 'qual')\n","export function parseHeaderText(text: string) {\n  const lines = text.split(/\\r?\\n/)\n  const data: { tag: string; data: { tag: string; value: string }[] }[] = []\n  for (const line of lines) {\n    const [tag, ...fields] = line.split(/\\t/)\n    if (tag) {\n      data.push({\n        tag: tag.slice(1),\n        data: fields.map(f => {\n          const r = f.indexOf(':')\n          const fieldTag = f.slice(0, r)\n          const value = f.slice(r + 1)\n          return { tag: fieldTag, value }\n        }),\n      })\n    }\n  }\n  return data\n}\n","import crc32 from 'crc/calculators/crc32'\nimport { unzip, unzipChunkSlice } from '@gmod/bgzf-filehandle'\nimport { LocalFile, RemoteFile, GenericFilehandle } from 'generic-filehandle2'\nimport AbortablePromiseCache from '@gmod/abortable-promise-cache'\nimport QuickLRU from 'quick-lru'\n\n// locals\nimport BAI from './bai'\nimport CSI from './csi'\nimport Chunk from './chunk'\nimport BAMFeature from './record'\nimport { parseHeaderText } from './sam'\nimport { checkAbortSignal, timeout, makeOpts, BamOpts, BaseOpts } from './util'\n\nexport const BAM_MAGIC = 21840194\n\nconst blockLen = 1 << 16\n\nasync function gen2array<T>(gen: AsyncIterable<T[]>): Promise<T[]> {\n  let out: T[] = []\n  for await (const x of gen) {\n    out = out.concat(x)\n  }\n  return out\n}\n\ninterface Args {\n  chunk: Chunk\n  opts: BaseOpts\n}\n\nclass NullFilehandle {\n  public read(): Promise<any> {\n    throw new Error('never called')\n  }\n  public stat(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public readFile(): Promise<any> {\n    throw new Error('never called')\n  }\n\n  public close(): Promise<any> {\n    throw new Error('never called')\n  }\n}\nexport default class BamFile {\n  public renameRefSeq: (a: string) => string\n  public bam: GenericFilehandle\n  public header?: string\n  public chrToIndex?: Record<string, number>\n  public indexToChr?: { refName: string; length: number }[]\n  public yieldThreadTime: number\n  public index?: BAI | CSI\n  public htsget = false\n  public headerP?: ReturnType<BamFile['getHeaderPre']>\n\n  private featureCache = new AbortablePromiseCache<Args, BAMFeature[]>({\n    cache: new QuickLRU({\n      maxSize: 50,\n    }),\n    fill: async (args: Args, signal) => {\n      const { chunk, opts } = args\n      const { data, cpositions, dpositions } = await this._readChunk({\n        chunk,\n        opts: { ...opts, signal },\n      })\n      return this.readBamFeatures(data, cpositions, dpositions, chunk)\n    },\n  })\n\n  constructor({\n    bamFilehandle,\n    bamPath,\n    bamUrl,\n    baiPath,\n    baiFilehandle,\n    baiUrl,\n    csiPath,\n    csiFilehandle,\n    csiUrl,\n    htsget,\n    yieldThreadTime = 100,\n    renameRefSeqs = n => n,\n  }: {\n    bamFilehandle?: GenericFilehandle\n    bamPath?: string\n    bamUrl?: string\n    baiPath?: string\n    baiFilehandle?: GenericFilehandle\n    baiUrl?: string\n    csiPath?: string\n    csiFilehandle?: GenericFilehandle\n    csiUrl?: string\n    renameRefSeqs?: (a: string) => string\n    yieldThreadTime?: number\n    htsget?: boolean\n  }) {\n    this.renameRefSeq = renameRefSeqs\n\n    if (bamFilehandle) {\n      this.bam = bamFilehandle\n    } else if (bamPath) {\n      this.bam = new LocalFile(bamPath)\n    } else if (bamUrl) {\n      this.bam = new RemoteFile(bamUrl)\n    } else if (htsget) {\n      this.htsget = true\n      this.bam = new NullFilehandle()\n    } else {\n      throw new Error('unable to initialize bam')\n    }\n    if (csiFilehandle) {\n      this.index = new CSI({ filehandle: csiFilehandle })\n    } else if (csiPath) {\n      this.index = new CSI({ filehandle: new LocalFile(csiPath) })\n    } else if (csiUrl) {\n      this.index = new CSI({ filehandle: new RemoteFile(csiUrl) })\n    } else if (baiFilehandle) {\n      this.index = new BAI({ filehandle: baiFilehandle })\n    } else if (baiPath) {\n      this.index = new BAI({ filehandle: new LocalFile(baiPath) })\n    } else if (baiUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(baiUrl) })\n    } else if (bamPath) {\n      this.index = new BAI({ filehandle: new LocalFile(`${bamPath}.bai`) })\n    } else if (bamUrl) {\n      this.index = new BAI({ filehandle: new RemoteFile(`${bamUrl}.bai`) })\n    } else if (htsget) {\n      this.htsget = true\n    } else {\n      throw new Error('unable to infer index format')\n    }\n    this.yieldThreadTime = yieldThreadTime\n  }\n\n  async getHeaderPre(origOpts?: BaseOpts) {\n    const opts = makeOpts(origOpts)\n    if (!this.index) {\n      return\n    }\n    const indexData = await this.index.parse(opts)\n    const ret = indexData.firstDataLine\n      ? indexData.firstDataLine.blockPosition + 65535\n      : undefined\n    let buffer\n    if (ret) {\n      const s = ret + blockLen\n      buffer = await this.bam.read(s, 0)\n    } else {\n      buffer = await this.bam.readFile(opts)\n    }\n\n    const uncba = await unzip(buffer)\n    const dataView = new DataView(uncba.buffer)\n\n    if (dataView.getInt32(0, true) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = dataView.getInt32(4, true)\n\n    const decoder = new TextDecoder('utf8')\n    this.header = decoder.decode(uncba.subarray(8, 8 + headLen))\n    const { chrToIndex, indexToChr } = await this._readRefSeqs(\n      headLen + 8,\n      65535,\n      opts,\n    )\n    this.chrToIndex = chrToIndex\n    this.indexToChr = indexToChr\n\n    return parseHeaderText(this.header)\n  }\n\n  getHeader(opts?: BaseOpts) {\n    if (!this.headerP) {\n      this.headerP = this.getHeaderPre(opts).catch((e: unknown) => {\n        this.headerP = undefined\n        throw e\n      })\n    }\n    return this.headerP\n  }\n\n  async getHeaderText(opts: BaseOpts = {}) {\n    await this.getHeader(opts)\n    return this.header\n  }\n\n  // the full length of the refseq block is not given in advance so this grabs\n  // a chunk and doubles it if all refseqs haven't been processed\n  async _readRefSeqs(\n    start: number,\n    refSeqBytes: number,\n    opts?: BaseOpts,\n  ): Promise<{\n    chrToIndex: Record<string, number>\n    indexToChr: { refName: string; length: number }[]\n  }> {\n    if (start > refSeqBytes) {\n      return this._readRefSeqs(start, refSeqBytes * 2, opts)\n    }\n    // const size = refSeqBytes + blockLen <-- use this?\n    const buffer = await this.bam.read(refSeqBytes, 0, opts)\n    const uncba = await unzip(buffer)\n    const dataView = new DataView(uncba.buffer)\n    const nRef = dataView.getInt32(start, true)\n    let p = start + 4\n    const chrToIndex: Record<string, number> = {}\n    const indexToChr: { refName: string; length: number }[] = []\n    const decoder = new TextDecoder('utf8')\n    for (let i = 0; i < nRef; i += 1) {\n      const lName = dataView.getInt32(p, true)\n      const refName = this.renameRefSeq(\n        decoder.decode(uncba.subarray(p + 4, p + 4 + lName - 1)),\n      )\n      const lRef = dataView.getInt32(p + lName + 4, true)\n\n      chrToIndex[refName] = i\n      indexToChr.push({ refName, length: lRef })\n\n      p = p + 8 + lName\n      if (p > uncba.length) {\n        console.warn(\n          `BAM header is very big.  Re-fetching ${refSeqBytes} bytes.`,\n        )\n        return this._readRefSeqs(start, refSeqBytes * 2, opts)\n      }\n    }\n    return { chrToIndex, indexToChr }\n  }\n\n  async getRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    return gen2array(this.streamRecordsForRange(chr, min, max, opts))\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    await this.getHeader(opts)\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined || !this.index) {\n      yield []\n    } else {\n      const chunks = await this.index.blocksForRange(chrId, min - 1, max, opts)\n      yield* this._fetchChunkFeatures(chunks, chrId, min, max, opts)\n    }\n  }\n\n  async *_fetchChunkFeatures(\n    chunks: Chunk[],\n    chrId: number,\n    min: number,\n    max: number,\n    opts: BamOpts = {},\n  ) {\n    const { viewAsPairs } = opts\n    const feats = [] as BAMFeature[][]\n    let done = false\n\n    for (const chunk of chunks) {\n      const records = await this.featureCache.get(\n        chunk.toString(),\n        { chunk, opts },\n        opts.signal,\n      )\n\n      const recs = [] as BAMFeature[]\n      for (const feature of records) {\n        if (feature.ref_id === chrId) {\n          if (feature.start >= max) {\n            // past end of range, can stop iterating\n            done = true\n            break\n          } else if (feature.end >= min) {\n            // must be in range\n            recs.push(feature)\n          }\n        }\n      }\n      feats.push(recs)\n      yield recs\n      if (done) {\n        break\n      }\n    }\n\n    checkAbortSignal(opts.signal)\n    if (viewAsPairs) {\n      yield this.fetchPairs(chrId, feats, opts)\n    }\n  }\n\n  async fetchPairs(chrId: number, feats: BAMFeature[][], opts: BamOpts) {\n    const { pairAcrossChr, maxInsertSize = 200000 } = opts\n    const unmatedPairs: Record<string, boolean> = {}\n    const readIds: Record<string, number> = {}\n    feats.map(ret => {\n      const readNames: Record<string, number> = {}\n      for (const element of ret) {\n        const name = element.name\n        const id = element.id\n        if (!readNames[name]) {\n          readNames[name] = 0\n        }\n        readNames[name]++\n        readIds[id] = 1\n      }\n      for (const [k, v] of Object.entries(readNames)) {\n        if (v === 1) {\n          unmatedPairs[k] = true\n        }\n      }\n    })\n\n    const matePromises: Promise<Chunk[]>[] = []\n    feats.map(ret => {\n      for (const f of ret) {\n        const name = f.name\n        const start = f.start\n        const pnext = f.next_pos\n        const rnext = f.next_refid\n        if (\n          this.index &&\n          unmatedPairs[name] &&\n          (pairAcrossChr ||\n            (rnext === chrId && Math.abs(start - pnext) < maxInsertSize))\n        ) {\n          matePromises.push(\n            this.index.blocksForRange(rnext, pnext, pnext + 1, opts),\n          )\n        }\n      }\n    })\n\n    // filter out duplicate chunks (the blocks are lists of chunks, blocks are\n    // concatenated, then filter dup chunks)\n    const map = new Map<string, Chunk>()\n    const res = await Promise.all(matePromises)\n    for (const m of res.flat()) {\n      if (!map.has(m.toString())) {\n        map.set(m.toString(), m)\n      }\n    }\n\n    const mateFeatPromises = await Promise.all(\n      [...map.values()].map(async c => {\n        const { data, cpositions, dpositions, chunk } = await this._readChunk({\n          chunk: c,\n          opts,\n        })\n        const mateRecs = [] as BAMFeature[]\n        for (const feature of await this.readBamFeatures(\n          data,\n          cpositions,\n          dpositions,\n          chunk,\n        )) {\n          if (unmatedPairs[feature.name] && !readIds[feature.id]) {\n            mateRecs.push(feature)\n          }\n        }\n        return mateRecs\n      }),\n    )\n    return mateFeatPromises.flat()\n  }\n\n  async _readRegion(position: number, size: number, opts: BaseOpts = {}) {\n    return this.bam.read(size, position, opts)\n  }\n\n  async _readChunk({ chunk, opts }: { chunk: Chunk; opts: BaseOpts }) {\n    const buffer = await this._readRegion(\n      chunk.minv.blockPosition,\n      chunk.fetchedSize(),\n      opts,\n    )\n\n    const {\n      buffer: data,\n      cpositions,\n      dpositions,\n    } = await unzipChunkSlice(buffer, chunk)\n    return { data, cpositions, dpositions, chunk }\n  }\n\n  async readBamFeatures(\n    ba: Uint8Array,\n    cpositions: number[],\n    dpositions: number[],\n    chunk: Chunk,\n  ) {\n    let blockStart = 0\n    const sink = [] as BAMFeature[]\n    let pos = 0\n    let last = +Date.now()\n\n    const dataView = new DataView(ba.buffer)\n    while (blockStart + 4 < ba.length) {\n      const blockSize = dataView.getInt32(blockStart, true)\n      const blockEnd = blockStart + 4 + blockSize - 1\n\n      // increment position to the current decompressed status\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (dpositions) {\n        while (blockStart + chunk.minv.dataPosition >= dpositions[pos++]) {}\n        pos--\n      }\n\n      // only try to read the feature if we have all the bytes for it\n      if (blockEnd < ba.length) {\n        const feature = new BAMFeature({\n          bytes: {\n            byteArray: ba,\n            start: blockStart,\n            end: blockEnd,\n          },\n          // the below results in an automatically calculated file-offset based\n          // ID if the info for that is available, otherwise crc32 of the\n          // features\n          //\n          // cpositions[pos] refers to actual file offset of a bgzip block\n          // boundaries\n          //\n          // we multiply by (1 <<8) in order to make sure each block has a\n          // \"unique\" address space so that data in that block could never\n          // overlap\n          //\n          // then the blockStart-dpositions is an uncompressed file offset from\n          // that bgzip block boundary, and since the cpositions are multiplied\n          // by (1 << 8) these uncompressed offsets get a unique space\n          //\n          // this has an extra chunk.minv.dataPosition added on because it\n          // blockStart starts at 0 instead of chunk.minv.dataPosition\n          //\n          // the +1 is just to avoid any possible uniqueId 0 but this does not\n          // realistically happen\n          fileOffset:\n            cpositions.length > 0\n              ? cpositions[pos] * (1 << 8) +\n                (blockStart - dpositions[pos]) +\n                chunk.minv.dataPosition +\n                1\n              : // this shift >>> 0 is equivalent to crc32(b).unsigned but uses the\n                // internal calculator of crc32 to avoid accidentally importing buffer\n                // https://github.com/alexgorbatchev/crc/blob/31fc3853e417b5fb5ec83335428805842575f699/src/define_crc.ts#L5\n                crc32(ba.subarray(blockStart, blockEnd)) >>> 0,\n        })\n\n        sink.push(feature)\n        if (this.yieldThreadTime && +Date.now() - last > this.yieldThreadTime) {\n          await timeout(1)\n          last = +Date.now()\n        }\n      }\n\n      blockStart = blockEnd + 1\n    }\n    return sink\n  }\n\n  async hasRefSeq(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? false : this.index?.hasRefSeq(seqId)\n  }\n\n  async lineCount(seqName: string) {\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined || !this.index ? 0 : this.index.lineCount(seqId)\n  }\n\n  async indexCov(seqName: string, start?: number, end?: number) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined ? [] : this.index.indexCov(seqId, start, end)\n  }\n\n  async blocksForRange(\n    seqName: string,\n    start: number,\n    end: number,\n    opts?: BaseOpts,\n  ) {\n    if (!this.index) {\n      return []\n    }\n    await this.index.parse()\n    const seqId = this.chrToIndex?.[seqName]\n    return seqId === undefined\n      ? []\n      : this.index.blocksForRange(seqId, start, end, opts)\n  }\n}\n","import { unzip } from '@gmod/bgzf-filehandle'\nimport { BaseOpts, BamOpts, concatUint8Array } from './util'\nimport BamFile, { BAM_MAGIC } from './bamFile'\nimport Chunk from './chunk'\nimport { parseHeaderText } from './sam'\n\ninterface HtsgetChunk {\n  url: string\n  headers?: Record<string, string>\n}\nasync function concat(arr: HtsgetChunk[], opts?: Record<string, any>) {\n  const res = await Promise.all(\n    arr.map(async chunk => {\n      const { url, headers } = chunk\n      if (url.startsWith('data:')) {\n        // pass base64 data url to fetch to decode to buffer\n        // https://stackoverflow.com/a/54123275/2129219\n        const res = await fetch(url)\n        if (!res.ok) {\n          throw new Error('failed to decode base64')\n        }\n        const ret = await res.arrayBuffer()\n        return new Uint8Array(ret)\n      } else {\n        //remove referer header, it is not even allowed to be specified\n        // @ts-expect-error\n\n        const { referer, ...rest } = headers\n        const res = await fetch(url, {\n          ...opts,\n          headers: { ...opts?.headers, ...rest },\n        })\n        if (!res.ok) {\n          throw new Error(\n            `HTTP ${res.status} fetching ${url}: ${await res.text()}`,\n          )\n        }\n        return new Uint8Array(await res.arrayBuffer())\n      }\n    }),\n  )\n\n  return concatUint8Array(await Promise.all(res.map(elt => unzip(elt))))\n}\n\nexport default class HtsgetFile extends BamFile {\n  private baseUrl: string\n\n  private trackId: string\n\n  constructor(args: { trackId: string; baseUrl: string }) {\n    super({ htsget: true })\n    this.baseUrl = args.baseUrl\n    this.trackId = args.trackId\n  }\n\n  async *streamRecordsForRange(\n    chr: string,\n    min: number,\n    max: number,\n    opts?: BamOpts,\n  ) {\n    const base = `${this.baseUrl}/${this.trackId}`\n    const url = `${base}?referenceName=${chr}&start=${min}&end=${max}&format=BAM`\n    const chrId = this.chrToIndex?.[chr]\n    if (chrId === undefined) {\n      yield []\n    } else {\n      const result = await fetch(url, { ...opts })\n      if (!result.ok) {\n        throw new Error(\n          `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n        )\n      }\n      const data = await result.json()\n      const uncba = await concat(data.htsget.urls.slice(1), opts)\n\n      yield* this._fetchChunkFeatures(\n        [\n          // fake stuff to pretend to be a Chunk\n          {\n            buffer: uncba,\n            _fetchedSize: undefined,\n            bin: 0,\n            compareTo() {\n              return 0\n            },\n            toUniqueString() {\n              return `${chr}_${min}_${max}`\n            },\n            fetchedSize() {\n              return 0\n            },\n            minv: {\n              dataPosition: 0,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            maxv: {\n              dataPosition: Number.MAX_SAFE_INTEGER,\n              blockPosition: 0,\n              compareTo: () => 0,\n            },\n            toString() {\n              return `${chr}_${min}_${max}`\n            },\n          },\n        ],\n        chrId,\n        min,\n        max,\n        opts,\n      )\n    }\n  }\n\n  // @ts-expect-error\n  async _readChunk({ chunk }: { chunk: Chunk; opts: BaseOpts }) {\n    if (!chunk.buffer) {\n      throw new Error('expected chunk.buffer in htsget')\n    }\n    return {\n      data: chunk.buffer,\n      cpositions: [],\n      dpositions: [],\n      chunk,\n    }\n  }\n\n  async getHeader(opts: BaseOpts = {}) {\n    const url = `${this.baseUrl}/${this.trackId}?referenceName=na&class=header`\n    const result = await fetch(url, opts)\n    if (!result.ok) {\n      throw new Error(\n        `HTTP ${result.status} fetching ${url}: ${await result.text()}`,\n      )\n    }\n    const data = await result.json()\n    const uncba = await concat(data.htsget.urls, opts)\n    const dataView = new DataView(uncba.buffer)\n\n    if (dataView.getInt32(0, true) !== BAM_MAGIC) {\n      throw new Error('Not a BAM file')\n    }\n    const headLen = dataView.getInt32(4, true)\n\n    const decoder = new TextDecoder('utf8')\n    const headerText = decoder.decode(uncba.subarray(8, 8 + headLen))\n    const samHeader = parseHeaderText(headerText)\n\n    // use the @SQ lines in the header to figure out the\n    // mapping between ref ref ID numbers and names\n    const idToName: { refName: string; length: number }[] = []\n    const nameToId: Record<string, number> = {}\n    const sqLines = samHeader.filter(l => l.tag === 'SQ')\n    for (const [refId, sqLine] of sqLines.entries()) {\n      let refName = ''\n      let length = 0\n      for (const item of sqLine.data) {\n        if (item.tag === 'SN') {\n          refName = item.value\n        } else if (item.tag === 'LN') {\n          length = +item.value\n        }\n      }\n      nameToId[refName] = refId\n      idToName[refId] = { refName, length }\n    }\n    this.chrToIndex = nameToId\n    this.indexToChr = idToName\n    return samHeader\n  }\n}\n","class NullSignal {}\n\n/**\n * aggregates a number of abort signals, will only fire the aggregated\n * abort if all of the input signals have been aborted\n */\nexport default class AggregateAbortController {\n  signals = new Set()\n  abortController = new AbortController()\n\n  /**\n   * @param {AbortSignal} [signal] optional AbortSignal to add. if falsy,\n   *  will be treated as a null-signal, and this abortcontroller will no\n   *  longer be abortable.\n   */\n  //@ts-ignore\n  addSignal(signal: AbortSignal = new NullSignal()): void {\n    if (this.signal.aborted) {\n      throw new Error('cannot add a signal, already aborted!')\n    }\n\n    // note that a NullSignal will never fire, so if we\n    // have one this thing will never actually abort\n    this.signals.add(signal)\n    if (signal.aborted) {\n      // handle the abort immediately if it is already aborted\n      // for some reason\n      this.handleAborted(signal)\n    } else if (typeof signal.addEventListener === 'function') {\n      signal.addEventListener('abort', () => {\n        this.handleAborted(signal)\n      })\n    }\n  }\n\n  handleAborted(signal: AbortSignal): void {\n    this.signals.delete(signal)\n    if (this.signals.size === 0) {\n      this.abortController.abort()\n    }\n  }\n\n  get signal(): AbortSignal {\n    return this.abortController.signal\n  }\n\n  abort(): void {\n    this.abortController.abort()\n  }\n}\n","export default class AggregateStatusReporter {\n  callbacks = new Set<Function>()\n  currentMessage: unknown\n\n  addCallback(callback: Function = () => {}): void {\n    this.callbacks.add(callback)\n    callback(this.currentMessage)\n  }\n\n  callback(message: unknown) {\n    this.currentMessage = message\n    for (const elt of this.callbacks) {\n      elt(message)\n    }\n  }\n}\n","import AggregateAbortController from './AggregateAbortController'\nimport AggregateStatusReporter from './AggregateStatusReporter'\n\ninterface Cache<U> {\n  delete: (key: string) => void\n  keys: () => Iterator<string>\n  get: (key: string) => U | undefined\n  set: (key: string, value: U) => void\n  has: (key: string) => boolean\n}\ntype FillCallback<T, U> = (\n  data: T,\n  signal?: AbortSignal,\n  statusCallback?: Function,\n) => Promise<U>\n\ninterface Entry<U> {\n  aborter: AggregateAbortController\n  settled: boolean\n  readonly aborted: boolean\n  statusReporter: AggregateStatusReporter\n  promise: Promise<U>\n}\nexport default class AbortablePromiseCache<T, U> {\n  /**\n   * @param {object} args constructor args\n   * @param {Function} args.fill fill callback, will be called with sig `fill(data, signal)`\n   * @param {object} args.cache backing store to use, must implement `get(key)`, `set(key, val)`,\n   *   `delete(key)`, and `keys() -> iterator`\n   */\n\n  private cache: Cache<Entry<U>>\n  private fillCallback: FillCallback<T, U>\n\n  constructor({\n    fill,\n    cache,\n  }: {\n    fill: FillCallback<T, U>\n    cache: Cache<Entry<U>>\n  }) {\n    if (typeof fill !== 'function') {\n      throw new TypeError('must pass a fill function')\n    }\n    if (typeof cache !== 'object') {\n      throw new TypeError('must pass a cache object')\n    }\n    if (\n      typeof cache.get !== 'function' ||\n      typeof cache.set !== 'function' ||\n      typeof cache.delete !== 'function'\n    ) {\n      throw new TypeError(\n        'cache must implement get(key), set(key, val), and and delete(key)',\n      )\n    }\n\n    this.cache = cache\n    this.fillCallback = fill\n  }\n\n  static isAbortException(exception: Error) {\n    return (\n      // DOMException\n      exception.name === 'AbortError' ||\n      // standard-ish non-DOM abort exception\n      //@ts-ignore\n      exception.code === 'ERR_ABORTED' ||\n      // stringified DOMException\n      exception.message === 'AbortError: aborted' ||\n      // stringified standard-ish exception\n      exception.message === 'Error: aborted'\n    )\n  }\n\n  evict(key: string, entry: Entry<U>) {\n    if (this.cache.get(key) === entry) {\n      this.cache.delete(key)\n    }\n  }\n\n  fill(key: string, data: T, signal?: AbortSignal, statusCallback?: Function) {\n    const aborter = new AggregateAbortController()\n    const statusReporter = new AggregateStatusReporter()\n    statusReporter.addCallback(statusCallback)\n    const newEntry: Entry<U> = {\n      aborter: aborter,\n      promise: this.fillCallback(data, aborter.signal, (message: unknown) => {\n        statusReporter.callback(message)\n      }),\n      settled: false,\n      statusReporter,\n      get aborted() {\n        return this.aborter.signal.aborted\n      },\n    }\n    newEntry.aborter.addSignal(signal)\n\n    // remove the fill from the cache when its abortcontroller fires, if still in there\n    newEntry.aborter.signal.addEventListener('abort', () => {\n      if (!newEntry.settled) {\n        this.evict(key, newEntry)\n      }\n    })\n\n    // chain off the cached promise to record when it settles\n    newEntry.promise\n      .then(\n        () => {\n          newEntry.settled = true\n        },\n        () => {\n          newEntry.settled = true\n\n          // if the fill throws an error (including abort) and is still in the cache, remove it\n          this.evict(key, newEntry)\n        },\n      )\n      .catch(error => {\n        // this will only be reached if there is some kind of\n        // bad bug in this library\n        console.error(error)\n        throw error\n      })\n\n    this.cache.set(key, newEntry)\n  }\n\n  static checkSinglePromise<U>(promise: Promise<U>, signal?: AbortSignal) {\n    // check just this signal for having been aborted, and abort the\n    // promise if it was, regardless of what happened with the cached\n    // response\n    function checkForSingleAbort() {\n      if (signal?.aborted) {\n        throw Object.assign(new Error('aborted'), { code: 'ERR_ABORTED' })\n      }\n    }\n\n    return promise.then(\n      result => {\n        checkForSingleAbort()\n        return result\n      },\n      error => {\n        checkForSingleAbort()\n        throw error\n      },\n    )\n  }\n\n  has(key: string): boolean {\n    return this.cache.has(key)\n  }\n\n  /**\n   * Callback for getting status of the pending async\n   *\n   * @callback statusCallback\n   * @param {any} status, current status string or message object\n   */\n\n  /**\n   * @param {any} key cache key to use for this request\n   * @param {any} data data passed as the first argument to the fill callback\n   * @param {AbortSignal} [signal] optional AbortSignal object that aborts the request\n   * @param {statusCallback} a callback to get the current status of a pending async operation\n   */\n  get(\n    key: string,\n    data: T,\n    signal?: AbortSignal,\n    statusCallback?: Function,\n  ): Promise<U> {\n    if (!signal && data instanceof AbortSignal) {\n      throw new TypeError(\n        'second get argument appears to be an AbortSignal, perhaps you meant to pass `null` for the fill data?',\n      )\n    }\n    const cacheEntry = this.cache.get(key)\n\n    if (cacheEntry) {\n      if (cacheEntry.aborted && !cacheEntry.settled) {\n        // if it's aborted but has not realized it yet, evict it and redispatch\n        this.evict(key, cacheEntry)\n        return this.get(key, data, signal, statusCallback)\n      }\n\n      if (cacheEntry.settled) {\n        // too late to abort, just return it\n        return cacheEntry.promise\n      }\n\n      // request is in-flight, add this signal to its list of signals,\n      // or if there is no signal, the aborter will become non-abortable\n      cacheEntry.aborter.addSignal(signal)\n      cacheEntry.statusReporter.addCallback(statusCallback)\n\n      return AbortablePromiseCache.checkSinglePromise(\n        cacheEntry.promise,\n        signal,\n      )\n    }\n\n    // if we got here, it is not in the cache. fill.\n    this.fill(key, data, signal, statusCallback)\n    return AbortablePromiseCache.checkSinglePromise(\n      //see https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#non-null-assertion-operator-postfix-\n\n      this.cache.get(key)!.promise,\n      signal,\n    )\n  }\n\n  /**\n   * delete the given entry from the cache. if it exists and its fill request has\n   * not yet settled, the fill will be signaled to abort.\n   *\n   * @param {any} key\n   */\n  delete(key: string) {\n    const cachedEntry = this.cache.get(key)\n    if (cachedEntry) {\n      if (!cachedEntry.settled) {\n        cachedEntry.aborter.abort()\n      }\n      this.cache.delete(key)\n    }\n  }\n\n  /**\n   * Clear all requests from the cache. Aborts any that have not settled.\n   * @returns {number} count of entries deleted\n   */\n  clear() {\n    // iterate without needing regenerator-runtime\n    const keyIter = this.cache.keys()\n    let deleteCount = 0\n    for (let result = keyIter.next(); !result.done; result = keyIter.next()) {\n      this.delete(result.value)\n      deleteCount += 1\n    }\n    return deleteCount\n  }\n}\n"],"names":["TABLE","Int32Array","current","previous","crc","index","length","VirtualOffset","blockPosition","dataPosition","constructor","this","toString","compareTo","b","min","args","i","fromBytes","bytes","offset","bigendian","Error","Chunk","minv","maxv","bin","_fetchedSize","buffer","toUniqueString","fetchedSize","undefined","longFromBytesToUnsigned","source","low","TWO_PWR_16_DBL","timeout","ms","Promise","resolve","setTimeout","optimizeChunks","chunks","lowest","mergedChunks","lastChunk","sort","c0","c1","dif","chunk","push","chunk1","chunk2","parsePseudoBin","lineCount","findFirstData","firstDataLine","virtualOffset","parseNameBytes","namesBytes","renameRefSeq","s","currRefId","currNameStart","refIdToName","refNameToId","refName","j","String","fromCharCode","IndexFile","filehandle","n","BAI","setupP","refId","opts","indexData","parse","indices","stats","_parse","_opts","readFile","dataView","DataView","getUint32","refCount","getInt32","curr","Array","binCount","binIndex","binLimit","chunkCount","k","u","v","linearCount","linearIndex","bai","maxBlockSize","indexCov","seqId","start","end","range","seqIdx","e","roundDown","depths","totalSize","currentPos","score","map","d","blocksForRange","max","ba","overlappingBins","beg","binChunks","binChunk","nintv","minLin","Math","maxLin","vp","catch","hasRefSeq","header","rshift","num","bits","floor","CSI","maxBinNumber","depth","minShift","parseAuxData","formatFlags","coordinateType","format","columnNumbers","ref","metaValue","metaChar","skipLines","nameSectionLength","subarray","csiVersion","magic","auxLength","aux","csi","reg2bins","c","l","t","bins","SEQRET_DECODER","split","CIGAR_DECODER","BamRecord","fileOffset","byteArray","flags","ref_id","length_on_ref","id","mq","bin_mq_nl","qual","isSegmentUnmapped","p","b0","read_name_length","num_cigar_ops","num_seq_bytes","seq_length","strand","isReverseComplemented","name","str","tags","blockEnd","tag","type","getInt8","getUint8","getInt16","getUint16","getFloat32","value","cc","join","console","error","Btype","limit","cigop","lop","op","isPaired","isProperlyPaired","isMateUnmapped","isMateReverseComplemented","isRead1","isRead2","isSecondary","isFailedQc","isDuplicate","isSupplementary","cigarAndLength","CIGAR","numCigarOps","warn","CG","lref","flag_nc","seq","seqBytes","len","buf","sb","pair_orientation","next_refid","s1","s2","o1","o2","tmp","template_length","next_pos","toJSON","data","Object","keys","startsWith","cacheGetter","ctor","prop","desc","getOwnPropertyDescriptor","prototype","getter","get","defineProperty","ret","call","parseHeaderText","text","lines","line","fields","slice","f","r","indexOf","BAM_MAGIC","NullFilehandle","read","stat","close","BamFile","bam","chrToIndex","indexToChr","yieldThreadTime","htsget","headerP","featureCache","AbortablePromiseCache","A","cache","maxSize","fill","async","signal","cpositions","dpositions","_readChunk","readBamFeatures","bamFilehandle","bamPath","bamUrl","baiPath","baiFilehandle","baiUrl","csiPath","csiFilehandle","csiUrl","renameRefSeqs","getHeaderPre","origOpts","obj","makeOpts","uncba","headLen","decoder","TextDecoder","decode","_readRefSeqs","getHeader","getHeaderText","refSeqBytes","nRef","lName","lRef","getRecordsForRange","chr","gen","out","x","concat","gen2array","streamRecordsForRange","chrId","_fetchChunkFeatures","viewAsPairs","feats","done","records","recs","feature","aborted","DOMException","code","checkAbortSignal","fetchPairs","pairAcrossChr","maxInsertSize","unmatedPairs","readIds","readNames","element","entries","matePromises","pnext","rnext","abs","Map","res","all","m","flat","has","set","values","mateRecs","_readRegion","position","size","blockStart","sink","pos","last","Date","now","crc32","seqName","arr","url","headers","fetch","ok","arrayBuffer","Uint8Array","referer","rest","status","mergedArray","array","sum","entry","concatUint8Array","elt","HtsgetFile","baseUrl","trackId","super","result","json","urls","Number","MAX_SAFE_INTEGER","samHeader","idToName","nameToId","sqLines","filter","sqLine","item","NullSignal","AggregateAbortController","signals","Set","abortController","AbortController","addSignal","add","handleAborted","addEventListener","delete","abort","AggregateStatusReporter","callbacks","addCallback","callback","currentMessage","message","TypeError","fillCallback","isAbortException","exception","evict","key","statusCallback","aborter","statusReporter","newEntry","promise","settled","then","checkSinglePromise","checkForSingleAbort","assign","AbortSignal","cacheEntry","cachedEntry","clear","keyIter","deleteCount","next"],"sourceRoot":""}