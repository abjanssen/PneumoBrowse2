{"version":3,"file":"static/js/6834.18cc3e6a.chunk.js","mappings":"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","sources":["../../../plugins/bed/src/BigBedAdapter/BigBedAdapter.ts","../../../plugins/bed/src/generateRepeatMaskerFeature.ts","../../../plugins/bed/src/util.ts","../../../plugins/bed/src/generateBedMethylFeature.ts","../../../plugins/bed/src/generateUcscTranscript.ts"],"sourcesContent":["import { BigBed } from '@gmod/bbi'\nimport BED from '@gmod/bed'\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport {\n  SimpleFeature,\n  doesIntersect2,\n  max,\n  min,\n  updateStatus,\n} from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { firstValueFrom, toArray } from 'rxjs'\n\nimport { featureData2 } from '../util'\n\nimport type { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport type { Feature, SimpleFeatureSerialized } from '@jbrowse/core/util'\nimport type { Region } from '@jbrowse/core/util/types'\nimport type { Observer } from 'rxjs'\n\nexport default class BigBedAdapter extends BaseFeatureDataAdapter {\n  private cachedP?: Promise<{\n    bigbed: BigBed\n    header: Awaited<ReturnType<BigBed['getHeader']>>\n    parser: BED\n  }>\n\n  public async configurePre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const bigbed = new BigBed({\n      filehandle: openLocation(this.getConf('bigBedLocation'), pm),\n    })\n    const header = await bigbed.getHeader(opts)\n    const parser = new BED({\n      autoSql: header.autoSql,\n    })\n    return {\n      bigbed,\n      header,\n      parser,\n    }\n  }\n\n  public async configure(opts?: BaseOptions) {\n    if (!this.cachedP) {\n      this.cachedP = this.configurePre(opts).catch((e: unknown) => {\n        this.cachedP = undefined\n        throw e\n      })\n    }\n    return this.cachedP\n  }\n\n  public async getRefNames(opts?: BaseOptions) {\n    const { header } = await this.configure(opts)\n    return Object.keys(header.refsByName)\n  }\n\n  public async getData() {\n    const refNames = await this.getRefNames()\n    const features = []\n    for (const refName of refNames) {\n      const f = await firstValueFrom(\n        this.getFeatures({\n          assemblyName: 'unknown',\n          refName,\n          start: 0,\n          end: Number.MAX_SAFE_INTEGER,\n        }).pipe(toArray()),\n      )\n      features.push(f)\n    }\n    return features.flat()\n  }\n\n  async getHeader(opts?: BaseOptions) {\n    const { parser, header } = await this.configure(opts)\n    const { version, fileType } = header\n    const { fields, ...rest } = parser.autoSql\n    return {\n      version,\n      fileType,\n      autoSql: { ...rest },\n      fields: Object.fromEntries(\n        fields.map(({ name, comment }) => [name, comment]),\n      ),\n    }\n  }\n\n  public async getFeaturesHelper({\n    query,\n    opts,\n    observer,\n    allowRedispatch,\n    originalQuery = query,\n  }: {\n    query: Region\n    opts: BaseOptions\n    observer: Observer<Feature>\n    allowRedispatch: boolean\n    originalQuery?: Region\n  }) {\n    const { stopToken, statusCallback = () => {} } = opts\n    const scoreColumn = this.getConf('scoreColumn')\n    const aggregateField = this.getConf('aggregateField')\n    const { parser, bigbed } = await updateStatus(\n      'Downloading header',\n      statusCallback,\n      () => this.configure(opts),\n    )\n    const feats = await updateStatus(\n      'Downloading features',\n      statusCallback,\n      () =>\n        bigbed.getFeatures(query.refName, query.start, query.end, {\n          stopToken,\n          basesPerSpan: query.end - query.start,\n        }),\n    )\n\n    if (allowRedispatch && feats.length) {\n      let minStart = Number.POSITIVE_INFINITY\n      let maxEnd = Number.NEGATIVE_INFINITY\n      let hasAnyAggregationField = false\n      for (const feat of feats) {\n        if (feat.start < minStart) {\n          minStart = feat.start\n        }\n        if (feat.end > maxEnd) {\n          maxEnd = feat.end\n        }\n        // @ts-expect-error\n        if (feat[aggregateField]) {\n          hasAnyAggregationField = true\n        }\n      }\n\n      if (\n        hasAnyAggregationField &&\n        (maxEnd > query.end || minStart < query.start)\n      ) {\n        await this.getFeaturesHelper({\n          query: {\n            ...query,\n            start: minStart,\n            end: maxEnd,\n          },\n          opts,\n          observer,\n          allowRedispatch: false,\n          originalQuery: query,\n        })\n        return\n      }\n    }\n\n    const parentAggregation = {} as Record<string, SimpleFeatureSerialized[]>\n\n    if (feats.some(f => f.uniqueId === undefined)) {\n      throw new Error('found uniqueId undefined')\n    }\n    for (const feat of feats) {\n      const splitLine = [\n        query.refName,\n        `${feat.start}`,\n        `${feat.end}`,\n        ...(feat.rest?.split('\\t') || []),\n      ]\n      const data = parser.parseLine(splitLine, {\n        uniqueId: feat.uniqueId!,\n      })\n\n      const aggr = data[aggregateField]\n      if (!parentAggregation[aggr]) {\n        parentAggregation[aggr] = []\n      }\n      const {\n        uniqueId,\n        type,\n        chrom,\n        chromStart,\n        chromEnd,\n        description,\n        chromStarts: chromStarts2,\n        blockStarts: blockStarts2,\n        blockSizes: blockSizes2,\n        score: score2,\n        blockCount,\n        thickStart,\n        thickEnd,\n        strand,\n        ...rest\n      } = data\n\n      const f = featureData2({\n        ...rest,\n        scoreColumn,\n        splitLine,\n        parser,\n        uniqueId,\n        start: feat.start,\n        end: feat.end,\n        refName: query.refName,\n      })\n      if (aggr) {\n        parentAggregation[aggr].push(f)\n      } else {\n        if (\n          doesIntersect2(f.start, f.end, originalQuery.start, originalQuery.end)\n        ) {\n          observer.next(\n            new SimpleFeature({\n              id: `${this.id}-${uniqueId}`,\n              data: f,\n            }),\n          )\n        }\n      }\n    }\n\n    Object.entries(parentAggregation).map(([name, subfeatures]) => {\n      const s = min(subfeatures.map(f => f.start))\n      const e = max(subfeatures.map(f => f.end))\n      if (doesIntersect2(s, e, originalQuery.start, originalQuery.end)) {\n        const { uniqueId, strand } = subfeatures[0]!\n        observer.next(\n          new SimpleFeature({\n            id: `${this.id}-${uniqueId}-parent`,\n            data: {\n              type: 'gene',\n              subfeatures,\n              strand,\n              name,\n              start: s,\n              end: e,\n              refName: query.refName,\n            },\n          }),\n        )\n      }\n    })\n    observer.complete()\n  }\n  public getFeatures(query: Region, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      try {\n        await this.getFeaturesHelper({\n          query,\n          opts,\n          observer,\n          allowRedispatch: true,\n        })\n      } catch (e) {\n        observer.error(e)\n      }\n    }, opts.stopToken)\n  }\n\n  public freeResources(): void {}\n}\n","export function isRepeatMaskerDescriptionField(desc?: string): desc is string {\n  const ret = desc?.trim().split(' ')\n  return [0, 1, 2, 3, 5, 6].every(s =>\n    ret?.[s] !== undefined ? !Number.isNaN(+ret[s]) : false,\n  )\n}\n\nfunction makeRepeatTrackDescription(description?: string) {\n  if (isRepeatMaskerDescriptionField(description)) {\n    const [\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    ] = description.trim().split(' ')\n    return {\n      bitsw_score,\n      percent_div,\n      percent_del,\n      percent_ins,\n      query_chr,\n      query_begin,\n      query_end,\n      query_remaining,\n      orientation,\n      matching_repeat_name,\n      matching_repeat_class,\n      matching_repeat_begin,\n      matching_repeat_end,\n      matching_repeat_remaining,\n      repeat_id,\n    }\n  }\n  return { description }\n}\n\nexport function generateRepeatMaskerFeature({\n  uniqueId,\n  refName,\n  start,\n  end,\n  description,\n  ...rest\n}: {\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n  description: string\n  [key: string]: unknown\n}) {\n  const { subfeatures, ...rest2 } = rest\n  return {\n    ...rest2,\n    ...makeRepeatTrackDescription(description),\n    uniqueId,\n    refName,\n    start,\n    end,\n  }\n}\n","import {\n  generateBedMethylFeature,\n  isBedMethylFeature,\n} from './generateBedMethylFeature'\nimport {\n  generateRepeatMaskerFeature,\n  isRepeatMaskerDescriptionField,\n} from './generateRepeatMaskerFeature'\nimport {\n  generateUcscTranscript,\n  isUcscTranscript,\n} from './generateUcscTranscript'\n\nimport type BED from '@gmod/bed'\n\nfunction defaultParser(fields: string[], splitLine: string[]) {\n  let hasBlockCount = false\n  const r = [] as [string, string][]\n  for (let i = 0; i < splitLine.length; i++) {\n    if (fields[i] === 'blockCount') {\n      hasBlockCount = true\n    }\n    r.push([fields[i]!, splitLine[i]!] as const)\n  }\n  // heuristically try to determine whether to follow 'slow path' as there can\n  // be many features in e.g. GWAS type data\n  const obj = Object.fromEntries(r)\n  // slow path\n  if (hasBlockCount) {\n    const {\n      blockStarts,\n      blockCount,\n      chromStarts,\n      thickEnd,\n      thickStart,\n      blockSizes,\n      ...rest\n    } = obj\n\n    return {\n      ...rest,\n      blockStarts: arrayify(blockStarts),\n      chromStarts: arrayify(chromStarts),\n      blockSizes: arrayify(blockSizes),\n      thickStart: thickStart ? +thickStart : undefined,\n      thickEnd: thickEnd ? +thickEnd : undefined,\n      blockCount: blockCount ? +blockCount : undefined,\n    } as Record<string, unknown>\n  }\n\n  // fast path\n  else {\n    return obj\n  }\n}\n\nexport function makeBlocks({\n  start,\n  uniqueId,\n  refName,\n  chromStarts,\n  blockCount,\n  blockSizes,\n  blockStarts,\n}: {\n  blockCount: number\n  start: number\n  uniqueId: string\n  refName: string\n  chromStarts?: number[]\n  blockSizes?: number[]\n  blockStarts?: number[]\n}) {\n  const subfeatures = []\n  const starts = chromStarts || blockStarts || []\n  for (let b = 0; b < blockCount; b++) {\n    const bmin = (starts[b] || 0) + start\n    const bsize = blockSizes?.[b]\n    if (bsize && bsize > 0) {\n      const bmax = bmin + bsize\n      subfeatures.push({\n        uniqueId: `${uniqueId}-${b}`,\n        start: bmin,\n        end: bmax,\n        refName,\n        type: 'block',\n      })\n    }\n  }\n  return subfeatures\n}\n\nexport function featureData({\n  line,\n  colRef,\n  colStart,\n  colEnd,\n  scoreColumn,\n  parser,\n  uniqueId,\n  names,\n}: {\n  line: string\n  colRef: number\n  colStart: number\n  colEnd: number\n  scoreColumn: string\n  parser: BED\n  uniqueId: string\n  names?: string[]\n}) {\n  const splitLine = line.split('\\t')\n  const refName = splitLine[colRef]!\n  const start = Number.parseInt(splitLine[colStart]!, 10)\n  const end =\n    Number.parseInt(splitLine[colEnd]!, 10) + (colStart === colEnd ? 1 : 0)\n\n  return featureData2({\n    splitLine,\n    refName,\n    start,\n    end,\n    parser,\n    uniqueId,\n    scoreColumn,\n    names,\n  })\n}\n\nexport function featureData2({\n  splitLine,\n  refName,\n  start,\n  end,\n  parser,\n  uniqueId,\n  scoreColumn,\n  names,\n}: {\n  splitLine: string[]\n  refName: string\n  start: number\n  end: number\n  parser: BED\n  uniqueId: string\n  scoreColumn: string\n  names?: string[]\n}) {\n  const data = names\n    ? defaultParser(names, splitLine)\n    : parser.parseLine(splitLine, { uniqueId })\n  const {\n    strand: strand2,\n    score: score2,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    ...rest\n  } = data\n\n  const score = scoreColumn ? +data[scoreColumn] : score2 ? +score2 : undefined\n  const strand =\n    typeof strand2 === 'string' ? (strand2 === '-' ? -1 : 1) : strand2\n\n  const subfeatures = rest.blockCount\n    ? makeBlocks({\n        start,\n        uniqueId,\n        refName,\n        chromStarts: rest.chromStarts,\n        blockCount: rest.blockCount,\n        blockSizes: rest.blockSizes,\n        blockStarts: rest.blockStarts,\n      })\n    : undefined\n\n  if (isBedMethylFeature({ splitLine, start, end })) {\n    return generateBedMethylFeature({\n      splitLine,\n      uniqueId,\n      refName,\n      start,\n      end,\n    })\n  } else if (isRepeatMaskerDescriptionField(rest.description)) {\n    const {\n      chromStarts,\n      blockSizes,\n      blockStarts,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n      ...rest2\n    } = rest\n    return generateRepeatMaskerFeature({\n      ...rest2,\n      uniqueId,\n      description,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    })\n  } else if (\n    subfeatures &&\n    isUcscTranscript({\n      strand,\n      blockCount: rest.blockCount,\n      thickStart: rest.thickStart,\n    })\n  ) {\n    const {\n      chromStarts,\n      blockSizes,\n      type,\n      blockCount,\n      thickStart,\n      thickEnd,\n      description,\n    } = rest\n    return generateUcscTranscript({\n      ...rest,\n      description,\n      chromStarts,\n      thickStart,\n      thickEnd,\n      blockSizes,\n      blockCount,\n      type,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      uniqueId,\n      subfeatures,\n    })\n  } else {\n    return {\n      ...rest,\n      uniqueId,\n      score,\n      start,\n      end,\n      strand,\n      refName,\n      subfeatures,\n    }\n  }\n}\n\nexport function arrayify(f?: string | number[]) {\n  return f !== undefined\n    ? typeof f === 'string'\n      ? f.split(',').map(f => +f)\n      : f\n    : undefined\n}\n","// this uses modkit bedMethyl. unclear how to reliably detect minimal 9+2 bedMethyl\nexport function isBedMethylFeature({\n  splitLine,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  start: number\n  end: number\n}) {\n  return (\n    +(splitLine[6] || 0) === start &&\n    +(splitLine[7] || 0) === end &&\n    [9, 10, 11, 12, 13, 14, 15, 16, 17].every(\n      r => splitLine[r] && !Number.isNaN(+splitLine[r]),\n    )\n  )\n}\n\nexport function generateBedMethylFeature({\n  splitLine,\n  uniqueId,\n  refName,\n  start,\n  end,\n}: {\n  splitLine: string[]\n  uniqueId: string\n  refName: string\n  start: number\n  end: number\n}) {\n  // see\n  // https://github.com/nanoporetech/modkit?tab=readme-ov-file#description-of-bedmethyl-output\n  const [\n    ,\n    ,\n    ,\n    code,\n    ,\n    strand,\n    ,\n    ,\n    color,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  ] = splitLine\n\n  return {\n    uniqueId,\n    refName,\n    start,\n    end,\n    code,\n    score: +fraction_modified! || 0,\n    strand,\n    color,\n    source: code,\n    n_valid_cov,\n    fraction_modified,\n    n_mod,\n    n_canonical,\n    n_other_mod,\n    n_delete,\n    n_fail,\n    n_diff,\n    n_nocall,\n  }\n}\n","import type { MinimalFeature, TranscriptFeat } from './types'\n\nexport function isUcscTranscript({\n  thickStart,\n  blockCount,\n  strand,\n}: {\n  thickStart?: number\n  blockCount?: number\n  strand?: number\n}) {\n  return thickStart && blockCount && strand !== 0\n}\n\nexport function generateUcscTranscript(data: TranscriptFeat) {\n  const {\n    strand = 0,\n    chrom: _1,\n    chromStart: _2,\n    chromEnd: _3,\n    chromStarts,\n    blockStarts,\n    blockSizes,\n    uniqueId,\n    ...rest\n  } = data\n  const {\n    subfeatures: oldSubfeatures,\n    thickStart,\n    thickEnd,\n    blockCount,\n    refName,\n    ...rest2\n  } = rest\n\n  const subfeatures: MinimalFeature[] = []\n  const feats = oldSubfeatures\n    .filter(child => child.type === 'block')\n    .sort((a, b) => a.start - b.start)\n\n  for (const block of feats) {\n    const start = block.start\n    const end = block.end\n    if (thickStart >= end) {\n      // left-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd >= end) {\n      // UTR | CDS\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          phase: 0,\n          start: thickStart,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd >= end) {\n      // CDS\n      subfeatures.push({\n        type: 'CDS',\n        phase: 0,\n        start,\n        end,\n        refName,\n      })\n    } else if (thickStart > start && thickStart < end && thickEnd < end) {\n      // UTR | CDS | UTR\n      subfeatures.push(\n        {\n          type: `${strand > 0 ? 'five' : 'three'}_prime_UTR`,\n          start,\n          end: thickStart,\n          refName,\n        },\n        {\n          type: 'CDS',\n          phase: 0,\n          start: thickStart,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickStart <= start && thickEnd > start && thickEnd < end) {\n      // CDS | UTR\n      subfeatures.push(\n        {\n          type: 'CDS',\n          phase: 0,\n          start,\n          end: thickEnd,\n          refName,\n        },\n        {\n          type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n          start: thickEnd,\n          end,\n          refName,\n        },\n      )\n    } else if (thickEnd <= start) {\n      // right-side UTR\n      subfeatures.push({\n        type: `${strand > 0 ? 'three' : 'five'}_prime_UTR`,\n        start,\n        end,\n        refName,\n      })\n    }\n  }\n\n  return {\n    ...rest2,\n    uniqueId,\n    strand,\n    type: 'mRNA',\n    refName,\n    subfeatures,\n  }\n}\n"],"names":["BigBedAdapter","BaseFeatureDataAdapter","configurePre","opts","pm","this","pluginManager","bigbed","BigBed","filehandle","openLocation","getConf","header","getHeader","parser","BED","autoSql","configure","cachedP","catch","e","undefined","getRefNames","Object","keys","refsByName","getData","refNames","features","refName","f","firstValueFrom","getFeatures","assemblyName","start","end","Number","MAX_SAFE_INTEGER","pipe","toArray","push","flat","version","fileType","fields","rest","fromEntries","map","name","comment","getFeaturesHelper","query","observer","allowRedispatch","originalQuery","stopToken","statusCallback","scoreColumn","aggregateField","updateStatus","feats","basesPerSpan","length","minStart","POSITIVE_INFINITY","maxEnd","NEGATIVE_INFINITY","hasAnyAggregationField","feat","parentAggregation","some","uniqueId","Error","splitLine","split","data","parseLine","aggr","type","chrom","chromStart","chromEnd","description","chromStarts","chromStarts2","blockStarts","blockStarts2","blockSizes","blockSizes2","score","score2","blockCount","thickStart","thickEnd","strand","featureData2","doesIntersect2","next","SimpleFeature","id","entries","subfeatures","s","min","max","complete","ObservableCreate","async","error","freeResources","isRepeatMaskerDescriptionField","desc","ret","trim","every","isNaN","makeRepeatTrackDescription","bitsw_score","percent_div","percent_del","percent_ins","query_chr","query_begin","query_end","query_remaining","orientation","matching_repeat_name","matching_repeat_class","matching_repeat_begin","matching_repeat_end","matching_repeat_remaining","repeat_id","featureData","line","colRef","colStart","colEnd","names","parseInt","hasBlockCount","r","i","obj","arrayify","defaultParser","strand2","_1","_2","_3","starts","b","bmin","bsize","bmax","makeBlocks","isBedMethylFeature","code","color","n_valid_cov","fraction_modified","n_mod","n_canonical","n_other_mod","n_delete","n_fail","n_diff","n_nocall","source","generateBedMethylFeature","rest2","generateRepeatMaskerFeature","isUcscTranscript","oldSubfeatures","filter","child","sort","a","block","phase","generateUcscTranscript"],"sourceRoot":""}