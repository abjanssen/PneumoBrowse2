{"version":3,"file":"static/js/1590.4c5828d5.chunk.js","mappings":"4NAUe,MAAMA,UAAsBC,EAAAA,oBAMzC,oBAAcC,GACZ,MAAMC,GAAOC,EAAAA,EAAAA,gBAAeC,KAAKC,OAAQ,sBACzC,GAAiB,iCAAbH,EAAKI,KAAuD,KAAbJ,EAAKI,IAAY,CAClE,MAAMC,GAAOC,EAAAA,EAAAA,cAAaN,EAAME,KAAKK,eAC/BC,QAAaH,EAAKI,SAAS,QACjC,OAAOC,OAAOC,YACZH,EACGI,MAAM,cACNC,QAAOC,KAAUA,EAAKC,SACtBC,KAAIF,IACH,MAAOG,EAAMC,GAAUJ,EAAKF,MAAM,MAClC,MAAO,CAACK,GAAQC,EAAQ,IAGhC,CAEF,CAEA,cAAMC,GACJ,MAAO,CACLC,OAAQ,IAAIC,EAAAA,EAAW,CACrBC,YAAYhB,EAAAA,EAAAA,cACVJ,KAAKqB,QAAQ,kBACbrB,KAAKK,iBAGTiB,qBAAsBtB,KAAKH,iBAE/B,CACA,WAAM0B,GAOJ,OANKvB,KAAKwB,SACRxB,KAAKwB,OAASxB,KAAKiB,WAAWQ,OAAOC,IAEnC,MADA1B,KAAKwB,YAASG,EACRD,CAAC,KAGJ1B,KAAKwB,MACd,CAEA,iBAAaI,GACX,MAAM,eAAEN,EAAc,OAAEJ,SAAiBlB,KAAKuB,QAC9C,OAAOD,EACHd,OAAOqB,KAAKP,GACZJ,EAAOY,kBACb,CAEA,gBAAaC,GACX,MAAM,eAAET,EAAc,OAAEJ,SAAiBlB,KAAKuB,QAC9C,GAAID,EACF,OAAOd,OAAOqB,KAAKP,GAAgBR,KAAIkB,IAAW,CAChDA,UACAC,MAAO,EACPC,IAAKZ,EAAeU,OAEjB,CACL,MAAMG,QAAiBjB,EAAOkB,mBAC9B,OAAO5B,OAAOqB,KAAKM,GAAUrB,KAAIkB,IAAW,CAC1CA,UACAC,MAAO,EACPC,IAAKC,EAASH,MAElB,CACF,CAOOK,WAAAA,EAAY,QAAEL,EAAO,MAAEC,EAAK,IAAEC,IACnC,OAAOI,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,OAAErB,SAAiBlB,KAAKuB,QACxBiB,QAAatB,EAAOuB,gBAAgBT,GACpCU,OAAqBf,IAATa,EAAqBG,KAAKC,IAAIJ,EAAMN,GAAOA,EACvDW,QAAY3B,EAAO4B,YAAYd,EAASC,EAAOS,GACjDG,GACFE,EAASC,KACP,IAAIC,EAAAA,EAAc,CAChBC,GAAI,GAAGlB,KAAWC,KAASS,IAC3BpC,KAAM,CAAE0B,UAASC,QAAOC,IAAKQ,EAAWG,UAI9CE,EAASI,UAAU,GAEvB,CAMOC,aAAAA,GAAuC,E","sources":["../../../plugins/sequence/src/TwoBitAdapter/TwoBitAdapter.ts"],"sourcesContent":["import { TwoBitFile } from '@gmod/twobit'\nimport { readConfObject } from '@jbrowse/core/configuration'\nimport { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport SimpleFeature from '@jbrowse/core/util/simpleFeature'\n\nimport type { Feature } from '@jbrowse/core/util/simpleFeature'\nimport type { NoAssemblyRegion } from '@jbrowse/core/util/types'\n\nexport default class TwoBitAdapter extends BaseSequenceAdapter {\n  protected setupP?: Promise<{\n    twobit: TwoBitFile\n    chromSizesData: Record<string, number> | undefined\n  }>\n\n  private async initChromSizes() {\n    const conf = readConfObject(this.config, 'chromSizesLocation')\n    if (conf.uri !== '/path/to/default.chrom.sizes' && conf.uri !== '') {\n      const file = openLocation(conf, this.pluginManager)\n      const data = await file.readFile('utf8')\n      return Object.fromEntries(\n        data\n          .split(/\\n|\\r\\n|\\r/)\n          .filter(line => !!line.trim())\n          .map(line => {\n            const [name, length] = line.split('\\t')\n            return [name!, +length!] as const\n          }),\n      )\n    }\n    return undefined\n  }\n\n  async setupPre() {\n    return {\n      twobit: new TwoBitFile({\n        filehandle: openLocation(\n          this.getConf('twoBitLocation'),\n          this.pluginManager,\n        ),\n      }),\n      chromSizesData: await this.initChromSizes(),\n    }\n  }\n  async setup() {\n    if (!this.setupP) {\n      this.setupP = this.setupPre().catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  public async getRefNames() {\n    const { chromSizesData, twobit } = await this.setup()\n    return chromSizesData\n      ? Object.keys(chromSizesData)\n      : twobit.getSequenceNames()\n  }\n\n  public async getRegions() {\n    const { chromSizesData, twobit } = await this.setup()\n    if (chromSizesData) {\n      return Object.keys(chromSizesData).map(refName => ({\n        refName,\n        start: 0,\n        end: chromSizesData[refName]!,\n      }))\n    } else {\n      const refSizes = await twobit.getSequenceSizes()\n      return Object.keys(refSizes).map(refName => ({\n        refName,\n        start: 0,\n        end: refSizes[refName]!,\n      }))\n    }\n  }\n\n  /**\n   * Fetch features for a certain region\n   * @param param -\n   * @returns Observable of Feature objects in the region\n   */\n  public getFeatures({ refName, start, end }: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const { twobit } = await this.setup()\n      const size = await twobit.getSequenceSize(refName)\n      const regionEnd = size !== undefined ? Math.min(size, end) : end\n      const seq = await twobit.getSequence(refName, start, regionEnd)\n      if (seq) {\n        observer.next(\n          new SimpleFeature({\n            id: `${refName} ${start}-${regionEnd}`,\n            data: { refName, start, end: regionEnd, seq },\n          }),\n        )\n      }\n      observer.complete()\n    })\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region will not be\n   * needed for the foreseeable future and can be purged from caches, etc\n   */\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["TwoBitAdapter","BaseSequenceAdapter","initChromSizes","conf","readConfObject","this","config","uri","file","openLocation","pluginManager","data","readFile","Object","fromEntries","split","filter","line","trim","map","name","length","setupPre","twobit","TwoBitFile","filehandle","getConf","chromSizesData","setup","setupP","catch","e","undefined","getRefNames","keys","getSequenceNames","getRegions","refName","start","end","refSizes","getSequenceSizes","getFeatures","ObservableCreate","async","size","getSequenceSize","regionEnd","Math","min","seq","getSequence","observer","next","SimpleFeature","id","complete","freeResources"],"sourceRoot":""}