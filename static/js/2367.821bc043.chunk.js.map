{"version":3,"file":"static/js/2367.821bc043.chunk.js","mappings":"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","sources":["../../../plugins/variants/src/shared/drawAlleleCount.ts","../../../plugins/variants/src/MultiLinearVariantMatrixRenderer/makeImageData.ts","../../../plugins/variants/src/shared/drawPhased.ts","../../../plugins/variants/src/shared/util.ts","../../../plugins/variants/src/shared/constants.ts"],"sourcesContent":["import { colord } from '@jbrowse/core/util/colord'\n\nimport { f2 } from './constants'\n\nfunction getColorAlleleCount(alleles: string[], mostFrequentAlt: string) {\n  const total = alleles.length\n  let alt = 0\n  let uncalled = 0\n  let alt2 = 0\n  let ref = 0\n  for (const allele of alleles) {\n    if (allele === mostFrequentAlt) {\n      alt++\n    } else if (allele === '0') {\n      ref++\n    } else if (allele === '.') {\n      uncalled++\n    } else {\n      alt2++\n    }\n  }\n\n  if (ref === total) {\n    return `#ccc`\n  } else {\n    let a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`)\n    if (alt2) {\n      // @ts-ignore\n      a1 = a1.mix(`hsla(0,100%,20%,${alt2 / total})`)\n    }\n    if (uncalled) {\n      // @ts-ignore\n      a1 = a1.mix(`hsla(50,50%,50%,${uncalled / total / 2})`)\n    }\n    return a1.toHex()\n  }\n}\n\nexport function drawColorAlleleCount(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  mostFrequentAlt: string,\n) {\n  ctx.fillStyle = getColorAlleleCount(alleles, mostFrequentAlt)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","import { updateStatus } from '@jbrowse/core/util'\n\nimport { f2 } from '../shared/constants'\nimport { drawColorAlleleCount } from '../shared/drawAlleleCount'\nimport { drawPhased } from '../shared/drawPhased'\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils'\n\nimport type { RenderArgsDeserializedWithFeaturesAndLayout } from './types'\n\ntype SampleGenotype = Record<string, string[]>\n\nexport async function makeImageData({\n  ctx,\n  canvasWidth,\n  canvasHeight,\n  renderArgs,\n}: {\n  ctx: CanvasRenderingContext2D\n  canvasWidth: number\n  canvasHeight: number\n  renderArgs: RenderArgsDeserializedWithFeaturesAndLayout\n}) {\n  const {\n    renderingMode: renderingMode,\n    minorAlleleFrequencyFilter,\n    sources,\n    features,\n  } = renderArgs\n\n  const { statusCallback = () => {} } = renderArgs\n  const h = canvasHeight / sources.length\n  const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(\n    features.values(),\n    minorAlleleFrequencyFilter,\n  )\n  const arr = [] as string[][]\n  const m = mafs.length\n  const w = canvasWidth / m\n\n  await updateStatus('Drawing variant matrix', statusCallback, () => {\n    for (let i = 0; i < m; i++) {\n      const arr2 = [] as string[]\n      const { feature, mostFrequentAlt } = mafs[i]!\n      const hasPhaseSet = (feature.get('format') as string).includes('PS')\n      if (hasPhaseSet) {\n        const samp = feature.get('samples') as Record<string, SampleGenotype>\n        const x = (i / mafs.length) * canvasWidth\n        const sln = sources.length\n        for (let j = 0; j < sln; j++) {\n          const y = (j / sln) * canvasHeight\n          const { name, HP } = sources[j]!\n          const s = samp[name]\n          if (s) {\n            const genotype = s.GT?.[0]\n            if (genotype) {\n              arr2.push(genotype)\n              const isPhased = genotype.includes('|')\n              if (renderingMode === 'phased') {\n                if (isPhased) {\n                  const PS = s.PS?.[0]\n                  const alleles = genotype.split('|')\n                  drawPhased(alleles, ctx, x, y, w, h, HP!, PS)\n                } else {\n                  ctx.fillStyle = 'black'\n                  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n                }\n              } else {\n                const alleles = genotype.split(/[/|]/)\n                drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt)\n              }\n            }\n          }\n        }\n      } else {\n        const samp = feature.get('genotypes') as Record<string, string>\n        const x = (i / mafs.length) * canvasWidth\n        const sln = sources.length\n        for (let j = 0; j < sln; j++) {\n          const y = (j / sln) * canvasHeight\n          const { name, HP } = sources[j]!\n          const genotype = samp[name]\n          if (genotype) {\n            arr2.push(genotype)\n            const isPhased = genotype.includes('|')\n            if (renderingMode === 'phased') {\n              if (isPhased) {\n                const alleles = genotype.split('|')\n                drawPhased(alleles, ctx, x, y, w, h, HP!)\n              } else {\n                ctx.fillStyle = 'black'\n                ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n              }\n            } else {\n              const alleles = genotype.split(/[/|]/)\n              drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt)\n            }\n          }\n        }\n      }\n      arr.push(arr2)\n    }\n  })\n  return {\n    mafs,\n    arr,\n  }\n}\n","import { set1 } from '@jbrowse/core/ui/colors'\n\nimport { f2 } from './constants'\nimport { colorify } from './util'\n\nfunction getColorPhased(alleles: string[], HP: number) {\n  const c = +alleles[HP]!\n  return c ? set1[c - 1] || 'black' : '#ccc'\n}\n\nfunction getColorPhasedWithPhaseSet(alleles: string[], HP: number, PS: string) {\n  const c = +alleles[HP]!\n  return c ? colorify(+PS) || 'black' : '#ccc'\n}\n\nexport function drawPhased(\n  alleles: string[],\n  ctx: CanvasRenderingContext2D,\n  x: number,\n  y: number,\n  w: number,\n  h: number,\n  HP: number,\n  PS?: string,\n) {\n  ctx.fillStyle =\n    PS !== undefined\n      ? getColorPhasedWithPhaseSet(alleles, HP, PS)\n      : getColorPhased(alleles, HP)\n  ctx.fillRect(x - f2, y - f2, w + f2, h + f2)\n}\n","// avoid drawing negative width features for SVG exports\nexport function fillRectCtx(\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n  ctx: CanvasRenderingContext2D,\n  color?: string,\n) {\n  if (width < 0) {\n    x += width\n    width = -width\n  }\n  if (height < 0) {\n    y += height\n    height = -height\n  }\n\n  if (color) {\n    ctx.fillStyle = color\n  }\n  ctx.fillRect(x, y, width, height)\n}\n\nexport function randomColor(str: string) {\n  let sum = 0\n\n  for (let i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i)\n  }\n  return colorify(sum * 10)\n}\n\nexport function colorify(n: number) {\n  return `hsl(${n % 255}, 50%, 50%)`\n}\n","export const fudgeFactor = 0.6\nexport const f2 = fudgeFactor / 2\n"],"names":["drawColorAlleleCount","alleles","ctx","x","y","w","h","mostFrequentAlt","fillStyle","total","length","alt","uncalled","alt2","ref","allele","a1","colord","mix","toHex","getColorAlleleCount","fillRect","f2","async","makeImageData","canvasWidth","canvasHeight","renderArgs","renderingMode","minorAlleleFrequencyFilter","sources","features","statusCallback","mafs","getFeaturesThatPassMinorAlleleFrequencyFilter","values","arr","m","updateStatus","i","arr2","feature","get","includes","samp","sln","j","name","HP","s","genotype","GT","push","isPhased","PS","split","drawPhased","undefined","colorify","getColorPhasedWithPhaseSet","c","set1","getColorPhased","randomColor","str","sum","charCodeAt","n","fudgeFactor"],"sourceRoot":""}