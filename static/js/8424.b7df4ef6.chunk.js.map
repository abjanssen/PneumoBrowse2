{"version":3,"file":"static/js/8424.b7df4ef6.chunk.js","mappings":"4PAiBA,MAuDA,GAvDyBA,EAAAA,EAAAA,UAAS,UAAU,MAC1CC,EAAK,YACLC,IAOA,MAAOC,EAAKC,IAAUC,EAAAA,EAAAA,UAAS,IACzBC,EAAW,wBAAwBC,KAAKJ,GAE9C,OACEK,EAAAA,EAAAA,KAACC,EAAAA,OAAM,CAACC,MAAI,EAACC,QAAST,EAAaU,MAAM,eAAcC,UACrDC,EAAAA,EAAAA,MAACC,EAAAA,EAAa,CAACC,MAAO,CAAEC,UAAW,UAAWJ,SAAA,EAC5CL,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAAAL,SAAC,6BACZL,EAAAA,EAAAA,KAACU,EAAAA,EAAU,CAACC,MAAM,gBAAeN,SAAC,8IAKlCL,EAAAA,EAAAA,KAACY,EAAAA,EAAS,CACRC,MAAOlB,EACPmB,SAAUC,IACRnB,EAAOmB,EAAMC,OAAOH,QAEtBI,YAAY,iBACZC,MAAsB,IAAfvB,EAAIwB,SAAiBrB,EAC5BsB,WAA2B,IAAfzB,EAAIwB,QAAiBrB,EAA+B,GAApB,kBAC5CuB,aAAa,MACbC,UAAW,CACTC,UAAW,CAAEC,UAAW,OAG5BlB,EAAAA,EAAAA,MAACmB,EAAAA,EAAa,CAAApB,SAAA,EACZL,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CACLC,QAAQ,YACRhB,MAAM,UACNiB,QAASA,KACPnC,EAAMoC,eAAe,CAAEC,KAAM,MAAOnC,QACpCD,KAEFqC,UAAWjC,EAASO,SACrB,YAGDL,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,QAAQ,YAAYhB,MAAM,YAAYiB,QAASlC,EAAYW,SAAC,kBAO9E,E","sources":["../../../plugins/alignments/src/LinearPileupDisplay/components/ColorByTagDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { Dialog } from '@jbrowse/core/ui'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { observer } from 'mobx-react'\n\ninterface Tag {\n  type: string\n  tag: string\n}\n\nconst ColorByTagDialog = observer(function ({\n  model,\n  handleClose,\n}: {\n  model: {\n    setColorScheme: (arg: Tag) => void\n  }\n  handleClose: () => void\n}) {\n  const [tag, setTag] = useState('')\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Color by tag\">\n      <DialogContent style={{ overflowX: 'hidden' }}>\n        <Typography>Enter tag to color by: </Typography>\n        <Typography color=\"textSecondary\">\n          Examples: XS or TS for RNA-seq inferred read strand, ts (lower-case)\n          for minimap2 read strand, HP for haplotype, RG for read group, etc.\n        </Typography>\n\n        <TextField\n          value={tag}\n          onChange={event => {\n            setTag(event.target.value)\n          }}\n          placeholder=\"Enter tag name\"\n          error={tag.length === 2 && !validTag}\n          helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n          autoComplete=\"off\"\n          slotProps={{\n            htmlInput: { maxLength: 2 },\n          }}\n        />\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              model.setColorScheme({ type: 'tag', tag })\n              handleClose()\n            }}\n            disabled={!validTag}\n          >\n            Submit\n          </Button>\n          <Button variant=\"contained\" color=\"secondary\" onClick={handleClose}>\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default ColorByTagDialog\n"],"names":["observer","model","handleClose","tag","setTag","useState","validTag","exec","_jsx","Dialog","open","onClose","title","children","_jsxs","DialogContent","style","overflowX","Typography","color","TextField","value","onChange","event","target","placeholder","error","length","helperText","autoComplete","slotProps","htmlInput","maxLength","DialogActions","Button","variant","onClick","setColorScheme","type","disabled"],"sourceRoot":""}