{"version":3,"file":"static/js/8526.b019bc5b.chunk.js","mappings":"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","sources":["../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/RectBg.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/LegendItem.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ColorLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/FullHeightScaleBar.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/ScoreLegend.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/IndividualScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/YScaleBars.tsx","../../../plugins/wiggle/src/MultiLinearWiggleDisplay/components/util.ts"],"sourcesContent":["import { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view'\nimport { observer } from 'mobx-react'\n\nimport YScaleBars from './YScaleBars'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst MultiLinearWiggleDisplayComponent = observer(function (props: {\n  model: WiggleDisplayModel\n}) {\n  const { model } = props\n\n  return (\n    <div>\n      <BaseLinearDisplayComponent {...props} />\n      <YScaleBars model={model} />\n    </div>\n  )\n})\n\nexport default MultiLinearWiggleDisplayComponent\n","import { getFillProps } from '@jbrowse/core/util'\n\nconst RectBg = (props: {\n  x: number\n  y: number\n  width: number\n  height: number\n  color?: string\n}) => {\n  const { color = 'rgb(255,255,255,0.8)' } = props\n  return <rect {...props} {...getFillProps(color)} />\n}\n\nexport default RectBg\n","import RectBg from './RectBg'\n\nimport type { Source } from '../../util'\nimport type { WiggleDisplayModel } from '../model'\n\nconst LegendItem = function ({\n  source,\n  idx,\n  rowHeight,\n  labelWidth,\n  model,\n  exportSVG,\n}: {\n  source: Source\n  idx: number\n  rowHeight: number\n  labelWidth: number\n  model: WiggleDisplayModel\n  exportSVG?: boolean\n}) {\n  const boxHeight = Math.min(20, rowHeight)\n  const {\n    needsCustomLegend,\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n  } = model\n  const svgFontSize = Math.min(rowHeight, 12)\n  const canDisplayLabel = rowHeight > 11\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n  return (\n    <>\n      {needsFullHeightScalebar ? null : (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={legendWidth}\n          height={boxHeight}\n        />\n      )}\n      {source.color ? (\n        <RectBg\n          y={idx * rowHeight + 1}\n          x={extraOffset}\n          width={colorBoxWidth}\n          height={needsCustomLegend ? rowHeight : boxHeight}\n          color={source.color}\n        />\n      ) : null}\n      {canDisplayLabel ? (\n        <text\n          y={idx * rowHeight + 13}\n          x={extraOffset + colorBoxWidth + 2}\n          fontSize={svgFontSize}\n        >\n          {source.name}\n        </text>\n      ) : null}\n    </>\n  )\n}\n\nexport default LegendItem\n","import { observer } from 'mobx-react'\n\nimport LegendItem from './LegendItem'\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst ColorLegend = observer(function ({\n  model,\n  rowHeight,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  rowHeight: number\n  exportSVG?: boolean\n}) {\n  const {\n    graphType,\n    needsFullHeightScalebar,\n    rowHeightTooSmallForScalebar,\n    renderColorBoxes,\n    sources,\n    labelWidth,\n  } = model\n  const colorBoxWidth = renderColorBoxes ? 15 : 0\n  const legendWidth = labelWidth + colorBoxWidth + 5\n  const svgOffset = exportSVG ? 10 : 0\n  const extraOffset =\n    svgOffset || (graphType && !rowHeightTooSmallForScalebar ? 50 : 0)\n\n  return sources ? (\n    <>\n      {\n        /* 0.25 for hanging letters like g */\n        needsFullHeightScalebar ? (\n          <RectBg\n            y={0}\n            x={extraOffset}\n            width={legendWidth}\n            height={(sources.length + 0.25) * rowHeight}\n          />\n        ) : null\n      }\n      {sources.map((source, idx) => (\n        <LegendItem\n          key={`${source.name}-${idx}`}\n          source={source}\n          idx={idx}\n          model={model}\n          rowHeight={rowHeight}\n          exportSVG={exportSVG}\n          labelWidth={labelWidth}\n        />\n      ))}\n    </>\n  ) : null\n})\n\nexport default ColorLegend\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport { getOffset } from './util'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\nconst FullHeightScaleBar = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { labelWidth } = model\n  const { width: viewWidth } = getContainingView(model) as LinearGenomeViewModel\n  return (\n    <>\n      <g transform={`translate(${!exportSVG ? getOffset(model) : 0},0)`}>\n        <YScaleBar model={model} orientation={orientation} />\n      </g>\n      <g transform={`translate(${viewWidth - labelWidth - 100},0)`}>\n        <ColorLegend exportSVG={exportSVG} model={model} rowHeight={12} />\n      </g>\n    </>\n  )\n})\n\nexport default FullHeightScaleBar\n","import { getContainingView, measureText } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport RectBg from './RectBg'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\n\ntype LGV = LinearGenomeViewModel\n\nconst ScoreLegend = observer(({ model }: { model: WiggleDisplayModel }) => {\n  const { ticks, scaleType } = model\n  const { width } = getContainingView(model) as LGV\n  const legend = `[${ticks?.values[0]}-${ticks?.values[1]}]${scaleType === 'log' ? ' (log scale)' : ''}`\n  const len = measureText(legend, 14)\n  const padding = 25\n  const xpos = width - len - padding\n  return (\n    <>\n      <RectBg y={0} x={xpos} width={len + 6} height={16} />\n      <text y={13} x={xpos}>\n        {legend}\n      </text>\n    </>\n  )\n})\n\nexport default ScoreLegend\n","import { observer } from 'mobx-react'\n\nimport ColorLegend from './ColorLegend'\nimport ScoreLegend from './ScoreLegend'\nimport YScaleBar from '../../shared/YScaleBar'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst IndividualScaleBars = observer(function ({\n  model,\n  orientation,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const {\n    sources,\n    rowHeight,\n    rowHeightTooSmallForScalebar,\n    needsCustomLegend,\n    ticks,\n  } = model\n\n  return sources?.length ? (\n    <>\n      <ColorLegend\n        exportSVG={exportSVG}\n        model={model}\n        rowHeight={model.rowHeight}\n      />\n\n      {rowHeightTooSmallForScalebar || needsCustomLegend ? (\n        <ScoreLegend model={model} />\n      ) : (\n        sources.map((_source, idx) => (\n          <g\n            transform={`translate(0 ${rowHeight * idx})`}\n            key={`${JSON.stringify(ticks)}-${idx}`}\n          >\n            <YScaleBar model={model} orientation={orientation} />\n          </g>\n        ))\n      )}\n    </>\n  ) : null\n})\n\nexport default IndividualScaleBars\n","import { getContainingView } from '@jbrowse/core/util'\nimport { observer } from 'mobx-react'\n\nimport FullHeightScaleBar from './FullHeightScaleBar'\nimport IndividualScaleBars from './IndividualScaleBars'\n\nimport type { WiggleDisplayModel } from '../model'\n\nconst Wrapper = observer(function ({\n  children,\n  model,\n  exportSVG,\n}: {\n  model: WiggleDisplayModel\n  children: React.ReactNode\n  exportSVG?: boolean\n}) {\n  const { height } = model\n  return exportSVG ? (\n    children\n  ) : (\n    <svg\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none',\n        height,\n        width: getContainingView(model).width,\n      }}\n    >\n      {children}\n    </svg>\n  )\n})\n\nexport const YScaleBars = observer(function (props: {\n  model: WiggleDisplayModel\n  orientation?: string\n  exportSVG?: boolean\n}) {\n  const { model, orientation, exportSVG } = props\n  const { showSidebar, stats, needsFullHeightScalebar, sources } = model\n  return stats && sources ? (\n    <Wrapper {...props}>\n      {showSidebar ? (\n        needsFullHeightScalebar ? (\n          <FullHeightScaleBar\n            model={model}\n            orientation={orientation}\n            exportSVG={exportSVG}\n          />\n        ) : (\n          <IndividualScaleBars\n            model={model}\n            orientation={orientation}\n            exportSVG={exportSVG}\n          />\n        )\n      ) : null}\n    </Wrapper>\n  ) : null\n})\n\nexport default YScaleBars\n","import { getConf } from '@jbrowse/core/configuration'\nimport {\n  getContainingTrack,\n  getContainingView,\n  measureText,\n} from '@jbrowse/core/util'\n\nimport type { WiggleDisplayModel } from '../model'\nimport type { LinearGenomeViewModel } from '@jbrowse/plugin-linear-genome-view'\nimport type { GridRowId } from '@mui/x-data-grid'\n\nexport function moveUp(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => a - b)\n  let lastIdx = 0\n  for (const old of idxs) {\n    const idx = Math.max(lastIdx, old - by)\n    if (idx >= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx + 1\n  }\n\n  return arr\n}\n\nexport function moveDown(arr: { name: string }[], sel: GridRowId[], by = 1) {\n  const idxs = sel\n    .map(l => arr.findIndex(v => v.name === l))\n    .sort((a, b) => b - a)\n  let lastIdx = arr.length - 1\n  for (const old of idxs) {\n    const idx = Math.min(lastIdx, old + by)\n    if (idx <= lastIdx) {\n      arr.splice(idx, 0, arr.splice(old, 1)[0]!)\n    }\n    lastIdx = lastIdx - 1\n  }\n\n  return arr\n}\n\nconst trackLabelFontSize = 12.8\n\nexport function getOffset(model: WiggleDisplayModel) {\n  const { prefersOffset } = model\n  const { trackLabels } = getContainingView(model) as LinearGenomeViewModel\n  const track = getContainingTrack(model)\n  const trackName = getConf(track, 'name')\n  return trackLabels === 'overlapping' && !prefersOffset\n    ? measureText(trackName, trackLabelFontSize) + 100\n    : 10\n}\n"],"names":["observer","props","model","_jsxs","children","_jsx","BaseLinearDisplayComponent","YScaleBars","$","_c","color","t0","undefined","t1","t2","getFillProps","source","idx","rowHeight","labelWidth","exportSVG","boxHeight","Math","min","needsCustomLegend","graphType","needsFullHeightScalebar","rowHeightTooSmallForScalebar","renderColorBoxes","svgFontSize","canDisplayLabel","colorBoxWidth","legendWidth","extraOffset","t3","t4","RectBg","y","height","name","x","_Fragment","sources","width","length","map","LegendItem","orientation","viewWidth","getContainingView","transform","getOffset","YScaleBar","ColorLegend","ticks","scaleType","legend","values","len","measureText","xpos","ScoreLegend","_source","JSON","stringify","Wrapper","style","position","top","left","pointerEvents","showSidebar","stats","FullHeightScaleBar","IndividualScaleBars","moveUp","arr","sel","by","idxs","l","findIndex","v","sort","a","b","lastIdx","old","max","splice","moveDown","trackLabelFontSize","prefersOffset","trackLabels","track","getContainingTrack","trackName","getConf"],"sourceRoot":""}