{"version":3,"file":"static/js/9763.e485ece1.chunk.js","mappings":"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","sources":["../../../node_modules/@gmod/twobit/src/bigint-polyfill/pure.ts","../../../node_modules/@gmod/twobit/src/bigint-polyfill/polyfill.ts","../../../node_modules/@gmod/twobit/src/twoBitFile.ts","../../../node_modules/@gmod/twobit/node_modules/buffer/index.js"],"sourcesContent":["const BigInt32 = BigInt(32)\n\nexport function getBigInt64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  return (\n    (BigInt(\n      dataView.getInt32(byteOffset, littleEndian) * bigEndianMask +\n        dataView.getInt32(byteOffset + 4, littleEndian) * littleEndianMask,\n    ) <<\n      BigInt32) |\n    BigInt(\n      dataView.getUint32(byteOffset, littleEndian) * littleEndianMask +\n        dataView.getUint32(byteOffset + 4, littleEndian) * bigEndianMask,\n    )\n  )\n}\n\nexport function getBigUint64(\n  dataView: DataView,\n  byteOffset: number,\n  littleEndian: boolean | undefined,\n): bigint {\n  const a = dataView.getUint32(byteOffset, littleEndian)\n  const b = dataView.getUint32(byteOffset + 4, littleEndian)\n\n  const littleEndianMask = Number(!!littleEndian)\n  const bigEndianMask = Number(!littleEndian)\n\n  // This branch-less optimization is 77x faster than normal ternary operator.\n  // and only 3% slower than native implementation\n  // https://jsbench.me/p8kyhg1eqv/1\n  return (\n    (BigInt(a * bigEndianMask + b * littleEndianMask) << BigInt32) |\n    BigInt(a * littleEndianMask + b * bigEndianMask)\n  )\n}\n","import { getBigInt64, getBigUint64 } from './pure'\n\nif (!('getBigInt64' in DataView)) {\n  DataView.prototype.getBigInt64 = function (byteOffset, littleEndian) {\n    return getBigInt64(this, byteOffset, littleEndian)\n  }\n}\n\nif (!('getBigUint64' in DataView)) {\n  DataView.prototype.getBigUint64 = function (byteOffset, littleEndian) {\n    return getBigUint64(this, byteOffset, littleEndian)\n  }\n}\n","import { LocalFile, GenericFilehandle } from 'generic-filehandle'\nimport { Buffer } from 'buffer'\n\nconst TWOBIT_MAGIC = 0x1a412743\n\nconst twoBit = ['T', 'C', 'A', 'G']\n// byteTo4Bases is an array of byteValue -> 'ACTG'\nconst byteTo4Bases = [] as string[]\nfor (let index = 0; index < 256; index++) {\n  byteTo4Bases.push(\n    twoBit[(index >> 6) & 3] +\n      twoBit[(index >> 4) & 3] +\n      twoBit[(index >> 2) & 3] +\n      twoBit[index & 3],\n  )\n}\n\nconst maskedByteTo4Bases = byteTo4Bases.map(bases => bases.toLowerCase())\n\nexport default class TwoBitFile {\n  private filehandle: GenericFilehandle\n  private version?: number\n  private headerP: ReturnType<typeof this._getHeader> | undefined\n  private indexP: ReturnType<typeof this._getIndex> | undefined\n\n  /**\n   * @param {object} args\n   * @param {string} [args.path] filesystem path for the .2bit file to open\n   * @param {Filehandle} [args.filehandle] node fs.promises-like filehandle for the .2bit file.\n   *  Only needs to support `filehandle.read(buffer, offset, length, position)`\n   */\n  constructor({\n    filehandle,\n    path,\n  }: {\n    filehandle?: GenericFilehandle\n    path?: string\n  }) {\n    if (filehandle) {\n      this.filehandle = filehandle\n    } else if (path) {\n      this.filehandle = new LocalFile(path)\n    } else {\n      throw new Error('must supply path or filehandle')\n    }\n  }\n\n  async _detectEndianness() {\n    const returnValue = await this.filehandle.read(\n      Buffer.allocUnsafe(8),\n      0,\n      8,\n      0,\n    )\n    const { buffer } = returnValue\n    if (buffer.readInt32LE(0) === TWOBIT_MAGIC) {\n      this.version = buffer.readInt32LE(4)\n    } else if (buffer.readInt32BE(0) === TWOBIT_MAGIC) {\n      throw new Error('big endian not supported')\n    } else {\n      throw new Error('not a 2bit file')\n    }\n  }\n\n  getHeader() {\n    if (!this.headerP) {\n      this.headerP = this._getHeader().catch((error: unknown) => {\n        this.headerP = undefined\n        throw error\n      })\n    }\n    return this.headerP\n  }\n\n  async _getHeader() {\n    await this._detectEndianness()\n\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(16),\n      0,\n      16,\n      0,\n    )\n\n    const b = buffer\n    const le = true\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n    let offset = 0\n    const magic = dataView.getInt32(offset, le)\n    offset += 4\n    if (magic !== 0x1a412743) {\n      throw new Error(`Wrong magic number ${magic}`)\n    }\n    const version = dataView.getInt32(offset, le)\n    offset += 4\n    const sequenceCount = dataView.getUint32(offset, le)\n    offset += 4\n    const reserved = dataView.getUint32(offset, le)\n\n    return {\n      version,\n      magic,\n      sequenceCount,\n      reserved,\n    }\n  }\n\n  getIndex() {\n    if (!this.indexP) {\n      this.indexP = this._getIndex().catch((error: unknown) => {\n        this.indexP = undefined\n        throw error\n      })\n    }\n    return this.indexP\n  }\n\n  async _getIndex() {\n    const header = await this.getHeader()\n    const maxIndexLength =\n      8 + header.sequenceCount * (1 + 256 + (this.version === 1 ? 8 : 4))\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(maxIndexLength),\n      0,\n      maxIndexLength,\n      8,\n    )\n\n    const le = true\n    const b = buffer\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n    let offset = 0\n    const sequenceCount = dataView.getUint32(offset, le)\n    offset += 4\n    // const reserved = dataView.getUint32(offset, le)\n    offset += 4\n    const indexData = []\n    for (let i = 0; i < sequenceCount; i++) {\n      const nameLength = dataView.getUint8(offset)\n      offset += 1\n      const name = buffer\n        .subarray(offset, offset + nameLength)\n        .toString() as string\n      offset += nameLength\n      if (header.version === 1) {\n        const dataOffset = Number(dataView.getBigUint64(offset, le))\n        offset += 8\n        indexData.push({ offset: dataOffset, name })\n      } else {\n        const dataOffset = dataView.getUint32(offset, le)\n        offset += 4\n        indexData.push({ offset: dataOffset, name })\n      }\n    }\n\n    return Object.fromEntries(\n      indexData.map(({ name, offset }) => [name, offset] as const),\n    )\n  }\n\n  /**\n   * @returns {Promise} for an array of string sequence names that are found in the file\n   */\n  async getSequenceNames() {\n    const index = await this.getIndex()\n    return Object.keys(index)\n  }\n\n  /**\n   * @returns {Promise} for an object listing the lengths of all sequences like\n   * `{seqName: length, ...}`.\n   *\n   * note: this is a relatively slow operation especially if there are many\n   * refseqs in the file, if you can get this information from a different file\n   * e.g. a chrom.sizes file, it will be much faster\n   */\n  async getSequenceSizes() {\n    const index = await this.getIndex()\n    const seqNames = Object.keys(index)\n    const sizePromises = Object.values(index).map(offset =>\n      this._getSequenceSize(offset),\n    )\n    const sizes = await Promise.all(sizePromises)\n    const returnObject = {} as Record<string, number>\n    for (const [index_, seqName] of seqNames.entries()) {\n      returnObject[seqName] = sizes[index_]\n    }\n    return returnObject\n  }\n\n  /**\n   * @param {string} seqName name of the sequence\n   * @returns {Promise} for the sequence's length, or undefined if it is not in the file\n   */\n  async getSequenceSize(seqName: string) {\n    const index = await this.getIndex()\n    const offset = index[seqName]\n    if (!offset) {\n      return undefined\n    }\n    return this._getSequenceSize(offset)\n  }\n\n  async _getSequenceSize(offset: number) {\n    return this._record1(offset).then(f => f.dnaSize)\n  }\n\n  async _record1(offset2: number, len = 8) {\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(len),\n      0,\n      len,\n      offset2,\n    )\n    const b = buffer\n    const le = true\n    let offset = 0\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n\n    const dnaSize = dataView.getUint32(offset, le)\n    offset += 4\n    const nBlockCount = dataView.getUint32(offset, le)\n    offset += 4\n    return { dnaSize, nBlockCount }\n  }\n\n  async _record2(offset2: number, len: number) {\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(len),\n      0,\n      len,\n      offset2,\n    )\n    const b = buffer\n    const le = true\n    let offset = 0\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n\n    const nBlockCount = dataView.getUint32(offset, le)\n    offset += 4\n    const nBlockStarts = [] as number[]\n    for (let i = 0; i < nBlockCount; i++) {\n      const elt = dataView.getUint32(offset, le)\n      offset += 4\n      nBlockStarts.push(elt)\n    }\n    const nBlockSizes = [] as number[]\n    for (let i = 0; i < nBlockCount; i++) {\n      const elt = dataView.getUint32(offset, le)\n      offset += 4\n      nBlockSizes.push(elt)\n    }\n    const maskBlockCount = dataView.getUint32(offset, le)\n    return {\n      maskBlockCount,\n      nBlockSizes,\n      nBlockStarts,\n    }\n  }\n  async _record3(offset2: number, len: number) {\n    const { buffer } = await this.filehandle.read(\n      Buffer.allocUnsafe(len),\n      0,\n      len,\n      offset2,\n    )\n    const b = buffer\n    const le = true\n    let offset = 0\n    const dataView = new DataView(b.buffer, b.byteOffset, b.length)\n\n    const maskBlockCount = dataView.getUint32(offset, le)\n    offset += 4\n    const maskBlockStarts = [] as number[]\n    for (let i = 0; i < maskBlockCount; i++) {\n      const elt = dataView.getUint32(offset, le)\n      offset += 4\n      maskBlockStarts.push(elt)\n    }\n    const maskBlockSizes = [] as number[]\n    for (let i = 0; i < maskBlockCount; i++) {\n      const elt = dataView.getUint32(offset, le)\n      offset += 4\n      maskBlockSizes.push(elt)\n    }\n    const reserved = dataView.getInt32(offset, le)\n    return {\n      maskBlockCount,\n      maskBlockSizes,\n      maskBlockStarts,\n      reserved,\n    }\n  }\n\n  async _getSequenceRecord(offset: number) {\n    const rec1 = await this._record1(offset)\n    const rec2DataLen = rec1.nBlockCount * 8 + 8\n    const rec2 = await this._record2(offset + 4, rec2DataLen)\n    const rec3DataLen = rec2.maskBlockCount * 8 + 8\n    const rec3 = await this._record3(offset + 4 + rec2DataLen - 4, rec3DataLen)\n\n    const rec = {\n      dnaSize: rec1.dnaSize,\n      nBlocks: {\n        starts: rec2.nBlockStarts,\n        sizes: rec2.nBlockSizes,\n      },\n      maskBlocks: {\n        starts: rec3.maskBlockStarts,\n        sizes: rec3.maskBlockSizes,\n      },\n      dnaPosition: offset + 4 + rec2DataLen - 4 + rec3DataLen,\n    }\n    return rec\n  }\n\n  /**\n   * @param {string} seqName name of the sequence you want\n   * @param {number} [regionStart] optional 0-based half-open start of the sequence region to fetch.\n   * @param {number} [regionEnd] optional 0-based half-open end of the sequence region to fetch. defaults to end of the sequence\n   * @returns {Promise} for a string of sequence bases\n   */\n  async getSequence(\n    seqName: string,\n    regionStart = 0,\n    regionEnd = Number.POSITIVE_INFINITY,\n  ) {\n    const index = await this.getIndex()\n    const offset = index[seqName]\n    if (!offset) {\n      return undefined\n    }\n    // fetch the record for the seq\n    const record = await this._getSequenceRecord(offset)\n\n    if (regionStart < 0) {\n      throw new TypeError('regionStart cannot be less than 0')\n    }\n    // end defaults to the end of the sequence\n    if (regionEnd > record.dnaSize) {\n      regionEnd = record.dnaSize\n    }\n\n    const nBlocks = this._getOverlappingBlocks(\n      regionStart,\n      regionEnd,\n      record.nBlocks.starts,\n      record.nBlocks.sizes,\n    )\n    const maskBlocks = this._getOverlappingBlocks(\n      regionStart,\n      regionEnd,\n      record.maskBlocks.starts,\n      record.maskBlocks.sizes,\n    )\n\n    const baseBytes = Buffer.allocUnsafe(\n      Math.ceil((regionEnd - regionStart) / 4) + 1,\n    )\n    const baseBytesOffset = Math.floor(regionStart / 4)\n    const { buffer } = await this.filehandle.read(\n      baseBytes,\n      0,\n      baseBytes.length,\n      record.dnaPosition + baseBytesOffset,\n    )\n\n    let sequenceBases = ''\n    for (\n      let genomicPosition = regionStart;\n      genomicPosition < regionEnd;\n      genomicPosition += 1\n    ) {\n      // check whether we are currently masked\n      while (maskBlocks.length > 0 && maskBlocks[0].end <= genomicPosition) {\n        maskBlocks.shift()\n      }\n      const baseIsMasked =\n        maskBlocks[0] &&\n        maskBlocks[0].start <= genomicPosition &&\n        maskBlocks[0].end > genomicPosition\n\n      // process the N block if we have one\n      if (\n        nBlocks[0] &&\n        genomicPosition >= nBlocks[0].start &&\n        genomicPosition < nBlocks[0].end\n      ) {\n        const currentNBlock = nBlocks.shift()\n        for (\n          ;\n          genomicPosition < currentNBlock.end && genomicPosition < regionEnd;\n          genomicPosition += 1\n        ) {\n          sequenceBases += baseIsMasked ? 'n' : 'N'\n        }\n        genomicPosition -= 1\n      } else {\n        const bytePosition = Math.floor(genomicPosition / 4) - baseBytesOffset\n        const subPosition = genomicPosition % 4\n        const byte = buffer[bytePosition]\n        sequenceBases += baseIsMasked\n          ? maskedByteTo4Bases[byte][subPosition]\n          : byteTo4Bases[byte][subPosition]\n      }\n    }\n\n    return sequenceBases\n  }\n\n  _getOverlappingBlocks(\n    regionStart: number,\n    regionEnd: number,\n    blockStarts: number[],\n    blockSizes: number[],\n  ) {\n    // find the start and end indexes of the blocks that match\n    let startIndex: number | undefined\n    let endIndex: number | undefined\n    for (const [index, blockStart] of blockStarts.entries()) {\n      const blockSize = blockSizes[index]\n      if (regionStart >= blockStart + blockSize || regionEnd <= blockStart) {\n        // block does not overlap the region\n        if (startIndex !== undefined) {\n          endIndex = index\n          break\n        }\n      } else if (startIndex === undefined) {\n        startIndex = index\n      } // block does overlap the region, record this if it is the first\n    }\n\n    if (startIndex === undefined) {\n      return []\n    }\n\n    // now format some block objects to return\n    if (endIndex === undefined) {\n      endIndex = blockStarts.length\n    }\n\n    const blocks = new Array(endIndex - startIndex)\n    for (\n      let blockNumber = startIndex;\n      blockNumber < endIndex;\n      blockNumber += 1\n    ) {\n      blocks[blockNumber - startIndex] = {\n        start: blockStarts[blockNumber],\n        end: blockStarts[blockNumber] + blockSizes[blockNumber],\n        size: blockSizes[blockNumber],\n      }\n    }\n    return blocks\n  }\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n"],"names":["BigInt32","BigInt","DataView","prototype","getBigInt64","byteOffset","littleEndian","dataView","littleEndianMask","Number","bigEndianMask","getInt32","getUint32","this","getBigUint64","a","b","TWOBIT_MAGIC","twoBit","byteTo4Bases","index","push","maskedByteTo4Bases","map","bases","toLowerCase","TwoBitFile","constructor","filehandle","path","Error","_detectEndianness","returnValue","read","allocUnsafe","buffer","readInt32LE","readInt32BE","version","getHeader","headerP","_getHeader","catch","error","undefined","le","length","offset","magic","sequenceCount","reserved","getIndex","indexP","_getIndex","header","maxIndexLength","indexData","i","nameLength","getUint8","name","subarray","toString","dataOffset","Object","fromEntries","getSequenceNames","keys","getSequenceSizes","seqNames","sizePromises","values","_getSequenceSize","sizes","Promise","all","returnObject","index_","seqName","entries","getSequenceSize","_record1","then","f","dnaSize","offset2","len","nBlockCount","_record2","nBlockStarts","elt","nBlockSizes","maskBlockCount","_record3","maskBlockStarts","maskBlockSizes","_getSequenceRecord","rec1","rec2DataLen","rec2","rec3DataLen","rec3","nBlocks","starts","maskBlocks","dnaPosition","getSequence","regionStart","regionEnd","POSITIVE_INFINITY","record","TypeError","_getOverlappingBlocks","baseBytes","Math","ceil","baseBytesOffset","floor","sequenceBases","genomicPosition","end","shift","baseIsMasked","start","currentNBlock","subPosition","byte","blockStarts","blockSizes","startIndex","endIndex","blockStart","blocks","Array","blockNumber","size","base64","ieee754","customInspectSymbol","Symbol","exports","Buffer","K_MAX_LENGTH","createBuffer","RangeError","buf","Uint8Array","setPrototypeOf","arg","encodingOrOffset","from","value","string","encoding","isEncoding","byteLength","actual","write","slice","fromString","ArrayBuffer","isView","arrayView","isInstance","copy","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","obj","isBuffer","checked","numberIsNaN","type","isArray","data","fromObject","toPrimitive","assertSize","array","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","charCodeAt","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","fromByteArray","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","e","typedArraySupport","console","defineProperty","enumerable","get","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","x","y","concat","list","pos","set","swap16","swap32","swap64","toLocaleString","equals","inspect","max","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","code","errors","E","sym","getMessage","Base","super","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","split","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined"],"sourceRoot":""}