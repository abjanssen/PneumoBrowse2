{"version":3,"file":"static/js/5904.2c641c82.chunk.js","mappings":"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","sources":["../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual?: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual || 1)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature, fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from '../SyntenyFeature'\nimport {\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  parseLineByLine,\n} from '../util'\nimport { getWeightedMeans, PAFRecord } from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buf = await fetchAndMaybeUnzip(pafLocation, opts)\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures so is not\n    // really that important, and has to be true or else getFeatures is never\n    // called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      const index = assemblyNames.indexOf(assemblyName)\n\n      // if the getFeatures::query is on the query assembly, flip orientation\n      // of data\n      const flip = index === 0\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]!\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n\n        if (flip) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport type { Buffer } from 'buffer'\n\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buf = await fetchAndMaybeUnzip(file, opts)\n  const decoder = new TextDecoder('utf8')\n  return decoder.decode(buf)\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nexport function parseLineByLine<T>(\n  buffer: Buffer,\n  cb: (line: string) => T | undefined,\n): T[] {\n  let blockStart = 0\n  const entries: T[] = []\n  const decoder = new TextDecoder('utf8')\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = decoder.decode(b).trim()\n    if (line) {\n      const entry = cb(line)\n      if (entry) {\n        entries.push(entry)\n      }\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart!,\n    tend: +tend!,\n    qname,\n    qstart: +qstart!,\n    qend: +qend!,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches!,\n      blockLen: +blockLen!,\n      mappingQual: +mappingQual!,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["weightedMean","tuples","valueSum","weightSum","reduce","value","weight","parseCigar","MismatchParser","PAFAdapter","BaseFeatureDataAdapter","setup","opts","this","setupP","setupPre","catch","e","undefined","pm","pluginManager","pafLocation","openLocation","getConf","buf","fetchAndMaybeUnzip","parseLineByLine","parsePAFLine","hasDataForRefName","getAssemblyNames","assemblyNames","length","getRefNames","r1","regions","assemblyName","feats","idx","indexOf","set","Set","feat","add","qname","tname","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","entry","key","quals","len","push","extra","mappingQual","blockLen","meanScoreMap","Object","fromEntries","entries","map","val","zip","meanScore","min","max","Math","b","getWeightedMeans","start","qstart","end","qend","refName","qref","index","flip","observer","complete","i","r","mateName","mateStart","mateEnd","tstart","tend","strand","doesIntersect2","numMatches","cg","rest","CIGAR","flipCigar","join","swapIndelCigar","next","SyntenyFeature","uniqueId","type","syntenyId","identity","mate","freeResources","getMismatches","SimpleFeature","get","arg","super","parseBed","text","Map","split","filter","f","startsWith","line","name","score","readFile","file","TextDecoder","decode","a","buffer","cb","blockStart","decoder","n","subarray","trim","fields","field","slice","cigar","arr","op","replaceAll"],"sourceRoot":""}