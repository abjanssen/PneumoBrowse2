{"version":3,"file":"static/js/5576.a93ef0a0.chunk.js","mappings":"sjBAeO,MAAMA,EAAmBC,IAC9B,MAAM,MAAEC,EAAQ,gBAAmBD,EACnC,OACEE,EAAAA,cAACC,EAAAA,QAAQC,EAAA,GAAKJ,EAAK,CAAEC,MAAOA,IAC1BC,EAAAA,cAACG,EAAAA,EAAgBL,GACR,EAIFM,EAAkBN,IAC7B,MAAM,QAAEO,GAAYP,EACpB,OACEE,EAAAA,cAACC,EAAAA,QAAQC,EAAA,GAAKJ,EAAK,CAAEC,MAAM,eACzBC,EAAAA,cAACM,EAAAA,QAAUJ,EAAA,GAAKJ,EAAK,CAAES,WAAYF,KAC1B,EA8Bf,GAnB0BG,EAAAA,EAAAA,WAAS,UAAU,MAAEC,IAC7C,MAAM,MAAEC,EAAK,YAAEC,GAAgBF,EAE/B,GAAIC,EACF,OAAOV,EAAAA,cAACY,EAAAA,aAAY,CAACF,MAAOA,IACvB,GAAKC,EAEL,CAKL,MAAME,GAAeC,EAAAA,EAAAA,IAAyBH,GAC9C,OAAOI,EAAAA,EAAAA,IAAQF,GAAgB,KAC7Bb,EAAAA,cAACgB,EAAAA,QAAc,CAACP,MAAOA,EAAOJ,QAASQ,GAE3C,CAVE,OAAO,IAWX,G,8HCzCA,MAAMI,GAA0BC,EAAAA,EAAAA,OAC9B,IAAM,kCAYFC,GAAeX,EAAAA,EAAAA,WAAS,UAAU,MACtCC,IAIA,MAAM,YAAEE,EAAW,KAAES,EAAI,MAAEC,EAAK,QAAEC,GAAYb,EAC9C,OACET,EAAAA,cAAA,UACiB,sBAAdoB,EAAKG,KACJvB,EAAAA,cAAA,UACEA,EAAAA,cAACwB,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBACN,MAAM,MAAEC,GAAUT,EAClB,QAAcU,IAAVT,EAIFQ,EAAMR,IAAQU,MAAMpB,GACpBkB,EAAMR,EAAQ,IAAIU,MAChBpB,EAAYqB,UAET,CAKL,MAAMC,EAAKtB,EACLuB,EAAKvB,EAAYqB,KACjBG,EAAKF,EAAGG,aACRC,EAAKH,EAAGE,aACRE,EAAKT,EAAMU,MAAKnB,GAAQA,EAAKoB,cAAc,KAAOL,IAClDM,EAAKZ,EAAMU,MAAKnB,GAAQA,EAAKoB,cAAc,KAAOH,IACnDC,GAAOG,IACVC,EAAAA,EAAAA,YAAWjC,GAAOkC,OAChB,CACEL,EACI,mBAAkBM,EAAAA,EAAAA,mBAAkBX,qBACpC,GACJQ,EACI,mBAAkBG,EAAAA,EAAAA,mBAAkBV,qBACpC,IACJW,KAAK,UAGXP,GAAIP,MAAME,GACVQ,GAAIV,MAAMG,EACZ,IAEH,gCAID,KACJlC,EAAAA,cAAA,UACEA,EAAAA,cAACwB,EAAAA,EAAI,CACHC,KAAK,IACLC,QAASC,IACPA,EAAMC,iBAEN,MAAMkB,GAAUJ,EAAAA,EAAAA,YAAWjC,GACrBJ,EAAU,IAAI0C,EAAAA,cAAcpC,GAClCmC,EAAQE,aAAYC,GAAe,CACjChC,EACA,CACER,QACAJ,UACAiB,UACA2B,iBAEF,GAEL,mDAMT,IAiBA,GAf6BzC,EAAAA,EAAAA,WAAS,UAAU,MAC9CC,IAIA,OACET,EAAAA,cAACkD,EAAAA,EAAK,CAAC,cAAY,yBACjBlD,EAAAA,cAACmD,EAAAA,QAAiB,CAACpD,MAAM,UAAUU,MAAOA,IAC1CT,EAAAA,cAACC,EAAAA,QAAQ,CAACF,MAAM,gBACdC,EAAAA,cAACmB,EAAY,CAACV,MAAOA,KAI7B,G","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/index.tsx","../../../plugins/linear-comparative-view/src/SyntenyFeatureDetail/SyntenyFeatureDetail.tsx"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\n\n// utils\nimport { ErrorMessage } from '../../ui'\nimport { BaseCardProps, BaseProps } from '../types'\nimport { isEmpty } from './util'\nimport { replaceUndefinedWithNull } from '../util'\n\n// locals\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\nimport FeatureDetails from './FeatureDetails'\n\nexport const BaseCoreDetails = (props: BaseProps) => {\n  const { title = 'Primary data' } = props\n  return (\n    <BaseCard {...props} title={title}>\n      <CoreDetails {...props} />\n    </BaseCard>\n  )\n}\n\nexport const BaseAttributes = (props: BaseProps) => {\n  const { feature } = props\n  return (\n    <BaseCard {...props} title=\"Attributes\">\n      <Attributes {...props} attributes={feature} />\n    </BaseCard>\n  )\n}\n\nexport interface BaseInputProps extends BaseCardProps {\n  omit?: string[]\n  model: any\n  descriptions?: Record<string, React.ReactNode>\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}\n\nconst BaseFeatureDetail = observer(function ({ model }: BaseInputProps) {\n  const { error, featureData } = model\n\n  if (error) {\n    return <ErrorMessage error={error} />\n  } else if (!featureData) {\n    return null\n  } else {\n    // replacing undefined with null helps with allowing fields to be hidden,\n    // setting null is not allowed by jexl so we set it to undefined to hide.\n    // see config guide. this replacement happens both here and when\n    // snapshotting the featureData\n    const featureData2 = replaceUndefinedWithNull(featureData)\n    return isEmpty(featureData2) ? null : (\n      <FeatureDetails model={model} feature={featureData2} />\n    )\n  }\n})\n\nexport default BaseFeatureDetail\n\nexport { default as BaseCard } from './BaseCard'\nexport { default as FeatureDetails } from './FeatureDetails'\n","import React, { lazy } from 'react'\nimport { Link, Paper } from '@mui/material'\nimport { observer } from 'mobx-react'\n\n// locals\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard'\nimport BaseFeatureDetail from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail'\nimport {\n  assembleLocString,\n  getSession,\n  SimpleFeature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util'\nimport { LinearSyntenyViewModel } from '../LinearSyntenyView/model'\n\n// lazies\nconst LaunchSyntenyViewDialog = lazy(\n  () => import('../LGVSyntenyDisplay/components/LaunchSyntenyViewDialog'),\n)\n\ninterface SyntenyFeatureDetailModel {\n  trackId: string\n  featureData: SimpleFeatureSerialized\n  level?: number\n  view: {\n    type: string\n  }\n}\n\nconst CustomLinker = observer(function ({\n  model,\n}: {\n  model: SyntenyFeatureDetailModel\n}) {\n  const { featureData, view, level, trackId } = model\n  return (\n    <ul>\n      {view.type === 'LinearSyntenyView' ? (\n        <li>\n          <Link\n            href=\"#\"\n            onClick={event => {\n              event.preventDefault()\n              const { views } = view as LinearSyntenyViewModel\n              if (level !== undefined) {\n                // level is \"pre-known\", and stored in the SyntenyFeatureWidget\n                // model state e.g. when clicking on a feature from a\n                // LinearSyntenyRendering\n                views[level]?.navTo(featureData)\n                views[level + 1]?.navTo(\n                  featureData.mate as SimpleFeatureSerialized,\n                )\n              } else {\n                // best effort to find the right level. this is triggered for\n                // example if a user clicks on a feature in a LGVSyntenyDisplay\n                // in an existing LinearSyntenyView, there is no real proper\n                // level \"pre-known\" to this situation\n                const f1 = featureData\n                const f2 = featureData.mate as SimpleFeatureSerialized\n                const r1 = f1.assemblyName as string\n                const r2 = f2.assemblyName as string\n                const v1 = views.find(view => view.assemblyNames[0] === r1)\n                const v2 = views.find(view => view.assemblyNames[0] === r2)\n                if (!v1 || !v2) {\n                  getSession(model).notify(\n                    [\n                      v1\n                        ? `Unable to find ${assembleLocString(f1)} in synteny view`\n                        : '',\n                      v2\n                        ? `Unable to find ${assembleLocString(f2)} in synteny view`\n                        : '',\n                    ].join(' ... '),\n                  )\n                }\n                v1?.navTo(f1)\n                v2?.navTo(f2)\n              }\n            }}\n          >\n            Center view on this feature\n          </Link>\n        </li>\n      ) : null}\n      <li>\n        <Link\n          href=\"#\"\n          onClick={event => {\n            event.preventDefault()\n\n            const session = getSession(model)\n            const feature = new SimpleFeature(featureData)\n            session.queueDialog(handleClose => [\n              LaunchSyntenyViewDialog,\n              {\n                model,\n                feature,\n                trackId,\n                handleClose,\n              },\n            ])\n          }}\n        >\n          Launch new linear synteny view on this feature\n        </Link>\n      </li>\n    </ul>\n  )\n})\n\nconst SyntenyFeatureDetail = observer(function ({\n  model,\n}: {\n  model: SyntenyFeatureDetailModel\n}) {\n  return (\n    <Paper data-testid=\"alignment-side-drawer\">\n      <BaseFeatureDetail title=\"Feature\" model={model} />\n      <BaseCard title=\"Link to view\">\n        <CustomLinker model={model} />\n      </BaseCard>\n    </Paper>\n  )\n})\n\nexport default SyntenyFeatureDetail\n"],"names":["BaseCoreDetails","props","title","React","BaseCard","_extends","CoreDetails","BaseAttributes","feature","Attributes","attributes","observer","model","error","featureData","ErrorMessage","featureData2","replaceUndefinedWithNull","isEmpty","FeatureDetails","LaunchSyntenyViewDialog","lazy","CustomLinker","view","level","trackId","type","Link","href","onClick","event","preventDefault","views","undefined","navTo","mate","f1","f2","r1","assemblyName","r2","v1","find","assemblyNames","v2","getSession","notify","assembleLocString","join","session","SimpleFeature","queueDialog","handleClose","Paper","BaseFeatureDetail"],"sourceRoot":""}