{"version":3,"file":"static/js/4144.5d17aa63.chunk.js","mappings":"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","sources":["../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/DataGridDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/ArrayValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/UriField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Attributes.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/BasicValue.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/Position.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/CoreDetails.tsx","../../../packages/core/BaseFeatureWidget/SequenceFeatureDetails/SequenceFeaturePanel.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/FieldName.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField.tsx","../../../packages/core/BaseFeatureWidget/BaseFeatureDetail/util.ts"],"sourcesContent":["import React, { useState } from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { DataGrid, GridColDef, GridToolbar } from '@mui/x-data-grid'\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material'\n\n// locals\nimport { measureGridWidth, getStr } from '../../util'\nimport FieldName from './FieldName'\nimport { SanitizedHTML } from '../../ui'\n\nconst useStyles = makeStyles()(theme => ({\n  margin: {\n    marginBottom: theme.spacing(4),\n  },\n\n  cell: {\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  },\n}))\n\ninterface Entry {\n  id: string\n  [key: string]: string\n}\n\nexport default function DataGridDetails({\n  value,\n  prefix,\n  name,\n}: {\n  name: string\n  prefix?: string[]\n  value: Record<string, unknown>[]\n}) {\n  const { classes } = useStyles()\n  const [checked, setChecked] = useState(false)\n  const keys = Object.keys(value[0]!).sort()\n  const unionKeys = new Set(keys)\n\n  // avoids key 'id' from being used in row data\n  const rows = Object.entries(value).map(([k, val]) => {\n    const { id, ...rest } = val\n    return {\n      id: k, // used by material UI\n      identifier: id, // renamed from id to identifier\n      ...rest,\n    } as Entry\n  })\n\n  for (const val of value) {\n    for (const k of Object.keys(val)) {\n      unionKeys.add(k)\n    }\n  }\n  // avoids key 'id' from being used in column names, and tries\n  // to make it at the start of the colNames array\n  let colNames: string[]\n  if (unionKeys.has('id')) {\n    unionKeys.delete('id')\n    colNames = ['identifier', ...unionKeys]\n  } else {\n    colNames = [...unionKeys]\n  }\n  const widths = colNames.map(e => measureGridWidth(rows.map(r => r[e])))\n  if (unionKeys.size < keys.length + 5) {\n    return (\n      <div className={classes.margin}>\n        <FieldName prefix={prefix} name={name} />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={checked}\n              onChange={event => {\n                setChecked(event.target.checked)\n              }}\n            />\n          }\n          label={<Typography variant=\"body2\">Show options</Typography>}\n        />\n        <DataGrid\n          autoHeight\n          disableRowSelectionOnClick\n          rows={rows}\n          rowHeight={20}\n          columnHeaderHeight={35}\n          hideFooter={rows.length < 25}\n          slots={{\n            toolbar: checked ? GridToolbar : null,\n          }}\n          slotProps={{\n            toolbar: {\n              printOptions: {\n                disableToolbarButton: true,\n              },\n            },\n          }}\n          columns={colNames.map(\n            (val, index) =>\n              ({\n                field: val,\n                renderCell: params => {\n                  const value = params.value as string\n                  return (\n                    <div className={classes.cell}>\n                      <SanitizedHTML html={getStr(value || '')} />\n                    </div>\n                  )\n                },\n                width: widths[index],\n              }) satisfies GridColDef<(typeof rows)[0]>,\n          )}\n        />\n      </div>\n    )\n  }\n  return null\n}\n","import React from 'react'\nimport isObject from 'is-object'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport Attributes from './Attributes'\nimport FieldName from './FieldName'\nimport BasicValue from './BasicValue'\n\nconst useStyles = makeStyles()(theme => ({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n\n  fieldSubvalue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    padding: theme.spacing(0.5),\n    border: `1px solid ${theme.palette.action.selected}`,\n    boxSizing: 'border-box',\n    overflow: 'auto',\n  },\n}))\n\nexport default function ArrayValue({\n  name,\n  value,\n  description,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown[]\n  prefix?: string[]\n}) {\n  const { classes } = useStyles()\n  if (value.length === 1) {\n    return isObject(value[0]) ? (\n      <Attributes attributes={value[0]} prefix={[...prefix, name]} />\n    ) : (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        <BasicValue value={value[0]} />\n      </div>\n    )\n  } else if (value.every(val => isObject(val))) {\n    return (\n      <>\n        {value.map((val, i) => (\n          <Attributes\n            key={`${JSON.stringify(val)}-${i}`}\n            attributes={val as Record<string, unknown>}\n            prefix={[...prefix, `${name}-${i}`]}\n          />\n        ))}\n      </>\n    )\n  } else {\n    return (\n      <div className={classes.field}>\n        <FieldName prefix={prefix} description={description} name={name} />\n        {value.map((val, i) => (\n          <div\n            key={`${JSON.stringify(val)}-${i}`}\n            className={classes.fieldSubvalue}\n          >\n            <BasicValue value={val} />\n          </div>\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport FieldName from './FieldName'\nimport { makeStyles } from 'tss-react/mui'\nimport BasicValue from './BasicValue'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function UriField({\n  value,\n  prefix,\n  name,\n}: {\n  value: { uri: string; baseUri?: string }\n  name: string\n  prefix: string[]\n}) {\n  const { classes } = useStyles()\n  const { uri, baseUri = '' } = value\n  let href: string\n  try {\n    href = new URL(uri, baseUri).href\n  } catch (e) {\n    href = uri\n  }\n  return (\n    <div className={classes.field}>\n      <FieldName prefix={prefix} name={name} />\n      <BasicValue value={href} />\n    </div>\n  )\n}\n","import React from 'react'\nimport isObject from 'is-object'\n\n// locals\nimport { accessNested, generateMaxWidth } from './util'\nimport { isUriLocation } from '../../util'\nimport DataGridDetails from './DataGridDetails'\nimport ArrayValue from './ArrayValue'\nimport UriAttribute from './UriField'\nimport SimpleField from './SimpleField'\n\nconst MAX_FIELD_NAME_WIDTH = 170\n\n// these are always omitted as too detailed\nconst globalOmit = [\n  '__jbrowsefmt',\n  'length',\n  'position',\n  'subfeatures',\n  'uniqueId',\n  'exonFrames',\n  'parentId',\n  'thickStart',\n  'thickEnd',\n]\n\nexport default function Attributes(props: {\n  attributes: {\n    [key: string]: unknown\n    __jbrowsefmt?: Record<string, unknown>\n  }\n  omit?: string[]\n  omitSingleLevel?: string[]\n  formatter?: (val: unknown, key: string) => React.ReactNode\n  descriptions?: Record<string, React.ReactNode>\n  prefix?: string[]\n  hideUris?: boolean\n}) {\n  const {\n    attributes,\n    omit = [],\n    omitSingleLevel = [],\n    descriptions,\n    formatter = val => val,\n    hideUris,\n    prefix = [],\n  } = props\n\n  const omits = new Set([...omit, ...globalOmit, ...omitSingleLevel])\n  const { __jbrowsefmt, ...rest } = attributes\n  const formattedAttributes = { ...rest, ...__jbrowsefmt }\n\n  const maxLabelWidth = generateMaxWidth(\n    Object.entries(formattedAttributes).filter(\n      ([k, v]) => v !== undefined && !omits.has(k),\n    ),\n    prefix,\n  )\n\n  return (\n    <>\n      {Object.entries(formattedAttributes)\n        .filter(([k, v]) => v !== undefined && !omits.has(k))\n        .map(([key, value]) => {\n          const description = accessNested([...prefix, key], descriptions)\n          if (Array.isArray(value)) {\n            // check if it looks like an array of objects, which could be used\n            // in data grid\n            return value.length > 1 && value.every(val => isObject(val)) ? (\n              <DataGridDetails\n                key={key}\n                name={key}\n                prefix={prefix}\n                value={value}\n              />\n            ) : (\n              <ArrayValue\n                key={key}\n                name={key}\n                value={value}\n                description={description}\n                prefix={prefix}\n              />\n            )\n          } else if (isObject(value)) {\n            const { omitSingleLevel, ...rest } = props\n            return isUriLocation(value) ? (\n              hideUris ? null : (\n                <UriAttribute\n                  key={key}\n                  name={key}\n                  prefix={prefix}\n                  value={value}\n                />\n              )\n            ) : (\n              <Attributes\n                key={key}\n                {...rest}\n                attributes={value}\n                descriptions={descriptions}\n                prefix={[...prefix, key]}\n              />\n            )\n          } else {\n            return (\n              <SimpleField\n                key={key}\n                name={key}\n                value={formatter(value, key)}\n                description={description}\n                prefix={prefix}\n                width={Math.min(maxLabelWidth, MAX_FIELD_NAME_WIDTH)}\n              />\n            )\n          }\n        })}\n    </>\n  )\n}\n","import React from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Typography,\n} from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\n// icons\nimport ExpandMore from '@mui/icons-material/ExpandMore'\n\nimport { BaseCardProps } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  expansionPanelDetails: {\n    display: 'block',\n    padding: theme.spacing(1),\n  },\n  icon: {\n    color: theme.palette.tertiary.contrastText || '#fff',\n  },\n}))\n\nexport default function BaseCard({\n  children,\n  title,\n  defaultExpanded = true,\n}: BaseCardProps) {\n  const { classes } = useStyles()\n  return (\n    <Accordion defaultExpanded={defaultExpanded}>\n      <AccordionSummary expandIcon={<ExpandMore className={classes.icon} />}>\n        <Typography variant=\"button\">{title}</Typography>\n      </AccordionSummary>\n      <AccordionDetails className={classes.expansionPanelDetails}>\n        {children}\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport isObject from 'is-object'\nimport { Link } from '@mui/material'\n\n// locals\nimport { SanitizedHTML } from '../../ui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldValue: {\n    wordBreak: 'break-word',\n    maxHeight: 300,\n    fontSize: 12,\n    padding: theme.spacing(0.5),\n    overflow: 'auto',\n  },\n}))\n\nexport default function BasicValue({ value }: { value: unknown }) {\n  const { classes } = useStyles()\n  const isLink = /^https?:\\/\\//.exec(`${value}`)\n  return (\n    <div className={classes.fieldValue}>\n      {React.isValidElement(value) ? (\n        value\n      ) : isLink ? (\n        <Link href={`${value}`}>{`${value}`}</Link>\n      ) : (\n        <SanitizedHTML\n          html={isObject(value) ? JSON.stringify(value) : String(value)}\n        />\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { assembleLocString } from '../../util'\nimport { BaseProps } from '../types'\n\nexport default function Position(props: BaseProps) {\n  const { feature } = props\n  const strand = feature.strand as number\n  const strandMap: Record<string, string> = {\n    '-1': '-',\n    '0': '',\n    '1': '+',\n  }\n  const str = strandMap[strand] ? `(${strandMap[strand]})` : ''\n  const loc = assembleLocString(feature)\n  return <>{`${loc} ${str}`}</>\n}\n","import React from 'react'\n// locals\nimport { toLocale, SimpleFeatureSerialized } from '../../util'\nimport { BaseProps } from '../types'\nimport SimpleField from './SimpleField'\nimport Position from './Position'\n\nexport default function CoreDetails(props: BaseProps) {\n  const { feature } = props\n  const obj = feature as SimpleFeatureSerialized & {\n    start: number\n    end: number\n    assemblyName?: string\n    strand: number\n    refName: string\n    __jbrowsefmt: {\n      start?: number\n      assemblyName?: string\n      end?: number\n      refName?: string\n      name?: string\n    }\n  }\n\n  const formattedFeat = { ...obj, ...obj.__jbrowsefmt }\n  const { start, end } = formattedFeat\n\n  const displayedDetails: Record<string, any> = {\n    ...formattedFeat,\n    length: toLocale(end - start),\n  }\n\n  const coreRenderedDetails = {\n    description: 'Description',\n    name: 'Name',\n    length: 'Length',\n    type: 'Type',\n  }\n  return (\n    <>\n      <SimpleField\n        name=\"Position\"\n        value={<Position {...props} feature={formattedFeat} />}\n      />\n      {Object.entries(coreRenderedDetails)\n        .map(([key, name]) => [name, displayedDetails[key]])\n        .filter(([, value]) => value != null)\n        .map(([name, value]) => (\n          <SimpleField key={name} name={name} value={value} />\n        ))}\n    </>\n  )\n}\n","import React, { lazy, useState, Suspense } from 'react'\nimport { Button, FormControl, IconButton } from '@mui/material'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport { LoadingEllipses } from '../../ui'\nimport { BaseFeatureWidgetModel } from '../stateModelFactory'\nimport { SimpleFeatureSerialized, getSession } from '../../util'\n\n// icons\nimport Help from '@mui/icons-material/Help'\n\n// lazies\nconst SequenceFeatureDetails = lazy(() => import('./SequenceFeatureDetails'))\nconst HelpDialog = lazy(() => import('./dialogs/HelpDialog'))\n\nconst useStyles = makeStyles()(theme => ({\n  formControl: {\n    margin: 0,\n  },\n\n  container: {\n    marginTop: theme.spacing(4),\n    marginBottom: theme.spacing(4),\n  },\n}))\n\n// display the stitched-together sequence of a gene's CDS, cDNA, or protein\n// sequence. this is a best effort and weird genomic phenomena could lead these\n// to not be 100% accurate\nconst SequenceFeaturePanel = observer(function ({\n  model,\n  feature,\n}: {\n  model: BaseFeatureWidgetModel\n  feature: SimpleFeatureSerialized\n}) {\n  const { classes } = useStyles()\n  const [shown, setShown] = useState(false)\n\n  return (\n    <div className={classes.container}>\n      <FormControl className={classes.formControl}>\n        <Button\n          variant=\"contained\"\n          onClick={() => {\n            setShown(!shown)\n          }}\n        >\n          {shown ? 'Hide feature sequence' : 'Show feature sequence'}\n        </Button>\n      </FormControl>\n\n      <IconButton\n        onClick={() => {\n          getSession(model).queueDialog(handleClose => [\n            HelpDialog,\n            { handleClose },\n          ])\n        }}\n      >\n        <Help />\n      </IconButton>\n      {shown ? (\n        <Suspense fallback={<LoadingEllipses />}>\n          <SequenceFeatureDetails\n            key={feature.uniqueId}\n            model={model}\n            feature={feature}\n          />\n        </Suspense>\n      ) : null}\n    </div>\n  )\n})\n\nexport default SequenceFeaturePanel\n","import React from 'react'\nimport { ErrorBoundary } from '@jbrowse/core/ui/ErrorBoundary'\nimport { Divider, Typography } from '@mui/material'\nimport { IAnyStateTreeNode } from 'mobx-state-tree'\n\n// locals\nimport { getEnv, getSession, SimpleFeatureSerialized } from '../../util'\nimport { ErrorMessage } from '../../ui'\nimport { generateTitle } from './util'\nimport SequenceFeatureDetails from '../SequenceFeatureDetails'\nimport Attributes from './Attributes'\nimport BaseCard from './BaseCard'\nimport CoreDetails from './CoreDetails'\n\n// coreDetails are omitted in some circumstances\nconst coreDetails = [\n  'name',\n  'start',\n  'end',\n  'strand',\n  'refName',\n  'description',\n  'type',\n]\n\ninterface PanelDescriptor {\n  name: string\n  Component: React.FC<any>\n}\n\nexport default function FeatureDetails(props: {\n  model: IAnyStateTreeNode\n  feature: SimpleFeatureSerialized\n  depth?: number\n  omit?: string[]\n  descriptions?: Record<string, React.ReactNode>\n  formatter?: (val: unknown, key: string) => React.ReactNode\n}) {\n  const { omit = [], model, feature, depth = 0 } = props\n  const { maxDepth } = model\n  const { mate, name = '', id = '', type = '', subfeatures, uniqueId } = feature\n  const pm = getEnv(model).pluginManager\n  const session = getSession(model)\n\n  const ExtraPanel = pm.evaluateExtensionPoint('Core-extraFeaturePanel', null, {\n    session,\n    feature,\n    model,\n  }) as PanelDescriptor | undefined\n  const m = mate as { start: number; end: number; refName: string } | undefined\n  return (\n    <BaseCard title={generateTitle(name, id, type)}>\n      <Typography>Core details</Typography>\n      <CoreDetails {...props} />\n      {m ? (\n        <>\n          <Divider />\n          <Typography>Mate details</Typography>\n          <CoreDetails\n            {...props}\n            feature={{\n              ...m,\n              start: m.start,\n              end: m.end,\n              refName: m.refName,\n              uniqueId: `${uniqueId}-mate`,\n            }}\n          />\n        </>\n      ) : null}\n\n      <Divider />\n      <Typography>Attributes</Typography>\n      <Attributes\n        attributes={feature}\n        {...props}\n        omit={omit}\n        omitSingleLevel={coreDetails}\n      />\n\n      <ErrorBoundary FallbackComponent={e => <ErrorMessage error={e.error} />}>\n        <SequenceFeatureDetails {...props} />\n      </ErrorBoundary>\n\n      {ExtraPanel ? (\n        <>\n          <Divider />\n          <BaseCard title={ExtraPanel.name}>\n            <ExtraPanel.Component {...props} />\n          </BaseCard>\n        </>\n      ) : null}\n\n      {depth < maxDepth && subfeatures?.length ? (\n        <BaseCard title=\"Subfeatures\" defaultExpanded={depth < 1}>\n          {subfeatures.map((sub, idx) => (\n            <FeatureDetails\n              key={JSON.stringify(sub)}\n              feature={{\n                ...sub,\n                uniqueId: `${uniqueId}_${idx}`,\n              }}\n              model={model}\n              depth={depth + 1}\n            />\n          ))}\n        </BaseCard>\n      ) : null}\n    </BaseCard>\n  )\n}\n","import React from 'react'\nimport { Tooltip } from '@mui/material'\nimport { makeStyles } from 'tss-react/mui'\n\nconst useStyles = makeStyles()(theme => ({\n  fieldDescription: {\n    '&:hover': {\n      background: theme.palette.mode === 'dark' ? '#e65100' : 'yellow',\n    },\n  },\n  fieldName: {\n    wordBreak: 'break-all',\n    minWidth: 90,\n    borderBottom: '1px solid #0003',\n    fontSize: 12,\n    background: theme.palette.action.disabledBackground,\n    marginRight: theme.spacing(1),\n    padding: theme.spacing(0.5),\n  },\n}))\n\nexport default function FieldName({\n  description,\n  name,\n  width,\n  prefix = [],\n}: {\n  description?: React.ReactNode\n  name: string\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes, cx } = useStyles()\n  const val = [...prefix, name].join('.')\n  return description ? (\n    <Tooltip title={description} placement=\"left\">\n      <div className={cx(classes.fieldDescription, classes.fieldName)}>\n        {val}\n      </div>\n    </Tooltip>\n  ) : (\n    <div className={classes.fieldName} style={{ width: width }}>\n      {val}\n    </div>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport FieldName from './FieldName'\nimport BasicValue from './BasicValue'\n\nconst useStyles = makeStyles()({\n  field: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n})\n\nexport default function SimpleField({\n  name,\n  value,\n  description,\n  prefix,\n  width,\n}: {\n  description?: React.ReactNode\n  name: string\n  value: unknown\n  prefix?: string[]\n  width?: number\n}) {\n  const { classes } = useStyles()\n  return value !== null && value !== undefined ? (\n    <div className={classes.field}>\n      <FieldName\n        prefix={prefix}\n        description={description}\n        name={name}\n        width={width}\n      />\n      <BasicValue value={value} />\n    </div>\n  ) : null\n}\n","import isObject from 'is-object'\nimport { max, measureText } from '../../util'\nimport { ellipses } from '../util'\n\nexport function isEmpty(obj: Record<string, unknown>) {\n  return Object.keys(obj).length === 0\n}\n\nexport function generateTitle(name: unknown, id: unknown, type: unknown) {\n  return [ellipses(`${name || id || ''}`), `${type}`]\n    .filter(f => !!f)\n    .join(' - ')\n}\n\nexport function generateMaxWidth(array: unknown[][], prefix: string[]) {\n  return (\n    Math.ceil(\n      max(array.map(key => measureText([...prefix, key[0]].join('.'), 12))),\n    ) + 10\n  )\n}\n\n// pick using a path from an object, similar to _.get from lodash with special\n// logic for Descriptions from e.g. VCF headers\n//\n// @param arr  example ['a','b'], obj = {a:{b:'hello}}\n// @returns hello (with special addition to grab description also)\nexport function accessNested(arr: string[], obj: Record<string, unknown> = {}) {\n  let obj2: unknown = obj\n  arr.forEach(elt => {\n    if (isObject(obj2)) {\n      obj2 = obj2[elt]\n    }\n  })\n  return typeof obj2 === 'string'\n    ? obj2\n    : isObject(obj2) && typeof obj2.Description === 'string'\n      ? obj2.Description\n      : undefined\n}\n"],"names":["useStyles","makeStyles","theme","margin","marginBottom","spacing","cell","whiteSpace","overflow","textOverflow","DataGridDetails","value","prefix","name","classes","checked","setChecked","useState","keys","Object","sort","unionKeys","Set","rows","entries","map","k","val","id","rest","identifier","add","colNames","has","delete","widths","e","measureGridWidth","r","size","length","React","className","FieldName","FormControlLabel","control","Checkbox","onChange","event","target","label","Typography","variant","DataGrid","autoHeight","disableRowSelectionOnClick","rowHeight","columnHeaderHeight","hideFooter","slots","toolbar","GridToolbar","slotProps","printOptions","disableToolbarButton","columns","index","field","renderCell","params","SanitizedHTML","html","getStr","width","display","flexWrap","fieldSubvalue","wordBreak","maxHeight","padding","border","palette","action","selected","boxSizing","ArrayValue","description","isObject","Attributes","attributes","BasicValue","every","i","key","JSON","stringify","UriField","uri","baseUri","href","URL","MAX_FIELD_NAME_WIDTH","globalOmit","props","omit","omitSingleLevel","descriptions","formatter","hideUris","omits","__jbrowsefmt","formattedAttributes","maxLabelWidth","generateMaxWidth","filter","v","undefined","accessNested","Array","isArray","isUriLocation","UriAttribute","_extends","SimpleField","Math","min","expansionPanelDetails","icon","color","tertiary","contrastText","BaseCard","children","title","defaultExpanded","Accordion","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","fieldValue","fontSize","isLink","exec","Link","String","Position","feature","strand","strandMap","str","loc","assembleLocString","CoreDetails","obj","formattedFeat","start","end","displayedDetails","toLocale","type","SequenceFeatureDetails","lazy","HelpDialog","formControl","container","marginTop","observer","model","shown","setShown","FormControl","Button","onClick","IconButton","getSession","queueDialog","handleClose","Help","Suspense","fallback","LoadingEllipses","uniqueId","coreDetails","FeatureDetails","depth","maxDepth","mate","subfeatures","pm","getEnv","pluginManager","session","ExtraPanel","evaluateExtensionPoint","m","generateTitle","Divider","refName","ErrorBoundary","FallbackComponent","ErrorMessage","error","Component","sub","idx","fieldDescription","background","mode","fieldName","minWidth","borderBottom","disabledBackground","marginRight","cx","join","Tooltip","placement","style","isEmpty","ellipses","f","array","ceil","max","measureText","arr","obj2","forEach","elt","Description"],"sourceRoot":""}