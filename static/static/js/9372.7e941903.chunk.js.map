{"version":3,"file":"static/js/9372.7e941903.chunk.js","mappings":"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","sources":["../../../plugins/linear-genome-view/src/LinearGenomeView/components/ImportFormRefNameAutocomplete.tsx","../../../plugins/linear-genome-view/src/LinearGenomeView/components/ImportForm.tsx","../../../node_modules/@mui/material/CircularProgress/CircularProgress.js","../../../node_modules/@mui/material/CircularProgress/circularProgressClasses.js","../../../node_modules/@mui/system/esm/Container/createContainer.js","../../../node_modules/@mui/material/Container/Container.js","../../../node_modules/@mui/system/esm/styled/styled.js"],"sourcesContent":["import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults'\n\n// locals\nimport RefNameAutocomplete from './RefNameAutocomplete'\nimport { fetchResults } from './util'\nimport { LinearGenomeViewModel } from '..'\n\ntype LGV = LinearGenomeViewModel\n\nconst ImportFormRefNameAutocomplete = observer(function ({\n  model,\n  selectedAsm,\n  value,\n  setValue,\n  setOption,\n}: {\n  value: string\n  setValue: (arg: string) => void\n  model: LGV\n  selectedAsm: string\n  setOption: (arg: BaseResult) => void\n}) {\n  const session = getSession(model)\n  const { assemblyManager, textSearchManager } = session\n  const { rankSearchResults } = model\n  const searchScope = model.searchScope(selectedAsm)\n  const assembly = assemblyManager.get(selectedAsm)\n  return (\n    <RefNameAutocomplete\n      fetchResults={queryString =>\n        fetchResults({\n          queryString,\n          assembly,\n          textSearchManager,\n          rankSearchResults,\n          searchScope,\n        })\n      }\n      model={model}\n      assemblyName={selectedAsm}\n      value={value}\n      minWidth={270}\n      onChange={str => {\n        setValue(str)\n      }}\n      onSelect={val => {\n        setOption(val)\n      }}\n      TextFieldProps={{\n        variant: 'outlined',\n        helperText: 'Enter sequence name, feature name, or location',\n      }}\n    />\n  )\n})\n\nexport default ImportFormRefNameAutocomplete\n","import React, { useState, useEffect } from 'react'\nimport { makeStyles } from 'tss-react/mui'\nimport { observer } from 'mobx-react'\nimport { getSession } from '@jbrowse/core/util'\nimport {\n  Button,\n  FormControl,\n  Container,\n  Grid,\n  CircularProgress,\n} from '@mui/material'\nimport { ErrorMessage, AssemblySelector } from '@jbrowse/core/ui'\nimport BaseResult from '@jbrowse/core/TextSearch/BaseResults'\n\n// icons\nimport CloseIcon from '@mui/icons-material/Close'\n\n// locals\nimport { LinearGenomeViewModel } from '..'\nimport { handleSelectedRegion, navToOption } from '../../searchUtils'\nimport ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete'\n\nconst useStyles = makeStyles()(theme => ({\n  importFormContainer: {\n    padding: theme.spacing(2),\n  },\n  button: {\n    margin: theme.spacing(2),\n  },\n  container: {\n    padding: theme.spacing(4),\n  },\n}))\n\ntype LGV = LinearGenomeViewModel\n\nconst LinearGenomeViewImportForm = observer(function ({\n  model,\n}: {\n  model: LGV\n}) {\n  const { classes } = useStyles()\n  const session = getSession(model)\n  const { assemblyNames, assemblyManager } = session\n  const { error } = model\n  const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]!)\n  const [option, setOption] = useState<BaseResult>()\n  const assembly = assemblyManager.get(selectedAsm)\n  const assemblyError = assemblyNames.length\n    ? assembly?.error\n    : 'No configured assemblies'\n  const displayError = assemblyError || error\n  const [value, setValue] = useState('')\n  const regions = assembly?.regions\n  const assemblyLoaded = !!regions\n  const r0 = regions ? regions[0]?.refName || '' : ''\n\n  // useEffect resets to an \"initial state\" of displaying first region from\n  // assembly after assembly change. needs to react to selectedAsm as well as\n  // r0 because changing assembly will run setValue('') and then r0 may not\n  // change if assembly names are the same across assemblies, but it still\n  // needs to be reset\n  /* biome-ignore lint/correctness/useExhaustiveDependencies: */\n  useEffect(() => {\n    setValue(r0)\n  }, [r0, selectedAsm])\n\n  // implementation notes:\n  // having this wrapped in a form allows intuitive use of enter key to submit\n  return (\n    <div className={classes.container}>\n      {displayError ? <ErrorMessage error={displayError} /> : null}\n      <Container className={classes.importFormContainer}>\n        <form\n          onSubmit={async event => {\n            event.preventDefault()\n            model.setError(undefined)\n            if (value) {\n              // has it's own error handling\n              try {\n                if (\n                  option?.getDisplayString() === value &&\n                  option.hasLocation()\n                ) {\n                  await navToOption({\n                    option,\n                    model,\n                    assemblyName: selectedAsm,\n                  })\n                } else if (option?.results?.length) {\n                  model.setSearchResults(\n                    option.results,\n                    option.getLabel(),\n                    selectedAsm,\n                  )\n                } else if (assembly) {\n                  await handleSelectedRegion({ input: value, assembly, model })\n                }\n              } catch (e) {\n                console.error(e)\n                session.notify(`${e}`, 'warning')\n              }\n            }\n          }}\n        >\n          <Grid\n            container\n            spacing={1}\n            justifyContent=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <FormControl>\n                <AssemblySelector\n                  onChange={val => {\n                    setSelectedAsm(val)\n                  }}\n                  localStorageKey=\"lgv\"\n                  session={session}\n                  selected={selectedAsm}\n                />\n              </FormControl>\n            </Grid>\n            <Grid item>\n              {selectedAsm ? (\n                assemblyError ? (\n                  <CloseIcon style={{ color: 'red' }} />\n                ) : assemblyLoaded ? (\n                  <FormControl>\n                    <ImportFormRefNameAutocomplete\n                      value={value}\n                      setValue={setValue}\n                      selectedAsm={selectedAsm}\n                      setOption={setOption}\n                      model={model}\n                    />\n                  </FormControl>\n                ) : (\n                  <CircularProgress size={20} disableShrink />\n                )\n              ) : null}\n            </Grid>\n            <Grid item>\n              <FormControl>\n                <Button\n                  type=\"submit\"\n                  disabled={!value}\n                  className={classes.button}\n                  variant=\"contained\"\n                  color=\"primary\"\n                >\n                  Open\n                </Button>\n              </FormControl>\n              <FormControl>\n                <Button\n                  disabled={!value}\n                  className={classes.button}\n                  onClick={() => {\n                    model.setError(undefined)\n                    model.showAllRegionsInAssembly(selectedAsm)\n                  }}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  Show all regions in assembly\n                </Button>\n              </FormControl>\n            </Grid>\n          </Grid>\n        </form>\n      </Container>\n    </div>\n  )\n})\n\nexport default LinearGenomeViewImportForm\n","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { keyframes, css, styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { getCircularProgressUtilityClass } from \"./circularProgressClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SIZE = 44;\nconst circularRotateKeyframe = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\nconst circularDashKeyframe = keyframes`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`;\n\n// This implementation is for supporting both Styled-components v4+ and Pigment CSS.\n// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).\n// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).\nconst rotateAnimation = typeof circularRotateKeyframe !== 'string' ? css`\n        animation: ${circularRotateKeyframe} 1.4s linear infinite;\n      ` : null;\nconst dashAnimation = typeof circularDashKeyframe !== 'string' ? css`\n        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;\n      ` : null;\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color,\n    disableShrink\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`],\n    svg: ['svg'],\n    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']\n  };\n  return composeClasses(slots, getCircularProgressUtilityClass, classes);\n};\nconst CircularProgressRoot = styled('span', {\n  name: 'MuiCircularProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-block',\n  variants: [{\n    props: {\n      variant: 'determinate'\n    },\n    style: {\n      transition: theme.transitions.create('transform')\n    }\n  }, {\n    props: {\n      variant: 'indeterminate'\n    },\n    style: rotateAnimation || {\n      animation: `${circularRotateKeyframe} 1.4s linear infinite`\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  }))]\n})));\nconst CircularProgressSVG = styled('svg', {\n  name: 'MuiCircularProgress',\n  slot: 'Svg',\n  overridesResolver: (props, styles) => styles.svg\n})({\n  display: 'block' // Keeps the progress centered\n});\nconst CircularProgressCircle = styled('circle', {\n  name: 'MuiCircularProgress',\n  slot: 'Circle',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  stroke: 'currentColor',\n  variants: [{\n    props: {\n      variant: 'determinate'\n    },\n    style: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    }\n  }, {\n    props: {\n      variant: 'indeterminate'\n    },\n    style: {\n      // Some default value that looks fine waiting for the animation to kicks in.\n      strokeDasharray: '80px, 200px',\n      strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink,\n    style: dashAnimation || {\n      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.\n      animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`\n    }\n  }]\n})));\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCircularProgress'\n  });\n  const {\n    className,\n    color = 'primary',\n    disableShrink = false,\n    size = 40,\n    style,\n    thickness = 3.6,\n    value = 0,\n    variant = 'indeterminate',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    color,\n    disableShrink,\n    size,\n    thickness,\n    value,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n  if (variant === 'determinate') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n  return /*#__PURE__*/_jsx(CircularProgressRoot, {\n    className: clsx(classes.root, className),\n    style: {\n      width: size,\n      height: size,\n      ...rootStyle,\n      ...style\n    },\n    ownerState: ownerState,\n    ref: ref,\n    role: \"progressbar\",\n    ...rootProps,\n    ...other,\n    children: /*#__PURE__*/_jsx(CircularProgressSVG, {\n      className: classes.svg,\n      ownerState: ownerState,\n      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,\n      children: /*#__PURE__*/_jsx(CircularProgressCircle, {\n        className: classes.circle,\n        style: circleStyle,\n        ownerState: ownerState,\n        cx: SIZE,\n        cy: SIZE,\n        r: (SIZE - thickness) / 2,\n        fill: \"none\",\n        strokeWidth: thickness\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, for example '3rem'.\n   * @default 40\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate'])\n} : void 0;\nexport default CircularProgress;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCircularProgressUtilityClass(slot) {\n  return generateUtilityClass('MuiCircularProgress', slot);\n}\nconst circularProgressClasses = generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);\nexport default circularProgressClasses;","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nimport composeClasses from '@mui/utils/composeClasses';\nimport capitalize from '@mui/utils/capitalize';\nimport useThemePropsSystem from \"../useThemeProps/index.js\";\nimport systemStyled from \"../styled/index.js\";\nimport createTheme from \"../createTheme/index.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultTheme = createTheme();\nconst defaultCreateStyledComponent = systemStyled('div', {\n  name: 'MuiContainer',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n  }\n});\nconst useThemePropsDefault = inProps => useThemePropsSystem({\n  props: inProps,\n  name: 'MuiContainer',\n  defaultTheme\n});\nconst useUtilityClasses = (ownerState, componentName) => {\n  const getContainerUtilityClass = slot => {\n    return generateUtilityClass(componentName, slot);\n  };\n  const {\n    classes,\n    fixed,\n    disableGutters,\n    maxWidth\n  } = ownerState;\n  const slots = {\n    root: ['root', maxWidth && `maxWidth${capitalize(String(maxWidth))}`, fixed && 'fixed', disableGutters && 'disableGutters']\n  };\n  return composeClasses(slots, getContainerUtilityClass, classes);\n};\nexport default function createContainer(options = {}) {\n  const {\n    // This will allow adding custom styled fn (for example for custom sx style function)\n    createStyledComponent = defaultCreateStyledComponent,\n    useThemeProps = useThemePropsDefault,\n    componentName = 'MuiContainer'\n  } = options;\n  const ContainerRoot = createStyledComponent(({\n    theme,\n    ownerState\n  }) => ({\n    width: '100%',\n    marginLeft: 'auto',\n    boxSizing: 'border-box',\n    marginRight: 'auto',\n    ...(!ownerState.disableGutters && {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(2),\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up('sm')]: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3)\n      }\n    })\n  }), ({\n    theme,\n    ownerState\n  }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {\n    const breakpoint = breakpointValueKey;\n    const value = theme.breakpoints.values[breakpoint];\n    if (value !== 0) {\n      // @ts-ignore\n      acc[theme.breakpoints.up(breakpoint)] = {\n        maxWidth: `${value}${theme.breakpoints.unit}`\n      };\n    }\n    return acc;\n  }, {}), ({\n    theme,\n    ownerState\n  }) => ({\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    ...(ownerState.maxWidth === 'xs' && {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up('xs')]: {\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        maxWidth: Math.max(theme.breakpoints.values.xs, 444)\n      }\n    }),\n    ...(ownerState.maxWidth &&\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    ownerState.maxWidth !== 'xs' && {\n      // @ts-ignore module augmentation fails if custom breakpoints are used\n      [theme.breakpoints.up(ownerState.maxWidth)]: {\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`\n      }\n    })\n  }));\n  const Container = /*#__PURE__*/React.forwardRef(function Container(inProps, ref) {\n    const props = useThemeProps(inProps);\n    const {\n      className,\n      component = 'div',\n      disableGutters = false,\n      fixed = false,\n      maxWidth = 'lg',\n      classes: classesProp,\n      ...other\n    } = props;\n    const ownerState = {\n      ...props,\n      component,\n      disableGutters,\n      fixed,\n      maxWidth\n    };\n\n    // @ts-ignore module augmentation fails if custom breakpoints are used\n    const classes = useUtilityClasses(ownerState, componentName);\n    return (\n      /*#__PURE__*/\n      // @ts-ignore theme is injected by the styled util\n      _jsx(ContainerRoot, {\n        as: component\n        // @ts-ignore module augmentation fails if custom breakpoints are used\n        ,\n        ownerState: ownerState,\n        className: clsx(classes.root, className),\n        ref: ref,\n        ...other\n      })\n    );\n  });\n  process.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n    children: PropTypes.node,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    component: PropTypes.elementType,\n    disableGutters: PropTypes.bool,\n    fixed: PropTypes.bool,\n    maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n    sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n  } : void 0;\n  return Container;\n}","'use client';\n\nimport PropTypes from 'prop-types';\nimport { createContainer } from '@mui/system';\nimport capitalize from \"../utils/capitalize.js\";\nimport styled from \"../styles/styled.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nconst Container = createContainer({\n  createStyledComponent: styled('div', {\n    name: 'MuiContainer',\n    slot: 'Root',\n    overridesResolver: (props, styles) => {\n      const {\n        ownerState\n      } = props;\n      return [styles.root, styles[`maxWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fixed && styles.fixed, ownerState.disableGutters && styles.disableGutters];\n    }\n  }),\n  useThemeProps: inProps => useDefaultProps({\n    props: inProps,\n    name: 'MuiContainer'\n  })\n});\nprocess.env.NODE_ENV !== \"production\" ? Container.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the left and right padding is removed.\n   * @default false\n   */\n  disableGutters: PropTypes.bool,\n  /**\n   * Set the max-width to match the min-width of the current breakpoint.\n   * This is useful if you'd prefer to design for a fixed set of sizes\n   * instead of trying to accommodate a fully fluid viewport.\n   * It's fluid by default.\n   * @default false\n   */\n  fixed: PropTypes.bool,\n  /**\n   * Determine the max-width of the container.\n   * The container width grows with the size of the screen.\n   * Set to `false` to disable `maxWidth`.\n   * @default 'lg'\n   */\n  maxWidth: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['xs', 'sm', 'md', 'lg', 'xl', false]), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Container;","import createStyled from \"../createStyled/index.js\";\nconst styled = createStyled();\nexport default styled;"],"names":["observer","model","selectedAsm","value","setValue","setOption","session","getSession","assemblyManager","textSearchManager","rankSearchResults","searchScope","assembly","get","React","RefNameAutocomplete","fetchResults","queryString","assemblyName","minWidth","onChange","str","onSelect","val","TextFieldProps","variant","helperText","useStyles","makeStyles","theme","importFormContainer","padding","spacing","button","margin","container","classes","assemblyNames","error","setSelectedAsm","useState","option","assemblyError","length","displayError","regions","assemblyLoaded","r0","refName","useEffect","className","ErrorMessage","Container","onSubmit","async","event","preventDefault","setError","undefined","getDisplayString","hasLocation","navToOption","results","setSearchResults","getLabel","handleSelectedRegion","input","e","console","notify","Grid","justifyContent","alignItems","item","FormControl","AssemblySelector","localStorageKey","selected","CloseIcon","style","color","ImportFormRefNameAutocomplete","CircularProgress","size","disableShrink","Button","type","disabled","onClick","showAllRegionsInAssembly","circularRotateKeyframe","circularDashKeyframe","rotateAnimation","dashAnimation","CircularProgressRoot","name","slot","overridesResolver","props","styles","ownerState","root","display","variants","transition","transitions","create","animation","Object","entries","palette","filter","map","vars","main","CircularProgressSVG","svg","CircularProgressCircle","circle","circleDisableShrink","stroke","strokeDasharray","strokeDashoffset","inProps","ref","thickness","other","slots","useUtilityClasses","circleStyle","rootStyle","rootProps","circumference","Math","PI","toFixed","round","transform","width","height","role","children","viewBox","cx","cy","r","fill","strokeWidth","getCircularProgressUtilityClass","defaultTheme","createTheme","defaultCreateStyledComponent","capitalize","String","maxWidth","fixed","disableGutters","useThemePropsDefault","useThemeProps","options","createStyledComponent","componentName","ContainerRoot","marginLeft","boxSizing","marginRight","paddingLeft","paddingRight","breakpoints","up","keys","values","reduce","acc","breakpointValueKey","breakpoint","unit","max","xs","component","classesProp","composeClasses","generateUtilityClass","as","clsx","createContainer"],"sourceRoot":""}