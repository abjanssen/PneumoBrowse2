{"version":3,"file":"static/js/5243.69fde114.chunk.js","mappings":"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","sources":["../../../plugins/circular-view/src/CircularView/components/ExportSvgDialog.tsx","../../../node_modules/@mui/material/CircularProgress/CircularProgress.js","../../../node_modules/@mui/material/CircularProgress/circularProgressClasses.js"],"sourcesContent":["import React, { useState } from 'react'\nimport {\n  Button,\n  Checkbox,\n  CircularProgress,\n  DialogActions,\n  DialogContent,\n  FormControlLabel,\n  MenuItem,\n  TextField,\n  TextFieldProps,\n  Typography,\n} from '@mui/material'\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui'\n\n// locals\nimport { ExportSvgOptions } from '../models/model'\nimport { getSession, useLocalStorage } from '@jbrowse/core/util'\n\nfunction LoadingMessage() {\n  return (\n    <div>\n      <CircularProgress size={20} style={{ marginRight: 20 }} />\n      <Typography display=\"inline\">Creating SVG</Typography>\n    </div>\n  )\n}\n\nfunction TextField2({ children, ...rest }: TextFieldProps) {\n  return (\n    <div>\n      <TextField {...rest}>{children}</TextField>\n    </div>\n  )\n}\nfunction useSvgLocal<T>(key: string, val: T) {\n  return useLocalStorage(`svg-${key}`, val)\n}\n\nexport default function ExportSvgDialog({\n  model,\n  handleClose,\n}: {\n  model: { exportSvg(opts: ExportSvgOptions): Promise<void> }\n  handleClose: () => void\n}) {\n  const session = getSession(model)\n  const offscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n  const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState<unknown>()\n  const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg')\n  const [themeName, setThemeName] = useSvgLocal(\n    'theme',\n    session.themeName || 'default',\n  )\n  return (\n    <Dialog open onClose={handleClose} title=\"Export SVG\">\n      <DialogContent>\n        {error ? (\n          <ErrorMessage error={error} />\n        ) : loading ? (\n          <LoadingMessage />\n        ) : null}\n        <TextField2\n          helperText=\"filename\"\n          value={filename}\n          onChange={event => {\n            setFilename(event.target.value)\n          }}\n        />\n\n        {session.allThemes ? (\n          <TextField2\n            select\n            label=\"Theme\"\n            value={themeName}\n            onChange={event => {\n              setThemeName(event.target.value)\n            }}\n          >\n            {Object.entries(session.allThemes()).map(([key, val]) => (\n              <MenuItem key={key} value={key}>\n                {\n                  // @ts-expect-error\n                  val.name || '(Unknown name)'\n                }\n              </MenuItem>\n            ))}\n          </TextField2>\n        ) : null}\n        {offscreenCanvas ? (\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={rasterizeLayers}\n                onChange={() => {\n                  setRasterizeLayers(val => !val)\n                }}\n              />\n            }\n            label=\"Rasterize canvas based tracks? File may be much larger if this is turned off\"\n          />\n        ) : (\n          <Typography>\n            Note: rasterizing layers not yet supported in this browser, so SVG\n            size may be large\n          </Typography>\n        )}\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => {\n            handleClose()\n          }}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          type=\"submit\"\n          onClick={async () => {\n            setLoading(true)\n            setError(undefined)\n            try {\n              await model.exportSvg({\n                rasterizeLayers,\n                filename,\n                themeName,\n              })\n              handleClose()\n            } catch (e) {\n              console.error(e)\n              setError(e)\n            } finally {\n              setLoading(false)\n            }\n          }}\n        >\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport chainPropTypes from '@mui/utils/chainPropTypes';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { keyframes, css, styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { getCircularProgressUtilityClass } from \"./circularProgressClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst SIZE = 44;\nconst circularRotateKeyframe = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\nconst circularDashKeyframe = keyframes`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`;\n\n// This implementation is for supporting both Styled-components v4+ and Pigment CSS.\n// A global animation has to be created here for Styled-components v4+ (https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#12).\n// which can be done by checking typeof indeterminate1Keyframe !== 'string' (at runtime, Pigment CSS transform keyframes`` to a string).\nconst rotateAnimation = typeof circularRotateKeyframe !== 'string' ? css`\n        animation: ${circularRotateKeyframe} 1.4s linear infinite;\n      ` : null;\nconst dashAnimation = typeof circularDashKeyframe !== 'string' ? css`\n        animation: ${circularDashKeyframe} 1.4s ease-in-out infinite;\n      ` : null;\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    variant,\n    color,\n    disableShrink\n  } = ownerState;\n  const slots = {\n    root: ['root', variant, `color${capitalize(color)}`],\n    svg: ['svg'],\n    circle: ['circle', `circle${capitalize(variant)}`, disableShrink && 'circleDisableShrink']\n  };\n  return composeClasses(slots, getCircularProgressUtilityClass, classes);\n};\nconst CircularProgressRoot = styled('span', {\n  name: 'MuiCircularProgress',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[ownerState.variant], styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  display: 'inline-block',\n  variants: [{\n    props: {\n      variant: 'determinate'\n    },\n    style: {\n      transition: theme.transitions.create('transform')\n    }\n  }, {\n    props: {\n      variant: 'indeterminate'\n    },\n    style: rotateAnimation || {\n      animation: `${circularRotateKeyframe} 1.4s linear infinite`\n    }\n  }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n    props: {\n      color\n    },\n    style: {\n      color: (theme.vars || theme).palette[color].main\n    }\n  }))]\n})));\nconst CircularProgressSVG = styled('svg', {\n  name: 'MuiCircularProgress',\n  slot: 'Svg',\n  overridesResolver: (props, styles) => styles.svg\n})({\n  display: 'block' // Keeps the progress centered\n});\nconst CircularProgressCircle = styled('circle', {\n  name: 'MuiCircularProgress',\n  slot: 'Circle',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.circle, styles[`circle${capitalize(ownerState.variant)}`], ownerState.disableShrink && styles.circleDisableShrink];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  stroke: 'currentColor',\n  variants: [{\n    props: {\n      variant: 'determinate'\n    },\n    style: {\n      transition: theme.transitions.create('stroke-dashoffset')\n    }\n  }, {\n    props: {\n      variant: 'indeterminate'\n    },\n    style: {\n      // Some default value that looks fine waiting for the animation to kicks in.\n      strokeDasharray: '80px, 200px',\n      strokeDashoffset: 0 // Add the unit to fix a Edge 16 and below bug.\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.variant === 'indeterminate' && !ownerState.disableShrink,\n    style: dashAnimation || {\n      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.\n      animation: `${circularDashKeyframe} 1.4s ease-in-out infinite`\n    }\n  }]\n})));\n\n/**\n * ## ARIA\n *\n * If the progress bar is describing the loading progress of a particular region of a page,\n * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`\n * attribute to `true` on that region until it has finished loading.\n */\nconst CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiCircularProgress'\n  });\n  const {\n    className,\n    color = 'primary',\n    disableShrink = false,\n    size = 40,\n    style,\n    thickness = 3.6,\n    value = 0,\n    variant = 'indeterminate',\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    color,\n    disableShrink,\n    size,\n    thickness,\n    value,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  const circleStyle = {};\n  const rootStyle = {};\n  const rootProps = {};\n  if (variant === 'determinate') {\n    const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);\n    circleStyle.strokeDasharray = circumference.toFixed(3);\n    rootProps['aria-valuenow'] = Math.round(value);\n    circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;\n    rootStyle.transform = 'rotate(-90deg)';\n  }\n  return /*#__PURE__*/_jsx(CircularProgressRoot, {\n    className: clsx(classes.root, className),\n    style: {\n      width: size,\n      height: size,\n      ...rootStyle,\n      ...style\n    },\n    ownerState: ownerState,\n    ref: ref,\n    role: \"progressbar\",\n    ...rootProps,\n    ...other,\n    children: /*#__PURE__*/_jsx(CircularProgressSVG, {\n      className: classes.svg,\n      ownerState: ownerState,\n      viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,\n      children: /*#__PURE__*/_jsx(CircularProgressCircle, {\n        className: classes.circle,\n        style: circleStyle,\n        ownerState: ownerState,\n        cx: SIZE,\n        cy: SIZE,\n        r: (SIZE - thickness) / 2,\n        fill: \"none\",\n        strokeWidth: thickness\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CircularProgress.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['inherit', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the shrink animation is disabled.\n   * This only works if variant is `indeterminate`.\n   * @default false\n   */\n  disableShrink: chainPropTypes(PropTypes.bool, props => {\n    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {\n      return new Error('MUI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');\n    }\n    return null;\n  }),\n  /**\n   * The size of the component.\n   * If using a number, the pixel unit is assumed.\n   * If using a string, you need to provide the CSS unit, for example '3rem'.\n   * @default 40\n   */\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The thickness of the circle.\n   * @default 3.6\n   */\n  thickness: PropTypes.number,\n  /**\n   * The value of the progress indicator for the determinate variant.\n   * Value between 0 and 100.\n   * @default 0\n   */\n  value: PropTypes.number,\n  /**\n   * The variant to use.\n   * Use indeterminate when there is no progress value.\n   * @default 'indeterminate'\n   */\n  variant: PropTypes.oneOf(['determinate', 'indeterminate'])\n} : void 0;\nexport default CircularProgress;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getCircularProgressUtilityClass(slot) {\n  return generateUtilityClass('MuiCircularProgress', slot);\n}\nconst circularProgressClasses = generateUtilityClasses('MuiCircularProgress', ['root', 'determinate', 'indeterminate', 'colorPrimary', 'colorSecondary', 'svg', 'circle', 'circleDeterminate', 'circleIndeterminate', 'circleDisableShrink']);\nexport default circularProgressClasses;"],"names":["LoadingMessage","React","CircularProgress","size","style","marginRight","Typography","display","TextField2","children","rest","TextField","useSvgLocal","key","val","useLocalStorage","ExportSvgDialog","model","handleClose","session","getSession","offscreenCanvas","OffscreenCanvas","rasterizeLayers","setRasterizeLayers","useState","loading","setLoading","error","setError","filename","setFilename","themeName","setThemeName","Dialog","open","onClose","title","DialogContent","ErrorMessage","helperText","value","onChange","event","target","allThemes","select","label","Object","entries","map","MenuItem","name","FormControlLabel","control","Checkbox","checked","DialogActions","Button","variant","color","onClick","type","async","undefined","exportSvg","e","console","circularRotateKeyframe","circularDashKeyframe","rotateAnimation","dashAnimation","CircularProgressRoot","slot","overridesResolver","props","styles","ownerState","root","theme","variants","transition","transitions","create","animation","palette","filter","vars","main","CircularProgressSVG","svg","CircularProgressCircle","circle","disableShrink","circleDisableShrink","stroke","strokeDasharray","strokeDashoffset","inProps","ref","className","thickness","other","classes","slots","useUtilityClasses","circleStyle","rootStyle","rootProps","circumference","Math","PI","toFixed","round","transform","width","height","role","viewBox","cx","cy","r","fill","strokeWidth","getCircularProgressUtilityClass"],"sourceRoot":""}