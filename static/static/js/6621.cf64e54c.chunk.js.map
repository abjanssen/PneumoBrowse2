{"version":3,"file":"static/js/6621.cf64e54c.chunk.js","mappings":"4NAce,MAAMA,UAAwBC,EAAAA,uBAM3C,kBAAcC,GACZ,MAAMC,EAAKC,KAAKC,cACVC,EAAgBF,KAAKG,QAAQ,iBAC7BC,EAAWJ,KAAKG,QAAQ,CAAC,QAAS,aAClCE,EAAYL,KAAKG,QAAQ,CAAC,QAAS,cAEnCG,GAAaC,EAAAA,EAAAA,cAAaL,EAAeH,GACzCS,EAAsB,QAAdH,EACRI,EAAM,IAAIC,EAAAA,GAAiB,CAC/BJ,aACAK,cAAeH,GAAQD,EAAAA,EAAAA,cAAaH,EAAUL,QAAMa,EACpDC,cAAgBL,OAAqCI,GAA7BL,EAAAA,EAAAA,cAAaH,EAAUL,GAC/Ce,eAAgB,WAGZC,QAAeN,EAAIO,YACzB,MAAO,CACLP,MACAQ,OAAQ,IAAIC,EAAAA,EAAU,CAAEH,WAE5B,CAEA,eAAgBI,GAOd,OANKnB,KAAKoB,aACRpB,KAAKoB,WAAapB,KAAKF,eAAeuB,OAAOC,IAE3C,MADAtB,KAAKoB,gBAAaR,EACZU,CAAC,KAGJtB,KAAKoB,UACd,CAEA,iBAAaG,CAAYC,EAAoB,CAAC,GAC5C,MAAM,IAAEf,SAAcT,KAAKmB,YAC3B,OAAOV,EAAIgB,0BAA0BD,EACvC,CAEA,eAAMR,GACJ,MAAM,IAAEP,SAAcT,KAAKmB,YAC3B,OAAOV,EAAIO,WACb,CAEA,iBAAMU,GACJ,MAAM,OAAET,SAAiBjB,KAAKmB,YAC9B,OAAOF,EAAOS,aAChB,CAEOC,WAAAA,CAAYC,EAAyBJ,EAAoB,CAAC,GAC/D,OAAOK,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAM,QAAEC,EAAO,MAAEC,EAAK,IAAEC,GAAQL,GAC1B,IAAEnB,EAAG,OAAEQ,SAAiBjB,KAAKmB,kBAC7BV,EAAIyB,SAASH,EAASC,EAAOC,EAAK,CACtCE,aAAcA,CAACC,EAAMC,KACnBC,EAASC,KACP,IAAIC,EAAAA,EAAW,CACbC,QAASxB,EAAOyB,UAAUN,GAC1BnB,SACA0B,GAAI,GAAG3C,KAAK2C,UAAUN,MAEzB,KAEAb,IAELc,EAASM,UAAU,GAClBpB,EAAKqB,OACV,CAEOC,aAAAA,GAAuC,E","sources":["../../../plugins/variants/src/VcfTabixAdapter/VcfTabixAdapter.ts"],"sourcesContent":["import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature } from '@jbrowse/core/util'\nimport { TabixIndexedFile } from '@gmod/tabix'\nimport VcfParser from '@gmod/vcf'\n\n// local\nimport VcfFeature from '../VcfFeature'\n\nexport default class VcfTabixAdapter extends BaseFeatureDataAdapter {\n  private configured?: Promise<{\n    vcf: TabixIndexedFile\n    parser: VcfParser\n  }>\n\n  private async configurePre() {\n    const pm = this.pluginManager\n    const vcfGzLocation = this.getConf('vcfGzLocation')\n    const location = this.getConf(['index', 'location'])\n    const indexType = this.getConf(['index', 'indexType'])\n\n    const filehandle = openLocation(vcfGzLocation, pm)\n    const isCSI = indexType === 'CSI'\n    const vcf = new TabixIndexedFile({\n      filehandle,\n      csiFilehandle: isCSI ? openLocation(location, pm) : undefined,\n      tbiFilehandle: !isCSI ? openLocation(location, pm) : undefined,\n      chunkCacheSize: 50 * 2 ** 20,\n    })\n\n    const header = await vcf.getHeader()\n    return {\n      vcf,\n      parser: new VcfParser({ header }),\n    }\n  }\n\n  protected async configure() {\n    if (!this.configured) {\n      this.configured = this.configurePre().catch((e: unknown) => {\n        this.configured = undefined\n        throw e\n      })\n    }\n    return this.configured\n  }\n\n  public async getRefNames(opts: BaseOptions = {}) {\n    const { vcf } = await this.configure()\n    return vcf.getReferenceSequenceNames(opts)\n  }\n\n  async getHeader() {\n    const { vcf } = await this.configure()\n    return vcf.getHeader()\n  }\n\n  async getMetadata() {\n    const { parser } = await this.configure()\n    return parser.getMetadata()\n  }\n\n  public getFeatures(query: NoAssemblyRegion, opts: BaseOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      const { refName, start, end } = query\n      const { vcf, parser } = await this.configure()\n      await vcf.getLines(refName, start, end, {\n        lineCallback: (line, fileOffset) => {\n          observer.next(\n            new VcfFeature({\n              variant: parser.parseLine(line),\n              parser,\n              id: `${this.id}-vcf-${fileOffset}`,\n            }),\n          )\n        },\n        ...opts,\n      })\n      observer.complete()\n    }, opts.signal)\n  }\n\n  public freeResources(/* { region } */): void {}\n}\n"],"names":["VcfTabixAdapter","BaseFeatureDataAdapter","configurePre","pm","this","pluginManager","vcfGzLocation","getConf","location","indexType","filehandle","openLocation","isCSI","vcf","TabixIndexedFile","csiFilehandle","undefined","tbiFilehandle","chunkCacheSize","header","getHeader","parser","VcfParser","configure","configured","catch","e","getRefNames","opts","getReferenceSequenceNames","getMetadata","getFeatures","query","ObservableCreate","async","refName","start","end","getLines","lineCallback","line","fileOffset","observer","next","VcfFeature","variant","parseLine","id","complete","signal","freeResources"],"sourceRoot":""}