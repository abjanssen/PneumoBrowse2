{"version":3,"file":"static/js/130.c93629a7.chunk.js","mappings":"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","sources":["../../../plugins/alignments/src/shared/components/FilterByTagDialog.tsx","../../../node_modules/@mui/material/Link/getTextDecoration.js","../../../node_modules/@mui/material/Link/Link.js","../../../node_modules/@mui/material/Link/linkClasses.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  Link,\n  Paper,\n  TextField,\n  Typography,\n} from '@mui/material'\nimport { Dialog } from '@jbrowse/core/ui'\nimport { makeStyles } from 'tss-react/mui'\n// locals\nimport { FilterBy } from '../types'\n\nconst useStyles = makeStyles()(theme => ({\n  paper: {\n    padding: theme.spacing(2),\n    margin: theme.spacing(2),\n  },\n  field: {\n    margin: theme.spacing(2),\n  },\n}))\n\nconst flagNames = [\n  'read paired',\n  'read mapped in proper pair',\n  'read unmapped',\n  'mate unmapped',\n  'read reverse strand',\n  'mate reverse strand',\n  'first in pair',\n  'second in pair',\n  'not primary alignment',\n  'read fails platform/vendor quality checks',\n  'read is PCR or optical duplicate',\n  'supplementary alignment',\n]\n\nfunction Bitmask(props: { flag?: number; setFlag: (arg: number) => void }) {\n  const { flag = 0, setFlag } = props\n  return (\n    <>\n      <TextField\n        type=\"number\"\n        value={flag}\n        onChange={event => {\n          setFlag(+event.target.value)\n        }}\n      />\n      {flagNames.map((name, index) => {\n        const val = flag & (1 << index)\n        const key = `${name}_${val}`\n        return (\n          <div key={key}>\n            <input\n              type=\"checkbox\"\n              checked={Boolean(val)}\n              onChange={event => {\n                if (event.target.checked) {\n                  setFlag(flag | (1 << index))\n                } else {\n                  setFlag(flag & ~(1 << index))\n                }\n              }}\n            />\n            <label htmlFor={key}>{name}</label>\n          </div>\n        )\n      })}\n    </>\n  )\n}\n\nconst FilterByTagDialog = observer(function (props: {\n  model: {\n    filterBy: FilterBy\n    setFilterBy: (arg: FilterBy) => void\n  }\n  handleClose: () => void\n}) {\n  const { model, handleClose } = props\n  const { classes } = useStyles()\n  const { filterBy } = model\n  const [flagInclude, setFlagInclude] = useState(filterBy.flagInclude)\n  const [flagExclude, setFlagExclude] = useState(filterBy.flagExclude)\n  const [tag, setTag] = useState(filterBy.tagFilter?.tag || '')\n  const [tagValue, setTagValue] = useState(filterBy.tagFilter?.value || '')\n  const [readName, setReadName] = useState(filterBy.readName || '')\n  const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag)\n\n  const site = 'https://broadinstitute.github.io/picard/explain-flags.html'\n\n  return (\n    <Dialog open onClose={handleClose} title=\"Filter options\">\n      <DialogContent>\n        <Typography>\n          Set filter bitmask options. Refer to <Link href={site}>{site}</Link>{' '}\n          for details\n        </Typography>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <div style={{ display: 'flex' }}>\n            <div>\n              <Typography>Read must have ALL these flags</Typography>\n              <Bitmask flag={flagInclude} setFlag={setFlagInclude} />\n            </div>\n            <div>\n              <Typography>Read must have NONE of these flags</Typography>\n              <Bitmask flag={flagExclude} setFlag={setFlagExclude} />\n            </div>\n          </div>\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>\n            Filter by tag name and value. Use * in the value field to get all\n            reads containing any value for that tag. Example: filter tag name SA\n            with value * to get all split/supplementary reads. Other examples\n            include HP for haplotype, or RG for read group\n          </Typography>\n          <TextField\n            className={classes.field}\n            value={tag}\n            onChange={event => {\n              setTag(event.target.value)\n            }}\n            placeholder=\"Enter tag name\"\n            error={tag.length === 2 && !validTag}\n            helperText={tag.length === 2 && !validTag ? 'Not a valid tag' : ''}\n            slotProps={{\n              htmlInput: {\n                maxLength: 2,\n              },\n            }}\n          />\n          <TextField\n            className={classes.field}\n            value={tagValue}\n            onChange={event => {\n              setTagValue(event.target.value)\n            }}\n            placeholder=\"Enter tag value\"\n          />\n        </Paper>\n        <Paper className={classes.paper} variant=\"outlined\">\n          <Typography>Filter by read name</Typography>\n          <TextField\n            className={classes.field}\n            value={readName}\n            onChange={event => {\n              setReadName(event.target.value)\n            }}\n            placeholder=\"Enter read name\"\n          />\n        </Paper>\n        <DialogActions>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            autoFocus\n            type=\"submit\"\n            onClick={() => {\n              model.setFilterBy({\n                flagInclude,\n                flagExclude,\n                readName,\n                tagFilter:\n                  tag !== ''\n                    ? {\n                        tag,\n                        value: tagValue,\n                      }\n                    : undefined,\n              })\n              handleClose()\n            }}\n          >\n            Submit\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              handleClose()\n            }}\n          >\n            Cancel\n          </Button>\n        </DialogActions>\n      </DialogContent>\n    </Dialog>\n  )\n})\n\nexport default FilterByTagDialog\n","import { getPath } from '@mui/system/style';\nimport { alpha } from '@mui/system/colorManipulator';\nconst getTextDecoration = ({\n  theme,\n  ownerState\n}) => {\n  const transformedColor = ownerState.color;\n  const color = getPath(theme, `palette.${transformedColor}`, false) || ownerState.color;\n  const channelColor = getPath(theme, `palette.${transformedColor}Channel`);\n  if ('vars' in theme && channelColor) {\n    return `rgba(${channelColor} / 0.4)`;\n  }\n  return alpha(color, 0.4);\n};\nexport default getTextDecoration;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { alpha } from '@mui/system/colorManipulator';\nimport elementTypeAcceptingRef from '@mui/utils/elementTypeAcceptingRef';\nimport composeClasses from '@mui/utils/composeClasses';\nimport isFocusVisible from '@mui/utils/isFocusVisible';\nimport capitalize from \"../utils/capitalize.js\";\nimport { styled, useTheme } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport createSimplePaletteValueFilter from \"../utils/createSimplePaletteValueFilter.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Typography from \"../Typography/index.js\";\nimport linkClasses, { getLinkUtilityClass } from \"./linkClasses.js\";\nimport getTextDecoration from \"./getTextDecoration.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst v6Colors = {\n  primary: true,\n  secondary: true,\n  error: true,\n  info: true,\n  success: true,\n  warning: true,\n  textPrimary: true,\n  textSecondary: true,\n  textDisabled: true\n};\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    component,\n    focusVisible,\n    underline\n  } = ownerState;\n  const slots = {\n    root: ['root', `underline${capitalize(underline)}`, component === 'button' && 'button', focusVisible && 'focusVisible']\n  };\n  return composeClasses(slots, getLinkUtilityClass, classes);\n};\nconst LinkRoot = styled(Typography, {\n  name: 'MuiLink',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`underline${capitalize(ownerState.underline)}`], ownerState.component === 'button' && styles.button];\n  }\n})(memoTheme(({\n  theme\n}) => {\n  return {\n    variants: [{\n      props: {\n        underline: 'none'\n      },\n      style: {\n        textDecoration: 'none'\n      }\n    }, {\n      props: {\n        underline: 'hover'\n      },\n      style: {\n        textDecoration: 'none',\n        '&:hover': {\n          textDecoration: 'underline'\n        }\n      }\n    }, {\n      props: {\n        underline: 'always'\n      },\n      style: {\n        textDecoration: 'underline',\n        '&:hover': {\n          textDecorationColor: 'inherit'\n        }\n      }\n    }, {\n      props: ({\n        underline,\n        ownerState\n      }) => underline === 'always' && ownerState.color !== 'inherit',\n      style: {\n        textDecorationColor: 'var(--Link-underlineColor)'\n      }\n    }, ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({\n      props: {\n        underline: 'always',\n        color\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette[color].mainChannel} / 0.4)` : alpha(theme.palette[color].main, 0.4)\n      }\n    })), {\n      props: {\n        underline: 'always',\n        color: 'textPrimary'\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)\n      }\n    }, {\n      props: {\n        underline: 'always',\n        color: 'textSecondary'\n      },\n      style: {\n        '--Link-underlineColor': theme.vars ? `rgba(${theme.vars.palette.text.secondaryChannel} / 0.4)` : alpha(theme.palette.text.secondary, 0.4)\n      }\n    }, {\n      props: {\n        underline: 'always',\n        color: 'textDisabled'\n      },\n      style: {\n        '--Link-underlineColor': (theme.vars || theme).palette.text.disabled\n      }\n    }, {\n      props: {\n        component: 'button'\n      },\n      style: {\n        position: 'relative',\n        WebkitTapHighlightColor: 'transparent',\n        backgroundColor: 'transparent',\n        // Reset default value\n        // We disable the focus ring for mouse, touch and keyboard users.\n        outline: 0,\n        border: 0,\n        margin: 0,\n        // Remove the margin in Safari\n        borderRadius: 0,\n        padding: 0,\n        // Remove the padding in Firefox\n        cursor: 'pointer',\n        userSelect: 'none',\n        verticalAlign: 'middle',\n        MozAppearance: 'none',\n        // Reset\n        WebkitAppearance: 'none',\n        // Reset\n        '&::-moz-focus-inner': {\n          borderStyle: 'none' // Remove Firefox dotted outline.\n        },\n        [`&.${linkClasses.focusVisible}`]: {\n          outline: 'auto'\n        }\n      }\n    }]\n  };\n}));\nconst Link = /*#__PURE__*/React.forwardRef(function Link(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiLink'\n  });\n  const theme = useTheme();\n  const {\n    className,\n    color = 'primary',\n    component = 'a',\n    onBlur,\n    onFocus,\n    TypographyClasses,\n    underline = 'always',\n    variant = 'inherit',\n    sx,\n    ...other\n  } = props;\n  const [focusVisible, setFocusVisible] = React.useState(false);\n  const handleBlur = event => {\n    if (!isFocusVisible(event.target)) {\n      setFocusVisible(false);\n    }\n    if (onBlur) {\n      onBlur(event);\n    }\n  };\n  const handleFocus = event => {\n    if (isFocusVisible(event.target)) {\n      setFocusVisible(true);\n    }\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n  const ownerState = {\n    ...props,\n    color,\n    component,\n    focusVisible,\n    underline,\n    variant\n  };\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(LinkRoot, {\n    color: color,\n    className: clsx(classes.root, className),\n    classes: TypographyClasses,\n    component: component,\n    onBlur: handleBlur,\n    onFocus: handleFocus,\n    ref: ref,\n    ownerState: ownerState,\n    variant: variant,\n    ...other,\n    sx: [...(v6Colors[color] === undefined ? [{\n      color\n    }] : []), ...(Array.isArray(sx) ? sx : [sx])],\n    style: {\n      ...other.style,\n      ...(underline === 'always' && color !== 'inherit' && !v6Colors[color] && {\n        '--Link-underlineColor': getTextDecoration({\n          theme,\n          ownerState\n        })\n      })\n    }\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Link.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the link.\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['primary', 'secondary', 'success', 'error', 'info', 'warning', 'textPrimary', 'textSecondary', 'textDisabled']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: elementTypeAcceptingRef,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  style: PropTypes.object,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * `classes` prop applied to the [`Typography`](https://mui.com/material-ui/api/typography/) element.\n   */\n  TypographyClasses: PropTypes.object,\n  /**\n   * Controls when the link should have an underline.\n   * @default 'always'\n   */\n  underline: PropTypes.oneOf(['always', 'hover', 'none']),\n  /**\n   * Applies the theme typography styles.\n   * @default 'inherit'\n   */\n  variant: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['body1', 'body2', 'button', 'caption', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'inherit', 'overline', 'subtitle1', 'subtitle2']), PropTypes.string])\n} : void 0;\nexport default Link;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getLinkUtilityClass(slot) {\n  return generateUtilityClass('MuiLink', slot);\n}\nconst linkClasses = generateUtilityClasses('MuiLink', ['root', 'underlineNone', 'underlineHover', 'underlineAlways', 'button', 'focusVisible']);\nexport default linkClasses;"],"names":["useStyles","makeStyles","theme","paper","padding","spacing","margin","field","flagNames","Bitmask","props","flag","setFlag","React","TextField","type","value","onChange","event","target","map","name","index","val","key","checked","Boolean","htmlFor","observer","model","handleClose","classes","filterBy","flagInclude","setFlagInclude","useState","flagExclude","setFlagExclude","tag","setTag","tagFilter","tagValue","setTagValue","readName","setReadName","validTag","exec","site","Dialog","open","onClose","title","DialogContent","Typography","Link","href","Paper","className","variant","style","display","placeholder","error","length","helperText","slotProps","htmlInput","maxLength","DialogActions","Button","color","autoFocus","onClick","setFilterBy","undefined","ownerState","transformedColor","channelColor","v6Colors","primary","secondary","info","success","warning","textPrimary","textSecondary","textDisabled","LinkRoot","styled","slot","overridesResolver","styles","root","capitalize","underline","component","button","memoTheme","variants","textDecoration","textDecorationColor","Object","entries","palette","filter","createSimplePaletteValueFilter","vars","mainChannel","main","text","primaryChannel","secondaryChannel","disabled","position","WebkitTapHighlightColor","backgroundColor","outline","border","borderRadius","cursor","userSelect","verticalAlign","MozAppearance","WebkitAppearance","borderStyle","linkClasses","focusVisible","inProps","ref","useTheme","onBlur","onFocus","TypographyClasses","sx","other","setFocusVisible","slots","composeClasses","useUtilityClasses","clsx","isFocusVisible","Array","isArray","getLinkUtilityClass"],"sourceRoot":""}