{"version":3,"file":"static/js/7348.40afbdc0.chunk.js","mappings":"iNAQA,MAAMA,GAAYC,EAAAA,EAAAA,KAAAA,CAAa,CAC7BC,QAAS,CACPC,QAAS,OACTC,MAAO,OACPC,SAAU,MACV,SAAU,CACRC,OAAQ,YACRC,KAAM,WA0CZ,GArCmCC,EAAAA,EAAAA,WAAS,UAAU,MACpDC,IAIA,MAAM,QAAEC,GAAYV,KACd,cAAEW,EAAa,gBAAEC,GAAoBH,EACrCI,GAAMC,EAAAA,EAAAA,QAAO,MACnB,OACEC,EAAAA,cAAA,OAAKC,UAAWN,EAAQR,SACtBa,EAAAA,cAAA,OACEF,IAAKA,EACLI,MAAO,CACLb,MAAO,OACPc,OAAQ,GACRC,cAAeP,OAAkBQ,EAAY,SAG9CT,EAAcU,KAAIC,GAOjBP,EAAAA,cAACQ,EAAAA,EAAO,CACNC,UAAWX,EACXY,IAAKH,EAAMI,cAAcC,QACzBlB,MAAOA,EACPkB,QAASL,EAAMI,cAAcC,aAMzC,IC9CM3B,GAAYC,EAAAA,EAAAA,KAAAA,EAAa2B,IAAS,CACtCC,YAAa,CACXC,WAAYF,EAAMG,QAAQC,UAAUC,KACpCC,OAAQ,GAEVC,UAAW,CACThC,QAAS,QAEXiC,QAAS,CACP/B,SAAU,OAEZgC,IAAK,CACHC,SAAU,gBAIRC,GAA4B/B,EAAAA,EAAAA,WAAS,UAAU,MACnDC,IAIA,MAAM,QAAEC,GAAYV,KACd,MAAEwC,GAAU/B,GACZ,cAAEgC,IAAkBC,EAAAA,EAAAA,QAAOjC,GACjC,OACEM,EAAAA,cAAA,OAAKC,UAAWN,EAAQ0B,SACtBrB,EAAAA,cAAA,OAAKC,UAAWN,EAAQ2B,KACrBG,EAAMnB,KAAI,CAACsB,EAAMC,KAChB,MAAM,eAAEC,GAAmBJ,EAAcK,YAAYH,EAAKI,MACpDC,EAAgBjC,EAAAA,cAAC8B,EAAc,CAACpB,IAAKkB,EAAKM,GAAIxC,MAAOkC,IAC3D,OAAOC,IAAQJ,EAAMU,OAAS,EAC1BF,EACA,CACEA,EACAjC,EAAAA,cAAA,OACEU,IAAK,GAAGkB,EAAKM,aACbjC,UAAWN,EAAQmB,cAEtB,KAKf,IAkBA,GAhB4BrB,EAAAA,EAAAA,WAAS,UAAU,MAC7CC,IAIA,MAAM,QAAEC,GAAYV,IACpB,OACEe,EAAAA,cAAA,WACEA,EAAAA,cAAA,OAAKC,UAAWN,EAAQyB,WACtBpB,EAAAA,cAACwB,EAAyB,CAAC9B,MAAOA,IAClCM,EAAAA,cAACoC,EAA0B,CAAC1C,MAAOA,KAI3C,G","sources":["../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitViewOverlay.tsx","../../../plugins/breakpoint-split-view/src/BreakpointSplitView/components/BreakpointSplitView.tsx"],"sourcesContent":["import React, { useRef } from 'react'\n\nimport { makeStyles } from 'tss-react/mui'\n\nimport Overlay from './Overlay'\nimport { BreakpointViewModel } from '../model'\nimport { observer } from 'mobx-react'\n\nconst useStyles = makeStyles()({\n  overlay: {\n    display: 'flex',\n    width: '100%',\n    gridArea: '1/1',\n    '& path': {\n      cursor: 'crosshair',\n      fill: 'none',\n    },\n  },\n})\n\nconst BreakpointSplitViewOverlay = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { matchedTracks, interactToggled } = model\n  const ref = useRef(null)\n  return (\n    <div className={classes.overlay}>\n      <svg\n        ref={ref}\n        style={{\n          width: '100%',\n          zIndex: 10,\n          pointerEvents: interactToggled ? undefined : 'none',\n        }}\n      >\n        {matchedTracks.map(track => (\n          // note: we must pass ref down, because:\n          // - the child component needs to getBoundingClientRect on the this\n          // components SVG, and...\n          // - we cannot rely on using getBoundingClientRect in this component\n          // to make sure this works because if it gets shifted around by\n          // another element, this will not re-render necessarily\n          <Overlay\n            parentRef={ref}\n            key={track.configuration.trackId}\n            model={model}\n            trackId={track.configuration.trackId}\n          />\n        ))}\n      </svg>\n    </div>\n  )\n})\n\nexport default BreakpointSplitViewOverlay\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { getEnv } from '@jbrowse/core/util'\nimport { makeStyles } from 'tss-react/mui'\n\n// locals\nimport { BreakpointViewModel } from '../model'\nimport BreakpointSplitViewOverlay from './BreakpointSplitViewOverlay'\n\nconst useStyles = makeStyles()(theme => ({\n  viewDivider: {\n    background: theme.palette.secondary.main,\n    height: 3,\n  },\n  container: {\n    display: 'grid',\n  },\n  content: {\n    gridArea: '1/1',\n  },\n  rel: {\n    position: 'relative',\n  },\n}))\n\nconst BreakpointSplitViewLevels = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  const { views } = model\n  const { pluginManager } = getEnv(model)\n  return (\n    <div className={classes.content}>\n      <div className={classes.rel}>\n        {views.map((view, idx) => {\n          const { ReactComponent } = pluginManager.getViewType(view.type)!\n          const viewComponent = <ReactComponent key={view.id} model={view} />\n          return idx === views.length - 1\n            ? viewComponent\n            : [\n                viewComponent,\n                <div\n                  key={`${view.id}-divider`}\n                  className={classes.viewDivider}\n                />,\n              ]\n        })}\n      </div>\n    </div>\n  )\n})\n\nconst BreakpointSplitView = observer(function ({\n  model,\n}: {\n  model: BreakpointViewModel\n}) {\n  const { classes } = useStyles()\n  return (\n    <div>\n      <div className={classes.container}>\n        <BreakpointSplitViewLevels model={model} />\n        <BreakpointSplitViewOverlay model={model} />\n      </div>\n    </div>\n  )\n})\n\nexport default BreakpointSplitView\n"],"names":["useStyles","makeStyles","overlay","display","width","gridArea","cursor","fill","observer","model","classes","matchedTracks","interactToggled","ref","useRef","React","className","style","zIndex","pointerEvents","undefined","map","track","Overlay","parentRef","key","configuration","trackId","theme","viewDivider","background","palette","secondary","main","height","container","content","rel","position","BreakpointSplitViewLevels","views","pluginManager","getEnv","view","idx","ReactComponent","getViewType","type","viewComponent","id","length","BreakpointSplitViewOverlay"],"sourceRoot":""}