{"version":3,"file":"static/js/7013.1374d1d7.chunk.js","mappings":"8NAcO,SAASA,EAAaC,GAC3B,MAAMC,EAAW,IAAIC,IACrB,IAAK,MAAMC,KAASH,EAAO,CACzB,MAAMI,EAAI,IAAIC,EAAAA,EAAcF,GACtBG,EAAUF,EAAEG,IAAI,WACtB,IAAIC,EAASP,EAASM,IAAID,GACrBE,IACHA,EAAS,GACTP,EAASQ,IAAIH,EAASE,IAGxBA,EAAOE,KAAKN,EACd,CAGA,IAAK,MAAMO,KAAeV,EAASW,SACjCD,EAAYE,MAAK,CAACC,EAAGC,IAAMD,EAAEP,IAAI,SAAWQ,EAAER,IAAI,WAGpD,OAAON,CACT,CAEe,MAAMe,UAA0BC,EAAAA,uBAG7CC,WAAAA,CACEC,EACAC,EACAC,GAEAC,MAAMH,EAAMC,EAAeC,GAC3B,MAAME,GAAQC,EAAAA,EAAAA,gBAAeL,EAAM,YACnCM,KAAKxB,SAAWF,EAAawB,EAC/B,CAEA,iBAAMG,GACJ,MAAO,IAAID,KAAKxB,SAAS0B,OAC3B,CAEA,uBAAMC,GACJ,MAAO,IAAIH,KAAKxB,SAASW,UAAUiB,KAAIC,IAAgB,CACrDxB,QAASwB,EAAa,GAAIvB,IAAI,WAC9BwB,QAASD,EAAa,GAAIvB,IAAI,cAElC,CAEAyB,WAAAA,CAAYC,GACV,MAAM,QAAE3B,EAAO,MAAE4B,EAAK,IAAEC,GAAQF,EAEhC,OAAOG,EAAAA,EAAAA,mBAA0BC,UAC/B,MAAMpC,EAAWwB,KAAKxB,SAASM,IAAID,IAAY,GAC/C,IAAK,MAAMF,KAAKH,EACVG,EAAEG,IAAI,OAAS2B,GAAS9B,EAAEG,IAAI,SAAW4B,GAC3CG,EAASC,KAAKnC,GAGlBkC,EAASE,UAAU,GAEvB,CAEAC,aAAAA,GAAuC,E,0GChE1B,MAAMC,UACX1B,EAAAA,QAQRgB,WAAAA,CAAYC,GACV,OAAOG,EAAAA,EAAAA,mBAA0BC,UAC/B,MAGMM,SAHcC,EAAAA,EAAAA,GAClBtB,MAAMU,YAAYC,GAAQY,MAAKC,EAAAA,EAAAA,QAEd,GACnBR,EAASC,KACP,IAAIlC,EAAAA,EAAc,IACbsC,EAAKI,SACRC,SAAU,GAAGL,EAAKM,QAAQhB,EAAOC,SAASD,EAAOE,MACjDA,IAAKF,EAAOE,IACZD,MAAOD,EAAOC,MACdgB,IAAKP,EACFpC,IAAI,OACJ4C,MACCC,KAAKC,IAAIpB,EAAOC,MAAQS,EAAKpC,IAAI,SAAU,GAC3C6C,KAAKC,IAAIpB,EAAOE,IAAMQ,EAAKpC,IAAI,SAAU,OAKjD+B,EAASE,UAAU,GAEvB,CAKA,gBAAMc,GACJ,MAAMC,EAAU,GAGhB,IAAK,MAAOjD,EAASL,KAAawB,KAAKxB,SAAU,CAC/C,IAAIuD,EAGJ,IAAK,MAAMC,KAAWxD,EAElBuD,GACAA,EAAcrB,KAAOsB,EAAQlD,IAAI,UACjCiD,EAActB,OAASuB,EAAQlD,IAAI,OAEnCiD,EAAcrB,IAAMsB,EAAQlD,IAAI,QAE5BiD,GACFD,EAAQ7C,KAAK8C,GAEfA,EAAgB,CACdlD,UACA4B,MAAOuB,EAAQlD,IAAI,SACnB4B,IAAKsB,EAAQlD,IAAI,SAInBiD,GACFD,EAAQ7C,KAAK8C,EAEjB,CAEA,OAAOD,CACT,CAOAd,aAAAA,GAAuC,E","sources":["../../../plugins/config/src/FromConfigAdapter/FromConfigAdapter.ts","../../../plugins/config/src/FromConfigSequenceAdapter/FromConfigSequenceAdapter.ts"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport SimpleFeature, {\n  Feature,\n  SimpleFeatureSerialized,\n} from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\n\nexport function makeFeatures(fdata: SimpleFeatureSerialized[]) {\n  const features = new Map<string, Feature[]>()\n  for (const entry of fdata) {\n    const f = new SimpleFeature(entry)\n    const refName = f.get('refName') as string\n    let bucket = features.get(refName)\n    if (!bucket) {\n      bucket = []\n      features.set(refName, bucket)\n    }\n\n    bucket.push(f)\n  }\n\n  // sort the features on each reference sequence by start coordinate\n  for (const refFeatures of features.values()) {\n    refFeatures.sort((a, b) => a.get('start') - b.get('start'))\n  }\n\n  return features\n}\n\nexport default class FromConfigAdapter extends BaseFeatureDataAdapter {\n  protected features: Map<string, Feature[]>\n\n  constructor(\n    conf: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(conf, getSubAdapter, pluginManager)\n    const feats = readConfObject(conf, 'features') as SimpleFeatureSerialized[]\n    this.features = makeFeatures(feats)\n  }\n\n  async getRefNames() {\n    return [...this.features.keys()]\n  }\n\n  async getRefNameAliases() {\n    return [...this.features.values()].map(featureArray => ({\n      refName: featureArray[0]!.get('refName'),\n      aliases: featureArray[0]!.get('aliases'),\n    }))\n  }\n\n  getFeatures(region: NoAssemblyRegion) {\n    const { refName, start, end } = region\n\n    return ObservableCreate<Feature>(async observer => {\n      const features = this.features.get(refName) || []\n      for (const f of features) {\n        if (f.get('end') > start && f.get('start') < end) {\n          observer.next(f)\n        }\n      }\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { region } */): void {}\n}\n","import SimpleFeature, { Feature } from '@jbrowse/core/util/simpleFeature'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { NoAssemblyRegion } from '@jbrowse/core/util/types'\nimport { toArray } from 'rxjs/operators'\nimport { RegionsAdapter } from '@jbrowse/core/data_adapters/BaseAdapter'\n\n// locals\nimport FromConfigAdapter from '../FromConfigAdapter/FromConfigAdapter'\nimport { firstValueFrom } from 'rxjs'\n\nexport default class FromConfigSequenceAdapter\n  extends FromConfigAdapter\n  implements RegionsAdapter\n{\n  /**\n   * Fetch features for a certain region\n   * @param region - Region\n   * @returns Observable of Feature objects in the region\n   */\n  getFeatures(region: NoAssemblyRegion) {\n    return ObservableCreate<Feature>(async observer => {\n      const feats = await firstValueFrom(\n        super.getFeatures(region).pipe(toArray()),\n      )\n      const feat = feats[0]!\n      observer.next(\n        new SimpleFeature({\n          ...feat.toJSON(),\n          uniqueId: `${feat.id()}:${region.start}-${region.end}`,\n          end: region.end,\n          start: region.start,\n          seq: feat\n            .get('seq')\n            .slice(\n              Math.max(region.start - feat.get('start'), 0),\n              Math.max(region.end - feat.get('start'), 0),\n            ),\n        }),\n      )\n\n      observer.complete()\n    })\n  }\n\n  /**\n   * Get refName, start, and end for all features after collapsing any overlaps\n   */\n  async getRegions() {\n    const regions = []\n\n    // recall: features are stored in this object sorted by start coordinate\n    for (const [refName, features] of this.features) {\n      let currentRegion:\n        | { start: number; end: number; refName: string }\n        | undefined\n      for (const feature of features) {\n        if (\n          currentRegion &&\n          currentRegion.end >= feature.get('start') &&\n          currentRegion.start <= feature.get('end')\n        ) {\n          currentRegion.end = feature.get('end')\n        } else {\n          if (currentRegion) {\n            regions.push(currentRegion)\n          }\n          currentRegion = {\n            refName,\n            start: feature.get('start'),\n            end: feature.get('end'),\n          }\n        }\n      }\n      if (currentRegion) {\n        regions.push(currentRegion)\n      }\n    }\n\n    return regions\n  }\n\n  /**\n   * called to provide a hint that data tied to a certain region\n   * will not be needed for the foreseeable future and can be purged\n   * from caches, etc\n   */\n  freeResources(/* { region } */): void {}\n}\n"],"names":["makeFeatures","fdata","features","Map","entry","f","SimpleFeature","refName","get","bucket","set","push","refFeatures","values","sort","a","b","FromConfigAdapter","BaseFeatureDataAdapter","constructor","conf","getSubAdapter","pluginManager","super","feats","readConfObject","this","getRefNames","keys","getRefNameAliases","map","featureArray","aliases","getFeatures","region","start","end","ObservableCreate","async","observer","next","complete","freeResources","FromConfigSequenceAdapter","feat","firstValueFrom","pipe","toArray","toJSON","uniqueId","id","seq","slice","Math","max","getRegions","regions","currentRegion","feature"],"sourceRoot":""}