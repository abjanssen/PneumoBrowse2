{"version":3,"file":"static/js/8929.cad767db.chunk.js","mappings":"iMA2BA,SAASA,EACPC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,MAAO,CACLR,QACAC,SACAC,OACAE,QACAC,SACAC,OACAG,OAAoB,MAAZN,GAAmB,EAAI,EAC/BO,MAAO,CACLF,aACAG,SAAUC,KAAKC,IAAIX,EAAOD,EAAQK,EAAOD,GACzCS,YAAa,EACbC,GAAIR,GAGV,CC7Ce,MAAMS,UAAqBC,EAAAA,QACxC,cAAMC,CAASC,GACb,MAAMC,GAAMC,EAAAA,EAAAA,cAAaC,KAAKC,QAAQ,iBAAkBD,KAAKE,eAE7D,OD2CG,SAAuBC,GAC5B,IAAIC,EAAS,GACTC,EAAU,EACVC,EAAQ,EACRC,EAAS,GACTC,EAAS,GACTC,EAAW,GACXC,EAAU,EACVC,EAAQ,EACRC,EAAc,EACd3B,EAAQ,GACZ,MAAM4B,EAAU,GAEhB,IAAIC,EAAa,EACjB,MAAMC,EAAU,IAAIC,YAAY,QAChC,KAAOF,EAAaX,EAAOc,QAAQ,CACjC,MAAMC,EAAIf,EAAOgB,QAAQ,KAAML,GAC/B,IAAW,IAAPI,EACF,MAEF,MAAME,EAAIjB,EAAOkB,SAASP,EAAYI,GAEtCJ,EAAaI,EAAI,EACjB,MACMI,EAHIP,EAAQQ,OAAOH,GAAGI,OAEZC,WAAW,IAAK,MACZC,MAAM,MAE1B,GAAiB,UAAbJ,EAAM,GAAgB,CAuCxB,GArCIrC,GACF4B,EAAQc,KACNlD,EACE8B,EACAG,EACAC,EACAF,EACAL,EACAC,EACAC,EACArB,EACA2B,IAkBNR,EAASkB,EAAM,GACfjB,GAAWiB,EAAM,GACjBhB,GAASgB,EAAM,GACff,EAASe,EAAM,GACfd,EAASc,EAAM,GACfb,EAAWa,EAAM,GACjBZ,GAAWY,EAAM,IACjBX,GAASW,EAAM,IACE,MAAbb,EAAkB,CACpB,MAAMmB,EAAMlB,EACZA,GAAWF,EAASG,EACpBA,GAASH,EAASoB,CACpB,CAGAhB,EAAc,EACd3B,EAAQ,EACV,KAAO,CAQL,MAAM4C,GAA2BP,EAAM,IAAO,EACxCQ,EAAiBR,EAAML,OAAS,GAAKK,EAAM,GAAM,EACjDS,EAAgBT,EAAML,OAAS,GAAKK,EAAM,GAAM,EAEtB,IAA5BO,IACFjB,IAAgBiB,EAChB5C,GAAS,GAAG4C,MAEQ,IAAlBE,IACF9C,GAAS,GAAG8C,MAES,IAAnBD,IACF7C,GAAS,GAAG6C,KAEhB,CACF,CAgBA,OAbI7C,GACFR,EACE8B,EACAG,EACAC,EACAF,EACAL,EACAC,EACAC,EACArB,EACA2B,GAGGC,CACT,CC7JWmB,OADWC,EAAAA,EAAAA,oBAAmBnC,EAAKD,GAE5C,E,uJCqFF,SAASqC,EAAaC,GACpB,MAAOC,EAAUC,GAAaF,EAAOG,QACnC,EAAEF,EAAUC,IAAaE,EAAOC,KAAY,CAC1CJ,EAAWG,EAAQC,EACnBH,EAAYG,IAEd,CAAC,EAAG,IAEN,OAAOJ,EAAWC,CACpB,CClFA,MAAM,WAAEI,GAAeC,EAAAA,GAMR,MAAM/C,UAAmBgD,EAAAA,uBAGtC,oBAA6B,CAAC,cAAe,eAE7C,WAAMC,CAAM/C,GAOV,OANKG,KAAK6C,SACR7C,KAAK6C,OAAS7C,KAAKJ,SAASC,GAAMiD,OAAOC,IAEvC,MADA/C,KAAK6C,YAASG,EACRD,CAAC,KAGJ/C,KAAK6C,MACd,CAEA,cAAMjD,CAASC,GACb,MAAMoD,EAAKjD,KAAKE,cACVgD,GAAcnD,EAAAA,EAAAA,cAAaC,KAAKC,QAAQ,eAAgBgD,GACxDE,QAAYlB,EAAAA,EAAAA,oBAAmBiB,EAAarD,GAClD,OAAOuD,EAAAA,EAAAA,IAAgBD,EAAKE,EAAAA,GAC9B,CAEA,uBAAMC,GAIJ,OAAO,CACT,CAEAC,gBAAAA,GACE,MAAMC,EAAgBxD,KAAKC,QAAQ,iBACnC,OAA6B,IAAzBuD,EAAcvC,OAGT,CAFOjB,KAAKC,QAAQ,iBACZD,KAAKC,QAAQ,mBAGvBuD,CACT,CAEA,iBAAMC,CAAY5D,EAAoB,CAAC,GAErC,MAAM6D,EAAK7D,EAAK8D,UAAU,GAAGC,aACvBC,QAAc7D,KAAK4C,MAAM/C,GAEzBiE,EAAM9D,KAAKuD,mBAAmBpC,QAAQuC,GAC5C,IAAa,IAATI,EAAY,CACd,MAAMC,EAAM,IAAIC,IAChB,IAAK,MAAMC,KAAQJ,EACjBE,EAAIG,IAAY,IAARJ,EAAYG,EAAKvF,MAAQuF,EAAKnF,OAExC,MAAO,IAAIiF,EACb,CAEA,OADAI,QAAQC,KAAK,wCACN,EACT,CAEAC,WAAAA,CAAYC,EAAezE,EAAmB,CAAC,GAC7C,OAAO0E,EAAAA,EAAAA,mBAA0BC,UAC/B,IAAIC,QAAmBzE,KAAK4C,MAAM/C,GAClC,MAAM,OAAE6E,GAAW7E,EAIf6E,GAAgD,uBAAtCC,EAAAA,EAAAA,gBAAeD,EAAQ,aACnCD,EDtCD,SAA0BG,GAC/B,MAAMC,EAA+D,CAAC,EACtE,IAAK,MAAMC,KAASF,EAAK,CACvB,MAEMG,EAAM,GAFED,EAAMpG,SACLoG,EAAMhG,QAEhB+F,EAASE,KACZF,EAASE,GAAO,CAAEC,MAAO,GAAIC,IAAK,KAEpCJ,EAASE,GAAKC,MAAMrD,KAAKmD,EAAM1F,MAAMI,aAAe,GACpDqF,EAASE,GAAKE,IAAItD,KAAKmD,EAAM1F,MAAMC,UAAY,EACjD,CAEA,MAAM6F,EAAeC,OAAOC,YAC1BD,OAAOE,QAAQR,GAAUS,KAAI,EAAEP,EAAKQ,KAE3B,CAACR,EAAK7C,GADAsD,EAAAA,EAAAA,IAAID,EAAIP,MAAOO,EAAIN,UAIpC,IAAK,MAAMH,KAASF,EAAK,CACvB,MAEMG,EAAM,GAFED,EAAMpG,SACLoG,EAAMhG,QAErBgG,EAAM1F,MAAMqG,UAAYP,EAAaH,EACvC,CAEA,IAAIW,EAAM,IACNnG,EAAM,EACV,IAAK,MAAMuF,KAASF,EAClBc,EAAMpG,KAAKoG,IAAIZ,EAAM1F,MAAMqG,WAAa,EAAGC,GAC3CnG,EAAMD,KAAKC,IAAIuF,EAAM1F,MAAMqG,WAAa,EAAGlG,GAE7C,IAAK,MAAMuF,KAASF,EAAK,CACvB,MAAMxD,EAAI0D,EAAM1F,MAAMqG,WAAa,EACnCX,EAAM1F,MAAMqG,WAAarE,EAAIsE,IAAQnG,EAAMmG,EAC7C,CAEA,OAAOd,CACT,CCAqBe,CAAiBlB,IAEhC,MAAMjB,EAAgBxD,KAAKuD,oBAInBqC,MAAOjH,EAAQkH,IAAKjH,EAAMkH,QAASC,EAAI,aAAEnC,GAAiBU,EAC5D0B,EAAQxC,EAAcrC,QAAQyC,GAI9BqC,EAAiB,IAAVD,GACE,IAAXA,IACF7B,QAAQC,KAAK,GAAGR,+BAChBsC,EAASC,YAGX,IAAK,IAAIC,EAAI,EAAGA,EAAI3B,EAAWxD,OAAQmF,IAAK,CAC1C,MAAMC,EAAI5B,EAAW2B,GACrB,IAAIR,EAAQ,EACRC,EAAM,EACNC,EAAU,GACVQ,EAAW,GACXC,EAAY,EACZC,EAAU,EAEVP,GACFL,EAAQS,EAAE1H,OACVkH,EAAMQ,EAAEzH,KACRkH,EAAUO,EAAE3H,MACZ4H,EAAWD,EAAEvH,MACbyH,EAAYF,EAAEtH,OACdyH,EAAUH,EAAErH,OAEZ4G,EAAQS,EAAEtH,OACV8G,EAAMQ,EAAErH,KACR8G,EAAUO,EAAEvH,MACZwH,EAAWD,EAAE3H,MACb6H,EAAYF,EAAE1H,OACd6H,EAAUH,EAAEzH,MAEd,MAAM,MAAEQ,EAAK,OAAED,GAAWkH,EAC1B,GAAIP,IAAYC,IAAQU,EAAAA,EAAAA,IAAe9H,EAAQC,EAAMgH,EAAOC,GAAM,CAChE,MAAM,WAAE3G,EAAa,EAAC,SAAEG,EAAW,EAAC,GAAEI,KAAOiH,GAAStH,EAEtD,IAAIuH,EAAQvH,EAAMK,GACdL,EAAMK,KACJwG,IAAoB,IAAZ9G,EACVwH,GAAQC,EAAAA,EAAAA,IAAUnE,EAAWrD,EAAMK,KAAKoH,KAAK,IACpCZ,IACTU,GAAQG,EAAAA,EAAAA,IAAe1H,EAAMK,MAIjCyG,EAASa,KACP,IAAIC,EAAAA,EAAe,CACjBC,SAAUb,EAAIxC,EACdA,eACAgC,QACAC,MACAqB,KAAM,QACNpB,UACA3G,YACGuH,EACHC,QACAQ,UAAWf,EACXgB,SAAUlI,EAAaG,EACvBH,aACAG,WACAgI,KAAM,CACJzB,MAAOW,EACPV,IAAKW,EACLV,QAASQ,EACT1C,aAAcJ,GAAeyC,MAIrC,CACF,CAEAC,EAASC,UAAU,GAEvB,CAEAmB,aAAAA,GAAsC,E,6DC/KxC,MAAM,cAAEC,GAAkB7E,EAAAA,GAEX,MAAMsE,UAAuBQ,EAAAA,cAC1CC,GAAAA,CAAIC,GACF,MAAY,eAARA,EACKH,EAAcvH,KAAKyH,IAAI,UAEzBE,MAAMF,IAAIC,EACnB,E,yGCLK,SAASE,EAASC,GACvB,OAAO,IAAIC,IACTD,EACGnG,MAAM,cACNqG,QAAOC,KAAOA,GAAKA,EAAEC,WAAW,OAChC3C,KAAI4C,IACH,MAAOpC,EAASF,EAAOC,EAAKsC,EAAMC,EAAOjJ,GAAU+I,EAAKxG,MAAM,MAC9D,MAAO,CACLyG,EACA,CACErC,UACAF,OAAQA,EACRC,KAAMA,EACNuC,OAAQA,EACRD,OACAhJ,OAAmB,MAAXA,GAAkB,EAAI,GAEjC,IAGT,CAEOqF,eAAe6D,EAASC,EAAyBzI,GACtD,MAAMsD,QAAYlB,EAAAA,EAAAA,oBAAmBqG,EAAMzI,GAE3C,OADgB,IAAImB,YAAY,QACjBO,OAAO4B,EACxB,CAEO,SAASqC,EAAI+C,EAAanH,GAC/B,OAAOmH,EAAEjD,KAAI,CAACvC,EAAGqD,IAAM,CAACrD,EAAG3B,EAAEgF,KAC/B,CAEO,SAAShD,EACdjD,EACAqI,GAEA,IAAI1H,EAAa,EACjB,MAAMuE,EAAe,GACftE,EAAU,IAAIC,YAAY,QAChC,KAAOF,EAAaX,EAAOc,QAAQ,CACjC,MAAMC,EAAIf,EAAOgB,QAAQ,KAAML,GAC/B,IAAW,IAAPI,EACF,MAEF,MAAME,EAAIjB,EAAOkB,SAASP,EAAYI,GAChCgH,EAAOnH,EAAQQ,OAAOH,GAAGI,OAC/B,GAAI0G,EAAM,CACR,MAAMpD,EAAQ0D,EAAGN,GACbpD,GACFO,EAAQ1D,KAAKmD,EAEjB,CAEAhE,EAAaI,EAAI,CACnB,CACA,OAAOmE,CACT,CAEO,SAAShC,EAAa6E,GAC3B,MACExJ,EAAM,CAENC,EACAC,EACAO,EACAL,EAAM,CAENC,EACAC,EACAE,EACAG,EACAG,KACGiJ,GACDP,EAAKxG,MAAM,MAWf,MAAO,CACL5C,QACAC,QAASA,EACTC,MAAOA,EACPN,QACAC,QAASA,EACTC,MAAOA,EACPO,OAAmB,MAAXA,GAAkB,EAAI,EAC9BC,MAAO,CACLF,YAAaA,EACbG,UAAWA,EACXG,aAAcA,KApBL2F,OAAOC,YAClBqD,EAAOnD,KAAIoD,IACT,MAAMrC,EAAIqC,EAAMvH,QAAQ,KAGxB,MAAO,CAFWuH,EAAMC,MAAM,EAAGtC,GACdqC,EAAMC,MAAMtC,EAAI,GACL,MAmBpC,CAEO,SAASO,EAAU3H,GACxB,MAAM2J,EAAM,GACZ,IAAK,IAAIxC,EAAInH,EAAMgC,OAAS,EAAGmF,GAAK,EAAGA,GAAK,EAAG,CAC7CwC,EAAIjH,KAAK1C,EAAMmH,IACf,MAAMyC,EAAK5J,EAAMmH,EAAI,GACV,MAAPyC,EACFD,EAAIjH,KAAK,KACO,MAAPkH,EACTD,EAAIjH,KAAK,KAETiH,EAAIjH,KAAKkH,EAEb,CACA,OAAOD,CACT,CAEO,SAAS9B,EAAe7H,GAC7B,OAAOA,EAAMwC,WAAW,IAAK,KAAKA,WAAW,IAAK,KAAKA,WAAW,IAAK,IACzE,C","sources":["../../../plugins/comparative-adapters/src/ChainAdapter/util.ts","../../../plugins/comparative-adapters/src/ChainAdapter/ChainAdapter.ts","../../../plugins/comparative-adapters/src/PAFAdapter/util.ts","../../../plugins/comparative-adapters/src/PAFAdapter/PAFAdapter.ts","../../../plugins/comparative-adapters/src/SyntenyFeature/index.ts","../../../plugins/comparative-adapters/src/util.ts"],"sourcesContent":["import type { Buffer } from 'buffer'\n\n/* adapted from chain2paf by Andrea Guarracino, license reproduced below\n *\n * MIT License\n *\n * Copyright (c) 2021 Andrea Guarracino\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nfunction generate_record(\n  qname: string,\n  qstart: number,\n  qend: number,\n  qstrand: string,\n  tname: string,\n  tstart: number,\n  tend: number,\n  cigar: string,\n  numMatches: number,\n) {\n  return {\n    qname,\n    qstart,\n    qend,\n    tname,\n    tstart,\n    tend,\n    strand: qstrand === '-' ? -1 : 1,\n    extra: {\n      numMatches,\n      blockLen: Math.max(qend - qstart, tend - tstart),\n      mappingQual: 0,\n      cg: cigar,\n    },\n  }\n}\n\nexport function paf_chain2paf(buffer: Buffer) {\n  let t_name = ''\n  let t_start = 0\n  let t_end = 0\n  let q_name = ''\n  let q_size = ''\n  let q_strand = ''\n  let q_start = 0\n  let q_end = 0\n  let num_matches = 0\n  let cigar = ''\n  const records = []\n\n  let blockStart = 0\n  const decoder = new TextDecoder('utf8')\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const l = decoder.decode(b).trim()\n    blockStart = n + 1\n    const l_tab = l.replaceAll(' ', '\\t') // There are CHAIN files with space-separated fields\n    const l_vec = l_tab.split('\\t')\n\n    if (l_vec[0] === 'chain') {\n      // Emit previous PAF row, if available\n      if (cigar) {\n        records.push(\n          generate_record(\n            q_name,\n            q_start,\n            q_end,\n            q_strand,\n            t_name,\n            t_start,\n            t_end,\n            cigar,\n            num_matches,\n          ),\n        )\n      }\n\n      // Save query/target information\n      // score -- chain score\n      // tName -- chromosome (reference sequence)\n      // tSize -- chromosome size (reference sequence)\n      // tStrand -- strand (reference sequence)\n      // tStart -- alignment start position (reference sequence)\n      // tEnd -- alignment end position (reference sequence)\n      // qName -- chromosome (query sequence)\n      // qSize -- chromosome size (query sequence)\n      // qStrand -- strand (query sequence)\n      // qStart -- alignment start position (query sequence)\n      // qEnd -- alignment end position (query sequence)\n      // id -- chain ID\n      t_name = l_vec[2]!\n      t_start = +l_vec[5]!\n      t_end = +l_vec[6]!\n      q_name = l_vec[7]!\n      q_size = l_vec[8]!\n      q_strand = l_vec[9]!\n      q_start = +l_vec[10]!\n      q_end = +l_vec[11]!\n      if (q_strand === '-') {\n        const tmp = q_start\n        q_start = +q_size - q_end\n        q_end = +q_size - tmp\n      }\n\n      // Initialize PAF fields\n      num_matches = 0\n      cigar = ''\n    } else {\n      // size -- the size of the ungapped alignment\n      //\n      // dt -- the difference between the end of this block and the beginning\n      //    of the next block (reference sequence)\n      //\n      // dq -- the difference between the end of this block and the beginning\n      //    of the next block (query sequence)\n      const size_ungapped_alignment = +l_vec[0]! || 0\n      const diff_in_target = l_vec.length > 1 ? +l_vec[1]! : 0\n      const diff_in_query = l_vec.length > 2 ? +l_vec[2]! : 0\n\n      if (size_ungapped_alignment !== 0) {\n        num_matches += +size_ungapped_alignment\n        cigar += `${size_ungapped_alignment}M`\n      }\n      if (diff_in_query !== 0) {\n        cigar += `${diff_in_query}I`\n      }\n      if (diff_in_target !== 0) {\n        cigar += `${diff_in_target}D`\n      }\n    }\n  }\n\n  // Emit last PAF row, if available\n  if (cigar) {\n    generate_record(\n      q_name,\n      q_start,\n      q_end,\n      q_strand,\n      t_name,\n      t_start,\n      t_end,\n      cigar,\n      num_matches,\n    )\n  }\n  return records\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util'\n\n// locals\nimport PAFAdapter from '../PAFAdapter/PAFAdapter'\nimport { paf_chain2paf } from './util'\n\nexport default class ChainAdapter extends PAFAdapter {\n  async setupPre(opts?: BaseOptions) {\n    const loc = openLocation(this.getConf('chainLocation'), this.pluginManager)\n    const buf = await fetchAndMaybeUnzip(loc, opts)\n    return paf_chain2paf(buf)\n  }\n}\n","import { zip } from '../util'\n\nexport interface PAFRecord {\n  qname: string\n  qstart: number\n  qend: number\n  tname: string\n  tstart: number\n  tend: number\n  strand: number\n  extra: {\n    cg?: string\n    blockLen?: number\n    mappingQual?: number\n    numMatches?: number\n    meanScore?: number\n  }\n}\n// based on \"weighted mean\" method from https://github.com/tpoorten/dotPlotly\n// License reproduced here\n//\n// MIT License\n\n// Copyright (c) 2017 Tom Poorten\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//\n// Notes: in the weighted mean longer alignments factor in more heavily of all\n// the fragments of a query vs the reference that it mapped to\n//\n// this uses a combined key query+'-'+ref to iteratively map all the alignments\n// that match a particular ref from a particular query (so 1d array of what\n// could be a 2d map)\n//\n// the result is a single number that says e.g. chr5 from human mapped to chr5\n// on mouse with 0.8 quality, and that0.8 is then attached to all the pieces of\n// chr5 on human that mapped to chr5 on mouse. if chr5 on human also more\n// weakly mapped to chr6 on mouse, then it would have another value e.g. 0.6.\n// this can show strong and weak levels of synteny, especially in polyploidy\n// situations\n\nexport function getWeightedMeans(ret: PAFRecord[]) {\n  const scoreMap: Record<string, { quals: number[]; len: number[] }> = {}\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    if (!scoreMap[key]) {\n      scoreMap[key] = { quals: [], len: [] }\n    }\n    scoreMap[key].quals.push(entry.extra.mappingQual || 1)\n    scoreMap[key].len.push(entry.extra.blockLen || 1)\n  }\n\n  const meanScoreMap = Object.fromEntries(\n    Object.entries(scoreMap).map(([key, val]) => {\n      const vals = zip(val.quals, val.len)\n      return [key, weightedMean(vals)]\n    }),\n  )\n  for (const entry of ret) {\n    const query = entry.qname\n    const target = entry.tname\n    const key = `${query}-${target}`\n    entry.extra.meanScore = meanScoreMap[key]\n  }\n\n  let min = 10000\n  let max = 0\n  for (const entry of ret) {\n    min = Math.min(entry.extra.meanScore || 0, min)\n    max = Math.max(entry.extra.meanScore || 0, max)\n  }\n  for (const entry of ret) {\n    const b = entry.extra.meanScore || 0\n    entry.extra.meanScore = (b - min) / (max - min)\n  }\n\n  return ret\n}\n\n// https://gist.github.com/stekhn/a12ed417e91f90ecec14bcfa4c2ae16a\nfunction weightedMean(tuples: [number, number][]) {\n  const [valueSum, weightSum] = tuples.reduce(\n    ([valueSum, weightSum], [value, weight]) => [\n      valueSum + value * weight,\n      weightSum + weight,\n    ],\n    [0, 0],\n  )\n  return valueSum / weightSum\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { doesIntersect2 } from '@jbrowse/core/util/range'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport { Feature, fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport {\n  AnyConfigurationModel,\n  readConfObject,\n} from '@jbrowse/core/configuration'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nimport SyntenyFeature from '../SyntenyFeature'\nimport {\n  flipCigar,\n  swapIndelCigar,\n  parsePAFLine,\n  parseLineByLine,\n} from '../util'\nimport { getWeightedMeans, PAFRecord } from './util'\n\nconst { parseCigar } = MismatchParser\n\ninterface PAFOptions extends BaseOptions {\n  config?: AnyConfigurationModel\n}\n\nexport default class PAFAdapter extends BaseFeatureDataAdapter {\n  private setupP?: Promise<PAFRecord[]>\n\n  public static capabilities = ['getFeatures', 'getRefNames']\n\n  async setup(opts?: BaseOptions) {\n    if (!this.setupP) {\n      this.setupP = this.setupPre(opts).catch((e: unknown) => {\n        this.setupP = undefined\n        throw e\n      })\n    }\n    return this.setupP\n  }\n\n  async setupPre(opts?: BaseOptions) {\n    const pm = this.pluginManager\n    const pafLocation = openLocation(this.getConf('pafLocation'), pm)\n    const buf = await fetchAndMaybeUnzip(pafLocation, opts)\n    return parseLineByLine(buf, parsePAFLine)\n  }\n\n  async hasDataForRefName() {\n    // determining this properly is basically a call to getFeatures so is not\n    // really that important, and has to be true or else getFeatures is never\n    // called (BaseAdapter filters it out)\n    return true\n  }\n\n  getAssemblyNames() {\n    const assemblyNames = this.getConf('assemblyNames') as string[]\n    if (assemblyNames.length === 0) {\n      const query = this.getConf('queryAssembly') as string\n      const target = this.getConf('targetAssembly') as string\n      return [query, target]\n    }\n    return assemblyNames\n  }\n\n  async getRefNames(opts: BaseOptions = {}) {\n    // @ts-expect-error\n    const r1 = opts.regions?.[0].assemblyName\n    const feats = await this.setup(opts)\n\n    const idx = this.getAssemblyNames().indexOf(r1)\n    if (idx !== -1) {\n      const set = new Set<string>()\n      for (const feat of feats) {\n        set.add(idx === 0 ? feat.qname : feat.tname)\n      }\n      return [...set]\n    }\n    console.warn('Unable to do ref renaming on adapter')\n    return []\n  }\n\n  getFeatures(query: Region, opts: PAFOptions = {}) {\n    return ObservableCreate<Feature>(async observer => {\n      let pafRecords = await this.setup(opts)\n      const { config } = opts\n\n      // note: this is not the adapter config, it is responding to a display\n      // setting passed in via the opts parameter\n      if (config && readConfObject(config, 'colorBy') === 'meanQueryIdentity') {\n        pafRecords = getWeightedMeans(pafRecords)\n      }\n      const assemblyNames = this.getAssemblyNames()\n\n      // The index of the assembly name in the query list corresponds to the\n      // adapter in the subadapters list\n      const { start: qstart, end: qend, refName: qref, assemblyName } = query\n      const index = assemblyNames.indexOf(assemblyName)\n\n      // if the getFeatures::query is on the query assembly, flip orientation\n      // of data\n      const flip = index === 0\n      if (index === -1) {\n        console.warn(`${assemblyName} not found in this adapter`)\n        observer.complete()\n      }\n\n      for (let i = 0; i < pafRecords.length; i++) {\n        const r = pafRecords[i]!\n        let start = 0\n        let end = 0\n        let refName = ''\n        let mateName = ''\n        let mateStart = 0\n        let mateEnd = 0\n\n        if (flip) {\n          start = r.qstart\n          end = r.qend\n          refName = r.qname\n          mateName = r.tname\n          mateStart = r.tstart\n          mateEnd = r.tend\n        } else {\n          start = r.tstart\n          end = r.tend\n          refName = r.tname\n          mateName = r.qname\n          mateStart = r.qstart\n          mateEnd = r.qend\n        }\n        const { extra, strand } = r\n        if (refName === qref && doesIntersect2(qstart, qend, start, end)) {\n          const { numMatches = 0, blockLen = 1, cg, ...rest } = extra\n\n          let CIGAR = extra.cg\n          if (extra.cg) {\n            if (flip && strand === -1) {\n              CIGAR = flipCigar(parseCigar(extra.cg)).join('')\n            } else if (flip) {\n              CIGAR = swapIndelCigar(extra.cg)\n            }\n          }\n\n          observer.next(\n            new SyntenyFeature({\n              uniqueId: i + assemblyName,\n              assemblyName,\n              start,\n              end,\n              type: 'match',\n              refName,\n              strand,\n              ...rest,\n              CIGAR,\n              syntenyId: i,\n              identity: numMatches / blockLen,\n              numMatches,\n              blockLen,\n              mate: {\n                start: mateStart,\n                end: mateEnd,\n                refName: mateName,\n                assemblyName: assemblyNames[+flip],\n              },\n            }),\n          )\n        }\n      }\n\n      observer.complete()\n    })\n  }\n\n  freeResources(/* { query } */): void {}\n}\n","import { SimpleFeature } from '@jbrowse/core/util'\nimport { MismatchParser } from '@jbrowse/plugin-alignments'\n\n// locals\nconst { getMismatches } = MismatchParser\n\nexport default class SyntenyFeature extends SimpleFeature {\n  get(arg: string): any {\n    if (arg === 'mismatches') {\n      return getMismatches(this.get('CIGAR'))\n    }\n    return super.get(arg)\n  }\n}\n","import { BaseOptions } from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { GenericFilehandle } from 'generic-filehandle'\nimport { fetchAndMaybeUnzip } from '@jbrowse/core/util'\nimport type { Buffer } from 'buffer'\n\nimport { PAFRecord } from './PAFAdapter/util'\n\nexport function parseBed(text: string) {\n  return new Map(\n    text\n      .split(/\\n|\\r\\n|\\r/)\n      .filter(f => !!f || f.startsWith('#'))\n      .map(line => {\n        const [refName, start, end, name, score, strand] = line.split('\\t')\n        return [\n          name,\n          {\n            refName,\n            start: +start!,\n            end: +end!,\n            score: +score!,\n            name,\n            strand: strand === '-' ? -1 : 1,\n          },\n        ]\n      }),\n  )\n}\n\nexport async function readFile(file: GenericFilehandle, opts?: BaseOptions) {\n  const buf = await fetchAndMaybeUnzip(file, opts)\n  const decoder = new TextDecoder('utf8')\n  return decoder.decode(buf)\n}\n\nexport function zip(a: number[], b: number[]) {\n  return a.map((e, i) => [e, b[i]] as [number, number])\n}\n\nexport function parseLineByLine<T>(\n  buffer: Buffer,\n  cb: (line: string) => T | undefined,\n): T[] {\n  let blockStart = 0\n  const entries: T[] = []\n  const decoder = new TextDecoder('utf8')\n  while (blockStart < buffer.length) {\n    const n = buffer.indexOf('\\n', blockStart)\n    if (n === -1) {\n      break\n    }\n    const b = buffer.subarray(blockStart, n)\n    const line = decoder.decode(b).trim()\n    if (line) {\n      const entry = cb(line)\n      if (entry) {\n        entries.push(entry)\n      }\n    }\n\n    blockStart = n + 1\n  }\n  return entries\n}\n\nexport function parsePAFLine(line: string) {\n  const [\n    qname,\n    ,\n    qstart,\n    qend,\n    strand,\n    tname,\n    ,\n    tstart,\n    tend,\n    numMatches,\n    blockLen,\n    mappingQual,\n    ...fields\n  ] = line.split('\\t')\n\n  const rest = Object.fromEntries(\n    fields.map(field => {\n      const r = field.indexOf(':')\n      const fieldName = field.slice(0, r)\n      const fieldValue = field.slice(r + 3)\n      return [fieldName, fieldValue]\n    }),\n  )\n\n  return {\n    tname,\n    tstart: +tstart!,\n    tend: +tend!,\n    qname,\n    qstart: +qstart!,\n    qend: +qend!,\n    strand: strand === '-' ? -1 : 1,\n    extra: {\n      numMatches: +numMatches!,\n      blockLen: +blockLen!,\n      mappingQual: +mappingQual!,\n      ...rest,\n    },\n  } as PAFRecord\n}\n\nexport function flipCigar(cigar: string[]) {\n  const arr = []\n  for (let i = cigar.length - 2; i >= 0; i -= 2) {\n    arr.push(cigar[i])\n    const op = cigar[i + 1]\n    if (op === 'D') {\n      arr.push('I')\n    } else if (op === 'I') {\n      arr.push('D')\n    } else {\n      arr.push(op)\n    }\n  }\n  return arr\n}\n\nexport function swapIndelCigar(cigar: string) {\n  return cigar.replaceAll('D', 'K').replaceAll('I', 'D').replaceAll('K', 'I')\n}\n"],"names":["generate_record","qname","qstart","qend","qstrand","tname","tstart","tend","cigar","numMatches","strand","extra","blockLen","Math","max","mappingQual","cg","ChainAdapter","PAFAdapter","setupPre","opts","loc","openLocation","this","getConf","pluginManager","buffer","t_name","t_start","t_end","q_name","q_size","q_strand","q_start","q_end","num_matches","records","blockStart","decoder","TextDecoder","length","n","indexOf","b","subarray","l_vec","decode","trim","replaceAll","split","push","tmp","size_ungapped_alignment","diff_in_target","diff_in_query","paf_chain2paf","fetchAndMaybeUnzip","weightedMean","tuples","valueSum","weightSum","reduce","value","weight","parseCigar","MismatchParser","BaseFeatureDataAdapter","setup","setupP","catch","e","undefined","pm","pafLocation","buf","parseLineByLine","parsePAFLine","hasDataForRefName","getAssemblyNames","assemblyNames","getRefNames","r1","regions","assemblyName","feats","idx","set","Set","feat","add","console","warn","getFeatures","query","ObservableCreate","async","pafRecords","config","readConfObject","ret","scoreMap","entry","key","quals","len","meanScoreMap","Object","fromEntries","entries","map","val","zip","meanScore","min","getWeightedMeans","start","end","refName","qref","index","flip","observer","complete","i","r","mateName","mateStart","mateEnd","doesIntersect2","rest","CIGAR","flipCigar","join","swapIndelCigar","next","SyntenyFeature","uniqueId","type","syntenyId","identity","mate","freeResources","getMismatches","SimpleFeature","get","arg","super","parseBed","text","Map","filter","f","startsWith","line","name","score","readFile","file","a","cb","fields","field","slice","arr","op"],"sourceRoot":""}