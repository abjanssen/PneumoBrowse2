{"version":3,"file":"static/js/3311.92fac4a6.chunk.js","mappings":"kNAeOA,eAAeC,EACpBC,EACAC,GAKA,MAAM,OAAEC,EAAM,GAAEC,GAAOH,GACjB,eAAEI,GAAmBH,EACrBI,GAAOC,EAAAA,EAAAA,mBAAkBN,IACvBO,SAAUC,EAAY,qBAAEC,EAAoB,MAAEC,GAAUL,EAC1DM,QAAmBC,QAAQC,IAC/BJ,EAAqBK,KAAIhB,UACvB,MAAMiB,EAAaC,EAAAA,EAAWC,OAAO,CACnCC,IAAKC,EAAMD,IACXE,OAAQD,IAKJE,EACJrB,EAAKsB,2BAA2BH,IAChCnB,EAAKuB,uBAAuBJ,GAE9B,GAAIE,EACF,MAAO,CACLF,EACA,CACEK,aACEC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,QAAMC,EAAG,EAAGC,EAAG,EAAGjB,MAAOA,EAAOR,OAAQ,GAAI0B,KAAK,SACjDH,EAAAA,cAAA,QAAMC,EAAG,EAAGC,EAAG,IACZN,MAQb,MAAM,WAAEQ,EAAU,WAAEC,EAAU,YAAEC,EAAW,aAAEC,IAC3CC,EAAAA,EAAAA,GAAgBlB,EAAYf,GAE9B,MAAO,CACLmB,QACMa,EAAaE,eAAeL,EAAY,IACzCC,KACAC,EACHI,YAAYC,EAAAA,EAAAA,eAAcpC,GAAM,GAChCqC,UAAWpC,EACXqC,MAAOrC,EAAKqC,OAASP,EAAYO,QAEpC,KAIL,OACEb,EAAAA,cAAAA,EAAAA,SAAA,KACGd,EAAWG,KAAI,EAAEK,EAAOoB,GAAYC,KACnC,MAAM,SAAEjC,EAAQ,QAAEkC,GAAYtB,EACxBuB,EAASnC,EAAWC,EACpBmC,GAASC,EAAAA,EAAAA,IAAMzC,EAAIqC,GAEzB,OAEEf,EAAAA,cAACA,EAAAA,SAAc,CAACP,IAAK,QAAQsB,KAC3Bf,EAAAA,cAAA,YACEA,EAAAA,cAAA,YAAUtB,GAAIwC,GACZlB,EAAAA,cAAA,QACEC,EAAG,EACHC,EAAG,EACHjB,MAAO+B,EACPvC,OAAQE,GAAkBF,MAIhCuB,EAAAA,cAAA,KAAGoB,UAAW,aAAaH,QACzBjB,EAAAA,cAAA,KAAGqB,SAAU,QAAQH,MACnBlB,EAAAA,cAACsB,EAAAA,eAAc,CAACR,UAAWA,MAGhB,IAK3B,C","sources":["../../../plugins/linear-genome-view/src/BaseLinearDisplay/models/renderSvg.tsx"],"sourcesContent":["import React from 'react'\nimport { ThemeOptions } from '@mui/material'\nimport {\n  getContainingView,\n  getViewParams,\n  ReactRendering,\n} from '@jbrowse/core/util'\n\n// locals\nimport { ExportSvgOptions, LinearGenomeViewModel } from '../../LinearGenomeView'\nimport BlockState, { renderBlockData } from './serverSideRenderedBlock'\nimport { getId } from './util'\n\nimport { BaseLinearDisplayModel } from './BaseLinearDisplayModel'\n\nexport async function renderBaseLinearDisplaySvg(\n  self: BaseLinearDisplayModel,\n  opts: ExportSvgOptions & {\n    overrideHeight: number\n    theme?: ThemeOptions\n  },\n) {\n  const { height, id } = self\n  const { overrideHeight } = opts\n  const view = getContainingView(self) as LinearGenomeViewModel\n  const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view\n  const renderings = await Promise.all(\n    roundedDynamicBlocks.map(async block => {\n      const blockState = BlockState.create({\n        key: block.key,\n        region: block,\n      })\n\n      // regionCannotBeRendered can return jsx so look for plaintext\n      // version, or just get the default if none available\n      const cannotBeRenderedReason =\n        self.regionCannotBeRenderedText(block) ||\n        self.regionCannotBeRendered(block)\n\n      if (cannotBeRenderedReason) {\n        return [\n          block,\n          {\n            reactElement: (\n              <>\n                <rect x={0} y={0} width={width} height={20} fill=\"#aaa\" />\n                <text x={0} y={15}>\n                  {cannotBeRenderedReason}\n                </text>\n              </>\n            ),\n          },\n        ] as const\n      }\n\n      const { rpcManager, renderArgs, renderProps, rendererType } =\n        renderBlockData(blockState, self)\n\n      return [\n        block,\n        await rendererType.renderInClient(rpcManager, {\n          ...renderArgs,\n          ...renderProps,\n          viewParams: getViewParams(self, true),\n          exportSVG: opts,\n          theme: opts.theme || renderProps.theme,\n        }),\n      ] as const\n    }),\n  )\n\n  return (\n    <>\n      {renderings.map(([block, rendering], index) => {\n        const { offsetPx, widthPx } = block\n        const offset = offsetPx - viewOffsetPx\n        const clipid = getId(id, index)\n\n        return (\n          /* biome-ignore lint/suspicious/noArrayIndexKey: */\n          <React.Fragment key={`frag-${index}`}>\n            <defs>\n              <clipPath id={clipid}>\n                <rect\n                  x={0}\n                  y={0}\n                  width={widthPx}\n                  height={overrideHeight || height}\n                />\n              </clipPath>\n            </defs>\n            <g transform={`translate(${offset} 0)`}>\n              <g clipPath={`url(#${clipid})`}>\n                <ReactRendering rendering={rendering} />\n              </g>\n            </g>\n          </React.Fragment>\n        )\n      })}\n    </>\n  )\n}\n"],"names":["async","renderBaseLinearDisplaySvg","self","opts","height","id","overrideHeight","view","getContainingView","offsetPx","viewOffsetPx","roundedDynamicBlocks","width","renderings","Promise","all","map","blockState","BlockState","create","key","block","region","cannotBeRenderedReason","regionCannotBeRenderedText","regionCannotBeRendered","reactElement","React","x","y","fill","rpcManager","renderArgs","renderProps","rendererType","renderBlockData","renderInClient","viewParams","getViewParams","exportSVG","theme","rendering","index","widthPx","offset","clipid","getId","transform","clipPath","ReactRendering"],"sourceRoot":""}