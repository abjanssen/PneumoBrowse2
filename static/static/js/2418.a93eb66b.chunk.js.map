{"version":3,"file":"static/js/2418.a93eb66b.chunk.js","mappings":"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","sources":["../../../node_modules/@mui/material/ClickAwayListener/ClickAwayListener.js","../../../node_modules/@mui/material/Snackbar/Snackbar.js","../../../node_modules/@mui/material/Snackbar/useSnackbar.js","../../../node_modules/@mui/material/Snackbar/snackbarClasses.js","../../../node_modules/@mui/material/SnackbarContent/SnackbarContent.js","../../../node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementAcceptingRef, exactProp, unstable_ownerDocument as ownerDocument, unstable_useForkRef as useForkRef, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport getReactElementRef from '@mui/utils/getReactElementRef';\n\n// TODO: return `EventHandlerName extends `on${infer EventName}` ? Lowercase<EventName> : never` once generatePropTypes runs with TS 4.1\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\nfunction clickedRootScrollbar(event, doc) {\n  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;\n}\n/**\n * Listen for click events that occur somewhere in the document, outside of the element itself.\n * For instance, if you need to hide a menu when people click anywhere else on your page.\n *\n * Demos:\n *\n * - [Click-Away Listener](https://mui.com/material-ui/react-click-away-listener/)\n * - [Menu](https://mui.com/material-ui/react-menu/)\n *\n * API:\n *\n * - [ClickAwayListener API](https://mui.com/material-ui/api/click-away-listener/)\n */\nfunction ClickAwayListener(props) {\n  const {\n    children,\n    disableReactTree = false,\n    mouseEvent = 'onClick',\n    onClickAway,\n    touchEvent = 'onTouchEnd'\n  } = props;\n  const movedRef = React.useRef(false);\n  const nodeRef = React.useRef(null);\n  const activatedRef = React.useRef(false);\n  const syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    // Ensure that this component is not \"activated\" synchronously.\n    // https://github.com/facebook/react/issues/20074\n    setTimeout(() => {\n      activatedRef.current = true;\n    }, 0);\n    return () => {\n      activatedRef.current = false;\n    };\n  }, []);\n  const handleRef = useForkRef(getReactElementRef(children), nodeRef);\n\n  // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviors like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n  const handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    const insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false;\n    const doc = ownerDocument(nodeRef.current);\n\n    // 1. IE11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n    if (!activatedRef.current || !nodeRef.current || 'clientX' in event && clickedRootScrollbar(event, doc)) {\n      return;\n    }\n\n    // Do not act if user performed touchmove\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n    let insideDOM;\n\n    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n    if (event.composedPath) {\n      insideDOM = event.composedPath().includes(nodeRef.current);\n    } else {\n      insideDOM = !doc.documentElement.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target) || nodeRef.current.contains(\n      // @ts-expect-error returns `false` as intended when not dispatched from a Node\n      event.target);\n    }\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  });\n\n  // Keep track of mouse/touch events that bubbled up through the portal.\n  const createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    const childrenPropsHandler = children.props[handlerName];\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n  const childrenProps = {\n    ref: handleRef\n  };\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      const doc = ownerDocument(nodeRef.current);\n      const handleTouchMove = () => {\n        movedRef.current = true;\n      };\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      const doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/_jsx(React.Fragment, {\n    children: /*#__PURE__*/React.cloneElement(children, childrenProps)\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The wrapped element.\n   */\n  children: elementAcceptingRef.isRequired,\n  /**\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\n   * This prop changes how portaled elements are handled.\n   * @default false\n   */\n  disableReactTree: PropTypes.bool,\n  /**\n   * The mouse event to listen to. You can disable the listener by providing `false`.\n   * @default 'onClick'\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', 'onPointerDown', 'onPointerUp', false]),\n  /**\n   * Callback fired when a \"click away\" event is detected.\n   */\n  onClickAway: PropTypes.func.isRequired,\n  /**\n   * The touch event to listen to. You can disable the listener by providing `false`.\n   * @default 'onTouchEnd'\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\nexport { ClickAwayListener };","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport composeClasses from '@mui/utils/composeClasses';\nimport useSlotProps from '@mui/utils/useSlotProps';\nimport useSnackbar from \"./useSnackbar.js\";\nimport ClickAwayListener from \"../ClickAwayListener/index.js\";\nimport { styled, useTheme } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport capitalize from \"../utils/capitalize.js\";\nimport Grow from \"../Grow/index.js\";\nimport SnackbarContent from \"../SnackbarContent/index.js\";\nimport { getSnackbarUtilityClass } from \"./snackbarClasses.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    anchorOrigin\n  } = ownerState;\n  const slots = {\n    root: ['root', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`]\n  };\n  return composeClasses(slots, getSnackbarUtilityClass, classes);\n};\nconst SnackbarRoot = styled('div', {\n  name: 'MuiSnackbar',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}`]];\n  }\n})(memoTheme(({\n  theme\n}) => ({\n  zIndex: (theme.vars || theme).zIndex.snackbar,\n  position: 'fixed',\n  display: 'flex',\n  left: 8,\n  right: 8,\n  justifyContent: 'center',\n  alignItems: 'center',\n  variants: [{\n    props: ({\n      ownerState\n    }) => ownerState.anchorOrigin.vertical === 'top',\n    style: {\n      top: 8,\n      [theme.breakpoints.up('sm')]: {\n        top: 24\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.anchorOrigin.vertical !== 'top',\n    style: {\n      bottom: 8,\n      [theme.breakpoints.up('sm')]: {\n        bottom: 24\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.anchorOrigin.horizontal === 'left',\n    style: {\n      justifyContent: 'flex-start',\n      [theme.breakpoints.up('sm')]: {\n        left: 24,\n        right: 'auto'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.anchorOrigin.horizontal === 'right',\n    style: {\n      justifyContent: 'flex-end',\n      [theme.breakpoints.up('sm')]: {\n        right: 24,\n        left: 'auto'\n      }\n    }\n  }, {\n    props: ({\n      ownerState\n    }) => ownerState.anchorOrigin.horizontal === 'center',\n    style: {\n      [theme.breakpoints.up('sm')]: {\n        left: '50%',\n        right: 'auto',\n        transform: 'translateX(-50%)'\n      }\n    }\n  }]\n})));\nconst Snackbar = /*#__PURE__*/React.forwardRef(function Snackbar(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSnackbar'\n  });\n  const theme = useTheme();\n  const defaultTransitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen\n  };\n  const {\n    action,\n    anchorOrigin: {\n      vertical,\n      horizontal\n    } = {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    autoHideDuration = null,\n    children,\n    className,\n    ClickAwayListenerProps,\n    ContentProps,\n    disableWindowBlurListener = false,\n    message,\n    onBlur,\n    onClose,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    open,\n    resumeHideDuration,\n    TransitionComponent = Grow,\n    transitionDuration = defaultTransitionDuration,\n    TransitionProps: {\n      onEnter,\n      onExited,\n      ...TransitionProps\n    } = {},\n    ...other\n  } = props;\n  const ownerState = {\n    ...props,\n    anchorOrigin: {\n      vertical,\n      horizontal\n    },\n    autoHideDuration,\n    disableWindowBlurListener,\n    TransitionComponent,\n    transitionDuration\n  };\n  const classes = useUtilityClasses(ownerState);\n  const {\n    getRootProps,\n    onClickAway\n  } = useSnackbar({\n    ...ownerState\n  });\n  const [exited, setExited] = React.useState(true);\n  const rootProps = useSlotProps({\n    elementType: SnackbarRoot,\n    getSlotProps: getRootProps,\n    externalForwardedProps: other,\n    ownerState,\n    additionalProps: {\n      ref\n    },\n    className: [classes.root, className]\n  });\n  const handleExited = node => {\n    setExited(true);\n    if (onExited) {\n      onExited(node);\n    }\n  };\n  const handleEnter = (node, isAppearing) => {\n    setExited(false);\n    if (onEnter) {\n      onEnter(node, isAppearing);\n    }\n  };\n\n  // So we only render active snackbars.\n  if (!open && exited) {\n    return null;\n  }\n  return /*#__PURE__*/_jsx(ClickAwayListener, {\n    onClickAway: onClickAway,\n    ...ClickAwayListenerProps,\n    children: /*#__PURE__*/_jsx(SnackbarRoot, {\n      ...rootProps,\n      children: /*#__PURE__*/_jsx(TransitionComponent, {\n        appear: true,\n        in: open,\n        timeout: transitionDuration,\n        direction: vertical === 'top' ? 'down' : 'up',\n        onEnter: handleEnter,\n        onExited: handleExited,\n        ...TransitionProps,\n        children: children || /*#__PURE__*/_jsx(SnackbarContent, {\n          message: message,\n          action: action,\n          ...ContentProps\n        })\n      })\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Snackbar.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n  /**\n   * The anchor of the `Snackbar`.\n   * On smaller screens, the component grows to occupy all the available width,\n   * the horizontal alignment is ignored.\n   * @default { vertical: 'bottom', horizontal: 'left' }\n   */\n  anchorOrigin: PropTypes.shape({\n    horizontal: PropTypes.oneOf(['center', 'left', 'right']).isRequired,\n    vertical: PropTypes.oneOf(['bottom', 'top']).isRequired\n  }),\n  /**\n   * The number of milliseconds to wait before automatically calling the\n   * `onClose` function. `onClose` should then set the state of the `open`\n   * prop to hide the Snackbar. This behavior is disabled by default with\n   * the `null` value.\n   * @default null\n   */\n  autoHideDuration: PropTypes.number,\n  /**\n   * Replace the `SnackbarContent` component.\n   */\n  children: PropTypes.element,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * Props applied to the `ClickAwayListener` element.\n   */\n  ClickAwayListenerProps: PropTypes.object,\n  /**\n   * Props applied to the [`SnackbarContent`](https://mui.com/material-ui/api/snackbar-content/) element.\n   */\n  ContentProps: PropTypes.object,\n  /**\n   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.\n   * @default false\n   */\n  disableWindowBlurListener: PropTypes.bool,\n  /**\n   * When displaying multiple consecutive snackbars using a single parent-rendered\n   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.\n   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update\n   * in place, and features like `autoHideDuration` could be affected.\n   */\n  key: () => null,\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n  /**\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Callback fired when the component requests to be closed.\n   * Typically `onClose` is used to set state in the parent component,\n   * which is used to control the `Snackbar` `open` prop.\n   * The `reason` parameter can optionally be used to control the response to `onClose`,\n   * for example ignoring `clickaway`.\n   *\n   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.\n   * @param {string} reason Can be: `\"timeout\"` (`autoHideDuration` expired), `\"clickaway\"`, or `\"escapeKeyDown\"`.\n   */\n  onClose: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseEnter: PropTypes.func,\n  /**\n   * @ignore\n   */\n  onMouseLeave: PropTypes.func,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool,\n  /**\n   * The number of milliseconds to wait before dismissing after user interaction.\n   * If `autoHideDuration` prop isn't specified, it does nothing.\n   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,\n   * we default to `autoHideDuration / 2` ms.\n   */\n  resumeHideDuration: PropTypes.number,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The component used for the transition.\n   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Grow\n   */\n  TransitionComponent: PropTypes.elementType,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default {\n   *   enter: theme.transitions.duration.enteringScreen,\n   *   exit: theme.transitions.duration.leavingScreen,\n   * }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.\n   * @default {}\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default Snackbar;","'use client';\n\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useTimeout as useTimeout } from '@mui/utils';\nimport extractEventHandlers from '@mui/utils/extractEventHandlers';\n/**\n * The basic building block for creating custom snackbar.\n *\n * Demos:\n *\n * - [Snackbar](https://mui.com/base-ui/react-snackbar/#hook)\n *\n * API:\n *\n * - [useSnackbar API](https://mui.com/base-ui/react-snackbar/hooks-api/#use-snackbar)\n */\nfunction useSnackbar(parameters = {}) {\n  const {\n    autoHideDuration = null,\n    disableWindowBlurListener = false,\n    onClose,\n    open,\n    resumeHideDuration\n  } = parameters;\n  const timerAutoHide = useTimeout();\n  React.useEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n\n    /**\n     * @param {KeyboardEvent} nativeEvent\n     */\n    function handleKeyDown(nativeEvent) {\n      if (!nativeEvent.defaultPrevented) {\n        if (nativeEvent.key === 'Escape') {\n          // not calling `preventDefault` since we don't know if people may ignore this event e.g. a permanently open snackbar\n          onClose?.(nativeEvent, 'escapeKeyDown');\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onClose]);\n  const handleClose = useEventCallback((event, reason) => {\n    onClose?.(event, reason);\n  });\n  const setAutoHideTimer = useEventCallback(autoHideDurationParam => {\n    if (!onClose || autoHideDurationParam == null) {\n      return;\n    }\n    timerAutoHide.start(autoHideDurationParam, () => {\n      handleClose(null, 'timeout');\n    });\n  });\n  React.useEffect(() => {\n    if (open) {\n      setAutoHideTimer(autoHideDuration);\n    }\n    return timerAutoHide.clear;\n  }, [open, autoHideDuration, setAutoHideTimer, timerAutoHide]);\n  const handleClickAway = event => {\n    onClose?.(event, 'clickaway');\n  };\n\n  // Pause the timer when the user is interacting with the Snackbar\n  // or when the user hide the window.\n  const handlePause = timerAutoHide.clear;\n\n  // Restart the timer when the user is no longer interacting with the Snackbar\n  // or when the window is shown back.\n  const handleResume = React.useCallback(() => {\n    if (autoHideDuration != null) {\n      setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);\n    }\n  }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);\n  const createHandleBlur = otherHandlers => event => {\n    const onBlurCallback = otherHandlers.onBlur;\n    onBlurCallback?.(event);\n    handleResume();\n  };\n  const createHandleFocus = otherHandlers => event => {\n    const onFocusCallback = otherHandlers.onFocus;\n    onFocusCallback?.(event);\n    handlePause();\n  };\n  const createMouseEnter = otherHandlers => event => {\n    const onMouseEnterCallback = otherHandlers.onMouseEnter;\n    onMouseEnterCallback?.(event);\n    handlePause();\n  };\n  const createMouseLeave = otherHandlers => event => {\n    const onMouseLeaveCallback = otherHandlers.onMouseLeave;\n    onMouseLeaveCallback?.(event);\n    handleResume();\n  };\n  React.useEffect(() => {\n    // TODO: window global should be refactored here\n    if (!disableWindowBlurListener && open) {\n      window.addEventListener('focus', handleResume);\n      window.addEventListener('blur', handlePause);\n      return () => {\n        window.removeEventListener('focus', handleResume);\n        window.removeEventListener('blur', handlePause);\n      };\n    }\n    return undefined;\n  }, [disableWindowBlurListener, open, handleResume, handlePause]);\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = {\n      ...extractEventHandlers(parameters),\n      ...extractEventHandlers(externalProps)\n    };\n    return {\n      // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.\n      // See https://github.com/mui/material-ui/issues/29080\n      role: 'presentation',\n      ...externalProps,\n      ...externalEventHandlers,\n      onBlur: createHandleBlur(externalEventHandlers),\n      onFocus: createHandleFocus(externalEventHandlers),\n      onMouseEnter: createMouseEnter(externalEventHandlers),\n      onMouseLeave: createMouseLeave(externalEventHandlers)\n    };\n  };\n  return {\n    getRootProps,\n    onClickAway: handleClickAway\n  };\n}\nexport default useSnackbar;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSnackbarUtilityClass(slot) {\n  return generateUtilityClass('MuiSnackbar', slot);\n}\nconst snackbarClasses = generateUtilityClasses('MuiSnackbar', ['root', 'anchorOriginTopCenter', 'anchorOriginBottomCenter', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft']);\nexport default snackbarClasses;","'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport composeClasses from '@mui/utils/composeClasses';\nimport { emphasize } from '@mui/system/colorManipulator';\nimport { styled } from \"../zero-styled/index.js\";\nimport memoTheme from \"../utils/memoTheme.js\";\nimport { useDefaultProps } from \"../DefaultPropsProvider/index.js\";\nimport Paper from \"../Paper/index.js\";\nimport { getSnackbarContentUtilityClass } from \"./snackbarContentClasses.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root'],\n    action: ['action'],\n    message: ['message']\n  };\n  return composeClasses(slots, getSnackbarContentUtilityClass, classes);\n};\nconst SnackbarContentRoot = styled(Paper, {\n  name: 'MuiSnackbarContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(memoTheme(({\n  theme\n}) => {\n  const emphasis = theme.palette.mode === 'light' ? 0.8 : 0.98;\n  const backgroundColor = emphasize(theme.palette.background.default, emphasis);\n  return {\n    ...theme.typography.body2,\n    color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor),\n    backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor,\n    display: 'flex',\n    alignItems: 'center',\n    flexWrap: 'wrap',\n    padding: '6px 16px',\n    borderRadius: (theme.vars || theme).shape.borderRadius,\n    flexGrow: 1,\n    [theme.breakpoints.up('sm')]: {\n      flexGrow: 'initial',\n      minWidth: 288\n    }\n  };\n}));\nconst SnackbarContentMessage = styled('div', {\n  name: 'MuiSnackbarContent',\n  slot: 'Message',\n  overridesResolver: (props, styles) => styles.message\n})({\n  padding: '8px 0'\n});\nconst SnackbarContentAction = styled('div', {\n  name: 'MuiSnackbarContent',\n  slot: 'Action',\n  overridesResolver: (props, styles) => styles.action\n})({\n  display: 'flex',\n  alignItems: 'center',\n  marginLeft: 'auto',\n  paddingLeft: 16,\n  marginRight: -8\n});\nconst SnackbarContent = /*#__PURE__*/React.forwardRef(function SnackbarContent(inProps, ref) {\n  const props = useDefaultProps({\n    props: inProps,\n    name: 'MuiSnackbarContent'\n  });\n  const {\n    action,\n    className,\n    message,\n    role = 'alert',\n    ...other\n  } = props;\n  const ownerState = props;\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(SnackbarContentRoot, {\n    role: role,\n    square: true,\n    elevation: 6,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref,\n    ...other,\n    children: [/*#__PURE__*/_jsx(SnackbarContentMessage, {\n      className: classes.message,\n      ownerState: ownerState,\n      children: message\n    }), action ? /*#__PURE__*/_jsx(SnackbarContentAction, {\n      className: classes.action,\n      ownerState: ownerState,\n      children: action\n    }) : null]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SnackbarContent.propTypes /* remove-proptypes */ = {\n  // ┌────────────────────────────── Warning ──────────────────────────────┐\n  // │ These PropTypes are generated from the TypeScript type definitions. │\n  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │\n  // └─────────────────────────────────────────────────────────────────────┘\n  /**\n   * The action to display. It renders after the message, at the end of the snackbar.\n   */\n  action: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The message to display.\n   */\n  message: PropTypes.node,\n  /**\n   * The ARIA role attribute of the element.\n   * @default 'alert'\n   */\n  role: PropTypes /* @typescript-to-proptypes-ignore */.string,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default SnackbarContent;","import generateUtilityClasses from '@mui/utils/generateUtilityClasses';\nimport generateUtilityClass from '@mui/utils/generateUtilityClass';\nexport function getSnackbarContentUtilityClass(slot) {\n  return generateUtilityClass('MuiSnackbarContent', slot);\n}\nconst snackbarContentClasses = generateUtilityClasses('MuiSnackbarContent', ['root', 'message', 'action']);\nexport default snackbarContentClasses;"],"names":["mapEventPropToEvent","eventProp","substring","toLowerCase","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","nodeRef","activatedRef","syntheticEventRef","setTimeout","current","handleRef","handleClickAway","event","insideReactTree","doc","documentElement","clientWidth","clientX","clientHeight","clientY","clickedRootScrollbar","insideDOM","composedPath","includes","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","ref","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","mappedMouseEvent","SnackbarRoot","styled","name","slot","overridesResolver","styles","ownerState","root","capitalize","anchorOrigin","vertical","horizontal","memoTheme","theme","zIndex","vars","snackbar","position","display","left","right","justifyContent","alignItems","variants","style","top","breakpoints","up","bottom","transform","inProps","useTheme","defaultTransitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","action","autoHideDuration","className","ClickAwayListenerProps","ContentProps","disableWindowBlurListener","message","onBlur","onClose","onFocus","onMouseEnter","onMouseLeave","open","resumeHideDuration","TransitionComponent","Grow","transitionDuration","TransitionProps","onEnter","onExited","other","classes","slots","composeClasses","useUtilityClasses","getRootProps","parameters","timerAutoHide","useTimeout","document","handleKeyDown","nativeEvent","defaultPrevented","key","handleClose","useEventCallback","reason","setAutoHideTimer","autoHideDurationParam","start","clear","handlePause","handleResume","createHandleFocus","otherHandlers","onFocusCallback","createMouseEnter","onMouseEnterCallback","createMouseLeave","onMouseLeaveCallback","window","externalProps","externalEventHandlers","extractEventHandlers","role","onBlurCallback","exited","setExited","rootProps","useSlotProps","elementType","getSlotProps","externalForwardedProps","additionalProps","appear","in","timeout","direction","node","isAppearing","SnackbarContent","getSnackbarUtilityClass","SnackbarContentRoot","emphasis","palette","mode","backgroundColor","background","default","typography","body2","color","getContrastText","bg","flexWrap","padding","borderRadius","shape","flexGrow","minWidth","SnackbarContentMessage","SnackbarContentAction","marginLeft","paddingLeft","marginRight","square","elevation","getSnackbarContentUtilityClass"],"sourceRoot":""}