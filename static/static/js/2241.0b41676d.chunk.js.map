{"version":3,"file":"static/js/2241.0b41676d.chunk.js","mappings":"qMAQA,MAAMA,EAAkBC,EAAAA,YACtB,UAA0B,QAAEC,GAAWC,GACrC,OACEF,EAAAA,cAAA,OAAKE,IAAKA,GACPF,EAAAA,eAAqBC,GACpBA,EACEA,EACFD,EAAAA,cAACG,EAAAA,cAAa,CAACC,KAAMC,OAAOJ,KAC1B,KAGV,IAaF,GAVmBK,EAAAA,EAAAA,WAAS,UAAU,SAAEC,IACtC,OAAOA,EACLP,EAAAA,cAACQ,EAAAA,SAAQ,CAACC,SAAU,MAClBT,EAAAA,cAACU,EAAAA,EAAW,KACVV,EAAAA,cAACD,EAAe,CAACE,QAASM,MAG5B,IACN,G","sources":["../../../plugins/arc/src/ArcTooltip.tsx"],"sourcesContent":["import React, { Suspense } from 'react'\nimport { SanitizedHTML } from '@jbrowse/core/ui'\nimport { observer } from 'mobx-react'\nimport BaseTooltip from '@jbrowse/core/ui/BaseTooltip'\n\ninterface Props {\n  message: React.ReactNode | string\n}\nconst TooltipContents = React.forwardRef<HTMLDivElement, Props>(\n  function TooltipContents2({ message }, ref) {\n    return (\n      <div ref={ref}>\n        {React.isValidElement(message) ? (\n          message\n        ) : message ? (\n          <SanitizedHTML html={String(message)} />\n        ) : null}\n      </div>\n    )\n  },\n)\n\nconst ArcTooltip = observer(function ({ contents }: { contents?: string }) {\n  return contents ? (\n    <Suspense fallback={null}>\n      <BaseTooltip>\n        <TooltipContents message={contents} />\n      </BaseTooltip>\n    </Suspense>\n  ) : null\n})\n\nexport default ArcTooltip\n"],"names":["TooltipContents","React","message","ref","SanitizedHTML","html","String","observer","contents","Suspense","fallback","BaseTooltip"],"sourceRoot":""}