{"version":3,"file":"static/js/5312.e12a50e3.chunk.js","mappings":"4NAYA,MAAMA,EACJC,WAAAA,CAAoBC,GAA+B,KAA/BA,WAAAA,CAAgC,CAEpD,UAAMC,CAAKC,EAAkBC,GAC3B,MAAM,OAAEC,SAAiBC,KAAKL,WAAWC,KACvCK,EAAAA,GAAOC,MAAMJ,GACb,EACAA,EACAD,GAEF,OAAOE,EAAOA,OAAOI,MACnBJ,EAAOK,WACPL,EAAOK,WAAaL,EAAOM,WAE/B,EAGK,SAASC,EACdC,EACAC,GAEA,OAAO,IAAIf,GAAcgB,EAAAA,EAAAA,cAAaF,EAAUC,GAClD,CCkBe,MAAME,UAAmBC,EAAAA,uBAG/BjB,WAAAA,CACLkB,EACAC,EACAL,GAEAM,MAAMF,EAAQC,EAAeL,GAC7BR,KAAKe,IAAM,IAAIC,EAAAA,EAAS,CACtBC,KAAMX,EAAkBN,KAAKkB,QAAQ,eAAgBlB,KAAKQ,gBAE9D,CAEA,WAAcW,CAAMC,GAClB,MAAM,eAAEC,EAAiBA,QAAaD,GAAQ,CAAC,EAC/C,OAAOE,EAAAA,EAAAA,cAAa,0BAA2BD,GAAgB,IAC7DrB,KAAKe,IAAIQ,eAEb,CAEA,eAAaC,CAAUJ,GACrB,MAAM,YAAEK,KAAgBC,SAAe1B,KAAKmB,MAAMC,GAGlD,MAAO,IAAKM,EAAMC,YADE3B,KAAKe,IAAIa,0BAE/B,CAEA,iBAAMC,CAAYT,GAEhB,aADuBpB,KAAKmB,MAAMC,IAClBK,YAAYK,KAAIC,GAAOA,EAAIC,MAC7C,CAEA,mBAAMC,CAAcC,EAAad,GAC/B,MAAM,YAAEe,SAAsBnC,KAAKmB,MAAMC,GACnCgB,EAAuBpC,KAAKkB,QAAQ,wBAC1C,IAAImB,EAAmBF,EAAYG,IAAI,GACvC,IAAK,IAAIC,EAAIJ,EAAYrC,OAAS,EAAGyC,GAAK,EAAGA,GAAK,EAAG,CACnD,MAAMC,EAAIL,EAAYI,GAClBC,GAAK,EAAIN,EAAME,IACjBC,EAAmBG,EAEvB,CACA,OAAOH,CACT,CAEAI,WAAAA,CAAYC,EAAgBtB,EAAmB,CAAC,GAC9C,OAAOuB,EAAAA,EAAAA,mBAAgCC,UACrC,MAAQC,QAASd,EAAG,MAAEe,EAAK,IAAEC,GAAQL,GAC/B,WACJM,EAAU,cACVC,EAAgB,KAAI,QACpBC,EAAU,EAAC,eACX7B,EAAiBA,QACfD,EACEc,QAAYlC,KAAKiC,cAAciB,GAAWF,GAAc,KAAO5B,SAE/DE,EAAAA,EAAAA,cAAa,wBAAyBD,GAAgBuB,UAC1D,MAAMO,QAAgBnD,KAAKe,IAAIqC,kBAC7BH,EACA,CAAEH,QAAOf,MAAKgB,OACd,CAAED,QAAOf,MAAKgB,OACd,KACAb,GAEF,IAAK,MAAMmB,KAAUF,EACnBG,EAASC,KAAKF,EAChB,IAEFC,EAASE,UAAU,GAClBpC,EAAKqC,OACV,CAGA,uCAAMC,CAAkCC,GACtC,MAAO,CACLC,eAAgB,EAEpB,CAEAC,aAAAA,GAAuC,E","sources":["../../../plugins/hic/src/HicAdapter/HicFilehandle.ts","../../../plugins/hic/src/HicAdapter/HicAdapter.ts"],"sourcesContent":["import { FileLocation } from '@jbrowse/core/util'\nimport { openLocation } from '@jbrowse/core/util/io'\nimport type { GenericFilehandle } from 'generic-filehandle'\n\nimport { Buffer } from 'buffer'\nimport PluginManager from '@jbrowse/core/PluginManager'\n\n// wraps generic-filehandle so the read function only takes a position and\n// length\n//\n// in some ways, generic-filehandle wishes it was just this but it has\n// to adapt to the node.js fs promises API\nclass HicFilehandle {\n  constructor(private filehandle: GenericFilehandle) {}\n\n  async read(position: number, length: number) {\n    const { buffer } = await this.filehandle.read(\n      Buffer.alloc(length),\n      0,\n      length,\n      position,\n    )\n    return buffer.buffer.slice(\n      buffer.byteOffset,\n      buffer.byteOffset + buffer.byteLength,\n    )\n  }\n}\n\nexport function openHicFilehandle(\n  location: FileLocation,\n  pluginManager?: PluginManager,\n) {\n  return new HicFilehandle(openLocation(location, pluginManager))\n}\n","import {\n  BaseFeatureDataAdapter,\n  BaseOptions,\n} from '@jbrowse/core/data_adapters/BaseAdapter'\nimport { Region } from '@jbrowse/core/util/types'\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs'\nimport HicStraw from 'hic-straw'\nimport PluginManager from '@jbrowse/core/PluginManager'\nimport { getSubAdapterType } from '@jbrowse/core/data_adapters/dataAdapterCache'\nimport { AnyConfigurationModel } from '@jbrowse/core/configuration'\nimport { updateStatus } from '@jbrowse/core/util'\n\n// locals\nimport { openHicFilehandle } from './HicFilehandle'\n\ninterface ContactRecord {\n  bin1: number\n  bin2: number\n  counts: number\n}\n\ninterface HicMetadata {\n  chromosomes: {\n    name: string\n    length: number\n    id: number\n  }[]\n  resolutions: number[]\n}\ninterface Ref {\n  chr: string\n  start: number\n  end: number\n}\n\ninterface HicOptions extends BaseOptions {\n  resolution?: number\n  bpPerPx?: number\n  normalization?: string\n}\n\ninterface HicParser {\n  getContactRecords: (\n    normalize: string,\n    ref: Ref,\n    ref2: Ref,\n    units: string,\n    binsize: number,\n  ) => Promise<ContactRecord[]>\n  getMetaData: () => Promise<HicMetadata>\n}\n\nexport default class HicAdapter extends BaseFeatureDataAdapter {\n  private hic: HicParser\n\n  public constructor(\n    config: AnyConfigurationModel,\n    getSubAdapter?: getSubAdapterType,\n    pluginManager?: PluginManager,\n  ) {\n    super(config, getSubAdapter, pluginManager)\n    this.hic = new HicStraw({\n      file: openHicFilehandle(this.getConf('hicLocation'), this.pluginManager),\n    })\n  }\n\n  private async setup(opts?: BaseOptions) {\n    const { statusCallback = () => {} } = opts || {}\n    return updateStatus('Downloading .hic header', statusCallback, () =>\n      this.hic.getMetaData(),\n    )\n  }\n\n  public async getHeader(opts?: BaseOptions) {\n    const { chromosomes, ...rest } = await this.setup(opts)\n    // @ts-expect-error\n    const norms = await this.hic.getNormalizationOptions()\n    return { ...rest, norms }\n  }\n\n  async getRefNames(opts?: BaseOptions) {\n    const metadata = await this.setup(opts)\n    return metadata.chromosomes.map(chr => chr.name)\n  }\n\n  async getResolution(res: number, opts?: BaseOptions) {\n    const { resolutions } = await this.setup(opts)\n    const resolutionMultiplier = this.getConf('resolutionMultiplier')\n    let chosenResolution = resolutions.at(-1)!\n    for (let i = resolutions.length - 1; i >= 0; i -= 1) {\n      const r = resolutions[i]!\n      if (r <= 2 * res * resolutionMultiplier) {\n        chosenResolution = r\n      }\n    }\n    return chosenResolution\n  }\n\n  getFeatures(region: Region, opts: HicOptions = {}) {\n    return ObservableCreate<ContactRecord>(async observer => {\n      const { refName: chr, start, end } = region\n      const {\n        resolution,\n        normalization = 'KR',\n        bpPerPx = 1,\n        statusCallback = () => {},\n      } = opts\n      const res = await this.getResolution(bpPerPx / (resolution || 1000), opts)\n\n      await updateStatus('Downloading .hic data', statusCallback, async () => {\n        const records = await this.hic.getContactRecords(\n          normalization,\n          { start, chr, end },\n          { start, chr, end },\n          'BP',\n          res,\n        )\n        for (const record of records) {\n          observer.next(record)\n        }\n      })\n      observer.complete()\n    }, opts.signal) as any\n  }\n\n  // don't do feature stats estimation, similar to bigwigadapter\n  async getMultiRegionFeatureDensityStats(_regions: Region[]) {\n    return {\n      featureDensity: 0,\n    }\n  }\n\n  freeResources(/* { region } */): void {}\n}\n"],"names":["HicFilehandle","constructor","filehandle","read","position","length","buffer","this","Buffer","alloc","slice","byteOffset","byteLength","openHicFilehandle","location","pluginManager","openLocation","HicAdapter","BaseFeatureDataAdapter","config","getSubAdapter","super","hic","HicStraw","file","getConf","setup","opts","statusCallback","updateStatus","getMetaData","getHeader","chromosomes","rest","norms","getNormalizationOptions","getRefNames","map","chr","name","getResolution","res","resolutions","resolutionMultiplier","chosenResolution","at","i","r","getFeatures","region","ObservableCreate","async","refName","start","end","resolution","normalization","bpPerPx","records","getContactRecords","record","observer","next","complete","signal","getMultiRegionFeatureDensityStats","_regions","featureDensity","freeResources"],"sourceRoot":""}